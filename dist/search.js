"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/search.tsx
var search_exports = {};
__export(search_exports, {
  default: () => Search
});
module.exports = __toCommonJS(search_exports);
var import_api4 = require("@raycast/api");
var import_react3 = require("react");

// src/components/form.tsx
var import_api3 = require("@raycast/api");

// node_modules/@raycast/utils/dist/module.js
var import_react = __toESM(require("react"));
var import_api = require("@raycast/api");
var import_node_fs = __toESM(require("node:fs"));
var import_node_path = __toESM(require("node:path"));
var import_jsx_runtime = require("react/jsx-runtime");
function $c718fd03aba6111c$export$80e5033e369189f3(error, options) {
  const message = error instanceof Error ? error.message : String(error);
  return (0, import_api.showToast)({
    style: (0, import_api.Toast).Style.Failure,
    title: options?.title ?? "Something went wrong",
    message: options?.message ?? message,
    primaryAction: options?.primaryAction ?? $c718fd03aba6111c$var$handleErrorToastAction(error),
    secondaryAction: options?.primaryAction ? $c718fd03aba6111c$var$handleErrorToastAction(error) : void 0
  });
}
var $c718fd03aba6111c$var$handleErrorToastAction = (error) => {
  let privateExtension = true;
  let title = "[Extension Name]...";
  let extensionURL = "";
  try {
    const packageJSON = JSON.parse((0, import_node_fs.readFileSync)((0, import_node_path.join)((0, import_api.environment).assetsPath, "..", "package.json"), "utf8"));
    title = `[${packageJSON.title}]...`;
    extensionURL = `https://raycast.com/${packageJSON.owner || packageJSON.author}/${packageJSON.name}`;
    if (!packageJSON.owner || packageJSON.access === "public") privateExtension = false;
  } catch (err) {
  }
  const fallback = (0, import_api.environment).isDevelopment || privateExtension;
  const stack = error instanceof Error ? error?.stack || error?.message || "" : String(error);
  return {
    title: fallback ? "Copy Logs" : "Report Error",
    onAction(toast) {
      toast.hide();
      if (fallback) (0, import_api.Clipboard).copy(stack);
      else (0, import_api.open)(`https://github.com/raycast/extensions/issues/new?&labels=extension%2Cbug&template=extension_bug_report.yml&title=${encodeURIComponent(title)}&extension-url=${encodeURI(extensionURL)}&description=${encodeURIComponent(`#### Error:
\`\`\`
${stack}
\`\`\`
`)}`);
    }
  };
};

// src/components/form.tsx
var import_react2 = require("react");

// src/utils/storage.ts
var import_api2 = require("@raycast/api");
function storage() {
}
storage.getPreferences = async () => (0, import_api2.getPreferenceValues)();
storage.getBadges = async () => {
  const apps = await (0, import_api2.getApplications)();
  const badges = JSON.parse(await import_api2.LocalStorage.getItem("badges") || "{}");
  Object.entries(badges).forEach(([bundleId, badge]) => {
    const app = apps.filter((app2) => app2.bundleId === bundleId).pop();
    if (!app) {
      delete badges[bundleId];
      return;
    }
    badge.app = app;
    badge.status = { count: 0, indeterminate: false };
  });
  return badges;
};
storage.sortBadges = (badges) => Object.values(badges).sort((a, b) => a.app.name.localeCompare(
  b.app.name,
  Intl.DateTimeFormat().resolvedOptions().locale,
  { sensitivity: "base" }
));
storage.saveBadge = async (badge) => {
  const badges = await storage.getBadges();
  badges[badge.bundleId] = badge;
  await import_api2.LocalStorage.setItem("badges", JSON.stringify(badges));
};
storage.deleteBadge = async (badge) => {
  const badges = await storage.getBadges();
  if (!badges[badge.bundleId])
    return;
  delete badges[badge.bundleId];
  await import_api2.LocalStorage.setItem("badges", JSON.stringify(badges));
};
storage.deleteAllBadges = async () => import_api2.LocalStorage.removeItem("badges");

// src/components/form.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
function BadgeForm(props) {
  const { badge } = props;
  const { pop } = (0, import_api3.useNavigation)();
  const [apps, setApps] = (0, import_react2.useState)([]);
  (0, import_react2.useEffect)(() => {
    (async () => setApps(await (0, import_api3.getApplications)()))();
  }, []);
  const onSubmit = async (values) => {
    try {
      if (badge)
        values.bundleId = badge.bundleId;
      storage.saveBadge(values).then(pop);
    } catch (error) {
      await $c718fd03aba6111c$export$80e5033e369189f3(error.message);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
    import_api3.Form,
    {
      isLoading: !apps.length,
      navigationTitle: !badge ? "Add Badge" : "Edit Badge",
      actions: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.ActionPanel, { children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.Action.SubmitForm, { title: "Submit", onSubmit }) }),
      children: [
        badge && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.Form.Description, { text: badge.app.name }),
        !badge && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          import_api3.Form.Dropdown,
          {
            id: "bundleId",
            info: "Choose the application to monitor for badges. Keep in mind that not all applications utilize badges for notifications.",
            children: apps.map((app) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
              import_api3.Form.Dropdown.Item,
              {
                value: app.bundleId || app.name,
                title: app.name,
                icon: { fileIcon: app.path }
              },
              app.bundleId || app.name
            ))
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          import_api3.Form.Checkbox,
          {
            id: "showInactive",
            label: "Show badges when this application is closed",
            info: "When the application is closed and kept in the Dock, the badges will continue to appear in the menu bar.",
            defaultValue: !badge && true || badge.showInactive
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          import_api3.Form.Checkbox,
          {
            id: "showIndeterminate",
            label: "Show indeterminate badges",
            info: "An indeterminate badge is displayed in the Dock as a dot without a count. When enabled, the badge count increases by one.",
            defaultValue: !badge && true || badge.showIndeterminate
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.Form.Description, { text: "" }),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.Form.Separator, {}),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.Form.Description, { text: "" }),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.Form.Description, { text: "Applications must be open or kept in the Dock for badge counts to appear in the menu bar. Additionally, Raycast requires the Automation and Accessibility permissions in order to read the Dock badges." })
      ]
    }
  );
}

// src/search.tsx
var import_jsx_runtime3 = require("react/jsx-runtime");
function AddBadge(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
    import_api4.Action.Push,
    {
      title: "Add Badge",
      icon: import_api4.Icon.PlusCircle,
      shortcut: { modifiers: ["cmd"], key: "n" },
      target: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(BadgeForm, {}),
      onPop: props.onAction
    }
  );
}
function Search() {
  const [badges, setBadges] = (0, import_react3.useState)(null);
  (0, import_react3.useEffect)(() => {
    (async () => setBadges(await storage.getBadges()))();
  }, []);
  const onAction = async (callback, badge) => {
    if (badge && callback)
      await callback(badge);
    setBadges(await storage.getBadges());
  };
  let sortedBadges = [];
  if (badges !== null)
    sortedBadges = storage.sortBadges(badges);
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_api4.List, { isLoading: badges === null, children: [
    sortedBadges.map((badge) => /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      import_api4.List.Item,
      {
        title: badge.app.name,
        icon: { fileIcon: badge.app.path },
        accessories: [{ text: badge.showInactive ? "Always shown" : "Shown while open" }],
        actions: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_api4.ActionPanel, { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_api4.ActionPanel.Section, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
            import_api4.Action.Push,
            {
              title: "Edit Badge",
              icon: import_api4.Icon.Pencil,
              shortcut: { modifiers: ["cmd"], key: "e" },
              target: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(BadgeForm, { badge }),
              onPop: onAction
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(AddBadge, { onAction }),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
            import_api4.Action,
            {
              title: "Delete Badge",
              icon: import_api4.Icon.Trash,
              style: import_api4.Action.Style.Destructive,
              shortcut: { modifiers: ["ctrl"], key: "x" },
              onAction: () => (0, import_api4.confirmAlert)({
                title: badge.app.name,
                message: "Are you sure you want to delete this badge?",
                primaryAction: {
                  title: "Delete",
                  style: import_api4.Alert.ActionStyle.Destructive,
                  onAction: () => onAction(storage.deleteBadge, badge)
                }
              })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
            import_api4.Action,
            {
              title: "Delete All Badges",
              icon: import_api4.Icon.Trash,
              style: import_api4.Action.Style.Destructive,
              shortcut: { modifiers: ["ctrl", "shift"], key: "x" },
              onAction: () => (0, import_api4.confirmAlert)({
                title: "Delete All",
                message: "Are you sure you want to delete all badges?",
                primaryAction: {
                  title: "Delete",
                  style: import_api4.Alert.ActionStyle.Destructive,
                  onAction: () => onAction(storage.deleteAllBadges, badge)
                }
              })
            }
          )
        ] }) })
      },
      badge.bundleId
    )),
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      import_api4.List.EmptyView,
      {
        icon: import_api4.Icon.BellDisabled,
        actions: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_api4.ActionPanel, { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(AddBadge, { onAction }) })
      }
    )
  ] });
}
//# sourceMappingURL=data:application/json;base64,

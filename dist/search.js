"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/search.tsx
var search_exports = {};
__export(search_exports, {
  default: () => Search
});
module.exports = __toCommonJS(search_exports);
var import_api4 = require("@raycast/api");
var import_react3 = require("react");

// src/components/form.tsx
var import_api3 = require("@raycast/api");

// node_modules/@raycast/utils/dist/module.js
var import_react = __toESM(require("react"));
var import_api = require("@raycast/api");
var import_node_fs = __toESM(require("node:fs"));
var import_node_path = __toESM(require("node:path"));
var import_jsx_runtime = require("react/jsx-runtime");
function $c718fd03aba6111c$export$80e5033e369189f3(error, options) {
  const message = error instanceof Error ? error.message : String(error);
  return (0, import_api.showToast)({
    style: (0, import_api.Toast).Style.Failure,
    title: options?.title ?? "Something went wrong",
    message: options?.message ?? message,
    primaryAction: options?.primaryAction ?? $c718fd03aba6111c$var$handleErrorToastAction(error),
    secondaryAction: options?.primaryAction ? $c718fd03aba6111c$var$handleErrorToastAction(error) : void 0
  });
}
var $c718fd03aba6111c$var$handleErrorToastAction = (error) => {
  let privateExtension = true;
  let title = "[Extension Name]...";
  let extensionURL = "";
  try {
    const packageJSON = JSON.parse((0, import_node_fs.readFileSync)((0, import_node_path.join)((0, import_api.environment).assetsPath, "..", "package.json"), "utf8"));
    title = `[${packageJSON.title}]...`;
    extensionURL = `https://raycast.com/${packageJSON.owner || packageJSON.author}/${packageJSON.name}`;
    if (!packageJSON.owner || packageJSON.access === "public") privateExtension = false;
  } catch (err) {
  }
  const fallback = (0, import_api.environment).isDevelopment || privateExtension;
  const stack = error instanceof Error ? error?.stack || error?.message || "" : String(error);
  return {
    title: fallback ? "Copy Logs" : "Report Error",
    onAction(toast) {
      toast.hide();
      if (fallback) (0, import_api.Clipboard).copy(stack);
      else (0, import_api.open)(`https://github.com/raycast/extensions/issues/new?&labels=extension%2Cbug&template=extension_bug_report.yml&title=${encodeURIComponent(title)}&extension-url=${encodeURI(extensionURL)}&description=${encodeURIComponent(`#### Error:
\`\`\`
${stack}
\`\`\`
`)}`);
    }
  };
};

// src/components/form.tsx
var import_react2 = require("react");

// src/utils/storage.ts
var import_api2 = require("@raycast/api");
function storage() {
}
storage.getPreferences = async () => (0, import_api2.getPreferenceValues)();
storage.getBadges = async () => {
  const apps = await (0, import_api2.getApplications)();
  const badges = JSON.parse(await import_api2.LocalStorage.getItem("badges") || "{}");
  Object.entries(badges).forEach(([bundleId, badge]) => {
    const app = apps.filter((app2) => app2.bundleId === bundleId).pop();
    if (!app) {
      delete badges[bundleId];
      return;
    }
    badge.app = app;
    badge.status = { count: 0, indeterminate: false };
  });
  return badges;
};
storage.sortBadges = (badges) => Object.values(badges).sort((a, b) => a.app.name.localeCompare(
  b.app.name,
  Intl.DateTimeFormat().resolvedOptions().locale,
  { sensitivity: "base" }
));
storage.saveBadge = async (badge) => {
  const badges = await storage.getBadges();
  badges[badge.bundleId] = badge;
  await import_api2.LocalStorage.setItem("badges", JSON.stringify(badges));
};
storage.deleteBadge = async (badge) => {
  const badges = await storage.getBadges();
  if (!badges[badge.bundleId])
    return;
  delete badges[badge.bundleId];
  await import_api2.LocalStorage.setItem("badges", JSON.stringify(badges));
};
storage.deleteAllBadges = async () => import_api2.LocalStorage.removeItem("badges");

// src/components/form.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
function BadgeForm(props) {
  const { badge } = props;
  const { pop } = (0, import_api3.useNavigation)();
  const [apps, setApps] = (0, import_react2.useState)([]);
  (0, import_react2.useEffect)(() => {
    (async () => setApps(await (0, import_api3.getApplications)()))();
  }, []);
  const onSubmit = async (values) => {
    try {
      if (badge)
        values.bundleId = badge.bundleId;
      storage.saveBadge(values).then(pop);
    } catch (error) {
      await $c718fd03aba6111c$export$80e5033e369189f3(error.message);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
    import_api3.Form,
    {
      isLoading: !apps.length,
      navigationTitle: !badge ? "Add Badge" : "Edit Badge",
      actions: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.ActionPanel, { children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.Action.SubmitForm, { title: "Submit", onSubmit }) }),
      children: [
        badge && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.Form.Description, { text: badge.app.name }),
        !badge && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          import_api3.Form.Dropdown,
          {
            id: "bundleId",
            info: "Choose the application to monitor for badges. Keep in mind that not all applications utilize badges for notifications.",
            children: apps.map((app) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
              import_api3.Form.Dropdown.Item,
              {
                value: app.bundleId || app.name,
                title: app.name,
                icon: { fileIcon: app.path }
              },
              app.bundleId || app.name
            ))
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          import_api3.Form.Checkbox,
          {
            id: "showInactive",
            label: "Show badges when this application is closed",
            info: "When the application is closed and kept in the Dock, the badges will continue to appear in the menu bar.",
            defaultValue: !badge && true || badge.showInactive
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          import_api3.Form.Checkbox,
          {
            id: "showIndeterminate",
            label: "Show indeterminate badges",
            info: "An indeterminate badge is displayed in the Dock as a dot without a count. When enabled, the badge count increases by one.",
            defaultValue: !badge && true || badge.showIndeterminate
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.Form.Description, { text: "" }),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.Form.Separator, {}),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.Form.Description, { text: "" }),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api3.Form.Description, { text: "Applications must be open or kept in the Dock for badge counts to appear in the menu bar. Additionally, Raycast requires the Automation and Accessibility permissions in order to read the Dock badges." })
      ]
    }
  );
}

// src/search.tsx
var import_jsx_runtime3 = require("react/jsx-runtime");
function AddBadge(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
    import_api4.Action.Push,
    {
      title: "Add Badge",
      icon: import_api4.Icon.PlusCircle,
      shortcut: { modifiers: ["cmd"], key: "n" },
      target: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(BadgeForm, {}),
      onPop: props.onAction
    }
  );
}
function Search() {
  const [badges, setBadges] = (0, import_react3.useState)(null);
  (0, import_react3.useEffect)(() => {
    (async () => setBadges(await storage.getBadges()))();
  }, []);
  const onAction = async (callback, badge) => {
    if (badge && callback)
      await callback(badge);
    setBadges(await storage.getBadges());
  };
  let sortedBadges = [];
  if (badges !== null)
    sortedBadges = storage.sortBadges(badges);
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_api4.List, { isLoading: badges === null, children: [
    sortedBadges.map((badge) => /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      import_api4.List.Item,
      {
        title: badge.app.name,
        icon: { fileIcon: badge.app.path },
        accessories: [{ text: badge.showInactive ? "Always shown" : "Shown while open" }],
        actions: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_api4.ActionPanel, { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_api4.ActionPanel.Section, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
            import_api4.Action.Push,
            {
              title: "Edit Badge",
              icon: import_api4.Icon.Pencil,
              shortcut: { modifiers: ["cmd"], key: "e" },
              target: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(BadgeForm, { badge }),
              onPop: onAction
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(AddBadge, { onAction }),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
            import_api4.Action,
            {
              title: "Delete Badge",
              icon: import_api4.Icon.Trash,
              style: import_api4.Action.Style.Destructive,
              shortcut: { modifiers: ["ctrl"], key: "x" },
              onAction: () => (0, import_api4.confirmAlert)({
                title: badge.app.name,
                message: "Are you sure you want to delete this badge?",
                primaryAction: {
                  title: "Delete",
                  style: import_api4.Alert.ActionStyle.Destructive,
                  onAction: () => onAction(storage.deleteBadge, badge)
                }
              })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
            import_api4.Action,
            {
              title: "Delete All Badges",
              icon: import_api4.Icon.Trash,
              style: import_api4.Action.Style.Destructive,
              shortcut: { modifiers: ["ctrl", "shift"], key: "x" },
              onAction: () => (0, import_api4.confirmAlert)({
                title: "Delete All",
                message: "Are you sure you want to delete all badges?",
                primaryAction: {
                  title: "Delete",
                  style: import_api4.Alert.ActionStyle.Destructive,
                  onAction: () => onAction(storage.deleteAllBadges, badge)
                }
              })
            }
          )
        ] }) })
      },
      badge.bundleId
    )),
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      import_api4.List.EmptyView,
      {
        icon: import_api4.Icon.BellDisabled,
        actions: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_api4.ActionPanel, { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(AddBadge, { onAction }) })
      }
    )
  ] });
}
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2ZvdW5kYXRpb25zL3BsdWdpbnMvYmFkZ2VyL3NyYy9zZWFyY2gudHN4IiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9mb3VuZGF0aW9ucy9wbHVnaW5zL2JhZGdlci9zcmMvY29tcG9uZW50cy9mb3JtLnRzeCIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvZm91bmRhdGlvbnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL2luZGV4LnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9mb3VuZGF0aW9ucy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvdXNlUHJvbWlzZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvZm91bmRhdGlvbnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL3VzZURlZXBNZW1vLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9mb3VuZGF0aW9ucy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvdXNlTGF0ZXN0LnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9mb3VuZGF0aW9ucy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvc2hvd0ZhaWx1cmVUb2FzdC50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvZm91bmRhdGlvbnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL3VzZUNhY2hlZFN0YXRlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9mb3VuZGF0aW9ucy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvaGVscGVycy50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvZm91bmRhdGlvbnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL3ZlbmRvcnMvdHlwZS1oYXNoZXIudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2ZvdW5kYXRpb25zL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy91c2VDYWNoZWRQcm9taXNlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9mb3VuZGF0aW9ucy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvdXNlRmV0Y2gudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2ZvdW5kYXRpb25zL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy9mZXRjaC11dGlscy50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvZm91bmRhdGlvbnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL3VzZUV4ZWMudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2ZvdW5kYXRpb25zL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy9leGVjLXV0aWxzLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9mb3VuZGF0aW9ucy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvdmVuZG9ycy9zaWduYWwtZXhpdC50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvZm91bmRhdGlvbnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL3VzZVN0cmVhbUpTT04udHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2ZvdW5kYXRpb25zL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy92ZW5kb3JzL3N0cmVhbS1jaGFpbi50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvZm91bmRhdGlvbnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL3ZlbmRvcnMvc3RyZWFtLWpzb24udHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2ZvdW5kYXRpb25zL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy91c2VTUUwudHN4IiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9mb3VuZGF0aW9ucy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvc3FsLXV0aWxzLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9mb3VuZGF0aW9ucy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvdXNlRm9ybS50c3giLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2ZvdW5kYXRpb25zL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy91c2VBSS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvZm91bmRhdGlvbnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL3VzZUZyZWNlbmN5U29ydGluZy50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvZm91bmRhdGlvbnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL3VzZUxvY2FsU3RvcmFnZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvZm91bmRhdGlvbnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL2ljb24vaW5kZXgudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2ZvdW5kYXRpb25zL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy9pY29uL2F2YXRhci50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvZm91bmRhdGlvbnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL2ljb24vY29sb3IudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2ZvdW5kYXRpb25zL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy9pY29uL2Zhdmljb24udHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2ZvdW5kYXRpb25zL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy9pY29uL3Byb2dyZXNzLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9mb3VuZGF0aW9ucy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvb2F1dGgvaW5kZXgudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2ZvdW5kYXRpb25zL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy9vYXV0aC9PQXV0aFNlcnZpY2UudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2ZvdW5kYXRpb25zL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy9vYXV0aC9wcm92aWRlcnMudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2ZvdW5kYXRpb25zL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy9vYXV0aC93aXRoQWNjZXNzVG9rZW4udHN4IiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9mb3VuZGF0aW9ucy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvY3JlYXRlRGVlcGxpbmsudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2ZvdW5kYXRpb25zL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy9leGVjdXRlU1FMLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9mb3VuZGF0aW9ucy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvcnVuLWFwcGxlc2NyaXB0LnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9mb3VuZGF0aW9ucy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvcnVuLXBvd2Vyc2hlbGwtc2NyaXB0LnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9mb3VuZGF0aW9ucy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvY2FjaGUudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2ZvdW5kYXRpb25zL3BsdWdpbnMvYmFkZ2VyL3NyYy91dGlscy9zdG9yYWdlLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBBY3Rpb24sIEFjdGlvblBhbmVsLCBBbGVydCwgY29uZmlybUFsZXJ0LCBJY29uLCBMaXN0IH0gZnJvbSAnQHJheWNhc3QvYXBpJ1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IEJhZGdlRm9ybSBmcm9tICcuL2NvbXBvbmVudHMvZm9ybS50c3gnXG5pbXBvcnQgc3RvcmFnZSBmcm9tICcuL3V0aWxzL3N0b3JhZ2UudHMnXG5cbmZ1bmN0aW9uIEFkZEJhZGdlKHByb3BzOiB7IG9uQWN0aW9uOiAoKSA9PiB2b2lkIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8QWN0aW9uLlB1c2hcbiAgICAgIHRpdGxlPVwiQWRkIEJhZGdlXCJcbiAgICAgIGljb249e0ljb24uUGx1c0NpcmNsZX1cbiAgICAgIHNob3J0Y3V0PXt7IG1vZGlmaWVyczogWydjbWQnXSwga2V5OiAnbicgfX1cbiAgICAgIHRhcmdldD17PEJhZGdlRm9ybSAvPn1cbiAgICAgIG9uUG9wPXtwcm9wcy5vbkFjdGlvbn1cbiAgICAvPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNlYXJjaCgpIHtcbiAgY29uc3QgW2JhZGdlcywgc2V0QmFkZ2VzXSA9IHVzZVN0YXRlPEJhZGdlckxpc3QgfCBudWxsPihudWxsKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgKGFzeW5jICgpID0+IHNldEJhZGdlcyhhd2FpdCBzdG9yYWdlLmdldEJhZGdlcygpKSkoKVxuICB9LCBbXSlcblxuICBjb25zdCBvbkFjdGlvbiA9IGFzeW5jIChjYWxsYmFjaz86IChiYWRnZTogQmFkZ2VyKSA9PiBQcm9taXNlPHZvaWQ+LCBiYWRnZT86IEJhZGdlcikgPT4ge1xuICAgIGlmIChiYWRnZSAmJiBjYWxsYmFjaylcbiAgICAgIGF3YWl0IGNhbGxiYWNrKGJhZGdlKVxuICAgIHNldEJhZGdlcyhhd2FpdCBzdG9yYWdlLmdldEJhZGdlcygpKVxuICB9XG5cbiAgbGV0IHNvcnRlZEJhZGdlczogQmFkZ2VyW10gPSBbXVxuICBpZiAoYmFkZ2VzICE9PSBudWxsKVxuICAgIHNvcnRlZEJhZGdlcyA9IHN0b3JhZ2Uuc29ydEJhZGdlcyhiYWRnZXMpXG5cbiAgcmV0dXJuIChcbiAgICA8TGlzdCBpc0xvYWRpbmc9e2JhZGdlcyA9PT0gbnVsbH0+XG4gICAgICB7c29ydGVkQmFkZ2VzLm1hcChiYWRnZSA9PiAoXG4gICAgICAgIDxMaXN0Lkl0ZW1cbiAgICAgICAgICBrZXk9e2JhZGdlLmJ1bmRsZUlkfVxuICAgICAgICAgIHRpdGxlPXtiYWRnZS5hcHAubmFtZX1cbiAgICAgICAgICBpY29uPXt7IGZpbGVJY29uOiBiYWRnZS5hcHAucGF0aCB9fVxuICAgICAgICAgIGFjY2Vzc29yaWVzPXtbeyB0ZXh0OiBiYWRnZS5zaG93SW5hY3RpdmUgPyAnQWx3YXlzIHNob3duJyA6ICdTaG93biB3aGlsZSBvcGVuJyB9XX1cbiAgICAgICAgICBhY3Rpb25zPXsoXG4gICAgICAgICAgICA8QWN0aW9uUGFuZWw+XG4gICAgICAgICAgICAgIDxBY3Rpb25QYW5lbC5TZWN0aW9uPlxuICAgICAgICAgICAgICAgIDxBY3Rpb24uUHVzaFxuICAgICAgICAgICAgICAgICAgdGl0bGU9XCJFZGl0IEJhZGdlXCJcbiAgICAgICAgICAgICAgICAgIGljb249e0ljb24uUGVuY2lsfVxuICAgICAgICAgICAgICAgICAgc2hvcnRjdXQ9e3sgbW9kaWZpZXJzOiBbJ2NtZCddLCBrZXk6ICdlJyB9fVxuICAgICAgICAgICAgICAgICAgdGFyZ2V0PXs8QmFkZ2VGb3JtIGJhZGdlPXtiYWRnZX0gLz59XG4gICAgICAgICAgICAgICAgICBvblBvcD17b25BY3Rpb259XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8QWRkQmFkZ2Ugb25BY3Rpb249e29uQWN0aW9ufSAvPlxuICAgICAgICAgICAgICAgIDxBY3Rpb25cbiAgICAgICAgICAgICAgICAgIHRpdGxlPVwiRGVsZXRlIEJhZGdlXCJcbiAgICAgICAgICAgICAgICAgIGljb249e0ljb24uVHJhc2h9XG4gICAgICAgICAgICAgICAgICBzdHlsZT17QWN0aW9uLlN0eWxlLkRlc3RydWN0aXZlfVxuICAgICAgICAgICAgICAgICAgc2hvcnRjdXQ9e3sgbW9kaWZpZXJzOiBbJ2N0cmwnXSwga2V5OiAneCcgfX1cbiAgICAgICAgICAgICAgICAgIG9uQWN0aW9uPXsoKSA9PiBjb25maXJtQWxlcnQoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogYmFkZ2UuYXBwLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgYmFkZ2U/JyxcbiAgICAgICAgICAgICAgICAgICAgcHJpbWFyeUFjdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRGVsZXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogQWxlcnQuQWN0aW9uU3R5bGUuRGVzdHJ1Y3RpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgb25BY3Rpb246ICgpID0+IG9uQWN0aW9uKHN0b3JhZ2UuZGVsZXRlQmFkZ2UsIGJhZGdlKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPEFjdGlvblxuICAgICAgICAgICAgICAgICAgdGl0bGU9XCJEZWxldGUgQWxsIEJhZGdlc1wiXG4gICAgICAgICAgICAgICAgICBpY29uPXtJY29uLlRyYXNofVxuICAgICAgICAgICAgICAgICAgc3R5bGU9e0FjdGlvbi5TdHlsZS5EZXN0cnVjdGl2ZX1cbiAgICAgICAgICAgICAgICAgIHNob3J0Y3V0PXt7IG1vZGlmaWVyczogWydjdHJsJywgJ3NoaWZ0J10sIGtleTogJ3gnIH19XG4gICAgICAgICAgICAgICAgICBvbkFjdGlvbj17KCkgPT4gY29uZmlybUFsZXJ0KHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdEZWxldGUgQWxsJyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgYWxsIGJhZGdlcz8nLFxuICAgICAgICAgICAgICAgICAgICBwcmltYXJ5QWN0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdEZWxldGUnLFxuICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBBbGVydC5BY3Rpb25TdHlsZS5EZXN0cnVjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICBvbkFjdGlvbjogKCkgPT4gb25BY3Rpb24oc3RvcmFnZS5kZWxldGVBbGxCYWRnZXMsIGJhZGdlKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvQWN0aW9uUGFuZWwuU2VjdGlvbj5cbiAgICAgICAgICAgIDwvQWN0aW9uUGFuZWw+XG4gICAgICAgICAgKX1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuXG4gICAgICA8TGlzdC5FbXB0eVZpZXdcbiAgICAgICAgaWNvbj17SWNvbi5CZWxsRGlzYWJsZWR9XG4gICAgICAgIGFjdGlvbnM9eyhcbiAgICAgICAgICA8QWN0aW9uUGFuZWw+XG4gICAgICAgICAgICA8QWRkQmFkZ2Ugb25BY3Rpb249e29uQWN0aW9ufSAvPlxuICAgICAgICAgIDwvQWN0aW9uUGFuZWw+XG4gICAgICAgICl9XG4gICAgICAvPlxuICAgIDwvTGlzdD5cbiAgKVxufVxuIiwgImltcG9ydCB0eXBlIHsgQXBwbGljYXRpb24gfSBmcm9tICdAcmF5Y2FzdC9hcGknXG5pbXBvcnQgeyBBY3Rpb24sIEFjdGlvblBhbmVsLCBGb3JtLCBnZXRBcHBsaWNhdGlvbnMsIHVzZU5hdmlnYXRpb24gfSBmcm9tICdAcmF5Y2FzdC9hcGknXG5pbXBvcnQgeyBzaG93RmFpbHVyZVRvYXN0IH0gZnJvbSAnQHJheWNhc3QvdXRpbHMnXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgc3RvcmFnZSBmcm9tICcuLi91dGlscy9zdG9yYWdlLnRzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCYWRnZUZvcm0ocHJvcHM6IHsgYmFkZ2U/OiBCYWRnZXIgfSkge1xuICBjb25zdCB7IGJhZGdlIH0gPSBwcm9wc1xuICBjb25zdCB7IHBvcCB9ID0gdXNlTmF2aWdhdGlvbigpXG4gIGNvbnN0IFthcHBzLCBzZXRBcHBzXSA9IHVzZVN0YXRlPEFwcGxpY2F0aW9uW10+KFtdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgKGFzeW5jICgpID0+IHNldEFwcHMoYXdhaXQgZ2V0QXBwbGljYXRpb25zKCkpKSgpXG4gIH0sIFtdKVxuXG4gIGNvbnN0IG9uU3VibWl0ID0gYXN5bmMgKHZhbHVlczogQmFkZ2VyKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChiYWRnZSlcbiAgICAgICAgdmFsdWVzLmJ1bmRsZUlkID0gYmFkZ2UuYnVuZGxlSWRcbiAgICAgIHN0b3JhZ2Uuc2F2ZUJhZGdlKHZhbHVlcykudGhlbihwb3ApXG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgYXdhaXQgc2hvd0ZhaWx1cmVUb2FzdCgoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8Rm9ybVxuICAgICAgaXNMb2FkaW5nPXshYXBwcy5sZW5ndGh9XG4gICAgICBuYXZpZ2F0aW9uVGl0bGU9eyFiYWRnZSA/ICdBZGQgQmFkZ2UnIDogJ0VkaXQgQmFkZ2UnfVxuICAgICAgYWN0aW9ucz17KFxuICAgICAgICA8QWN0aW9uUGFuZWw+XG4gICAgICAgICAgPEFjdGlvbi5TdWJtaXRGb3JtIHRpdGxlPVwiU3VibWl0XCIgb25TdWJtaXQ9e29uU3VibWl0fSAvPlxuICAgICAgICA8L0FjdGlvblBhbmVsPlxuICAgICAgKX1cbiAgICA+XG4gICAgICB7YmFkZ2UgJiYgPEZvcm0uRGVzY3JpcHRpb24gdGV4dD17YmFkZ2UuYXBwLm5hbWV9IC8+fVxuXG4gICAgICB7IWJhZGdlICYmIChcbiAgICAgICAgPEZvcm0uRHJvcGRvd25cbiAgICAgICAgICBpZD1cImJ1bmRsZUlkXCJcbiAgICAgICAgICBpbmZvPVwiQ2hvb3NlIHRoZSBhcHBsaWNhdGlvbiB0byBtb25pdG9yIGZvciBiYWRnZXMuIEtlZXAgaW4gbWluZCB0aGF0IG5vdCBhbGwgYXBwbGljYXRpb25zIHV0aWxpemUgYmFkZ2VzIGZvciBub3RpZmljYXRpb25zLlwiXG4gICAgICAgID5cbiAgICAgICAgICB7YXBwcy5tYXAoYXBwID0+IChcbiAgICAgICAgICAgIDxGb3JtLkRyb3Bkb3duLkl0ZW1cbiAgICAgICAgICAgICAga2V5PXthcHAuYnVuZGxlSWQgfHwgYXBwLm5hbWV9XG4gICAgICAgICAgICAgIHZhbHVlPXthcHAuYnVuZGxlSWQgfHwgYXBwLm5hbWV9XG4gICAgICAgICAgICAgIHRpdGxlPXthcHAubmFtZX1cbiAgICAgICAgICAgICAgaWNvbj17eyBmaWxlSWNvbjogYXBwLnBhdGggfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvRm9ybS5Ecm9wZG93bj5cbiAgICAgICl9XG5cbiAgICAgIDxGb3JtLkNoZWNrYm94XG4gICAgICAgIGlkPVwic2hvd0luYWN0aXZlXCJcbiAgICAgICAgbGFiZWw9XCJTaG93IGJhZGdlcyB3aGVuIHRoaXMgYXBwbGljYXRpb24gaXMgY2xvc2VkXCJcbiAgICAgICAgaW5mbz1cIldoZW4gdGhlIGFwcGxpY2F0aW9uIGlzIGNsb3NlZCBhbmQga2VwdCBpbiB0aGUgRG9jaywgdGhlIGJhZGdlcyB3aWxsIGNvbnRpbnVlIHRvIGFwcGVhciBpbiB0aGUgbWVudSBiYXIuXCJcbiAgICAgICAgZGVmYXVsdFZhbHVlPXsoIWJhZGdlICYmIHRydWUpIHx8IGJhZGdlLnNob3dJbmFjdGl2ZX1cbiAgICAgIC8+XG4gICAgICA8Rm9ybS5DaGVja2JveFxuICAgICAgICBpZD1cInNob3dJbmRldGVybWluYXRlXCJcbiAgICAgICAgbGFiZWw9XCJTaG93IGluZGV0ZXJtaW5hdGUgYmFkZ2VzXCJcbiAgICAgICAgaW5mbz1cIkFuIGluZGV0ZXJtaW5hdGUgYmFkZ2UgaXMgZGlzcGxheWVkIGluIHRoZSBEb2NrIGFzIGEgZG90IHdpdGhvdXQgYSBjb3VudC4gV2hlbiBlbmFibGVkLCB0aGUgYmFkZ2UgY291bnQgaW5jcmVhc2VzIGJ5IG9uZS5cIlxuICAgICAgICBkZWZhdWx0VmFsdWU9eyghYmFkZ2UgJiYgdHJ1ZSkgfHwgYmFkZ2Uuc2hvd0luZGV0ZXJtaW5hdGV9XG4gICAgICAvPlxuXG4gICAgICA8Rm9ybS5EZXNjcmlwdGlvbiB0ZXh0PVwiXCIgLz5cbiAgICAgIDxGb3JtLlNlcGFyYXRvciAvPlxuICAgICAgPEZvcm0uRGVzY3JpcHRpb24gdGV4dD1cIlwiIC8+XG5cbiAgICAgIDxGb3JtLkRlc2NyaXB0aW9uIHRleHQ9XCJBcHBsaWNhdGlvbnMgbXVzdCBiZSBvcGVuIG9yIGtlcHQgaW4gdGhlIERvY2sgZm9yIGJhZGdlIGNvdW50cyB0byBhcHBlYXIgaW4gdGhlIG1lbnUgYmFyLiBBZGRpdGlvbmFsbHksIFJheWNhc3QgcmVxdWlyZXMgdGhlIEF1dG9tYXRpb24gYW5kIEFjY2Vzc2liaWxpdHkgcGVybWlzc2lvbnMgaW4gb3JkZXIgdG8gcmVhZCB0aGUgRG9jayBiYWRnZXMuXCIgLz5cbiAgICA8L0Zvcm0+XG4gIClcbn1cbiIsICIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cIm5vZGVcIiAvPlxuXG5leHBvcnQgeyB1c2VQcm9taXNlIH0gZnJvbSBcIi4vdXNlUHJvbWlzZVwiO1xuZXhwb3J0IHsgdXNlQ2FjaGVkU3RhdGUgfSBmcm9tIFwiLi91c2VDYWNoZWRTdGF0ZVwiO1xuZXhwb3J0IHsgdXNlQ2FjaGVkUHJvbWlzZSB9IGZyb20gXCIuL3VzZUNhY2hlZFByb21pc2VcIjtcbmV4cG9ydCB7IHVzZUZldGNoIH0gZnJvbSBcIi4vdXNlRmV0Y2hcIjtcbmV4cG9ydCB7IHVzZUV4ZWMgfSBmcm9tIFwiLi91c2VFeGVjXCI7XG5leHBvcnQgeyB1c2VTdHJlYW1KU09OIH0gZnJvbSBcIi4vdXNlU3RyZWFtSlNPTlwiO1xuZXhwb3J0IHsgdXNlU1FMIH0gZnJvbSBcIi4vdXNlU1FMXCI7XG5leHBvcnQgeyB1c2VGb3JtLCBGb3JtVmFsaWRhdGlvbiB9IGZyb20gXCIuL3VzZUZvcm1cIjtcbmV4cG9ydCB7IHVzZUFJIH0gZnJvbSBcIi4vdXNlQUlcIjtcbmV4cG9ydCB7IHVzZUZyZWNlbmN5U29ydGluZyB9IGZyb20gXCIuL3VzZUZyZWNlbmN5U29ydGluZ1wiO1xuZXhwb3J0IHsgdXNlTG9jYWxTdG9yYWdlIH0gZnJvbSBcIi4vdXNlTG9jYWxTdG9yYWdlXCI7XG5cbmV4cG9ydCB7IGdldEF2YXRhckljb24sIGdldEZhdmljb24sIGdldFByb2dyZXNzSWNvbiB9IGZyb20gXCIuL2ljb25cIjtcblxuZXhwb3J0IHsgT0F1dGhTZXJ2aWNlLCB3aXRoQWNjZXNzVG9rZW4sIGdldEFjY2Vzc1Rva2VuIH0gZnJvbSBcIi4vb2F1dGhcIjtcblxuZXhwb3J0IHsgY3JlYXRlRGVlcGxpbmssIGNyZWF0ZUV4dGVuc2lvbkRlZXBsaW5rLCBjcmVhdGVTY3JpcHRDb21tYW5kRGVlcGxpbmssIERlZXBsaW5rVHlwZSB9IGZyb20gXCIuL2NyZWF0ZURlZXBsaW5rXCI7XG5leHBvcnQgeyBleGVjdXRlU1FMIH0gZnJvbSBcIi4vZXhlY3V0ZVNRTFwiO1xuZXhwb3J0IHsgcnVuQXBwbGVTY3JpcHQgfSBmcm9tIFwiLi9ydW4tYXBwbGVzY3JpcHRcIjtcbmV4cG9ydCB7IHJ1blBvd2VyU2hlbGxTY3JpcHQgfSBmcm9tIFwiLi9ydW4tcG93ZXJzaGVsbC1zY3JpcHRcIjtcbmV4cG9ydCB7IHNob3dGYWlsdXJlVG9hc3QgfSBmcm9tIFwiLi9zaG93RmFpbHVyZVRvYXN0XCI7XG5leHBvcnQgeyB3aXRoQ2FjaGUgfSBmcm9tIFwiLi9jYWNoZVwiO1xuXG5leHBvcnQgdHlwZSB7IFByb21pc2VPcHRpb25zIH0gZnJvbSBcIi4vdXNlUHJvbWlzZVwiO1xuZXhwb3J0IHR5cGUgeyBDYWNoZWRQcm9taXNlT3B0aW9ucyB9IGZyb20gXCIuL3VzZUNhY2hlZFByb21pc2VcIjtcbmV4cG9ydCB0eXBlIHtcbiAgT0F1dGhTZXJ2aWNlT3B0aW9ucyxcbiAgT25BdXRob3JpemVQYXJhbXMsXG4gIFdpdGhBY2Nlc3NUb2tlbkNvbXBvbmVudE9yRm4sXG4gIFByb3ZpZGVyV2l0aERlZmF1bHRDbGllbnRPcHRpb25zLFxuICBQcm92aWRlck9wdGlvbnMsXG59IGZyb20gXCIuL29hdXRoXCI7XG5leHBvcnQgdHlwZSB7IEFzeW5jU3RhdGUsIE11dGF0ZVByb21pc2UgfSBmcm9tIFwiLi90eXBlc1wiO1xuIiwgImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2ssIFJlZk9iamVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgZW52aXJvbm1lbnQsIExhdW5jaFR5cGUsIFRvYXN0IH0gZnJvbSBcIkByYXljYXN0L2FwaVwiO1xuaW1wb3J0IHsgdXNlRGVlcE1lbW8gfSBmcm9tIFwiLi91c2VEZWVwTWVtb1wiO1xuaW1wb3J0IHtcbiAgRnVuY3Rpb25SZXR1cm5pbmdQcm9taXNlLFxuICBNdXRhdGVQcm9taXNlLFxuICBVc2VQcm9taXNlUmV0dXJuVHlwZSxcbiAgQXN5bmNTdGF0ZSxcbiAgRnVuY3Rpb25SZXR1cm5pbmdQYWdpbmF0ZWRQcm9taXNlLFxuICBVbndyYXBSZXR1cm4sXG4gIFBhZ2luYXRpb25PcHRpb25zLFxufSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgdXNlTGF0ZXN0IH0gZnJvbSBcIi4vdXNlTGF0ZXN0XCI7XG5pbXBvcnQgeyBzaG93RmFpbHVyZVRvYXN0IH0gZnJvbSBcIi4vc2hvd0ZhaWx1cmVUb2FzdFwiO1xuXG5leHBvcnQgdHlwZSBQcm9taXNlT3B0aW9uczxUIGV4dGVuZHMgRnVuY3Rpb25SZXR1cm5pbmdQcm9taXNlIHwgRnVuY3Rpb25SZXR1cm5pbmdQYWdpbmF0ZWRQcm9taXNlPiA9IHtcbiAgLyoqXG4gICAqIEEgcmVmZXJlbmNlIHRvIGFuIGBBYm9ydENvbnRyb2xsZXJgIHRvIGNhbmNlbCBhIHByZXZpb3VzIGNhbGwgd2hlbiB0cmlnZ2VyaW5nIGEgbmV3IG9uZVxuICAgKi9cbiAgYWJvcnRhYmxlPzogUmVmT2JqZWN0PEFib3J0Q29udHJvbGxlciB8IG51bGwgfCB1bmRlZmluZWQ+O1xuICAvKipcbiAgICogV2hldGhlciB0byBhY3R1YWxseSBleGVjdXRlIHRoZSBmdW5jdGlvbiBvciBub3QuXG4gICAqIFRoaXMgaXMgdXNlZnVsIGZvciBjYXNlcyB3aGVyZSBvbmUgb2YgdGhlIGZ1bmN0aW9uJ3MgYXJndW1lbnRzIGRlcGVuZHMgb24gc29tZXRoaW5nIHRoYXRcbiAgICogbWlnaHQgbm90IGJlIGF2YWlsYWJsZSByaWdodCBhd2F5IChmb3IgZXhhbXBsZSwgZGVwZW5kcyBvbiBzb21lIHVzZXIgaW5wdXRzKS4gQmVjYXVzZSBSZWFjdCByZXF1aXJlc1xuICAgKiBldmVyeSBob29rcyB0byBiZSBkZWZpbmVkIG9uIHRoZSByZW5kZXIsIHRoaXMgZmxhZyBlbmFibGVzIHlvdSB0byBkZWZpbmUgdGhlIGhvb2sgcmlnaHQgYXdheSBidXRcbiAgICogd2FpdCB1dGlsIHlvdSBoYXZlIGFsbCB0aGUgYXJndW1lbnRzIHJlYWR5IHRvIGV4ZWN1dGUgdGhlIGZ1bmN0aW9uLlxuICAgKi9cbiAgZXhlY3V0ZT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBPcHRpb25zIGZvciB0aGUgZ2VuZXJpYyBmYWlsdXJlIHRvYXN0LlxuICAgKiBJdCBhbGxvd3MgeW91IHRvIGN1c3RvbWl6ZSB0aGUgdGl0bGUsIG1lc3NhZ2UsIGFuZCBwcmltYXJ5IGFjdGlvbiBvZiB0aGUgZmFpbHVyZSB0b2FzdC5cbiAgICovXG4gIGZhaWx1cmVUb2FzdE9wdGlvbnM/OiBQYXJ0aWFsPFBpY2s8VG9hc3QuT3B0aW9ucywgXCJ0aXRsZVwiIHwgXCJwcmltYXJ5QWN0aW9uXCIgfCBcIm1lc3NhZ2VcIj4+O1xuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gYW4gZXhlY3V0aW9uIGZhaWxzLiBCeSBkZWZhdWx0IGl0IHdpbGwgbG9nIHRoZSBlcnJvciBhbmQgc2hvd1xuICAgKiBhIGdlbmVyaWMgZmFpbHVyZSB0b2FzdC5cbiAgICovXG4gIG9uRXJyb3I/OiAoZXJyb3I6IEVycm9yKSA9PiB2b2lkIHwgUHJvbWlzZTx2b2lkPjtcbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGFuIGV4ZWN1dGlvbiBzdWNjZWVkcy5cbiAgICovXG4gIG9uRGF0YT86IChkYXRhOiBVbndyYXBSZXR1cm48VD4sIHBhZ2luYXRpb24/OiBQYWdpbmF0aW9uT3B0aW9uczxVbndyYXBSZXR1cm48VD4+KSA9PiB2b2lkIHwgUHJvbWlzZTx2b2lkPjtcbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGFuIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0XG4gICAqL1xuICBvbldpbGxFeGVjdXRlPzogKHBhcmFtZXRlcnM6IFBhcmFtZXRlcnM8VD4pID0+IHZvaWQ7XG59O1xuXG4vKipcbiAqIFdyYXBzIGFuIGFzeW5jaHJvbm91cyBmdW5jdGlvbiBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIFByb21pc2UgaW4gYW5vdGhlciBmdW5jdGlvbiwgYW5kIHJldHVybnMgdGhlIHtAbGluayBBc3luY1N0YXRlfSBjb3JyZXNwb25kaW5nIHRvIHRoZSBleGVjdXRpb24gb2YgdGhlIGZ1bmN0aW9uLlxuICpcbiAqIEByZW1hcmsgVGhpcyBvdmVybG9hZCBzaG91bGQgYmUgdXNlZCB3aGVuIHdvcmtpbmcgd2l0aCBwYWdpbmF0ZWQgZGF0YSBzb3VyY2VzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqIGltcG9ydCB7IHNldFRpbWVvdXQgfSBmcm9tIFwibm9kZTp0aW1lcnMvcHJvbWlzZXNcIjtcbiAqIGltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG4gKiBpbXBvcnQgeyBMaXN0IH0gZnJvbSBcIkByYXljYXN0L2FwaVwiO1xuICogaW1wb3J0IHsgdXNlUHJvbWlzZSB9IGZyb20gXCJAcmF5Y2FzdC91dGlsc1wiO1xuICpcbiAqIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbW1hbmQoKSB7XG4gKiAgIGNvbnN0IFtzZWFyY2hUZXh0LCBzZXRTZWFyY2hUZXh0XSA9IHVzZVN0YXRlKFwiXCIpO1xuICpcbiAqICAgY29uc3QgeyBpc0xvYWRpbmcsIGRhdGEsIHBhZ2luYXRpb24gfSA9IHVzZVByb21pc2UoXG4gKiAgICAgKHNlYXJjaFRleHQ6IHN0cmluZykgPT4gYXN5bmMgKG9wdGlvbnM6IHsgcGFnZTogbnVtYmVyIH0pID0+IHtcbiAqICAgICAgIGF3YWl0IHNldFRpbWVvdXQoMjAwKTtcbiAqICAgICAgIGNvbnN0IG5ld0RhdGEgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiAyNSB9LCAoX3YsIGluZGV4KSA9PiAoe1xuICogICAgICAgICBpbmRleCxcbiAqICAgICAgICAgcGFnZTogb3B0aW9ucy5wYWdlLFxuICogICAgICAgICB0ZXh0OiBzZWFyY2hUZXh0LFxuICogICAgICAgfSkpO1xuICogICAgICAgcmV0dXJuIHsgZGF0YTogbmV3RGF0YSwgaGFzTW9yZTogb3B0aW9ucy5wYWdlIDwgMTAgfTtcbiAqICAgICB9LFxuICogICAgIFtzZWFyY2hUZXh0XVxuICogICApO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8TGlzdCBpc0xvYWRpbmc9e2lzTG9hZGluZ30gb25TZWFyY2hUZXh0Q2hhbmdlPXtzZXRTZWFyY2hUZXh0fSBwYWdpbmF0aW9uPXtwYWdpbmF0aW9ufT5cbiAqICAgICAgIHtkYXRhPy5tYXAoKGl0ZW0pID0+IChcbiAqICAgICAgICAgPExpc3QuSXRlbVxuICogICAgICAgICAgIGtleT17YCR7aXRlbS5wYWdlfSAke2l0ZW0uaW5kZXh9ICR7aXRlbS50ZXh0fWB9XG4gKiAgICAgICAgICAgdGl0bGU9e2BQYWdlICR7aXRlbS5wYWdlfSBJdGVtICR7aXRlbS5pbmRleH1gfVxuICogICAgICAgICAgIHN1YnRpdGxlPXtpdGVtLnRleHR9XG4gKiAgICAgICAgIC8+XG4gKiAgICAgICApKX1cbiAqICAgICA8L0xpc3Q+XG4gKiAgICk7XG4gKiB9O1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VQcm9taXNlPFQgZXh0ZW5kcyBGdW5jdGlvblJldHVybmluZ1BhZ2luYXRlZFByb21pc2U8W10+PihcbiAgZm46IFQsXG4pOiBVc2VQcm9taXNlUmV0dXJuVHlwZTxVbndyYXBSZXR1cm48VD4+O1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVByb21pc2U8VCBleHRlbmRzIEZ1bmN0aW9uUmV0dXJuaW5nUGFnaW5hdGVkUHJvbWlzZT4oXG4gIGZuOiBULFxuICBhcmdzOiBQYXJhbWV0ZXJzPFQ+LFxuICBvcHRpb25zPzogUHJvbWlzZU9wdGlvbnM8VD4sXG4pOiBVc2VQcm9taXNlUmV0dXJuVHlwZTxVbndyYXBSZXR1cm48VD4+O1xuXG4vKipcbiAqIFdyYXBzIGFuIGFzeW5jaHJvbm91cyBmdW5jdGlvbiBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIFByb21pc2UgYW5kIHJldHVybnMgdGhlIHtAbGluayBBc3luY1N0YXRlfSBjb3JyZXNwb25kaW5nIHRvIHRoZSBleGVjdXRpb24gb2YgdGhlIGZ1bmN0aW9uLlxuICpcbiAqIEByZW1hcmsgVGhlIGZ1bmN0aW9uIGlzIGFzc3VtZWQgdG8gYmUgY29uc3RhbnQgKGVnLiBjaGFuZ2luZyBpdCB3b24ndCB0cmlnZ2VyIGEgcmV2YWxpZGF0aW9uKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiBpbXBvcnQgeyB1c2VQcm9taXNlIH0gZnJvbSAnQHJheWNhc3QvdXRpbHMnO1xuICpcbiAqIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbW1hbmQoKSB7XG4gKiAgIGNvbnN0IGFib3J0YWJsZSA9IHVzZVJlZjxBYm9ydENvbnRyb2xsZXI+KCk7XG4gKiAgIGNvbnN0IHsgaXNMb2FkaW5nLCBkYXRhLCByZXZhbGlkYXRlIH0gPSB1c2VQcm9taXNlKGFzeW5jICh1cmw6IHN0cmluZykgPT4ge1xuICogICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7IHNpZ25hbDogYWJvcnRhYmxlLmN1cnJlbnQ/LnNpZ25hbCB9KTtcbiAqICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gKiAgICAgcmV0dXJuIHJlc3VsdFxuICogICB9LFxuICogICBbJ2h0dHBzOi8vYXBpLmV4YW1wbGUnXSxcbiAqICAge1xuICogICAgIGFib3J0YWJsZVxuICogICB9KTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPERldGFpbFxuICogICAgICAgaXNMb2FkaW5nPXtpc0xvYWRpbmd9XG4gKiAgICAgICBtYXJrZG93bj17ZGF0YX1cbiAqICAgICAgIGFjdGlvbnM9e1xuICogICAgICAgICA8QWN0aW9uUGFuZWw+XG4gKiAgICAgICAgICAgPEFjdGlvbiB0aXRsZT1cIlJlbG9hZFwiIG9uQWN0aW9uPXsoKSA9PiByZXZhbGlkYXRlKCl9IC8+XG4gKiAgICAgICAgIDwvQWN0aW9uUGFuZWw+XG4gKiAgICAgICB9XG4gKiAgICAgLz5cbiAqICAgKTtcbiAqIH07XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVByb21pc2U8VCBleHRlbmRzIEZ1bmN0aW9uUmV0dXJuaW5nUHJvbWlzZTxbXT4+KGZuOiBUKTogVXNlUHJvbWlzZVJldHVyblR5cGU8VW53cmFwUmV0dXJuPFQ+PjtcbmV4cG9ydCBmdW5jdGlvbiB1c2VQcm9taXNlPFQgZXh0ZW5kcyBGdW5jdGlvblJldHVybmluZ1Byb21pc2U+KFxuICBmbjogVCxcbiAgYXJnczogUGFyYW1ldGVyczxUPixcbiAgb3B0aW9ucz86IFByb21pc2VPcHRpb25zPFQ+LFxuKTogVXNlUHJvbWlzZVJldHVyblR5cGU8VW53cmFwUmV0dXJuPFQ+PjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVByb21pc2U8VCBleHRlbmRzIEZ1bmN0aW9uUmV0dXJuaW5nUHJvbWlzZSB8IEZ1bmN0aW9uUmV0dXJuaW5nUGFnaW5hdGVkUHJvbWlzZT4oXG4gIGZuOiBULFxuICBhcmdzPzogUGFyYW1ldGVyczxUPixcbiAgb3B0aW9ucz86IFByb21pc2VPcHRpb25zPFQ+LFxuKTogVXNlUHJvbWlzZVJldHVyblR5cGU8YW55PiB7XG4gIGNvbnN0IGxhc3RDYWxsSWQgPSB1c2VSZWYoMCk7XG4gIGNvbnN0IFtzdGF0ZSwgc2V0XSA9IHVzZVN0YXRlPEFzeW5jU3RhdGU8VW53cmFwUmV0dXJuPFQ+Pj4oeyBpc0xvYWRpbmc6IHRydWUgfSk7XG5cbiAgY29uc3QgZm5SZWYgPSB1c2VMYXRlc3QoZm4pO1xuICBjb25zdCBsYXRlc3RBYm9ydGFibGUgPSB1c2VMYXRlc3Qob3B0aW9ucz8uYWJvcnRhYmxlKTtcbiAgY29uc3QgbGF0ZXN0QXJncyA9IHVzZUxhdGVzdChhcmdzIHx8IFtdKTtcbiAgY29uc3QgbGF0ZXN0T25FcnJvciA9IHVzZUxhdGVzdChvcHRpb25zPy5vbkVycm9yKTtcbiAgY29uc3QgbGF0ZXN0T25EYXRhID0gdXNlTGF0ZXN0KG9wdGlvbnM/Lm9uRGF0YSk7XG4gIGNvbnN0IGxhdGVzdE9uV2lsbEV4ZWN1dGUgPSB1c2VMYXRlc3Qob3B0aW9ucz8ub25XaWxsRXhlY3V0ZSk7XG4gIGNvbnN0IGxhdGVzdEZhaWx1cmVUb2FzdCA9IHVzZUxhdGVzdChvcHRpb25zPy5mYWlsdXJlVG9hc3RPcHRpb25zKTtcbiAgY29uc3QgbGF0ZXN0VmFsdWUgPSB1c2VMYXRlc3Qoc3RhdGUuZGF0YSk7XG4gIGNvbnN0IGxhdGVzdENhbGxiYWNrID0gdXNlUmVmPCguLi5hcmdzOiBQYXJhbWV0ZXJzPFQ+KSA9PiBQcm9taXNlPFVud3JhcFJldHVybjxUPj4+KG51bGwpO1xuXG4gIGNvbnN0IHBhZ2luYXRpb25BcmdzUmVmID0gdXNlUmVmPFBhZ2luYXRpb25PcHRpb25zPih7IHBhZ2U6IDAgfSk7XG4gIGNvbnN0IHVzZVBhZ2luYXRpb25SZWYgPSB1c2VSZWYoZmFsc2UpO1xuICBjb25zdCBoYXNNb3JlUmVmID0gdXNlUmVmKHRydWUpO1xuICBjb25zdCBwYWdlU2l6ZVJlZiA9IHVzZVJlZig1MCk7XG5cbiAgY29uc3QgYWJvcnQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKGxhdGVzdEFib3J0YWJsZS5jdXJyZW50KSB7XG4gICAgICBsYXRlc3RBYm9ydGFibGUuY3VycmVudC5jdXJyZW50Py5hYm9ydCgpO1xuICAgICAgbGF0ZXN0QWJvcnRhYmxlLmN1cnJlbnQuY3VycmVudCA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuICsrbGFzdENhbGxJZC5jdXJyZW50O1xuICB9LCBbbGF0ZXN0QWJvcnRhYmxlXSk7XG5cbiAgY29uc3QgY2FsbGJhY2sgPSB1c2VDYWxsYmFjayhcbiAgICAoLi4uYXJnczogUGFyYW1ldGVyczxUPik6IFByb21pc2U8VW53cmFwUmV0dXJuPFQ+PiA9PiB7XG4gICAgICBjb25zdCBjYWxsSWQgPSBhYm9ydCgpO1xuXG4gICAgICBsYXRlc3RPbldpbGxFeGVjdXRlLmN1cnJlbnQ/LihhcmdzKTtcblxuICAgICAgc2V0KChwcmV2U3RhdGUpID0+ICh7IC4uLnByZXZTdGF0ZSwgaXNMb2FkaW5nOiB0cnVlIH0pKTtcblxuICAgICAgY29uc3QgcHJvbWlzZU9yUGFnaW5hdGVkUHJvbWlzZSA9IGJpbmRQcm9taXNlSWZOZWVkZWQoZm5SZWYuY3VycmVudCkoLi4uYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZUVycm9yKGVycm9yOiBhbnkpIHtcbiAgICAgICAgaWYgKGVycm9yLm5hbWUgPT0gXCJBYm9ydEVycm9yXCIpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FsbElkID09PSBsYXN0Q2FsbElkLmN1cnJlbnQpIHtcbiAgICAgICAgICAvLyBoYW5kbGUgZXJyb3JzXG4gICAgICAgICAgaWYgKGxhdGVzdE9uRXJyb3IuY3VycmVudCkge1xuICAgICAgICAgICAgbGF0ZXN0T25FcnJvci5jdXJyZW50KGVycm9yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGVudmlyb25tZW50LmxhdW5jaFR5cGUgIT09IExhdW5jaFR5cGUuQmFja2dyb3VuZCkge1xuICAgICAgICAgICAgICBzaG93RmFpbHVyZVRvYXN0KGVycm9yLCB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiRmFpbGVkIHRvIGZldGNoIGxhdGVzdCBkYXRhXCIsXG4gICAgICAgICAgICAgICAgcHJpbWFyeUFjdGlvbjoge1xuICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiUmV0cnlcIixcbiAgICAgICAgICAgICAgICAgIG9uQWN0aW9uKHRvYXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRvYXN0LmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgbGF0ZXN0Q2FsbGJhY2suY3VycmVudD8uKC4uLigobGF0ZXN0QXJncy5jdXJyZW50IHx8IFtdKSBhcyBQYXJhbWV0ZXJzPFQ+KSk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLi4ubGF0ZXN0RmFpbHVyZVRvYXN0LmN1cnJlbnQsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBzZXQoeyBlcnJvciwgaXNMb2FkaW5nOiBmYWxzZSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBwcm9taXNlT3JQYWdpbmF0ZWRQcm9taXNlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdXNlUGFnaW5hdGlvblJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHByb21pc2VPclBhZ2luYXRlZFByb21pc2UocGFnaW5hdGlvbkFyZ3NSZWYuY3VycmVudCkudGhlbihcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRvbyBjb21wbGljYXRlZCBmb3IgVFNcbiAgICAgICAgICAoeyBkYXRhLCBoYXNNb3JlLCBjdXJzb3IgfTogeyBkYXRhOiBVbndyYXBSZXR1cm48VD47IGhhc01vcmU6IGJvb2xlYW47IGN1cnNvcj86IGFueSB9KSA9PiB7XG4gICAgICAgICAgICBpZiAoY2FsbElkID09PSBsYXN0Q2FsbElkLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgaWYgKHBhZ2luYXRpb25BcmdzUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBwYWdpbmF0aW9uQXJnc1JlZi5jdXJyZW50LmN1cnNvciA9IGN1cnNvcjtcbiAgICAgICAgICAgICAgICBwYWdpbmF0aW9uQXJnc1JlZi5jdXJyZW50Lmxhc3RJdGVtID0gZGF0YT8uW2RhdGEubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAobGF0ZXN0T25EYXRhLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBsYXRlc3RPbkRhdGEuY3VycmVudChkYXRhLCBwYWdpbmF0aW9uQXJnc1JlZi5jdXJyZW50KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChoYXNNb3JlKSB7XG4gICAgICAgICAgICAgICAgcGFnZVNpemVSZWYuY3VycmVudCA9IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGhhc01vcmVSZWYuY3VycmVudCA9IGhhc01vcmU7XG5cbiAgICAgICAgICAgICAgc2V0KChwcmV2aW91c0RhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocGFnaW5hdGlvbkFyZ3NSZWYuY3VycmVudC5wYWdlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhLCBpc0xvYWRpbmc6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3Igd2Uga25vdyBpdCdzIGFuIGFycmF5IGhlcmVcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiAocHJldmlvdXNEYXRhLmRhdGEgfHwgW10pPy5jb25jYXQoZGF0YSksIGlzTG9hZGluZzogZmFsc2UgfTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgKGVycm9yOiB1bmtub3duKSA9PiB7XG4gICAgICAgICAgICBoYXNNb3JlUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgICAgfSxcbiAgICAgICAgKSBhcyBQcm9taXNlPFVud3JhcFJldHVybjxUPj47XG4gICAgICB9XG5cbiAgICAgIHVzZVBhZ2luYXRpb25SZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHByb21pc2VPclBhZ2luYXRlZFByb21pc2UudGhlbigoZGF0YTogVW53cmFwUmV0dXJuPFQ+KSA9PiB7XG4gICAgICAgIGlmIChjYWxsSWQgPT09IGxhc3RDYWxsSWQuY3VycmVudCkge1xuICAgICAgICAgIGlmIChsYXRlc3RPbkRhdGEuY3VycmVudCkge1xuICAgICAgICAgICAgbGF0ZXN0T25EYXRhLmN1cnJlbnQoZGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldCh7IGRhdGEsIGlzTG9hZGluZzogZmFsc2UgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0sIGhhbmRsZUVycm9yKSBhcyBQcm9taXNlPFVud3JhcFJldHVybjxUPj47XG4gICAgfSxcbiAgICBbXG4gICAgICBsYXRlc3RPbkRhdGEsXG4gICAgICBsYXRlc3RPbkVycm9yLFxuICAgICAgbGF0ZXN0QXJncyxcbiAgICAgIGZuUmVmLFxuICAgICAgc2V0LFxuICAgICAgbGF0ZXN0Q2FsbGJhY2ssXG4gICAgICBsYXRlc3RPbldpbGxFeGVjdXRlLFxuICAgICAgcGFnaW5hdGlvbkFyZ3NSZWYsXG4gICAgICBsYXRlc3RGYWlsdXJlVG9hc3QsXG4gICAgICBhYm9ydCxcbiAgICBdLFxuICApO1xuXG4gIGxhdGVzdENhbGxiYWNrLmN1cnJlbnQgPSBjYWxsYmFjaztcblxuICBjb25zdCByZXZhbGlkYXRlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIC8vIHJlc2V0IHRoZSBwYWdpbmF0aW9uXG4gICAgcGFnaW5hdGlvbkFyZ3NSZWYuY3VycmVudCA9IHsgcGFnZTogMCB9O1xuXG4gICAgY29uc3QgYXJncyA9IChsYXRlc3RBcmdzLmN1cnJlbnQgfHwgW10pIGFzIFBhcmFtZXRlcnM8VD47XG4gICAgcmV0dXJuIGNhbGxiYWNrKC4uLmFyZ3MpO1xuICB9LCBbY2FsbGJhY2ssIGxhdGVzdEFyZ3NdKTtcblxuICBjb25zdCBtdXRhdGUgPSB1c2VDYWxsYmFjazxNdXRhdGVQcm9taXNlPEF3YWl0ZWQ8UmV0dXJuVHlwZTxUPj4sIHVuZGVmaW5lZD4+KFxuICAgIGFzeW5jIChhc3luY1VwZGF0ZSwgb3B0aW9ucykgPT4ge1xuICAgICAgbGV0IGRhdGFCZWZvcmVPcHRpbWlzdGljVXBkYXRlOiBBd2FpdGVkPFJldHVyblR5cGU8VD4+IHwgdW5kZWZpbmVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKG9wdGlvbnM/Lm9wdGltaXN0aWNVcGRhdGUpIHtcbiAgICAgICAgICAvLyBjYW5jZWwgdGhlIGluLWZsaWdodCByZXF1ZXN0IHRvIG1ha2Ugc3VyZSBpdCB3b24ndCBvdmVyd3JpdGUgdGhlIG9wdGltaXN0aWMgdXBkYXRlXG4gICAgICAgICAgYWJvcnQoKTtcblxuICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucz8ucm9sbGJhY2tPbkVycm9yICE9PSBcImZ1bmN0aW9uXCIgJiYgb3B0aW9ucz8ucm9sbGJhY2tPbkVycm9yICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgLy8ga2VlcCB0cmFjayBvZiB0aGUgZGF0YSBiZWZvcmUgdGhlIG9wdGltaXN0aWMgdXBkYXRlLFxuICAgICAgICAgICAgLy8gYnV0IG9ubHkgaWYgd2UgbmVlZCBpdCAoZWcuIG9ubHkgd2hlbiB3ZSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgcm9sbGJhY2sgYWZ0ZXIpXG4gICAgICAgICAgICBkYXRhQmVmb3JlT3B0aW1pc3RpY1VwZGF0ZSA9IHN0cnVjdHVyZWRDbG9uZShsYXRlc3RWYWx1ZS5jdXJyZW50Py52YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHVwZGF0ZSA9IG9wdGlvbnMub3B0aW1pc3RpY1VwZGF0ZTtcbiAgICAgICAgICBzZXQoKHByZXZTdGF0ZSkgPT4gKHsgLi4ucHJldlN0YXRlLCBkYXRhOiB1cGRhdGUocHJldlN0YXRlLmRhdGEpIH0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgYXN5bmNVcGRhdGU7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zPy5yb2xsYmFja09uRXJyb3IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGNvbnN0IHVwZGF0ZSA9IG9wdGlvbnMucm9sbGJhY2tPbkVycm9yO1xuICAgICAgICAgIHNldCgocHJldlN0YXRlKSA9PiAoeyAuLi5wcmV2U3RhdGUsIGRhdGE6IHVwZGF0ZShwcmV2U3RhdGUuZGF0YSkgfSkpO1xuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnM/Lm9wdGltaXN0aWNVcGRhdGUgJiYgb3B0aW9ucz8ucm9sbGJhY2tPbkVycm9yICE9PSBmYWxzZSkge1xuICAgICAgICAgIHNldCgocHJldlN0YXRlKSA9PiAoeyAuLi5wcmV2U3RhdGUsIGRhdGE6IGRhdGFCZWZvcmVPcHRpbWlzdGljVXBkYXRlIH0pKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAob3B0aW9ucz8uc2hvdWxkUmV2YWxpZGF0ZUFmdGVyICE9PSBmYWxzZSkge1xuICAgICAgICAgIGlmIChlbnZpcm9ubWVudC5sYXVuY2hUeXBlID09PSBMYXVuY2hUeXBlLkJhY2tncm91bmQgfHwgZW52aXJvbm1lbnQuY29tbWFuZE1vZGUgPT09IFwibWVudS1iYXJcIikge1xuICAgICAgICAgICAgLy8gd2hlbiBpbiB0aGUgYmFja2dyb3VuZCBvciBpbiBhIG1lbnUgYmFyLCB3ZSBhcmUgZ29pbmcgdG8gYXdhaXQgdGhlIHJldmFsaWRhdGlvblxuICAgICAgICAgICAgLy8gdG8gbWFrZSBzdXJlIHdlIGdldCB0aGUgcmlnaHQgZGF0YSBhdCB0aGUgZW5kIG9mIHRoZSBtdXRhdGlvblxuICAgICAgICAgICAgYXdhaXQgcmV2YWxpZGF0ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXZhbGlkYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBbcmV2YWxpZGF0ZSwgbGF0ZXN0VmFsdWUsIHNldCwgYWJvcnRdLFxuICApO1xuXG4gIGNvbnN0IG9uTG9hZE1vcmUgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgcGFnaW5hdGlvbkFyZ3NSZWYuY3VycmVudC5wYWdlICs9IDE7XG4gICAgY29uc3QgYXJncyA9IChsYXRlc3RBcmdzLmN1cnJlbnQgfHwgW10pIGFzIFBhcmFtZXRlcnM8VD47XG4gICAgY2FsbGJhY2soLi4uYXJncyk7XG4gIH0sIFtwYWdpbmF0aW9uQXJnc1JlZiwgbGF0ZXN0QXJncywgY2FsbGJhY2tdKTtcblxuICAvLyByZXZhbGlkYXRlIHdoZW4gdGhlIGFyZ3MgY2hhbmdlXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gcmVzZXQgdGhlIHBhZ2luYXRpb25cbiAgICBwYWdpbmF0aW9uQXJnc1JlZi5jdXJyZW50ID0geyBwYWdlOiAwIH07XG5cbiAgICBpZiAob3B0aW9ucz8uZXhlY3V0ZSAhPT0gZmFsc2UpIHtcbiAgICAgIGNhbGxiYWNrKC4uLigoYXJncyB8fCBbXSkgYXMgUGFyYW1ldGVyczxUPikpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBjYW5jZWwgdGhlIHByZXZpb3VzIHJlcXVlc3QgaWYgd2UgZG9uJ3Qgd2FudCB0byBleGVjdXRlIGFueW1vcmVcbiAgICAgIGFib3J0KCk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW3VzZURlZXBNZW1vKFthcmdzLCBvcHRpb25zPy5leGVjdXRlLCBjYWxsYmFja10pLCBsYXRlc3RBYm9ydGFibGUsIHBhZ2luYXRpb25BcmdzUmVmXSk7XG5cbiAgLy8gYWJvcnQgcmVxdWVzdCB3aGVuIHVubW91bnRpbmdcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgYWJvcnQoKTtcbiAgICB9O1xuICB9LCBbYWJvcnRdKTtcblxuICAvLyB3ZSBvbmx5IHdhbnQgdG8gc2hvdyB0aGUgbG9hZGluZyBpbmRpY2F0b3IgaWYgdGhlIHByb21pc2UgaXMgZXhlY3V0aW5nXG4gIGNvbnN0IGlzTG9hZGluZyA9IG9wdGlvbnM/LmV4ZWN1dGUgIT09IGZhbHNlID8gc3RhdGUuaXNMb2FkaW5nIDogZmFsc2U7XG5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBsb2FkaW5nIGlzIGhhcyBzb21lIGZpeGVkIHZhbHVlIGluIHRoZSBlbnVtIHdoaWNoXG4gIGNvbnN0IHN0YXRlV2l0aExvYWRpbmdGaXhlZDogQXN5bmNTdGF0ZTxBd2FpdGVkPFJldHVyblR5cGU8VD4+PiA9IHsgLi4uc3RhdGUsIGlzTG9hZGluZyB9O1xuXG4gIGNvbnN0IHBhZ2luYXRpb24gPSB1c2VQYWdpbmF0aW9uUmVmLmN1cnJlbnRcbiAgICA/IHtcbiAgICAgICAgcGFnZVNpemU6IHBhZ2VTaXplUmVmLmN1cnJlbnQsXG4gICAgICAgIGhhc01vcmU6IGhhc01vcmVSZWYuY3VycmVudCxcbiAgICAgICAgb25Mb2FkTW9yZSxcbiAgICAgIH1cbiAgICA6IHVuZGVmaW5lZDtcblxuICByZXR1cm4geyAuLi5zdGF0ZVdpdGhMb2FkaW5nRml4ZWQsIHJldmFsaWRhdGUsIG11dGF0ZSwgcGFnaW5hdGlvbiB9O1xufVxuXG4vKiogQmluZCB0aGUgZm4gaWYgaXQncyBhIFByb21pc2UgbWV0aG9kICovXG5mdW5jdGlvbiBiaW5kUHJvbWlzZUlmTmVlZGVkPFQ+KGZuOiBUKTogVCB7XG4gIGlmIChmbiA9PT0gKFByb21pc2UuYWxsIGFzIGFueSkpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRoaXMgaXMgZmluZVxuICAgIHJldHVybiBmbi5iaW5kKFByb21pc2UpO1xuICB9XG4gIGlmIChmbiA9PT0gKFByb21pc2UucmFjZSBhcyBhbnkpKSB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciB0aGlzIGlzIGZpbmVcbiAgICByZXR1cm4gZm4uYmluZChQcm9taXNlKTtcbiAgfVxuICBpZiAoZm4gPT09IChQcm9taXNlLnJlc29sdmUgYXMgYW55KSkge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdGhpcyBpcyBmaW5lXG4gICAgcmV0dXJuIGZuLmJpbmQoUHJvbWlzZSBhcyBhbnkpO1xuICB9XG4gIGlmIChmbiA9PT0gKFByb21pc2UucmVqZWN0IGFzIGFueSkpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRoaXMgaXMgZmluZVxuICAgIHJldHVybiBmbi5iaW5kKFByb21pc2UpO1xuICB9XG4gIHJldHVybiBmbjtcbn1cbiIsICJpbXBvcnQgeyB1c2VSZWYsIHVzZU1lbW8gfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGRlcXVhbCB9IGZyb20gXCJkZXF1YWwvbGl0ZVwiO1xuXG4vKipcbiAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWUgdG8gYmUgbWVtb2l6ZWQgKHVzdWFsbHkgYSBkZXBlbmRlbmN5IGxpc3QpXG4gKiBAcmV0dXJucyBhIG1lbW9pemVkIHZlcnNpb24gb2YgdGhlIHZhbHVlIGFzIGxvbmcgYXMgaXQgcmVtYWlucyBkZWVwbHkgZXF1YWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZURlZXBNZW1vPFQ+KHZhbHVlOiBUKSB7XG4gIGNvbnN0IHJlZiA9IHVzZVJlZjxUPih2YWx1ZSk7XG4gIGNvbnN0IHNpZ25hbFJlZiA9IHVzZVJlZjxudW1iZXI+KDApO1xuXG4gIGlmICghZGVxdWFsKHZhbHVlLCByZWYuY3VycmVudCkpIHtcbiAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICAgIHNpZ25hbFJlZi5jdXJyZW50ICs9IDE7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIHJldHVybiB1c2VNZW1vKCgpID0+IHJlZi5jdXJyZW50LCBbc2lnbmFsUmVmLmN1cnJlbnRdKTtcbn1cbiIsICJpbXBvcnQgeyB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBsYXRlc3Qgc3RhdGUuXG4gKlxuICogVGhpcyBpcyBtb3N0bHkgdXNlZnVsIHRvIGdldCBhY2Nlc3MgdG8gdGhlIGxhdGVzdCB2YWx1ZSBvZiBzb21lIHByb3BzIG9yIHN0YXRlIGluc2lkZSBhbiBhc3luY2hyb25vdXMgY2FsbGJhY2ssIGluc3RlYWQgb2YgdGhhdCB2YWx1ZSBhdCB0aGUgdGltZSB0aGUgY2FsbGJhY2sgd2FzIGNyZWF0ZWQgZnJvbS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUxhdGVzdDxUPih2YWx1ZTogVCk6IHsgcmVhZG9ubHkgY3VycmVudDogVCB9IHtcbiAgY29uc3QgcmVmID0gdXNlUmVmKHZhbHVlKTtcbiAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgcmV0dXJuIHJlZjtcbn1cbiIsICJpbXBvcnQgKiBhcyBmcyBmcm9tIFwibm9kZTpmc1wiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwibm9kZTpwYXRoXCI7XG5pbXBvcnQgeyBDbGlwYm9hcmQsIGVudmlyb25tZW50LCBvcGVuLCBUb2FzdCwgc2hvd1RvYXN0IH0gZnJvbSBcIkByYXljYXN0L2FwaVwiO1xuXG4vKipcbiAqIFNob3dzIGEgZmFpbHVyZSBUb2FzdCBmb3IgYSBnaXZlbiBFcnJvci5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgc2hvd0hVRCB9IGZyb20gXCJAcmF5Y2FzdC9hcGlcIjtcbiAqIGltcG9ydCB7IHJ1bkFwcGxlU2NyaXB0LCBzaG93RmFpbHVyZVRvYXN0IH0gZnJvbSBcIkByYXljYXN0L3V0aWxzXCI7XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gKCkge1xuICogICB0cnkge1xuICogICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJ1bkFwcGxlU2NyaXB0KFxuICogICAgICAgYFxuICogICAgICAgb24gcnVuIGFyZ3ZcbiAqICAgICAgICAgcmV0dXJuIFwiaGVsbG8sIFwiICYgaXRlbSAxIG9mIGFyZ3YgJiBcIi5cIlxuICogICAgICAgZW5kIHJ1blxuICogICAgICAgYCxcbiAqICAgICAgIFtcIndvcmxkXCJdXG4gKiAgICAgKTtcbiAqICAgICBhd2FpdCBzaG93SFVEKHJlcyk7XG4gKiAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gKiAgICAgc2hvd0ZhaWx1cmVUb2FzdChlcnJvciwgeyB0aXRsZTogXCJDb3VsZCBub3QgcnVuIEFwcGxlU2NyaXB0XCIgfSk7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2hvd0ZhaWx1cmVUb2FzdChcbiAgZXJyb3I6IHVua25vd24sXG4gIG9wdGlvbnM/OiBQYXJ0aWFsPFBpY2s8VG9hc3QuT3B0aW9ucywgXCJ0aXRsZVwiIHwgXCJwcmltYXJ5QWN0aW9uXCIgfCBcIm1lc3NhZ2VcIj4+LFxuKSB7XG4gIGNvbnN0IG1lc3NhZ2UgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcik7XG4gIHJldHVybiBzaG93VG9hc3Qoe1xuICAgIHN0eWxlOiBUb2FzdC5TdHlsZS5GYWlsdXJlLFxuICAgIHRpdGxlOiBvcHRpb25zPy50aXRsZSA/PyBcIlNvbWV0aGluZyB3ZW50IHdyb25nXCIsXG4gICAgbWVzc2FnZTogb3B0aW9ucz8ubWVzc2FnZSA/PyBtZXNzYWdlLFxuICAgIHByaW1hcnlBY3Rpb246IG9wdGlvbnM/LnByaW1hcnlBY3Rpb24gPz8gaGFuZGxlRXJyb3JUb2FzdEFjdGlvbihlcnJvciksXG4gICAgc2Vjb25kYXJ5QWN0aW9uOiBvcHRpb25zPy5wcmltYXJ5QWN0aW9uID8gaGFuZGxlRXJyb3JUb2FzdEFjdGlvbihlcnJvcikgOiB1bmRlZmluZWQsXG4gIH0pO1xufVxuXG5jb25zdCBoYW5kbGVFcnJvclRvYXN0QWN0aW9uID0gKGVycm9yOiB1bmtub3duKTogVG9hc3QuQWN0aW9uT3B0aW9ucyA9PiB7XG4gIGxldCBwcml2YXRlRXh0ZW5zaW9uID0gdHJ1ZTtcbiAgbGV0IHRpdGxlID0gXCJbRXh0ZW5zaW9uIE5hbWVdLi4uXCI7XG4gIGxldCBleHRlbnNpb25VUkwgPSBcIlwiO1xuICB0cnkge1xuICAgIGNvbnN0IHBhY2thZ2VKU09OID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMocGF0aC5qb2luKGVudmlyb25tZW50LmFzc2V0c1BhdGgsIFwiLi5cIiwgXCJwYWNrYWdlLmpzb25cIiksIFwidXRmOFwiKSk7XG4gICAgdGl0bGUgPSBgWyR7cGFja2FnZUpTT04udGl0bGV9XS4uLmA7XG4gICAgZXh0ZW5zaW9uVVJMID0gYGh0dHBzOi8vcmF5Y2FzdC5jb20vJHtwYWNrYWdlSlNPTi5vd25lciB8fCBwYWNrYWdlSlNPTi5hdXRob3J9LyR7cGFja2FnZUpTT04ubmFtZX1gO1xuICAgIGlmICghcGFja2FnZUpTT04ub3duZXIgfHwgcGFja2FnZUpTT04uYWNjZXNzID09PSBcInB1YmxpY1wiKSB7XG4gICAgICBwcml2YXRlRXh0ZW5zaW9uID0gZmFsc2U7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBuby1vcFxuICB9XG5cbiAgLy8gaWYgaXQncyBhIHByaXZhdGUgZXh0ZW5zaW9uLCB3ZSBjYW4ndCBjb25zdHJ1Y3QgdGhlIFVSTCB0byByZXBvcnQgdGhlIGVycm9yXG4gIC8vIHNvIHdlIGZhbGxiYWNrIHRvIGNvcHlpbmcgdGhlIGVycm9yIHRvIHRoZSBjbGlwYm9hcmRcbiAgY29uc3QgZmFsbGJhY2sgPSBlbnZpcm9ubWVudC5pc0RldmVsb3BtZW50IHx8IHByaXZhdGVFeHRlbnNpb247XG5cbiAgY29uc3Qgc3RhY2sgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3I/LnN0YWNrIHx8IGVycm9yPy5tZXNzYWdlIHx8IFwiXCIgOiBTdHJpbmcoZXJyb3IpO1xuXG4gIHJldHVybiB7XG4gICAgdGl0bGU6IGZhbGxiYWNrID8gXCJDb3B5IExvZ3NcIiA6IFwiUmVwb3J0IEVycm9yXCIsXG4gICAgb25BY3Rpb24odG9hc3QpIHtcbiAgICAgIHRvYXN0LmhpZGUoKTtcbiAgICAgIGlmIChmYWxsYmFjaykge1xuICAgICAgICBDbGlwYm9hcmQuY29weShzdGFjayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcGVuKFxuICAgICAgICAgIGBodHRwczovL2dpdGh1Yi5jb20vcmF5Y2FzdC9leHRlbnNpb25zL2lzc3Vlcy9uZXc/JmxhYmVscz1leHRlbnNpb24lMkNidWcmdGVtcGxhdGU9ZXh0ZW5zaW9uX2J1Z19yZXBvcnQueW1sJnRpdGxlPSR7ZW5jb2RlVVJJQ29tcG9uZW50KFxuICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgKX0mZXh0ZW5zaW9uLXVybD0ke2VuY29kZVVSSShleHRlbnNpb25VUkwpfSZkZXNjcmlwdGlvbj0ke2VuY29kZVVSSUNvbXBvbmVudChcbiAgICAgICAgICAgIGAjIyMjIEVycm9yOlxuXFxgXFxgXFxgXG4ke3N0YWNrfVxuXFxgXFxgXFxgXG5gLFxuICAgICAgICAgICl9YCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufTtcbiIsICJpbXBvcnQgeyB1c2VDYWxsYmFjaywgRGlzcGF0Y2gsIFNldFN0YXRlQWN0aW9uLCB1c2VTeW5jRXh0ZXJuYWxTdG9yZSwgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQ2FjaGUgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG5pbXBvcnQgeyB1c2VMYXRlc3QgfSBmcm9tIFwiLi91c2VMYXRlc3RcIjtcbmltcG9ydCB7IHJlcGxhY2VyLCByZXZpdmVyIH0gZnJvbSBcIi4vaGVscGVyc1wiO1xuXG5jb25zdCByb290Q2FjaGUgPSAvKiAjX19QVVJFX18gKi8gU3ltYm9sKFwiY2FjaGUgd2l0aG91dCBuYW1lc3BhY2VcIik7XG5jb25zdCBjYWNoZU1hcCA9IC8qICNfX1BVUkVfXyAqLyBuZXcgTWFwPHN0cmluZyB8IHN5bWJvbCwgQ2FjaGU+KCk7XG5cbi8qKlxuICogUmV0dXJucyBhIHN0YXRlZnVsIHZhbHVlLCBhbmQgYSBmdW5jdGlvbiB0byB1cGRhdGUgaXQuIFRoZSB2YWx1ZSB3aWxsIGJlIGtlcHQgYmV0d2VlbiBjb21tYW5kIHJ1bnMuXG4gKlxuICogQHJlbWFyayBUaGUgdmFsdWUgbmVlZHMgdG8gYmUgSlNPTiBzZXJpYWxpemFibGUuXG4gKlxuICogQHBhcmFtIGtleSAtIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgc3RhdGUuIFRoaXMgY2FuIGJlIHVzZWQgdG8gc2hhcmUgdGhlIHN0YXRlIGFjcm9zcyBjb21wb25lbnRzIGFuZC9vciBjb21tYW5kcy5cbiAqIEBwYXJhbSBpbml0aWFsU3RhdGUgLSBUaGUgaW5pdGlhbCB2YWx1ZSBvZiB0aGUgc3RhdGUgaWYgdGhlcmUgYXJlbid0IGFueSBpbiB0aGUgQ2FjaGUgeWV0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQ2FjaGVkU3RhdGU8VD4oXG4gIGtleTogc3RyaW5nLFxuICBpbml0aWFsU3RhdGU6IFQsXG4gIGNvbmZpZz86IHsgY2FjaGVOYW1lc3BhY2U/OiBzdHJpbmcgfSxcbik6IFtULCBEaXNwYXRjaDxTZXRTdGF0ZUFjdGlvbjxUPj5dO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUNhY2hlZFN0YXRlPFQgPSB1bmRlZmluZWQ+KGtleTogc3RyaW5nKTogW1QgfCB1bmRlZmluZWQsIERpc3BhdGNoPFNldFN0YXRlQWN0aW9uPFQgfCB1bmRlZmluZWQ+Pl07XG5leHBvcnQgZnVuY3Rpb24gdXNlQ2FjaGVkU3RhdGU8VD4oXG4gIGtleTogc3RyaW5nLFxuICBpbml0aWFsU3RhdGU/OiBULFxuICBjb25maWc/OiB7IGNhY2hlTmFtZXNwYWNlPzogc3RyaW5nIH0sXG4pOiBbVCwgRGlzcGF0Y2g8U2V0U3RhdGVBY3Rpb248VD4+XSB7XG4gIGNvbnN0IGNhY2hlS2V5ID0gY29uZmlnPy5jYWNoZU5hbWVzcGFjZSB8fCByb290Q2FjaGU7XG4gIGNvbnN0IGNhY2hlID1cbiAgICBjYWNoZU1hcC5nZXQoY2FjaGVLZXkpIHx8IGNhY2hlTWFwLnNldChjYWNoZUtleSwgbmV3IENhY2hlKHsgbmFtZXNwYWNlOiBjb25maWc/LmNhY2hlTmFtZXNwYWNlIH0pKS5nZXQoY2FjaGVLZXkpO1xuXG4gIGlmICghY2FjaGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGNhY2hlXCIpO1xuICB9XG5cbiAgY29uc3Qga2V5UmVmID0gdXNlTGF0ZXN0KGtleSk7XG4gIGNvbnN0IGluaXRpYWxWYWx1ZVJlZiA9IHVzZUxhdGVzdChpbml0aWFsU3RhdGUpO1xuXG4gIGNvbnN0IGNhY2hlZFN0YXRlID0gdXNlU3luY0V4dGVybmFsU3RvcmUoY2FjaGUuc3Vic2NyaWJlLCAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5UmVmLmN1cnJlbnQpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiQ291bGQgbm90IGdldCBDYWNoZSBkYXRhOlwiLCBlcnJvcik7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3Qgc3RhdGUgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIGNhY2hlZFN0YXRlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAoY2FjaGVkU3RhdGUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGNhY2hlZFN0YXRlLCByZXZpdmVyKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyB0aGUgZGF0YSBnb3QgY29ycnVwdGVkIHNvbWVob3dcbiAgICAgICAgY29uc29sZS53YXJuKFwiVGhlIGNhY2hlZCBkYXRhIGlzIGNvcnJ1cHRlZFwiLCBlcnIpO1xuICAgICAgICByZXR1cm4gaW5pdGlhbFZhbHVlUmVmLmN1cnJlbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBpbml0aWFsVmFsdWVSZWYuY3VycmVudDtcbiAgICB9XG4gIH0sIFtjYWNoZWRTdGF0ZSwgaW5pdGlhbFZhbHVlUmVmXSk7XG5cbiAgY29uc3Qgc3RhdGVSZWYgPSB1c2VMYXRlc3Qoc3RhdGUpO1xuXG4gIGNvbnN0IHNldFN0YXRlQW5kQ2FjaGUgPSB1c2VDYWxsYmFjayhcbiAgICAodXBkYXRlcjogU2V0U3RhdGVBY3Rpb248VD4pID0+IHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVFMgc3RydWdnbGVzIHRvIGluZmVyIHRoZSB0eXBlcyBhcyBUIGNvdWxkIHBvdGVudGlhbGx5IGJlIGEgZnVuY3Rpb25cbiAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdHlwZW9mIHVwZGF0ZXIgPT09IFwiZnVuY3Rpb25cIiA/IHVwZGF0ZXIoc3RhdGVSZWYuY3VycmVudCkgOiB1cGRhdGVyO1xuICAgICAgaWYgKHR5cGVvZiBuZXdWYWx1ZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBjYWNoZS5zZXQoa2V5UmVmLmN1cnJlbnQsIFwidW5kZWZpbmVkXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc3RyaW5naWZpZWRWYWx1ZSA9IEpTT04uc3RyaW5naWZ5KG5ld1ZhbHVlLCByZXBsYWNlcik7XG4gICAgICAgIGNhY2hlLnNldChrZXlSZWYuY3VycmVudCwgc3RyaW5naWZpZWRWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3VmFsdWU7XG4gICAgfSxcbiAgICBbY2FjaGUsIGtleVJlZiwgc3RhdGVSZWZdLFxuICApO1xuXG4gIHJldHVybiBbc3RhdGUsIHNldFN0YXRlQW5kQ2FjaGVdO1xufVxuIiwgImltcG9ydCBjcnlwdG8gZnJvbSBcIm5vZGU6Y3J5cHRvXCI7XG5pbXBvcnQgeyB0eXBlSGFzaGVyIH0gZnJvbSBcIi4vdmVuZG9ycy90eXBlLWhhc2hlclwiO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2VyKHRoaXM6IGFueSwga2V5OiBzdHJpbmcsIF92YWx1ZTogdW5rbm93bikge1xuICBjb25zdCB2YWx1ZSA9IHRoaXNba2V5XTtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgIHJldHVybiBgX19yYXljYXN0X2NhY2hlZF9kYXRlX18ke3ZhbHVlLnRvU3RyaW5nKCl9YDtcbiAgfVxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgIHJldHVybiBgX19yYXljYXN0X2NhY2hlZF9idWZmZXJfXyR7dmFsdWUudG9TdHJpbmcoXCJiYXNlNjRcIil9YDtcbiAgfVxuICByZXR1cm4gX3ZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmV2aXZlcihfa2V5OiBzdHJpbmcsIHZhbHVlOiB1bmtub3duKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUuc3RhcnRzV2l0aChcIl9fcmF5Y2FzdF9jYWNoZWRfZGF0ZV9fXCIpKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHZhbHVlLnJlcGxhY2UoXCJfX3JheWNhc3RfY2FjaGVkX2RhdGVfX1wiLCBcIlwiKSk7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZS5zdGFydHNXaXRoKFwiX19yYXljYXN0X2NhY2hlZF9idWZmZXJfX1wiKSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZS5yZXBsYWNlKFwiX19yYXljYXN0X2NhY2hlZF9idWZmZXJfX1wiLCBcIlwiKSwgXCJiYXNlNjRcIik7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzaChvYmplY3Q6IGFueSkge1xuICBjb25zdCBoYXNoaW5nU3RyZWFtID0gY3J5cHRvLmNyZWF0ZUhhc2goXCJzaGExXCIpO1xuICBjb25zdCBoYXNoZXIgPSB0eXBlSGFzaGVyKGhhc2hpbmdTdHJlYW0pO1xuICBoYXNoZXIuZGlzcGF0Y2gob2JqZWN0KTtcblxuICByZXR1cm4gaGFzaGluZ1N0cmVhbS5kaWdlc3QoXCJoZXhcIik7XG59XG4iLCAiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhcyAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuaW1wb3J0IGNyeXB0byBmcm9tIFwibm9kZTpjcnlwdG9cIjtcblxuLyoqIENoZWNrIGlmIHRoZSBnaXZlbiBmdW5jdGlvbiBpcyBhIG5hdGl2ZSBmdW5jdGlvbiAqL1xuZnVuY3Rpb24gaXNOYXRpdmVGdW5jdGlvbihmOiBhbnkpIHtcbiAgaWYgKHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgZXhwID0gL15mdW5jdGlvblxccytcXHcqXFxzKlxcKFxccypcXClcXHMqe1xccytcXFtuYXRpdmUgY29kZVxcXVxccyt9JC9pO1xuICByZXR1cm4gZXhwLmV4ZWMoRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZikpICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiBoYXNoUmVwbGFjZXIodmFsdWU6IGFueSk6IHN0cmluZyB7XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcykge1xuICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR5cGVIYXNoZXIoXG4gIHdyaXRlVG86XG4gICAgfCBjcnlwdG8uSGFzaFxuICAgIHwge1xuICAgICAgICBidWY6IHN0cmluZztcbiAgICAgICAgd3JpdGU6IChiOiBhbnkpID0+IHZvaWQ7XG4gICAgICAgIGVuZDogKGI6IGFueSkgPT4gdm9pZDtcbiAgICAgICAgcmVhZDogKCkgPT4gc3RyaW5nO1xuICAgICAgfSxcbiAgY29udGV4dDogYW55W10gPSBbXSxcbikge1xuICBmdW5jdGlvbiB3cml0ZShzdHI6IHN0cmluZykge1xuICAgIGlmIChcInVwZGF0ZVwiIGluIHdyaXRlVG8pIHtcbiAgICAgIHJldHVybiB3cml0ZVRvLnVwZGF0ZShzdHIsIFwidXRmOFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHdyaXRlVG8ud3JpdGUoc3RyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGRpc3BhdGNoOiBmdW5jdGlvbiAodmFsdWU6IGFueSkge1xuICAgICAgdmFsdWUgPSBoYXNoUmVwbGFjZXIodmFsdWUpO1xuXG4gICAgICBjb25zdCB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHRoaXNbXCJfbnVsbFwiXSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0aGlzW1wiX1wiICsgdHlwZV0odmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgX29iamVjdDogZnVuY3Rpb24gKG9iamVjdDogYW55KSB7XG4gICAgICBjb25zdCBwYXR0ZXJuID0gL1xcW29iamVjdCAoLiopXFxdL2k7XG4gICAgICBjb25zdCBvYmpTdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KTtcbiAgICAgIGxldCBvYmpUeXBlID0gcGF0dGVybi5leGVjKG9ialN0cmluZyk/LlsxXSA/PyBcInVua25vd246W1wiICsgb2JqU3RyaW5nICsgXCJdXCI7XG4gICAgICBvYmpUeXBlID0gb2JqVHlwZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBsZXQgb2JqZWN0TnVtYmVyID0gbnVsbCBhcyBhbnk7XG5cbiAgICAgIGlmICgob2JqZWN0TnVtYmVyID0gY29udGV4dC5pbmRleE9mKG9iamVjdCkpID49IDApIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaChcIltDSVJDVUxBUjpcIiArIG9iamVjdE51bWJlciArIFwiXVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGV4dC5wdXNoKG9iamVjdCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqZWN0KSkge1xuICAgICAgICB3cml0ZShcImJ1ZmZlcjpcIik7XG4gICAgICAgIHJldHVybiB3cml0ZShvYmplY3QudG9TdHJpbmcoXCJ1dGY4XCIpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9ialR5cGUgIT09IFwib2JqZWN0XCIgJiYgb2JqVHlwZSAhPT0gXCJmdW5jdGlvblwiICYmIG9ialR5cGUgIT09IFwiYXN5bmNmdW5jdGlvblwiKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKHRoaXNbXCJfXCIgKyBvYmpUeXBlXSkge1xuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICB0aGlzW1wiX1wiICsgb2JqVHlwZV0ob2JqZWN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gb2JqZWN0IHR5cGUgXCInICsgb2JqVHlwZSArICdcIicpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG4gICAgICAgIGtleXMgPSBrZXlzLnNvcnQoKTtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRvIGluY29ycG9yYXRlIHNwZWNpYWwgcHJvcGVydGllcywgc29cbiAgICAgICAgLy8gVHlwZXMgd2l0aCBkaWZmZXJlbnQgcHJvdG90eXBlcyB3aWxsIHByb2R1Y2VcbiAgICAgICAgLy8gYSBkaWZmZXJlbnQgaGFzaCBhbmQgb2JqZWN0cyBkZXJpdmVkIGZyb21cbiAgICAgICAgLy8gZGlmZmVyZW50IGZ1bmN0aW9ucyAoYG5ldyBGb29gLCBgbmV3IEJhcmApIHdpbGxcbiAgICAgICAgLy8gcHJvZHVjZSBkaWZmZXJlbnQgaGFzaGVzLlxuICAgICAgICAvLyBXZSBuZXZlciBkbyB0aGlzIGZvciBuYXRpdmUgZnVuY3Rpb25zIHNpbmNlIHNvbWVcbiAgICAgICAgLy8gc2VlbSB0byBicmVhayBiZWNhdXNlIG9mIHRoYXQuXG4gICAgICAgIGlmICghaXNOYXRpdmVGdW5jdGlvbihvYmplY3QpKSB7XG4gICAgICAgICAga2V5cy5zcGxpY2UoMCwgMCwgXCJwcm90b3R5cGVcIiwgXCJfX3Byb3RvX19cIiwgXCJjb25zdHJ1Y3RvclwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdyaXRlKFwib2JqZWN0OlwiICsga2V5cy5sZW5ndGggKyBcIjpcIik7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICByZXR1cm4ga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICBzZWxmLmRpc3BhdGNoKGtleSk7XG4gICAgICAgICAgd3JpdGUoXCI6XCIpO1xuICAgICAgICAgIHNlbGYuZGlzcGF0Y2gob2JqZWN0W2tleV0pO1xuICAgICAgICAgIHdyaXRlKFwiLFwiKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBfYXJyYXk6IGZ1bmN0aW9uIChhcnI6IGFueVtdLCB1bm9yZGVyZWQ6IGJvb2xlYW4pIHtcbiAgICAgIHVub3JkZXJlZCA9IHR5cGVvZiB1bm9yZGVyZWQgIT09IFwidW5kZWZpbmVkXCIgPyB1bm9yZGVyZWQgOiBmYWxzZTsgLy8gZGVmYXVsdCB0byBvcHRpb25zLnVub3JkZXJlZEFycmF5c1xuXG4gICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgIHdyaXRlKFwiYXJyYXk6XCIgKyBhcnIubGVuZ3RoICsgXCI6XCIpO1xuICAgICAgaWYgKCF1bm9yZGVyZWQgfHwgYXJyLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeTogYW55KSB7XG4gICAgICAgICAgc2VsZi5kaXNwYXRjaChlbnRyeSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIHRoZSB1bm9yZGVyZWQgY2FzZSBpcyBhIGxpdHRsZSBtb3JlIGNvbXBsaWNhdGVkOlxuICAgICAgLy8gc2luY2UgdGhlcmUgaXMgbm8gY2Fub25pY2FsIG9yZGVyaW5nIG9uIG9iamVjdHMsXG4gICAgICAvLyBpLmUuIHthOjF9IDwge2E6Mn0gYW5kIHthOjF9ID4ge2E6Mn0gYXJlIGJvdGggZmFsc2UsXG4gICAgICAvLyB3ZSBmaXJzdCBzZXJpYWxpemUgZWFjaCBlbnRyeSB1c2luZyBhIFBhc3NUaHJvdWdoIHN0cmVhbVxuICAgICAgLy8gYmVmb3JlIHNvcnRpbmcuXG4gICAgICAvLyBhbHNvOiB3ZSBjYW7igJl0IHVzZSB0aGUgc2FtZSBjb250ZXh0IGFycmF5IGZvciBhbGwgZW50cmllc1xuICAgICAgLy8gc2luY2UgdGhlIG9yZGVyIG9mIGhhc2hpbmcgc2hvdWxkICpub3QqIG1hdHRlci4gaW5zdGVhZCxcbiAgICAgIC8vIHdlIGtlZXAgdHJhY2sgb2YgdGhlIGFkZGl0aW9ucyB0byBhIGNvcHkgb2YgdGhlIGNvbnRleHQgYXJyYXlcbiAgICAgIC8vIGFuZCBhZGQgYWxsIG9mIHRoZW0gdG8gdGhlIGdsb2JhbCBjb250ZXh0IGFycmF5IHdoZW4gd2XigJlyZSBkb25lXG4gICAgICBsZXQgY29udGV4dEFkZGl0aW9uczogYW55W10gPSBbXTtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBhcnIubWFwKGZ1bmN0aW9uIChlbnRyeTogYW55KSB7XG4gICAgICAgIGNvbnN0IHN0cm0gPSBQYXNzVGhyb3VnaCgpO1xuICAgICAgICBjb25zdCBsb2NhbENvbnRleHQgPSBjb250ZXh0LnNsaWNlKCk7IC8vIG1ha2UgY29weVxuICAgICAgICBjb25zdCBoYXNoZXIgPSB0eXBlSGFzaGVyKHN0cm0sIGxvY2FsQ29udGV4dCk7XG4gICAgICAgIGhhc2hlci5kaXNwYXRjaChlbnRyeSk7XG4gICAgICAgIC8vIHRha2Ugb25seSB3aGF0IHdhcyBhZGRlZCB0byBsb2NhbENvbnRleHQgYW5kIGFwcGVuZCBpdCB0byBjb250ZXh0QWRkaXRpb25zXG4gICAgICAgIGNvbnRleHRBZGRpdGlvbnMgPSBjb250ZXh0QWRkaXRpb25zLmNvbmNhdChsb2NhbENvbnRleHQuc2xpY2UoY29udGV4dC5sZW5ndGgpKTtcbiAgICAgICAgcmV0dXJuIHN0cm0ucmVhZCgpLnRvU3RyaW5nKCk7XG4gICAgICB9KTtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0LmNvbmNhdChjb250ZXh0QWRkaXRpb25zKTtcbiAgICAgIGVudHJpZXMuc29ydCgpO1xuICAgICAgdGhpcy5fYXJyYXkoZW50cmllcywgZmFsc2UpO1xuICAgIH0sXG4gICAgX2RhdGU6IGZ1bmN0aW9uIChkYXRlOiBEYXRlKSB7XG4gICAgICB3cml0ZShcImRhdGU6XCIgKyBkYXRlLnRvSlNPTigpKTtcbiAgICB9LFxuICAgIF9zeW1ib2w6IGZ1bmN0aW9uIChzeW06IHN5bWJvbCkge1xuICAgICAgd3JpdGUoXCJzeW1ib2w6XCIgKyBzeW0udG9TdHJpbmcoKSk7XG4gICAgfSxcbiAgICBfZXJyb3I6IGZ1bmN0aW9uIChlcnI6IEVycm9yKSB7XG4gICAgICB3cml0ZShcImVycm9yOlwiICsgZXJyLnRvU3RyaW5nKCkpO1xuICAgIH0sXG4gICAgX2Jvb2xlYW46IGZ1bmN0aW9uIChib29sOiBib29sZWFuKSB7XG4gICAgICB3cml0ZShcImJvb2w6XCIgKyBib29sLnRvU3RyaW5nKCkpO1xuICAgIH0sXG4gICAgX3N0cmluZzogZnVuY3Rpb24gKHN0cmluZzogc3RyaW5nKSB7XG4gICAgICB3cml0ZShcInN0cmluZzpcIiArIHN0cmluZy5sZW5ndGggKyBcIjpcIik7XG4gICAgICB3cml0ZShzdHJpbmcudG9TdHJpbmcoKSk7XG4gICAgfSxcbiAgICBfZnVuY3Rpb246IGZ1bmN0aW9uIChmbjogYW55KSB7XG4gICAgICB3cml0ZShcImZuOlwiKTtcbiAgICAgIGlmIChpc05hdGl2ZUZ1bmN0aW9uKGZuKSkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoKFwiW25hdGl2ZV1cIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRpc3BhdGNoKGZuLnRvU3RyaW5nKCkpO1xuICAgICAgfVxuXG4gICAgICAvLyBNYWtlIHN1cmUgd2UgY2FuIHN0aWxsIGRpc3Rpbmd1aXNoIG5hdGl2ZSBmdW5jdGlvbnNcbiAgICAgIC8vIGJ5IHRoZWlyIG5hbWUsIG90aGVyd2lzZSBTdHJpbmcgYW5kIEZ1bmN0aW9uIHdpbGxcbiAgICAgIC8vIGhhdmUgdGhlIHNhbWUgaGFzaFxuICAgICAgdGhpcy5kaXNwYXRjaChcImZ1bmN0aW9uLW5hbWU6XCIgKyBTdHJpbmcoZm4ubmFtZSkpO1xuXG4gICAgICB0aGlzLl9vYmplY3QoZm4pO1xuICAgIH0sXG4gICAgX251bWJlcjogZnVuY3Rpb24gKG51bWJlcjogbnVtYmVyKSB7XG4gICAgICB3cml0ZShcIm51bWJlcjpcIiArIG51bWJlci50b1N0cmluZygpKTtcbiAgICB9LFxuICAgIF94bWw6IGZ1bmN0aW9uICh4bWw6IGFueSkge1xuICAgICAgd3JpdGUoXCJ4bWw6XCIgKyB4bWwudG9TdHJpbmcoKSk7XG4gICAgfSxcbiAgICBfbnVsbDogZnVuY3Rpb24gKCkge1xuICAgICAgd3JpdGUoXCJOdWxsXCIpO1xuICAgIH0sXG4gICAgX3VuZGVmaW5lZDogZnVuY3Rpb24gKCkge1xuICAgICAgd3JpdGUoXCJVbmRlZmluZWRcIik7XG4gICAgfSxcbiAgICBfcmVnZXhwOiBmdW5jdGlvbiAocmVnZXg6IFJlZ0V4cCkge1xuICAgICAgd3JpdGUoXCJyZWdleDpcIiArIHJlZ2V4LnRvU3RyaW5nKCkpO1xuICAgIH0sXG4gICAgX3VpbnQ4YXJyYXk6IGZ1bmN0aW9uIChhcnI6IFVpbnQ4QXJyYXkpIHtcbiAgICAgIHdyaXRlKFwidWludDhhcnJheTpcIik7XG4gICAgICB0aGlzLmRpc3BhdGNoKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycikpO1xuICAgIH0sXG4gICAgX3VpbnQ4Y2xhbXBlZGFycmF5OiBmdW5jdGlvbiAoYXJyOiBVaW50OENsYW1wZWRBcnJheSkge1xuICAgICAgd3JpdGUoXCJ1aW50OGNsYW1wZWRhcnJheTpcIik7XG4gICAgICB0aGlzLmRpc3BhdGNoKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycikpO1xuICAgIH0sXG4gICAgX2ludDhhcnJheTogZnVuY3Rpb24gKGFycjogSW50OEFycmF5KSB7XG4gICAgICB3cml0ZShcImludDhhcnJheTpcIik7XG4gICAgICB0aGlzLmRpc3BhdGNoKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycikpO1xuICAgIH0sXG4gICAgX3VpbnQxNmFycmF5OiBmdW5jdGlvbiAoYXJyOiBVaW50MTZBcnJheSkge1xuICAgICAgd3JpdGUoXCJ1aW50MTZhcnJheTpcIik7XG4gICAgICB0aGlzLmRpc3BhdGNoKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycikpO1xuICAgIH0sXG4gICAgX2ludDE2YXJyYXk6IGZ1bmN0aW9uIChhcnI6IEludDE2QXJyYXkpIHtcbiAgICAgIHdyaXRlKFwiaW50MTZhcnJheTpcIik7XG4gICAgICB0aGlzLmRpc3BhdGNoKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycikpO1xuICAgIH0sXG4gICAgX3VpbnQzMmFycmF5OiBmdW5jdGlvbiAoYXJyOiBVaW50MzJBcnJheSkge1xuICAgICAgd3JpdGUoXCJ1aW50MzJhcnJheTpcIik7XG4gICAgICB0aGlzLmRpc3BhdGNoKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycikpO1xuICAgIH0sXG4gICAgX2ludDMyYXJyYXk6IGZ1bmN0aW9uIChhcnI6IEludDMyQXJyYXkpIHtcbiAgICAgIHdyaXRlKFwiaW50MzJhcnJheTpcIik7XG4gICAgICB0aGlzLmRpc3BhdGNoKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycikpO1xuICAgIH0sXG4gICAgX2Zsb2F0MzJhcnJheTogZnVuY3Rpb24gKGFycjogRmxvYXQzMkFycmF5KSB7XG4gICAgICB3cml0ZShcImZsb2F0MzJhcnJheTpcIik7XG4gICAgICB0aGlzLmRpc3BhdGNoKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycikpO1xuICAgIH0sXG4gICAgX2Zsb2F0NjRhcnJheTogZnVuY3Rpb24gKGFycjogRmxvYXQ2NEFycmF5KSB7XG4gICAgICB3cml0ZShcImZsb2F0NjRhcnJheTpcIik7XG4gICAgICB0aGlzLmRpc3BhdGNoKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycikpO1xuICAgIH0sXG4gICAgX2FycmF5YnVmZmVyOiBmdW5jdGlvbiAoYXJyOiBBcnJheUJ1ZmZlcikge1xuICAgICAgd3JpdGUoXCJhcnJheWJ1ZmZlcjpcIik7XG4gICAgICB0aGlzLmRpc3BhdGNoKG5ldyBVaW50OEFycmF5KGFycikpO1xuICAgIH0sXG4gICAgX3VybDogZnVuY3Rpb24gKHVybDogVVJMKSB7XG4gICAgICB3cml0ZShcInVybDpcIiArIHVybC50b1N0cmluZygpKTtcbiAgICB9LFxuICAgIF9tYXA6IGZ1bmN0aW9uIChtYXA6IE1hcDxhbnksIGFueT4pIHtcbiAgICAgIHdyaXRlKFwibWFwOlwiKTtcbiAgICAgIGNvbnN0IGFyciA9IEFycmF5LmZyb20obWFwKTtcbiAgICAgIHRoaXMuX2FycmF5KGFyciwgdHJ1ZSk7XG4gICAgfSxcbiAgICBfc2V0OiBmdW5jdGlvbiAoc2V0OiBTZXQ8YW55Pikge1xuICAgICAgd3JpdGUoXCJzZXQ6XCIpO1xuICAgICAgY29uc3QgYXJyID0gQXJyYXkuZnJvbShzZXQpO1xuICAgICAgdGhpcy5fYXJyYXkoYXJyLCB0cnVlKTtcbiAgICB9LFxuICAgIF9maWxlOiBmdW5jdGlvbiAoZmlsZTogYW55KSB7XG4gICAgICB3cml0ZShcImZpbGU6XCIpO1xuICAgICAgdGhpcy5kaXNwYXRjaChbZmlsZS5uYW1lLCBmaWxlLnNpemUsIGZpbGUudHlwZSwgZmlsZS5sYXN0TW9kaWZpZWRdKTtcbiAgICB9LFxuICAgIF9ibG9iOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgXCJIYXNoaW5nIEJsb2Igb2JqZWN0cyBpcyBjdXJyZW50bHkgbm90IHN1cHBvcnRlZFxcblwiICtcbiAgICAgICAgICBcIihzZWUgaHR0cHM6Ly9naXRodWIuY29tL3B1bGVvcy9vYmplY3QtaGFzaC9pc3N1ZXMvMjYpXFxuXCIgK1xuICAgICAgICAgICdVc2UgXCJvcHRpb25zLnJlcGxhY2VyXCIgb3IgXCJvcHRpb25zLmlnbm9yZVVua25vd25cIlxcbicsXG4gICAgICApO1xuICAgIH0sXG4gICAgX2RvbXdpbmRvdzogZnVuY3Rpb24gKCkge1xuICAgICAgd3JpdGUoXCJkb213aW5kb3dcIik7XG4gICAgfSxcbiAgICBfYmlnaW50OiBmdW5jdGlvbiAobnVtYmVyOiBiaWdpbnQpIHtcbiAgICAgIHdyaXRlKFwiYmlnaW50OlwiICsgbnVtYmVyLnRvU3RyaW5nKCkpO1xuICAgIH0sXG4gICAgLyogTm9kZS5qcyBzdGFuZGFyZCBuYXRpdmUgb2JqZWN0cyAqL1xuICAgIF9wcm9jZXNzOiBmdW5jdGlvbiAoKSB7XG4gICAgICB3cml0ZShcInByb2Nlc3NcIik7XG4gICAgfSxcbiAgICBfdGltZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdyaXRlKFwidGltZXJcIik7XG4gICAgfSxcbiAgICBfcGlwZTogZnVuY3Rpb24gKCkge1xuICAgICAgd3JpdGUoXCJwaXBlXCIpO1xuICAgIH0sXG4gICAgX3RjcDogZnVuY3Rpb24gKCkge1xuICAgICAgd3JpdGUoXCJ0Y3BcIik7XG4gICAgfSxcbiAgICBfdWRwOiBmdW5jdGlvbiAoKSB7XG4gICAgICB3cml0ZShcInVkcFwiKTtcbiAgICB9LFxuICAgIF90dHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdyaXRlKFwidHR5XCIpO1xuICAgIH0sXG4gICAgX3N0YXR3YXRjaGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICB3cml0ZShcInN0YXR3YXRjaGVyXCIpO1xuICAgIH0sXG4gICAgX3NlY3VyZWNvbnRleHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdyaXRlKFwic2VjdXJlY29udGV4dFwiKTtcbiAgICB9LFxuICAgIF9jb25uZWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICB3cml0ZShcImNvbm5lY3Rpb25cIik7XG4gICAgfSxcbiAgICBfemxpYjogZnVuY3Rpb24gKCkge1xuICAgICAgd3JpdGUoXCJ6bGliXCIpO1xuICAgIH0sXG4gICAgX2NvbnRleHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdyaXRlKFwiY29udGV4dFwiKTtcbiAgICB9LFxuICAgIF9ub2Rlc2NyaXB0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB3cml0ZShcIm5vZGVzY3JpcHRcIik7XG4gICAgfSxcbiAgICBfaHR0cHBhcnNlcjogZnVuY3Rpb24gKCkge1xuICAgICAgd3JpdGUoXCJodHRwcGFyc2VyXCIpO1xuICAgIH0sXG4gICAgX2RhdGF2aWV3OiBmdW5jdGlvbiAoKSB7XG4gICAgICB3cml0ZShcImRhdGF2aWV3XCIpO1xuICAgIH0sXG4gICAgX3NpZ25hbDogZnVuY3Rpb24gKCkge1xuICAgICAgd3JpdGUoXCJzaWduYWxcIik7XG4gICAgfSxcbiAgICBfZnNldmVudDogZnVuY3Rpb24gKCkge1xuICAgICAgd3JpdGUoXCJmc2V2ZW50XCIpO1xuICAgIH0sXG4gICAgX3Rsc3dyYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdyaXRlKFwidGxzd3JhcFwiKTtcbiAgICB9LFxuICB9O1xufVxuXG4vLyBNaW5pLWltcGxlbWVudGF0aW9uIG9mIHN0cmVhbS5QYXNzVGhyb3VnaFxuLy8gV2UgYXJlIGZhciBmcm9tIGhhdmluZyBuZWVkIGZvciB0aGUgZnVsbCBpbXBsZW1lbnRhdGlvbiwgYW5kIHdlIGNhblxuLy8gbWFrZSBhc3N1bXB0aW9ucyBsaWtlIFwibWFueSB3cml0ZXMsIHRoZW4gb25seSBvbmUgZmluYWwgcmVhZFwiXG4vLyBhbmQgd2UgY2FuIGlnbm9yZSBlbmNvZGluZyBzcGVjaWZpY3NcbmZ1bmN0aW9uIFBhc3NUaHJvdWdoKCkge1xuICByZXR1cm4ge1xuICAgIGJ1ZjogXCJcIixcblxuICAgIHdyaXRlOiBmdW5jdGlvbiAoYjogc3RyaW5nKSB7XG4gICAgICB0aGlzLmJ1ZiArPSBiO1xuICAgIH0sXG5cbiAgICBlbmQ6IGZ1bmN0aW9uIChiOiBzdHJpbmcpIHtcbiAgICAgIHRoaXMuYnVmICs9IGI7XG4gICAgfSxcblxuICAgIHJlYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1ZjtcbiAgICB9LFxuICB9O1xufVxuIiwgImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtcbiAgRnVuY3Rpb25SZXR1cm5pbmdQcm9taXNlLFxuICBVc2VDYWNoZWRQcm9taXNlUmV0dXJuVHlwZSxcbiAgTXV0YXRlUHJvbWlzZSxcbiAgRnVuY3Rpb25SZXR1cm5pbmdQYWdpbmF0ZWRQcm9taXNlLFxuICBVbndyYXBSZXR1cm4sXG4gIFBhZ2luYXRpb25PcHRpb25zLFxufSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgdXNlQ2FjaGVkU3RhdGUgfSBmcm9tIFwiLi91c2VDYWNoZWRTdGF0ZVwiO1xuaW1wb3J0IHsgdXNlUHJvbWlzZSwgUHJvbWlzZU9wdGlvbnMgfSBmcm9tIFwiLi91c2VQcm9taXNlXCI7XG5pbXBvcnQgeyB1c2VMYXRlc3QgfSBmcm9tIFwiLi91c2VMYXRlc3RcIjtcbmltcG9ydCB7IGhhc2ggfSBmcm9tIFwiLi9oZWxwZXJzXCI7XG5cbi8vIFN5bWJvbCB0byBkaWZmZXJlbnRpYXRlIGFuIGVtcHR5IGNhY2hlIGZyb20gYHVuZGVmaW5lZGBcbmNvbnN0IGVtcHR5Q2FjaGUgPSAvKiAjX19QVVJFX18gKi8gU3ltYm9sKCk7XG5cbmV4cG9ydCB0eXBlIENhY2hlZFByb21pc2VPcHRpb25zPFxuICBUIGV4dGVuZHMgRnVuY3Rpb25SZXR1cm5pbmdQcm9taXNlIHwgRnVuY3Rpb25SZXR1cm5pbmdQYWdpbmF0ZWRQcm9taXNlLFxuICBVLFxuPiA9IFByb21pc2VPcHRpb25zPFQ+ICYge1xuICAvKipcbiAgICogVGhlIGluaXRpYWwgZGF0YSBpZiB0aGVyZSBhcmVuJ3QgYW55IGluIHRoZSBDYWNoZSB5ZXQuXG4gICAqL1xuICBpbml0aWFsRGF0YT86IFU7XG4gIC8qKlxuICAgKiBUZWxscyB0aGUgaG9vayB0byBrZWVwIHRoZSBwcmV2aW91cyByZXN1bHRzIGluc3RlYWQgb2YgcmV0dXJuaW5nIHRoZSBpbml0aWFsIHZhbHVlXG4gICAqIGlmIHRoZXJlIGFyZW4ndCBhbnkgaW4gdGhlIGNhY2hlIGZvciB0aGUgbmV3IGFyZ3VtZW50cy5cbiAgICogVGhpcyBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIHdoZW4gdXNlZCBmb3IgZGF0YSBmb3IgYSBMaXN0IHRvIGF2b2lkIGZsaWNrZXJpbmcuXG4gICAqL1xuICBrZWVwUHJldmlvdXNEYXRhPzogYm9vbGVhbjtcbn07XG5cbi8qKlxuICogV3JhcHMgYW4gYXN5bmNocm9ub3VzIGZ1bmN0aW9uIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgUHJvbWlzZSBpbiBhbm90aGVyIGZ1bmN0aW9uLCBhbmQgcmV0dXJucyB0aGUge0BsaW5rIEFzeW5jU3RhdGV9IGNvcnJlc3BvbmRpbmcgdG8gdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZnVuY3Rpb24uIFRoZSBsYXN0IHZhbHVlIHdpbGwgYmUga2VwdCBiZXR3ZWVuIGNvbW1hbmQgcnVucy5cbiAqXG4gKiBAcmVtYXJrIFRoaXMgb3ZlcmxvYWQgc2hvdWxkIGJlIHVzZWQgd2hlbiB3b3JraW5nIHdpdGggcGFnaW5hdGVkIGRhdGEgc291cmNlcy5cbiAqIEByZW1hcmsgV2hlbiBwYWdpbmF0aW5nLCBvbmx5IHRoZSBmaXJzdCBwYWdlIHdpbGwgYmUgY2FjaGVkLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqIGltcG9ydCB7IHNldFRpbWVvdXQgfSBmcm9tIFwibm9kZTp0aW1lcnMvcHJvbWlzZXNcIjtcbiAqIGltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG4gKiBpbXBvcnQgeyBMaXN0IH0gZnJvbSBcIkByYXljYXN0L2FwaVwiO1xuICogaW1wb3J0IHsgdXNlQ2FjaGVkUHJvbWlzZSB9IGZyb20gXCJAcmF5Y2FzdC91dGlsc1wiO1xuICpcbiAqIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbW1hbmQoKSB7XG4gKiAgIGNvbnN0IFtzZWFyY2hUZXh0LCBzZXRTZWFyY2hUZXh0XSA9IHVzZVN0YXRlKFwiXCIpO1xuICpcbiAqICAgY29uc3QgeyBpc0xvYWRpbmcsIGRhdGEsIHBhZ2luYXRpb24gfSA9IHVzZUNhY2hlZFByb21pc2UoXG4gKiAgICAgKHNlYXJjaFRleHQ6IHN0cmluZykgPT4gYXN5bmMgKG9wdGlvbnM6IHsgcGFnZTogbnVtYmVyIH0pID0+IHtcbiAqICAgICAgIGF3YWl0IHNldFRpbWVvdXQoMjAwKTtcbiAqICAgICAgIGNvbnN0IG5ld0RhdGEgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiAyNSB9LCAoX3YsIGluZGV4KSA9PiAoe1xuICogICAgICAgICBpbmRleCxcbiAqICAgICAgICAgcGFnZTogb3B0aW9ucy5wYWdlLFxuICogICAgICAgICB0ZXh0OiBzZWFyY2hUZXh0LFxuICogICAgICAgfSkpO1xuICogICAgICAgcmV0dXJuIHsgZGF0YTogbmV3RGF0YSwgaGFzTW9yZTogb3B0aW9ucy5wYWdlIDwgMTAgfTtcbiAqICAgICB9LFxuICogICAgIFtzZWFyY2hUZXh0XSxcbiAqICAgKTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPExpc3QgaXNMb2FkaW5nPXtpc0xvYWRpbmd9IG9uU2VhcmNoVGV4dENoYW5nZT17c2V0U2VhcmNoVGV4dH0gcGFnaW5hdGlvbj17cGFnaW5hdGlvbn0+XG4gKiAgICAgICB7ZGF0YT8ubWFwKChpdGVtKSA9PiAoXG4gKiAgICAgICAgIDxMaXN0Lkl0ZW1cbiAqICAgICAgICAgICBrZXk9e2Ake2l0ZW0ucGFnZX0gJHtpdGVtLmluZGV4fSAke2l0ZW0udGV4dH1gfVxuICogICAgICAgICAgIHRpdGxlPXtgUGFnZSAke2l0ZW0ucGFnZX0gSXRlbSAke2l0ZW0uaW5kZXh9YH1cbiAqICAgICAgICAgICBzdWJ0aXRsZT17aXRlbS50ZXh0fVxuICogICAgICAgICAvPlxuICogICAgICAgKSl9XG4gKiAgICAgPC9MaXN0PlxuICogICApO1xuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VDYWNoZWRQcm9taXNlPFQgZXh0ZW5kcyBGdW5jdGlvblJldHVybmluZ1BhZ2luYXRlZFByb21pc2U8W10+PihcbiAgZm46IFQsXG4pOiBVc2VDYWNoZWRQcm9taXNlUmV0dXJuVHlwZTxVbndyYXBSZXR1cm48VD4sIHVuZGVmaW5lZD47XG5leHBvcnQgZnVuY3Rpb24gdXNlQ2FjaGVkUHJvbWlzZTxUIGV4dGVuZHMgRnVuY3Rpb25SZXR1cm5pbmdQYWdpbmF0ZWRQcm9taXNlLCBVIGV4dGVuZHMgYW55W10gPSBhbnlbXT4oXG4gIGZuOiBULFxuICBhcmdzOiBQYXJhbWV0ZXJzPFQ+LFxuICBvcHRpb25zPzogQ2FjaGVkUHJvbWlzZU9wdGlvbnM8VCwgVT4sXG4pOiBVc2VDYWNoZWRQcm9taXNlUmV0dXJuVHlwZTxVbndyYXBSZXR1cm48VD4sIFU+O1xuXG4vKipcbiAqIFdyYXBzIGFuIGFzeW5jaHJvbm91cyBmdW5jdGlvbiBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIFByb21pc2UgYW5kIHJldHVybnMgdGhlIHtAbGluayBBc3luY1N0YXRlfSBjb3JyZXNwb25kaW5nIHRvIHRoZSBleGVjdXRpb24gb2YgdGhlIGZ1bmN0aW9uLiBUaGUgbGFzdCB2YWx1ZSB3aWxsIGJlIGtlcHQgYmV0d2VlbiBjb21tYW5kIHJ1bnMuXG4gKlxuICogQHJlbWFyayBUaGUgdmFsdWUgbmVlZHMgdG8gYmUgSlNPTiBzZXJpYWxpemFibGUuXG4gKiBAcmVtYXJrIFRoZSBmdW5jdGlvbiBpcyBhc3N1bWVkIHRvIGJlIGNvbnN0YW50IChlZy4gY2hhbmdpbmcgaXQgd29uJ3QgdHJpZ2dlciBhIHJldmFsaWRhdGlvbikuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogaW1wb3J0IHsgdXNlQ2FjaGVkUHJvbWlzZSB9IGZyb20gJ0ByYXljYXN0L3V0aWxzJztcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb21tYW5kKCkge1xuICogICBjb25zdCBhYm9ydGFibGUgPSB1c2VSZWY8QWJvcnRDb250cm9sbGVyPigpO1xuICogICBjb25zdCB7IGlzTG9hZGluZywgZGF0YSwgcmV2YWxpZGF0ZSB9ID0gdXNlQ2FjaGVkUHJvbWlzZShhc3luYyAodXJsOiBzdHJpbmcpID0+IHtcbiAqICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgeyBzaWduYWw6IGFib3J0YWJsZS5jdXJyZW50Py5zaWduYWwgfSk7XG4gKiAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICogICAgIHJldHVybiByZXN1bHRcbiAqICAgfSxcbiAqICAgWydodHRwczovL2FwaS5leGFtcGxlJ10sXG4gKiAgIHtcbiAqICAgICBhYm9ydGFibGVcbiAqICAgfSk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxEZXRhaWxcbiAqICAgICAgIGlzTG9hZGluZz17aXNMb2FkaW5nfVxuICogICAgICAgbWFya2Rvd249e2RhdGF9XG4gKiAgICAgICBhY3Rpb25zPXtcbiAqICAgICAgICAgPEFjdGlvblBhbmVsPlxuICogICAgICAgICAgIDxBY3Rpb24gdGl0bGU9XCJSZWxvYWRcIiBvbkFjdGlvbj17KCkgPT4gcmV2YWxpZGF0ZSgpfSAvPlxuICogICAgICAgICA8L0FjdGlvblBhbmVsPlxuICogICAgICAgfVxuICogICAgIC8+XG4gKiAgICk7XG4gKiB9O1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VDYWNoZWRQcm9taXNlPFQgZXh0ZW5kcyBGdW5jdGlvblJldHVybmluZ1Byb21pc2U8W10+PihcbiAgZm46IFQsXG4pOiBVc2VDYWNoZWRQcm9taXNlUmV0dXJuVHlwZTxVbndyYXBSZXR1cm48VD4sIHVuZGVmaW5lZD47XG5leHBvcnQgZnVuY3Rpb24gdXNlQ2FjaGVkUHJvbWlzZTxUIGV4dGVuZHMgRnVuY3Rpb25SZXR1cm5pbmdQcm9taXNlLCBVID0gdW5kZWZpbmVkPihcbiAgZm46IFQsXG4gIGFyZ3M6IFBhcmFtZXRlcnM8VD4sXG4gIG9wdGlvbnM/OiBDYWNoZWRQcm9taXNlT3B0aW9uczxULCBVPixcbik6IFVzZUNhY2hlZFByb21pc2VSZXR1cm5UeXBlPFVud3JhcFJldHVybjxUPiwgVT47XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VDYWNoZWRQcm9taXNlPFxuICBUIGV4dGVuZHMgRnVuY3Rpb25SZXR1cm5pbmdQcm9taXNlIHwgRnVuY3Rpb25SZXR1cm5pbmdQYWdpbmF0ZWRQcm9taXNlLFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBVIGV4dGVuZHMgYW55W10gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQsXG4+KGZuOiBULCBhcmdzPzogUGFyYW1ldGVyczxUPiwgb3B0aW9ucz86IENhY2hlZFByb21pc2VPcHRpb25zPFQsIFU+KSB7XG4gIC8qKlxuICAgKiBUaGUgaG9vayBnZW5lcmF0ZXMgYSBjYWNoZSBrZXkgZnJvbSB0aGUgcHJvbWlzZSBpdCByZWNlaXZlcyAmIGl0cyBhcmd1bWVudHMuXG4gICAqIFNvbWV0aW1lcyB0aGF0J3Mgbm90IGVub3VnaCB0byBndWFyYW50ZWUgdW5pcXVlbmVzcywgc28gaG9va3MgdGhhdCBidWlsZCBvbiB0b3Agb2YgYHVzZUNhY2hlZFByb21pc2VgIGNhblxuICAgKiB1c2UgYW4gYGludGVybmFsX2NhY2hlS2V5U3VmZml4YCB0byBoZWxwIGl0LlxuICAgKlxuICAgKiBAcmVtYXJrIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICovXG4gIGNvbnN0IHtcbiAgICBpbml0aWFsRGF0YSxcbiAgICBrZWVwUHJldmlvdXNEYXRhLFxuICAgIGludGVybmFsX2NhY2hlS2V5U3VmZml4LFxuICAgIC4uLnVzZVByb21pc2VPcHRpb25zXG4gIH06IENhY2hlZFByb21pc2VPcHRpb25zPFQsIFU+ICYgeyBpbnRlcm5hbF9jYWNoZUtleVN1ZmZpeD86IHN0cmluZyB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgY29uc3QgbGFzdFVwZGF0ZUZyb20gPSB1c2VSZWY8XCJjYWNoZVwiIHwgXCJwcm9taXNlXCI+KG51bGwpO1xuXG4gIGNvbnN0IFtjYWNoZWREYXRhLCBtdXRhdGVDYWNoZV0gPSB1c2VDYWNoZWRTdGF0ZTx0eXBlb2YgZW1wdHlDYWNoZSB8IChVbndyYXBSZXR1cm48VD4gfCBVKT4oXG4gICAgaGFzaChhcmdzIHx8IFtdKSArIGludGVybmFsX2NhY2hlS2V5U3VmZml4LFxuICAgIGVtcHR5Q2FjaGUsXG4gICAge1xuICAgICAgY2FjaGVOYW1lc3BhY2U6IGhhc2goZm4pLFxuICAgIH0sXG4gICk7XG5cbiAgLy8gVXNlIGEgcmVmIHRvIHN0b3JlIHByZXZpb3VzIHJldHVybmVkIGRhdGEuIFVzZSB0aGUgaW5pdGFsIGRhdGEgYXMgaXRzIGluaXRhbCB2YWx1ZSBmcm9tIHRoZSBjYWNoZS5cbiAgY29uc3QgbGFnZ3lEYXRhUmVmID0gdXNlUmVmPEF3YWl0ZWQ8UmV0dXJuVHlwZTxUPj4gfCBVPihjYWNoZWREYXRhICE9PSBlbXB0eUNhY2hlID8gY2FjaGVkRGF0YSA6IChpbml0aWFsRGF0YSBhcyBVKSk7XG4gIGNvbnN0IHBhZ2luYXRpb25BcmdzUmVmID0gdXNlUmVmPFBhZ2luYXRpb25PcHRpb25zPFVud3JhcFJldHVybjxUPiB8IFU+IHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuXG4gIGNvbnN0IHtcbiAgICBtdXRhdGU6IF9tdXRhdGUsXG4gICAgcmV2YWxpZGF0ZSxcbiAgICAuLi5zdGF0ZVxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgZm4gaGFzIHRoZSBzYW1lIHNpZ25hdHVyZSBpbiBib3RoIHVzZVByb21pc2UgYW5kIHVzZUNhY2hlZFByb21pc2VcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICB9ID0gdXNlUHJvbWlzZShmbiwgYXJncyB8fCAoW10gYXMgYW55IGFzIFBhcmFtZXRlcnM8VD4pLCB7XG4gICAgLi4udXNlUHJvbWlzZU9wdGlvbnMsXG4gICAgb25EYXRhKGRhdGEsIHBhZ2luYXRpb24pIHtcbiAgICAgIHBhZ2luYXRpb25BcmdzUmVmLmN1cnJlbnQgPSBwYWdpbmF0aW9uO1xuICAgICAgaWYgKHVzZVByb21pc2VPcHRpb25zLm9uRGF0YSkge1xuICAgICAgICB1c2VQcm9taXNlT3B0aW9ucy5vbkRhdGEoZGF0YSwgcGFnaW5hdGlvbik7XG4gICAgICB9XG4gICAgICBpZiAocGFnaW5hdGlvbiAmJiBwYWdpbmF0aW9uLnBhZ2UgPiAwKSB7XG4gICAgICAgIC8vIGRvbid0IGNhY2hlIGJleW9uZCB0aGUgZmlyc3QgcGFnZVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsYXN0VXBkYXRlRnJvbS5jdXJyZW50ID0gXCJwcm9taXNlXCI7XG4gICAgICBsYWdneURhdGFSZWYuY3VycmVudCA9IGRhdGE7XG4gICAgICBtdXRhdGVDYWNoZShkYXRhKTtcbiAgICB9LFxuICB9KTtcblxuICBsZXQgcmV0dXJuZWREYXRhOiBVIHwgQXdhaXRlZDxSZXR1cm5UeXBlPFQ+PiB8IFVud3JhcFJldHVybjxUPjtcbiAgY29uc3QgcGFnaW5hdGlvbiA9IHN0YXRlLnBhZ2luYXRpb247XG4gIC8vIHdoZW4gcGFnaW5hdGluZywgb25seSB0aGUgZmlyc3QgcGFnZSBnZXRzIGNhY2hlZCwgc28gd2UgcmV0dXJuIHRoZSBkYXRhIHdlIGdldCBmcm9tIGB1c2VQcm9taXNlYCwgYmVjYXVzZVxuICAvLyBpdCB3aWxsIGJlIGFjY3VtdWxhdGVkLlxuICBpZiAocGFnaW5hdGlvbkFyZ3NSZWYuY3VycmVudCAmJiBwYWdpbmF0aW9uQXJnc1JlZi5jdXJyZW50LnBhZ2UgPiAwICYmIHN0YXRlLmRhdGEpIHtcbiAgICByZXR1cm5lZERhdGEgPSBzdGF0ZS5kYXRhIGFzIFVud3JhcFJldHVybjxUPjtcbiAgICAvLyBpZiB0aGUgbGF0ZXN0IHVwZGF0ZSBpZiBmcm9tIHRoZSBQcm9taXNlLCB3ZSBrZWVwIGl0XG4gIH0gZWxzZSBpZiAobGFzdFVwZGF0ZUZyb20uY3VycmVudCA9PT0gXCJwcm9taXNlXCIpIHtcbiAgICByZXR1cm5lZERhdGEgPSBsYWdneURhdGFSZWYuY3VycmVudDtcbiAgfSBlbHNlIGlmIChrZWVwUHJldmlvdXNEYXRhICYmIGNhY2hlZERhdGEgIT09IGVtcHR5Q2FjaGUpIHtcbiAgICAvLyBpZiB3ZSB3YW50IHRvIGtlZXAgdGhlIGxhdGVzdCBkYXRhLCB3ZSBwaWNrIHRoZSBjYWNoZSBidXQgb25seSBpZiBpdCdzIG5vdCBlbXB0eVxuICAgIHJldHVybmVkRGF0YSA9IGNhY2hlZERhdGE7XG4gICAgaWYgKHBhZ2luYXRpb24pIHtcbiAgICAgIHBhZ2luYXRpb24uaGFzTW9yZSA9IHRydWU7XG4gICAgICBwYWdpbmF0aW9uLnBhZ2VTaXplID0gY2FjaGVkRGF0YS5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2UgaWYgKGtlZXBQcmV2aW91c0RhdGEgJiYgY2FjaGVkRGF0YSA9PT0gZW1wdHlDYWNoZSkge1xuICAgIC8vIGlmIHRoZSBjYWNoZSBpcyBlbXB0eSwgd2Ugd2lsbCByZXR1cm4gdGhlIHByZXZpb3VzIGRhdGFcbiAgICByZXR1cm5lZERhdGEgPSBsYWdneURhdGFSZWYuY3VycmVudDtcbiAgICAvLyB0aGVyZSBhcmUgbm8gc3BlY2lhbCBjYXNlcywgc28gZWl0aGVyIHJldHVybiB0aGUgY2FjaGUgb3IgaW5pdGlhbCBkYXRhXG4gIH0gZWxzZSBpZiAoY2FjaGVkRGF0YSAhPT0gZW1wdHlDYWNoZSkge1xuICAgIHJldHVybmVkRGF0YSA9IGNhY2hlZERhdGE7XG4gICAgaWYgKHBhZ2luYXRpb24pIHtcbiAgICAgIHBhZ2luYXRpb24uaGFzTW9yZSA9IHRydWU7XG4gICAgICBwYWdpbmF0aW9uLnBhZ2VTaXplID0gY2FjaGVkRGF0YS5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybmVkRGF0YSA9IGluaXRpYWxEYXRhIGFzIFU7XG4gIH1cblxuICBjb25zdCBsYXRlc3REYXRhID0gdXNlTGF0ZXN0KHJldHVybmVkRGF0YSk7XG5cbiAgLy8gd2UgcmV3cml0ZSB0aGUgbXV0YXRlIGZ1bmN0aW9uIHRvIHVwZGF0ZSB0aGUgY2FjaGUgaW5zdGVhZFxuICBjb25zdCBtdXRhdGUgPSB1c2VDYWxsYmFjazxNdXRhdGVQcm9taXNlPEF3YWl0ZWQ8UmV0dXJuVHlwZTxUPj4gfCBVPj4oXG4gICAgYXN5bmMgKGFzeW5jVXBkYXRlLCBvcHRpb25zKSA9PiB7XG4gICAgICBsZXQgZGF0YUJlZm9yZU9wdGltaXN0aWNVcGRhdGU7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAob3B0aW9ucz8ub3B0aW1pc3RpY1VwZGF0ZSkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucz8ucm9sbGJhY2tPbkVycm9yICE9PSBcImZ1bmN0aW9uXCIgJiYgb3B0aW9ucz8ucm9sbGJhY2tPbkVycm9yICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgLy8ga2VlcCB0cmFjayBvZiB0aGUgZGF0YSBiZWZvcmUgdGhlIG9wdGltaXN0aWMgdXBkYXRlLFxuICAgICAgICAgICAgLy8gYnV0IG9ubHkgaWYgd2UgbmVlZCBpdCAoZWcuIG9ubHkgd2hlbiB3ZSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgcm9sbGJhY2sgYWZ0ZXIpXG4gICAgICAgICAgICBkYXRhQmVmb3JlT3B0aW1pc3RpY1VwZGF0ZSA9IHN0cnVjdHVyZWRDbG9uZShsYXRlc3REYXRhLmN1cnJlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBkYXRhID0gb3B0aW9ucy5vcHRpbWlzdGljVXBkYXRlKGxhdGVzdERhdGEuY3VycmVudCk7XG4gICAgICAgICAgbGFzdFVwZGF0ZUZyb20uY3VycmVudCA9IFwiY2FjaGVcIjtcbiAgICAgICAgICBsYWdneURhdGFSZWYuY3VycmVudCA9IGRhdGE7XG4gICAgICAgICAgbXV0YXRlQ2FjaGUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF3YWl0IF9tdXRhdGUoYXN5bmNVcGRhdGUsIHsgc2hvdWxkUmV2YWxpZGF0ZUFmdGVyOiBvcHRpb25zPy5zaG91bGRSZXZhbGlkYXRlQWZ0ZXIgfSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zPy5yb2xsYmFja09uRXJyb3IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSBvcHRpb25zLnJvbGxiYWNrT25FcnJvcihsYXRlc3REYXRhLmN1cnJlbnQpO1xuICAgICAgICAgIGxhc3RVcGRhdGVGcm9tLmN1cnJlbnQgPSBcImNhY2hlXCI7XG4gICAgICAgICAgbGFnZ3lEYXRhUmVmLmN1cnJlbnQgPSBkYXRhO1xuICAgICAgICAgIG11dGF0ZUNhY2hlKGRhdGEpO1xuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnM/Lm9wdGltaXN0aWNVcGRhdGUgJiYgb3B0aW9ucz8ucm9sbGJhY2tPbkVycm9yICE9PSBmYWxzZSkge1xuICAgICAgICAgIGxhc3RVcGRhdGVGcm9tLmN1cnJlbnQgPSBcImNhY2hlXCI7XG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciB3aGVuIHVuZGVmaW5lZCwgaXQncyBleHBlY3RlZFxuICAgICAgICAgIGxhZ2d5RGF0YVJlZi5jdXJyZW50ID0gZGF0YUJlZm9yZU9wdGltaXN0aWNVcGRhdGU7XG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciB3aGVuIHVuZGVmaW5lZCwgaXQncyBleHBlY3RlZFxuICAgICAgICAgIG11dGF0ZUNhY2hlKGRhdGFCZWZvcmVPcHRpbWlzdGljVXBkYXRlKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfSxcbiAgICBbbXV0YXRlQ2FjaGUsIF9tdXRhdGUsIGxhdGVzdERhdGEsIGxhZ2d5RGF0YVJlZiwgbGFzdFVwZGF0ZUZyb21dLFxuICApO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGNhY2hlZERhdGEgIT09IGVtcHR5Q2FjaGUpIHtcbiAgICAgIGxhc3RVcGRhdGVGcm9tLmN1cnJlbnQgPSBcImNhY2hlXCI7XG4gICAgICBsYWdneURhdGFSZWYuY3VycmVudCA9IGNhY2hlZERhdGE7XG4gICAgfVxuICB9LCBbY2FjaGVkRGF0YV0pO1xuXG4gIHJldHVybiB7XG4gICAgZGF0YTogcmV0dXJuZWREYXRhLFxuICAgIGlzTG9hZGluZzogc3RhdGUuaXNMb2FkaW5nLFxuICAgIGVycm9yOiBzdGF0ZS5lcnJvcixcbiAgICBtdXRhdGU6IHBhZ2luYXRpb25BcmdzUmVmLmN1cnJlbnQgJiYgcGFnaW5hdGlvbkFyZ3NSZWYuY3VycmVudC5wYWdlID4gMCA/IF9tdXRhdGUgOiBtdXRhdGUsXG4gICAgcGFnaW5hdGlvbixcbiAgICByZXZhbGlkYXRlLFxuICB9O1xufVxuIiwgImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VNZW1vLCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZUNhY2hlZFByb21pc2UsIENhY2hlZFByb21pc2VPcHRpb25zIH0gZnJvbSBcIi4vdXNlQ2FjaGVkUHJvbWlzZVwiO1xuaW1wb3J0IHsgdXNlTGF0ZXN0IH0gZnJvbSBcIi4vdXNlTGF0ZXN0XCI7XG5pbXBvcnQgeyBGdW5jdGlvblJldHVybmluZ1BhZ2luYXRlZFByb21pc2UsIEZ1bmN0aW9uUmV0dXJuaW5nUHJvbWlzZSwgVXNlQ2FjaGVkUHJvbWlzZVJldHVyblR5cGUgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgaXNKU09OIH0gZnJvbSBcIi4vZmV0Y2gtdXRpbHNcIjtcbmltcG9ydCB7IGhhc2ggfSBmcm9tIFwiLi9oZWxwZXJzXCI7XG5cbmFzeW5jIGZ1bmN0aW9uIGRlZmF1bHRQYXJzaW5nKHJlc3BvbnNlOiBSZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICB9XG5cbiAgY29uc3QgY29udGVudFR5cGVIZWFkZXIgPSByZXNwb25zZS5oZWFkZXJzLmdldChcImNvbnRlbnQtdHlwZVwiKTtcblxuICBpZiAoY29udGVudFR5cGVIZWFkZXIgJiYgaXNKU09OKGNvbnRlbnRUeXBlSGVhZGVyKSkge1xuICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdE1hcHBpbmc8ViwgVCBleHRlbmRzIHVua25vd25bXT4ocmVzdWx0OiBWKTogeyBkYXRhOiBUOyBoYXNNb3JlPzogYm9vbGVhbjsgY3Vyc29yPzogYW55IH0ge1xuICByZXR1cm4geyBkYXRhOiByZXN1bHQgYXMgdW5rbm93biBhcyBULCBoYXNNb3JlOiBmYWxzZSB9O1xufVxuXG50eXBlIFJlcXVlc3RJbmZvID0gc3RyaW5nIHwgVVJMIHwgZ2xvYmFsVGhpcy5SZXF1ZXN0O1xudHlwZSBQYWdpbmF0ZWRSZXF1ZXN0SW5mbyA9IChwYWdpbmF0aW9uOiB7IHBhZ2U6IG51bWJlcjsgbGFzdEl0ZW0/OiBhbnk7IGN1cnNvcj86IGFueSB9KSA9PiBSZXF1ZXN0SW5mbztcblxuLyoqXG4gKiBGZXRjaGVzIHRoZSBwYWdpbmF0ZWRVUkwgYW5kIHJldHVybnMgdGhlIHtAbGluayBBc3luY1N0YXRlfSBjb3JyZXNwb25kaW5nIHRvIHRoZSBleGVjdXRpb24gb2YgdGhlIGZldGNoLiBUaGUgbGFzdCB2YWx1ZSB3aWxsIGJlIGtlcHQgYmV0d2VlbiBjb21tYW5kIHJ1bnMuXG4gKlxuICogQHJlbWFyayBUaGlzIG92ZXJsb2FkIHNob3VsZCBiZSB1c2VkIHdoZW4gd29ya2luZyB3aXRoIHBhZ2luYXRlZCBkYXRhIHNvdXJjZXMuXG4gKiBAcmVtYXJrIFdoZW4gcGFnaW5hdGluZywgb25seSB0aGUgZmlyc3QgcGFnZSB3aWxsIGJlIGNhY2hlZC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiBpbXBvcnQgeyBJY29uLCBJbWFnZSwgTGlzdCB9IGZyb20gXCJAcmF5Y2FzdC9hcGlcIjtcbiAqIGltcG9ydCB7IHVzZUZldGNoIH0gZnJvbSBcIkByYXljYXN0L3V0aWxzXCI7XG4gKiBpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuICpcbiAqIHR5cGUgU2VhcmNoUmVzdWx0ID0geyBjb21wYW5pZXM6IENvbXBhbnlbXTsgcGFnZTogbnVtYmVyOyB0b3RhbFBhZ2VzOiBudW1iZXIgfTtcbiAqIHR5cGUgQ29tcGFueSA9IHsgaWQ6IG51bWJlcjsgbmFtZTogc3RyaW5nOyBzbWFsbExvZ29Vcmw/OiBzdHJpbmcgfTtcbiAqIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbW1hbmQoKSB7XG4gKiAgIGNvbnN0IFtzZWFyY2hUZXh0LCBzZXRTZWFyY2hUZXh0XSA9IHVzZVN0YXRlKFwiXCIpO1xuICogICBjb25zdCB7IGlzTG9hZGluZywgZGF0YSwgcGFnaW5hdGlvbiB9ID0gdXNlRmV0Y2goXG4gKiAgICAgKG9wdGlvbnMpID0+XG4gKiAgICAgICBcImh0dHBzOi8vYXBpLnljb21iaW5hdG9yLmNvbS92MC4xL2NvbXBhbmllcz9cIiArXG4gKiAgICAgICBuZXcgVVJMU2VhcmNoUGFyYW1zKHsgcGFnZTogU3RyaW5nKG9wdGlvbnMucGFnZSArIDEpLCBxOiBzZWFyY2hUZXh0IH0pLnRvU3RyaW5nKCksXG4gKiAgICAge1xuICogICAgICAgbWFwUmVzdWx0KHJlc3VsdDogU2VhcmNoUmVzdWx0KSB7XG4gKiAgICAgICAgIHJldHVybiB7XG4gKiAgICAgICAgICAgZGF0YTogcmVzdWx0LmNvbXBhbmllcyxcbiAqICAgICAgICAgICBoYXNNb3JlOiByZXN1bHQucGFnZSA8IHJlc3VsdC50b3RhbFBhZ2VzLFxuICogICAgICAgICB9O1xuICogICAgICAgfSxcbiAqICAgICAgIGtlZXBQcmV2aW91c0RhdGE6IHRydWUsXG4gKiAgICAgICBpbml0aWFsRGF0YTogW10sXG4gKiAgICAgfSxcbiAqICAgKTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPExpc3QgaXNMb2FkaW5nPXtpc0xvYWRpbmd9IHBhZ2luYXRpb249e3BhZ2luYXRpb259IG9uU2VhcmNoVGV4dENoYW5nZT17c2V0U2VhcmNoVGV4dH0+XG4gKiAgICAgICB7ZGF0YS5tYXAoKGNvbXBhbnkpID0+IChcbiAqICAgICAgICAgPExpc3QuSXRlbVxuICogICAgICAgICAgIGtleT17Y29tcGFueS5pZH1cbiAqICAgICAgICAgICBpY29uPXt7IHNvdXJjZTogY29tcGFueS5zbWFsbExvZ29VcmwgPz8gSWNvbi5NaW51c0NpcmNsZSwgbWFzazogSW1hZ2UuTWFzay5Sb3VuZGVkUmVjdGFuZ2xlIH19XG4gKiAgICAgICAgICAgdGl0bGU9e2NvbXBhbnkubmFtZX1cbiAqICAgICAgICAgLz5cbiAqICAgICAgICkpfVxuICogICAgIDwvTGlzdD5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlRmV0Y2g8ViA9IHVua25vd24sIFUgPSB1bmRlZmluZWQsIFQgZXh0ZW5kcyB1bmtub3duW10gPSB1bmtub3duW10+KFxuICB1cmw6IFBhZ2luYXRlZFJlcXVlc3RJbmZvLFxuICBvcHRpb25zOiBSZXF1ZXN0SW5pdCAmIHtcbiAgICBtYXBSZXN1bHQ6IChyZXN1bHQ6IFYpID0+IHsgZGF0YTogVDsgaGFzTW9yZT86IGJvb2xlYW47IGN1cnNvcj86IGFueSB9O1xuICAgIHBhcnNlUmVzcG9uc2U/OiAocmVzcG9uc2U6IFJlc3BvbnNlKSA9PiBQcm9taXNlPFY+O1xuICB9ICYgT21pdDxDYWNoZWRQcm9taXNlT3B0aW9uczwodXJsOiBSZXF1ZXN0SW5mbywgb3B0aW9ucz86IFJlcXVlc3RJbml0KSA9PiBQcm9taXNlPFQ+LCBVPiwgXCJhYm9ydGFibGVcIj4sXG4pOiBVc2VDYWNoZWRQcm9taXNlUmV0dXJuVHlwZTxULCBVPjtcbi8qKlxuICogRmV0Y2ggdGhlIFVSTCBhbmQgcmV0dXJucyB0aGUge0BsaW5rIEFzeW5jU3RhdGV9IGNvcnJlc3BvbmRpbmcgdG8gdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZmV0Y2guIFRoZSBsYXN0IHZhbHVlIHdpbGwgYmUga2VwdCBiZXR3ZWVuIGNvbW1hbmQgcnVucy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiBpbXBvcnQgeyB1c2VGZXRjaCB9IGZyb20gJ0ByYXljYXN0L3V0aWxzJztcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb21tYW5kKCkge1xuICogICBjb25zdCB7IGlzTG9hZGluZywgZGF0YSwgcmV2YWxpZGF0ZSB9ID0gdXNlRmV0Y2goJ2h0dHBzOi8vYXBpLmV4YW1wbGUnKTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPERldGFpbFxuICogICAgICAgaXNMb2FkaW5nPXtpc0xvYWRpbmd9XG4gKiAgICAgICBtYXJrZG93bj17ZGF0YX1cbiAqICAgICAgIGFjdGlvbnM9e1xuICogICAgICAgICA8QWN0aW9uUGFuZWw+XG4gKiAgICAgICAgICAgPEFjdGlvbiB0aXRsZT1cIlJlbG9hZFwiIG9uQWN0aW9uPXsoKSA9PiByZXZhbGlkYXRlKCl9IC8+XG4gKiAgICAgICAgIDwvQWN0aW9uUGFuZWw+XG4gKiAgICAgICB9XG4gKiAgICAgLz5cbiAqICAgKTtcbiAqIH07XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUZldGNoPFYgPSB1bmtub3duLCBVID0gdW5kZWZpbmVkLCBUID0gVj4oXG4gIHVybDogUmVxdWVzdEluZm8sXG4gIG9wdGlvbnM/OiBSZXF1ZXN0SW5pdCAmIHtcbiAgICBtYXBSZXN1bHQ/OiAocmVzdWx0OiBWKSA9PiB7IGRhdGE6IFQ7IGhhc01vcmU/OiBib29sZWFuOyBjdXJzb3I/OiBhbnkgfTtcbiAgICBwYXJzZVJlc3BvbnNlPzogKHJlc3BvbnNlOiBSZXNwb25zZSkgPT4gUHJvbWlzZTxWPjtcbiAgfSAmIE9taXQ8Q2FjaGVkUHJvbWlzZU9wdGlvbnM8KHVybDogUmVxdWVzdEluZm8sIG9wdGlvbnM/OiBSZXF1ZXN0SW5pdCkgPT4gUHJvbWlzZTxUPiwgVT4sIFwiYWJvcnRhYmxlXCI+LFxuKTogVXNlQ2FjaGVkUHJvbWlzZVJldHVyblR5cGU8VCwgVT4gJiB7IHBhZ2luYXRpb246IHVuZGVmaW5lZCB9O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlRmV0Y2g8ViA9IHVua25vd24sIFUgPSB1bmRlZmluZWQsIFQgZXh0ZW5kcyB1bmtub3duW10gPSB1bmtub3duW10+KFxuICB1cmw6IFJlcXVlc3RJbmZvIHwgUGFnaW5hdGVkUmVxdWVzdEluZm8sXG4gIG9wdGlvbnM/OiBSZXF1ZXN0SW5pdCAmIHtcbiAgICBtYXBSZXN1bHQ/OiAocmVzdWx0OiBWKSA9PiB7IGRhdGE6IFQ7IGhhc01vcmU/OiBib29sZWFuOyBjdXJzb3I/OiBhbnkgfTtcbiAgICBwYXJzZVJlc3BvbnNlPzogKHJlc3BvbnNlOiBSZXNwb25zZSkgPT4gUHJvbWlzZTxWPjtcbiAgfSAmIE9taXQ8Q2FjaGVkUHJvbWlzZU9wdGlvbnM8KHVybDogUmVxdWVzdEluZm8sIG9wdGlvbnM/OiBSZXF1ZXN0SW5pdCkgPT4gUHJvbWlzZTxUPiwgVT4sIFwiYWJvcnRhYmxlXCI+LFxuKTogVXNlQ2FjaGVkUHJvbWlzZVJldHVyblR5cGU8VCwgVT4ge1xuICBjb25zdCB7XG4gICAgcGFyc2VSZXNwb25zZSxcbiAgICBtYXBSZXN1bHQsXG4gICAgaW5pdGlhbERhdGEsXG4gICAgZXhlY3V0ZSxcbiAgICBrZWVwUHJldmlvdXNEYXRhLFxuICAgIG9uRXJyb3IsXG4gICAgb25EYXRhLFxuICAgIG9uV2lsbEV4ZWN1dGUsXG4gICAgZmFpbHVyZVRvYXN0T3B0aW9ucyxcbiAgICAuLi5mZXRjaE9wdGlvbnNcbiAgfSA9IG9wdGlvbnMgfHwge307XG5cbiAgY29uc3QgdXNlQ2FjaGVkUHJvbWlzZU9wdGlvbnM6IENhY2hlZFByb21pc2VPcHRpb25zPCh1cmw6IFJlcXVlc3RJbmZvLCBvcHRpb25zPzogUmVxdWVzdEluaXQpID0+IFByb21pc2U8VD4sIFU+ID0ge1xuICAgIGluaXRpYWxEYXRhLFxuICAgIGV4ZWN1dGUsXG4gICAga2VlcFByZXZpb3VzRGF0YSxcbiAgICBvbkVycm9yLFxuICAgIG9uRGF0YSxcbiAgICBvbldpbGxFeGVjdXRlLFxuICAgIGZhaWx1cmVUb2FzdE9wdGlvbnMsXG4gIH07XG5cbiAgY29uc3QgcGFyc2VSZXNwb25zZVJlZiA9IHVzZUxhdGVzdChwYXJzZVJlc3BvbnNlIHx8IGRlZmF1bHRQYXJzaW5nKTtcbiAgY29uc3QgbWFwUmVzdWx0UmVmID0gdXNlTGF0ZXN0KG1hcFJlc3VsdCB8fCBkZWZhdWx0TWFwcGluZyk7XG4gIGNvbnN0IHVybFJlZiA9IHVzZVJlZjxSZXF1ZXN0SW5mbyB8IFBhZ2luYXRlZFJlcXVlc3RJbmZvPihudWxsKTtcbiAgY29uc3QgZmlyc3RQYWdlVXJsUmVmID0gdXNlUmVmPFJlcXVlc3RJbmZvIHwgdW5kZWZpbmVkPihudWxsKTtcbiAgY29uc3QgZmlyc3RQYWdlVXJsID0gdHlwZW9mIHVybCA9PT0gXCJmdW5jdGlvblwiID8gdXJsKHsgcGFnZTogMCB9KSA6IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIFdoZW4gcGFnaW5hdGluZywgYHVybGAgaXMgYSBgUGFnaW5hdGVkUmVxdWVzdEluZm9gLCBzbyB3ZSBvbmx5IHdhbnQgdG8gdXBkYXRlIHRoZSByZWYgd2hlbiB0aGUgYGZpcnN0UGFnZVVybGAgY2hhbmdlcy5cbiAgICogV2hlbiBub3QgcGFnaW5hdGluZywgYHVybGAgaXMgYSBgUmVxdWVzdEluZm9gLCBzbyB3ZSB3YW50IHRvIHVwZGF0ZSB0aGUgcmVmIHdoZW5ldmVyIGB1cmxgIGNoYW5nZXMuXG4gICAqL1xuICBpZiAoIXVybFJlZi5jdXJyZW50IHx8IHR5cGVvZiBmaXJzdFBhZ2VVcmxSZWYuY3VycmVudCA9PT0gXCJ1bmRlZmluZWRcIiB8fCBmaXJzdFBhZ2VVcmxSZWYuY3VycmVudCAhPT0gZmlyc3RQYWdlVXJsKSB7XG4gICAgdXJsUmVmLmN1cnJlbnQgPSB1cmw7XG4gIH1cbiAgZmlyc3RQYWdlVXJsUmVmLmN1cnJlbnQgPSBmaXJzdFBhZ2VVcmw7XG4gIGNvbnN0IGFib3J0YWJsZSA9IHVzZVJlZjxBYm9ydENvbnRyb2xsZXI+KG51bGwpO1xuXG4gIGNvbnN0IHBhZ2luYXRlZEZuOiBGdW5jdGlvblJldHVybmluZ1BhZ2luYXRlZFByb21pc2U8W1BhZ2luYXRlZFJlcXVlc3RJbmZvLCB0eXBlb2YgZmV0Y2hPcHRpb25zXSwgVD4gPSB1c2VDYWxsYmFjayhcbiAgICAodXJsOiBQYWdpbmF0ZWRSZXF1ZXN0SW5mbywgb3B0aW9ucz86IFJlcXVlc3RJbml0KSA9PiBhc3luYyAocGFnaW5hdGlvbjogeyBwYWdlOiBudW1iZXIgfSkgPT4ge1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2godXJsKHBhZ2luYXRpb24pLCB7IHNpZ25hbDogYWJvcnRhYmxlLmN1cnJlbnQ/LnNpZ25hbCwgLi4ub3B0aW9ucyB9KTtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IChhd2FpdCBwYXJzZVJlc3BvbnNlUmVmLmN1cnJlbnQocmVzKSkgYXMgVjtcbiAgICAgIHJldHVybiBtYXBSZXN1bHRSZWYuY3VycmVudD8uKHBhcnNlZCk7XG4gICAgfSxcbiAgICBbcGFyc2VSZXNwb25zZVJlZiwgbWFwUmVzdWx0UmVmXSxcbiAgKTtcbiAgY29uc3QgZm46IEZ1bmN0aW9uUmV0dXJuaW5nUHJvbWlzZTxbUmVxdWVzdEluZm8sIFJlcXVlc3RJbml0P10sIFQ+ID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKHVybDogUmVxdWVzdEluZm8sIG9wdGlvbnM/OiBSZXF1ZXN0SW5pdCkgPT4ge1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2godXJsLCB7IHNpZ25hbDogYWJvcnRhYmxlLmN1cnJlbnQ/LnNpZ25hbCwgLi4ub3B0aW9ucyB9KTtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IChhd2FpdCBwYXJzZVJlc3BvbnNlUmVmLmN1cnJlbnQocmVzKSkgYXMgVjtcbiAgICAgIGNvbnN0IG1hcHBlZCA9IG1hcFJlc3VsdFJlZi5jdXJyZW50KHBhcnNlZCk7XG4gICAgICByZXR1cm4gbWFwcGVkPy5kYXRhIGFzIHVua25vd24gYXMgVDtcbiAgICB9LFxuICAgIFtwYXJzZVJlc3BvbnNlUmVmLCBtYXBSZXN1bHRSZWZdLFxuICApO1xuXG4gIGNvbnN0IHByb21pc2UgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoZmlyc3RQYWdlVXJsUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybiBwYWdpbmF0ZWRGbjtcbiAgICB9XG4gICAgcmV0dXJuIGZuO1xuICB9LCBbZmlyc3RQYWdlVXJsUmVmLCBmbiwgcGFnaW5hdGVkRm5dKTtcblxuICAvLyBAdHMtZXhwZWN0LWVycm9yIGxhc3RJdGVtIGNhbid0IGJlIGluZmVycmVkIHByb3Blcmx5XG4gIHJldHVybiB1c2VDYWNoZWRQcm9taXNlKHByb21pc2UsIFt1cmxSZWYuY3VycmVudCBhcyBQYWdpbmF0ZWRSZXF1ZXN0SW5mbywgZmV0Y2hPcHRpb25zXSwge1xuICAgIC4uLnVzZUNhY2hlZFByb21pc2VPcHRpb25zLFxuICAgIGludGVybmFsX2NhY2hlS2V5U3VmZml4OiBmaXJzdFBhZ2VVcmxSZWYuY3VycmVudCArIGhhc2gobWFwUmVzdWx0UmVmLmN1cnJlbnQpICsgaGFzaChwYXJzZVJlc3BvbnNlUmVmLmN1cnJlbnQpLFxuICAgIGFib3J0YWJsZSxcbiAgfSk7XG59XG4iLCAiZXhwb3J0IGZ1bmN0aW9uIGlzSlNPTihjb250ZW50VHlwZUhlYWRlcjogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICBpZiAoY29udGVudFR5cGVIZWFkZXIpIHtcbiAgICBjb25zdCBtZWRpYVR5cGUgPSBwYXJzZUNvbnRlbnRUeXBlKGNvbnRlbnRUeXBlSGVhZGVyKTtcblxuICAgIGlmICghbWVkaWFUeXBlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG1lZGlhVHlwZS5zdWJ0eXBlID09PSBcImpzb25cIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKG1lZGlhVHlwZS5zdWZmaXggPT09IFwianNvblwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAobWVkaWFUeXBlLnN1ZmZpeCAmJiAvXFxianNvblxcYi9pLnRlc3QobWVkaWFUeXBlLnN1ZmZpeCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChtZWRpYVR5cGUuc3VidHlwZSAmJiAvXFxianNvblxcYi9pLnRlc3QobWVkaWFUeXBlLnN1YnR5cGUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFJlZ0V4cCB0byBtYXRjaCB0eXBlIGluIFJGQyA2ODM4IHdpdGggYW4gb3B0aW9uYWwgdHJhaWxpbmcgYDtgIGJlY2F1c2Ugc29tZSBBcHBsZSBBUElzIHJldHVybnMgb25lLi4uXG4gKlxuICogdHlwZS1uYW1lID0gcmVzdHJpY3RlZC1uYW1lXG4gKiBzdWJ0eXBlLW5hbWUgPSByZXN0cmljdGVkLW5hbWVcbiAqIHJlc3RyaWN0ZWQtbmFtZSA9IHJlc3RyaWN0ZWQtbmFtZS1maXJzdCAqMTI2cmVzdHJpY3RlZC1uYW1lLWNoYXJzXG4gKiByZXN0cmljdGVkLW5hbWUtZmlyc3QgID0gQUxQSEEgLyBESUdJVFxuICogcmVzdHJpY3RlZC1uYW1lLWNoYXJzICA9IEFMUEhBIC8gRElHSVQgLyBcIiFcIiAvIFwiI1wiIC9cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBcIiRcIiAvIFwiJlwiIC8gXCItXCIgLyBcIl5cIiAvIFwiX1wiXG4gKiByZXN0cmljdGVkLW5hbWUtY2hhcnMgPS8gXCIuXCIgOyBDaGFyYWN0ZXJzIGJlZm9yZSBmaXJzdCBkb3QgYWx3YXlzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsgc3BlY2lmeSBhIGZhY2V0IG5hbWVcbiAqIHJlc3RyaWN0ZWQtbmFtZS1jaGFycyA9LyBcIitcIiA7IENoYXJhY3RlcnMgYWZ0ZXIgbGFzdCBwbHVzIGFsd2F5c1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7IHNwZWNpZnkgYSBzdHJ1Y3R1cmVkIHN5bnRheCBzdWZmaXhcbiAqIEFMUEhBID0gICV4NDEtNUEgLyAleDYxLTdBICAgOyBBLVogLyBhLXpcbiAqIERJR0lUID0gICV4MzAtMzkgICAgICAgICAgICAgOyAwLTlcbiAqL1xuY29uc3QgTUVESUFfVFlQRV9SRUdFWFAgPSAvXihbQS1aYS16MC05XVtBLVphLXowLTkhIyQmXl8tXXswLDEyNn0pXFwvKFtBLVphLXowLTldW0EtWmEtejAtOSEjJCZeXy4rLV17MCwxMjZ9KTs/JC87XG5cbmZ1bmN0aW9uIHBhcnNlQ29udGVudFR5cGUoaGVhZGVyOiBzdHJpbmcpIHtcbiAgY29uc3QgaGVhZGVyRGVsaW1pdGF0aW9uaW5kZXggPSBoZWFkZXIuaW5kZXhPZihcIjtcIik7XG4gIGNvbnN0IGNvbnRlbnRUeXBlID0gaGVhZGVyRGVsaW1pdGF0aW9uaW5kZXggIT09IC0xID8gaGVhZGVyLnNsaWNlKDAsIGhlYWRlckRlbGltaXRhdGlvbmluZGV4KS50cmltKCkgOiBoZWFkZXIudHJpbSgpO1xuXG4gIGNvbnN0IG1hdGNoID0gTUVESUFfVFlQRV9SRUdFWFAuZXhlYyhjb250ZW50VHlwZS50b0xvd2VyQ2FzZSgpLnRvTG93ZXJDYXNlKCkpO1xuXG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB0eXBlID0gbWF0Y2hbMV07XG4gIGxldCBzdWJ0eXBlID0gbWF0Y2hbMl07XG4gIGxldCBzdWZmaXg7XG5cbiAgLy8gc3VmZml4IGFmdGVyIGxhc3QgK1xuICBjb25zdCBpbmRleCA9IHN1YnR5cGUubGFzdEluZGV4T2YoXCIrXCIpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgc3VmZml4ID0gc3VidHlwZS5zdWJzdHJpbmcoaW5kZXggKyAxKTtcbiAgICBzdWJ0eXBlID0gc3VidHlwZS5zdWJzdHJpbmcoMCwgaW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHsgdHlwZSwgc3VidHlwZSwgc3VmZml4IH07XG59XG4iLCAiLypcbiAqIEluc3BpcmVkIGJ5IEV4ZWNhXG4gKi9cblxuaW1wb3J0IGNoaWxkUHJvY2VzcyBmcm9tIFwibm9kZTpjaGlsZF9wcm9jZXNzXCI7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IHVzZUNhY2hlZFByb21pc2UsIENhY2hlZFByb21pc2VPcHRpb25zIH0gZnJvbSBcIi4vdXNlQ2FjaGVkUHJvbWlzZVwiO1xuaW1wb3J0IHsgdXNlTGF0ZXN0IH0gZnJvbSBcIi4vdXNlTGF0ZXN0XCI7XG5pbXBvcnQgeyBVc2VDYWNoZWRQcm9taXNlUmV0dXJuVHlwZSB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQge1xuICBnZXRTcGF3bmVkUHJvbWlzZSxcbiAgZ2V0U3Bhd25lZFJlc3VsdCxcbiAgaGFuZGxlT3V0cHV0LFxuICBkZWZhdWx0UGFyc2luZyxcbiAgUGFyc2VFeGVjT3V0cHV0SGFuZGxlcixcbn0gZnJvbSBcIi4vZXhlYy11dGlsc1wiO1xuXG50eXBlIEV4ZWNPcHRpb25zID0ge1xuICAvKipcbiAgICogSWYgYHRydWVgLCBydW5zIHRoZSBjb21tYW5kIGluc2lkZSBvZiBhIHNoZWxsLiBVc2VzIGAvYmluL3NoYC4gQSBkaWZmZXJlbnQgc2hlbGwgY2FuIGJlIHNwZWNpZmllZCBhcyBhIHN0cmluZy4gVGhlIHNoZWxsIHNob3VsZCB1bmRlcnN0YW5kIHRoZSBgLWNgIHN3aXRjaC5cbiAgICpcbiAgICogV2UgcmVjb21tZW5kIGFnYWluc3QgdXNpbmcgdGhpcyBvcHRpb24gc2luY2UgaXQgaXM6XG4gICAqIC0gbm90IGNyb3NzLXBsYXRmb3JtLCBlbmNvdXJhZ2luZyBzaGVsbC1zcGVjaWZpYyBzeW50YXguXG4gICAqIC0gc2xvd2VyLCBiZWNhdXNlIG9mIHRoZSBhZGRpdGlvbmFsIHNoZWxsIGludGVycHJldGF0aW9uLlxuICAgKiAtIHVuc2FmZSwgcG90ZW50aWFsbHkgYWxsb3dpbmcgY29tbWFuZCBpbmplY3Rpb24uXG4gICAqXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBzaGVsbD86IGJvb2xlYW4gfCBzdHJpbmc7XG4gIC8qKlxuICAgKiBTdHJpcCB0aGUgZmluYWwgbmV3bGluZSBjaGFyYWN0ZXIgZnJvbSB0aGUgb3V0cHV0LlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBzdHJpcEZpbmFsTmV3bGluZT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBDdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5IG9mIHRoZSBjaGlsZCBwcm9jZXNzLlxuICAgKiBAZGVmYXVsdCBwcm9jZXNzLmN3ZCgpXG4gICAqL1xuICBjd2Q/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBFbnZpcm9ubWVudCBrZXktdmFsdWUgcGFpcnMuIEV4dGVuZHMgYXV0b21hdGljYWxseSBmcm9tIGBwcm9jZXNzLmVudmAuXG4gICAqIEBkZWZhdWx0IHByb2Nlc3MuZW52XG4gICAqL1xuICBlbnY/OiBOb2RlSlMuUHJvY2Vzc0VudjtcbiAgLyoqXG4gICAqIFNwZWNpZnkgdGhlIGNoYXJhY3RlciBlbmNvZGluZyB1c2VkIHRvIGRlY29kZSB0aGUgc3Rkb3V0IGFuZCBzdGRlcnIgb3V0cHV0LiBJZiBzZXQgdG8gYFwiYnVmZmVyXCJgLCB0aGVuIHN0ZG91dCBhbmQgc3RkZXJyIHdpbGwgYmUgYSBCdWZmZXIgaW5zdGVhZCBvZiBhIHN0cmluZy5cbiAgICpcbiAgICogQGRlZmF1bHQgXCJ1dGY4XCJcbiAgICovXG4gIGVuY29kaW5nPzogQnVmZmVyRW5jb2RpbmcgfCBcImJ1ZmZlclwiO1xuICAvKipcbiAgICogV3JpdGUgc29tZSBpbnB1dCB0byB0aGUgYHN0ZGluYCBvZiB5b3VyIGJpbmFyeS5cbiAgICovXG4gIGlucHV0Pzogc3RyaW5nIHwgQnVmZmVyO1xuICAvKiogSWYgdGltZW91dCBpcyBncmVhdGVyIHRoYW4gYDBgLCB0aGUgcGFyZW50IHdpbGwgc2VuZCB0aGUgc2lnbmFsIGBTSUdURVJNYCBpZiB0aGUgY2hpbGQgcnVucyBsb25nZXIgdGhhbiB0aW1lb3V0IG1pbGxpc2Vjb25kcy5cbiAgICpcbiAgICogQGRlZmF1bHQgMTAwMDBcbiAgICovXG4gIHRpbWVvdXQ/OiBudW1iZXI7XG59O1xuXG5jb25zdCBTUEFDRVNfUkVHRVhQID0gLyArL2c7XG5mdW5jdGlvbiBwYXJzZUNvbW1hbmQoY29tbWFuZDogc3RyaW5nLCBhcmdzPzogc3RyaW5nW10pIHtcbiAgaWYgKGFyZ3MpIHtcbiAgICByZXR1cm4gW2NvbW1hbmQsIC4uLmFyZ3NdO1xuICB9XG4gIGNvbnN0IHRva2Vuczogc3RyaW5nW10gPSBbXTtcbiAgZm9yIChjb25zdCB0b2tlbiBvZiBjb21tYW5kLnRyaW0oKS5zcGxpdChTUEFDRVNfUkVHRVhQKSkge1xuICAgIC8vIEFsbG93IHNwYWNlcyB0byBiZSBlc2NhcGVkIGJ5IGEgYmFja3NsYXNoIGlmIG5vdCBtZWFudCBhcyBhIGRlbGltaXRlclxuICAgIGNvbnN0IHByZXZpb3VzVG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgIGlmIChwcmV2aW91c1Rva2VuICYmIHByZXZpb3VzVG9rZW4uZW5kc1dpdGgoXCJcXFxcXCIpKSB7XG4gICAgICAvLyBNZXJnZSBwcmV2aW91cyB0b2tlbiB3aXRoIGN1cnJlbnQgb25lXG4gICAgICB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdID0gYCR7cHJldmlvdXNUb2tlbi5zbGljZSgwLCAtMSl9ICR7dG9rZW59YDtcbiAgICB9IGVsc2Uge1xuICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0b2tlbnM7XG59XG5cbnR5cGUgRXhlY0NhY2hlZFByb21pc2VPcHRpb25zPFQsIFU+ID0gT21pdDxcbiAgQ2FjaGVkUHJvbWlzZU9wdGlvbnM8XG4gICAgKF9jb21tYW5kOiBzdHJpbmcsIF9hcmdzOiBzdHJpbmdbXSwgX29wdGlvbnM/OiBFeGVjT3B0aW9ucywgaW5wdXQ/OiBzdHJpbmcgfCBCdWZmZXIpID0+IFByb21pc2U8VD4sXG4gICAgVVxuICA+LFxuICBcImFib3J0YWJsZVwiXG4+O1xuXG4vKipcbiAqIEV4ZWN1dGVzIGEgY29tbWFuZCBhbmQgcmV0dXJucyB0aGUge0BsaW5rIEFzeW5jU3RhdGV9IGNvcnJlc3BvbmRpbmcgdG8gdGhlIGV4ZWN1dGlvbiBvZiB0aGUgY29tbWFuZC4gVGhlIGxhc3QgdmFsdWUgd2lsbCBiZSBrZXB0IGJldHdlZW4gY29tbWFuZCBydW5zLlxuICpcbiAqIEByZW1hcmsgV2hlbiBzcGVjaWZ5aW5nIHRoZSBhcmd1bWVudHMgdmlhIHRoZSBgY29tbWFuZGAgc3RyaW5nLCBpZiB0aGUgZmlsZSBvciBhbiBhcmd1bWVudCBvZiB0aGUgY29tbWFuZCBjb250YWlucyBzcGFjZXMsIHRoZXkgbXVzdCBiZSBlc2NhcGVkIHdpdGggYmFja3NsYXNoZXMuIFRoaXMgbWF0dGVycyBlc3BlY2lhbGx5IGlmIGBjb21tYW5kYCBpcyBub3QgYSBjb25zdGFudCBidXQgYSB2YXJpYWJsZSwgZm9yIGV4YW1wbGUgd2l0aCBgX19kaXJuYW1lYCBvciBgcHJvY2Vzcy5jd2QoKWAuIEV4Y2VwdCBmb3Igc3BhY2VzLCBubyBlc2NhcGluZy9xdW90aW5nIGlzIG5lZWRlZC5cbiAqXG4gKiBUaGUgYHNoZWxsYCBvcHRpb24gbXVzdCBiZSB1c2VkIGlmIHRoZSBjb21tYW5kIHVzZXMgc2hlbGwtc3BlY2lmaWMgZmVhdHVyZXMgKGZvciBleGFtcGxlLCBgJiZgIG9yIGB8fGApLCBhcyBvcHBvc2VkIHRvIGJlaW5nIGEgc2ltcGxlIGZpbGUgZm9sbG93ZWQgYnkgaXRzIGFyZ3VtZW50cy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiBpbXBvcnQgeyB1c2VFeGVjIH0gZnJvbSAnQHJheWNhc3QvdXRpbHMnO1xuICpcbiAqIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbW1hbmQoKSB7XG4gKiAgIGNvbnN0IHsgaXNMb2FkaW5nLCBkYXRhLCByZXZhbGlkYXRlIH0gPSB1c2VFeGVjKFwiYnJld1wiLCBbXCJpbmZvXCIsIFwiLS1qc29uPXYyXCIsIFwiLS1pbnN0YWxsZWRcIl0pO1xuICogICBjb25zdCByZXN1bHRzID0gdXNlTWVtbzx7fVtdPigoKSA9PiBKU09OLnBhcnNlKGRhdGEgfHwgXCJbXVwiKSwgW2RhdGFdKTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPExpc3QgaXNMb2FkaW5nPXtpc0xvYWRpbmd9PlxuICogICAgICB7KGRhdGEgfHwgW10pLm1hcCgoaXRlbSkgPT4gKFxuICogICAgICAgIDxMaXN0Lkl0ZW0ga2V5PXtpdGVtLmlkfSB0aXRsZT17aXRlbS5uYW1lfSAvPlxuICogICAgICApKX1cbiAqICAgIDwvTGlzdD5cbiAqICAgKTtcbiAqIH07XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUV4ZWM8VCA9IEJ1ZmZlciwgVSA9IHVuZGVmaW5lZD4oXG4gIGNvbW1hbmQ6IHN0cmluZyxcbiAgb3B0aW9uczoge1xuICAgIHBhcnNlT3V0cHV0PzogUGFyc2VFeGVjT3V0cHV0SGFuZGxlcjxULCBCdWZmZXIsIEV4ZWNPcHRpb25zPjtcbiAgfSAmIEV4ZWNPcHRpb25zICYge1xuICAgICAgZW5jb2Rpbmc6IFwiYnVmZmVyXCI7XG4gICAgfSAmIEV4ZWNDYWNoZWRQcm9taXNlT3B0aW9uczxULCBVPixcbik6IFVzZUNhY2hlZFByb21pc2VSZXR1cm5UeXBlPFQsIFU+O1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUV4ZWM8VCA9IHN0cmluZywgVSA9IHVuZGVmaW5lZD4oXG4gIGNvbW1hbmQ6IHN0cmluZyxcbiAgb3B0aW9ucz86IHtcbiAgICBwYXJzZU91dHB1dD86IFBhcnNlRXhlY091dHB1dEhhbmRsZXI8VCwgc3RyaW5nLCBFeGVjT3B0aW9ucz47XG4gIH0gJiBFeGVjT3B0aW9ucyAmIHtcbiAgICAgIGVuY29kaW5nPzogQnVmZmVyRW5jb2Rpbmc7XG4gICAgfSAmIEV4ZWNDYWNoZWRQcm9taXNlT3B0aW9uczxULCBVPixcbik6IFVzZUNhY2hlZFByb21pc2VSZXR1cm5UeXBlPFQsIFU+O1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUV4ZWM8VCA9IEJ1ZmZlciwgVSA9IHVuZGVmaW5lZD4oXG4gIGZpbGU6IHN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBhcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgZmlsZS4gTm8gZXNjYXBpbmcvcXVvdGluZyBpcyBuZWVkZWQuXG4gICAqXG4gICAqIElmIGRlZmluZWQsIHRoZSBjb21tYW5kcyBuZWVkcyB0byBiZSBhIGZpbGUgdG8gZXhlY3V0ZS4gSWYgdW5kZWZpbmVkLCB0aGUgYXJndW1lbnRzIHdpbGwgYmUgcGFyc2VkIGZyb20gdGhlIGNvbW1hbmQuXG4gICAqL1xuICBhcmdzOiBzdHJpbmdbXSxcbiAgb3B0aW9uczoge1xuICAgIHBhcnNlT3V0cHV0PzogUGFyc2VFeGVjT3V0cHV0SGFuZGxlcjxULCBCdWZmZXIsIEV4ZWNPcHRpb25zPjtcbiAgfSAmIEV4ZWNPcHRpb25zICYge1xuICAgICAgZW5jb2Rpbmc6IFwiYnVmZmVyXCI7XG4gICAgfSAmIEV4ZWNDYWNoZWRQcm9taXNlT3B0aW9uczxULCBVPixcbik6IFVzZUNhY2hlZFByb21pc2VSZXR1cm5UeXBlPFQsIFU+O1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUV4ZWM8VCA9IHN0cmluZywgVSA9IHVuZGVmaW5lZD4oXG4gIGZpbGU6IHN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBhcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgZmlsZS4gTm8gZXNjYXBpbmcvcXVvdGluZyBpcyBuZWVkZWQuXG4gICAqXG4gICAqIElmIGRlZmluZWQsIHRoZSBjb21tYW5kcyBuZWVkcyB0byBiZSBhIGZpbGUgdG8gZXhlY3V0ZS4gSWYgdW5kZWZpbmVkLCB0aGUgYXJndW1lbnRzIHdpbGwgYmUgcGFyc2VkIGZyb20gdGhlIGNvbW1hbmQuXG4gICAqL1xuICBhcmdzOiBzdHJpbmdbXSxcbiAgb3B0aW9ucz86IHtcbiAgICBwYXJzZU91dHB1dD86IFBhcnNlRXhlY091dHB1dEhhbmRsZXI8VCwgc3RyaW5nLCBFeGVjT3B0aW9ucz47XG4gIH0gJiBFeGVjT3B0aW9ucyAmIHtcbiAgICAgIGVuY29kaW5nPzogQnVmZmVyRW5jb2Rpbmc7XG4gICAgfSAmIEV4ZWNDYWNoZWRQcm9taXNlT3B0aW9uczxULCBVPixcbik6IFVzZUNhY2hlZFByb21pc2VSZXR1cm5UeXBlPFQsIFU+O1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUV4ZWM8VCwgVSA9IHVuZGVmaW5lZD4oXG4gIGNvbW1hbmQ6IHN0cmluZyxcbiAgb3B0aW9uc09yQXJncz86XG4gICAgfCBzdHJpbmdbXVxuICAgIHwgKHtcbiAgICAgICAgcGFyc2VPdXRwdXQ/OiBQYXJzZUV4ZWNPdXRwdXRIYW5kbGVyPFQsIEJ1ZmZlciwgRXhlY09wdGlvbnM+IHwgUGFyc2VFeGVjT3V0cHV0SGFuZGxlcjxULCBzdHJpbmcsIEV4ZWNPcHRpb25zPjtcbiAgICAgIH0gJiBFeGVjT3B0aW9ucyAmXG4gICAgICAgIEV4ZWNDYWNoZWRQcm9taXNlT3B0aW9uczxULCBVPiksXG4gIG9wdGlvbnM/OiB7XG4gICAgcGFyc2VPdXRwdXQ/OiBQYXJzZUV4ZWNPdXRwdXRIYW5kbGVyPFQsIEJ1ZmZlciwgRXhlY09wdGlvbnM+IHwgUGFyc2VFeGVjT3V0cHV0SGFuZGxlcjxULCBzdHJpbmcsIEV4ZWNPcHRpb25zPjtcbiAgfSAmIEV4ZWNPcHRpb25zICZcbiAgICBFeGVjQ2FjaGVkUHJvbWlzZU9wdGlvbnM8VCwgVT4sXG4pOiBVc2VDYWNoZWRQcm9taXNlUmV0dXJuVHlwZTxULCBVPiB7XG4gIGNvbnN0IHtcbiAgICBwYXJzZU91dHB1dCxcbiAgICBpbnB1dCxcbiAgICBvbkRhdGEsXG4gICAgb25XaWxsRXhlY3V0ZSxcbiAgICBpbml0aWFsRGF0YSxcbiAgICBleGVjdXRlLFxuICAgIGtlZXBQcmV2aW91c0RhdGEsXG4gICAgb25FcnJvcixcbiAgICBmYWlsdXJlVG9hc3RPcHRpb25zLFxuICAgIC4uLmV4ZWNPcHRpb25zXG4gIH0gPSBBcnJheS5pc0FycmF5KG9wdGlvbnNPckFyZ3MpID8gb3B0aW9ucyB8fCB7fSA6IG9wdGlvbnNPckFyZ3MgfHwge307XG5cbiAgY29uc3QgdXNlQ2FjaGVkUHJvbWlzZU9wdGlvbnM6IEV4ZWNDYWNoZWRQcm9taXNlT3B0aW9uczxULCBVPiA9IHtcbiAgICBpbml0aWFsRGF0YSxcbiAgICBleGVjdXRlLFxuICAgIGtlZXBQcmV2aW91c0RhdGEsXG4gICAgb25FcnJvcixcbiAgICBvbkRhdGEsXG4gICAgb25XaWxsRXhlY3V0ZSxcbiAgICBmYWlsdXJlVG9hc3RPcHRpb25zLFxuICB9O1xuXG4gIGNvbnN0IGFib3J0YWJsZSA9IHVzZVJlZjxBYm9ydENvbnRyb2xsZXI+KG51bGwpO1xuICBjb25zdCBwYXJzZU91dHB1dFJlZiA9IHVzZUxhdGVzdChwYXJzZU91dHB1dCB8fCBkZWZhdWx0UGFyc2luZyk7XG5cbiAgY29uc3QgZm4gPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAoX2NvbW1hbmQ6IHN0cmluZywgX2FyZ3M6IHN0cmluZ1tdLCBfb3B0aW9ucz86IEV4ZWNPcHRpb25zLCBpbnB1dD86IHN0cmluZyB8IEJ1ZmZlcikgPT4ge1xuICAgICAgY29uc3QgW2ZpbGUsIC4uLmFyZ3NdID0gcGFyc2VDb21tYW5kKF9jb21tYW5kLCBfYXJncyk7XG4gICAgICBjb25zdCBjb21tYW5kID0gW2ZpbGUsIC4uLmFyZ3NdLmpvaW4oXCIgXCIpO1xuXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBzdHJpcEZpbmFsTmV3bGluZTogdHJ1ZSxcbiAgICAgICAgLi4uX29wdGlvbnMsXG4gICAgICAgIHRpbWVvdXQ6IF9vcHRpb25zPy50aW1lb3V0IHx8IDEwMDAwLFxuICAgICAgICBzaWduYWw6IGFib3J0YWJsZS5jdXJyZW50Py5zaWduYWwsXG4gICAgICAgIGVuY29kaW5nOiBfb3B0aW9ucz8uZW5jb2RpbmcgPT09IG51bGwgPyBcImJ1ZmZlclwiIDogX29wdGlvbnM/LmVuY29kaW5nIHx8IFwidXRmOFwiLFxuICAgICAgICBlbnY6IHsgUEFUSDogXCIvdXNyL2xvY2FsL2JpbjovdXNyL2JpbjovYmluOi91c3Ivc2Jpbjovc2JpblwiLCAuLi5wcm9jZXNzLmVudiwgLi4uX29wdGlvbnM/LmVudiB9LFxuICAgICAgfTtcblxuICAgICAgY29uc3Qgc3Bhd25lZCA9IGNoaWxkUHJvY2Vzcy5zcGF3bihmaWxlLCBhcmdzLCBvcHRpb25zKTtcbiAgICAgIGNvbnN0IHNwYXduZWRQcm9taXNlID0gZ2V0U3Bhd25lZFByb21pc2Uoc3Bhd25lZCwgb3B0aW9ucyk7XG5cbiAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICBzcGF3bmVkLnN0ZGluLmVuZChpbnB1dCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFt7IGVycm9yLCBleGl0Q29kZSwgc2lnbmFsLCB0aW1lZE91dCB9LCBzdGRvdXRSZXN1bHQsIHN0ZGVyclJlc3VsdF0gPSBhd2FpdCBnZXRTcGF3bmVkUmVzdWx0KFxuICAgICAgICBzcGF3bmVkLFxuICAgICAgICBvcHRpb25zLFxuICAgICAgICBzcGF3bmVkUHJvbWlzZSxcbiAgICAgICk7XG4gICAgICBjb25zdCBzdGRvdXQgPSBoYW5kbGVPdXRwdXQob3B0aW9ucywgc3Rkb3V0UmVzdWx0KTtcbiAgICAgIGNvbnN0IHN0ZGVyciA9IGhhbmRsZU91dHB1dChvcHRpb25zLCBzdGRlcnJSZXN1bHQpO1xuXG4gICAgICByZXR1cm4gcGFyc2VPdXRwdXRSZWYuY3VycmVudCh7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdG9vIG1hbnkgZ2VuZXJpY3MsIEkgZ2l2ZSB1cFxuICAgICAgICBzdGRvdXQsXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdG9vIG1hbnkgZ2VuZXJpY3MsIEkgZ2l2ZSB1cFxuICAgICAgICBzdGRlcnIsXG4gICAgICAgIGVycm9yLFxuICAgICAgICBleGl0Q29kZSxcbiAgICAgICAgc2lnbmFsLFxuICAgICAgICB0aW1lZE91dCxcbiAgICAgICAgY29tbWFuZCxcbiAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgcGFyZW50RXJyb3I6IG5ldyBFcnJvcigpLFxuICAgICAgfSkgYXMgVDtcbiAgICB9LFxuICAgIFtwYXJzZU91dHB1dFJlZl0sXG4gICk7XG5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBUIGNhbid0IGJlIGEgUHJvbWlzZSBzbyBpdCdzIGFjdHVhbGx5IHRoZSBzYW1lXG4gIHJldHVybiB1c2VDYWNoZWRQcm9taXNlKGZuLCBbY29tbWFuZCwgQXJyYXkuaXNBcnJheShvcHRpb25zT3JBcmdzKSA/IG9wdGlvbnNPckFyZ3MgOiBbXSwgZXhlY09wdGlvbnMsIGlucHV0XSwge1xuICAgIC4uLnVzZUNhY2hlZFByb21pc2VPcHRpb25zLFxuICAgIGFib3J0YWJsZSxcbiAgfSk7XG59XG4iLCAiaW1wb3J0IGNoaWxkUHJvY2VzcyBmcm9tIFwibm9kZTpjaGlsZF9wcm9jZXNzXCI7XG5pbXBvcnQgeyBjb25zdGFudHMgYXMgQnVmZmVyQ29uc3RhbnRzIH0gZnJvbSBcIm5vZGU6YnVmZmVyXCI7XG5pbXBvcnQgU3RyZWFtIGZyb20gXCJub2RlOnN0cmVhbVwiO1xuaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSBcIm5vZGU6dXRpbFwiO1xuaW1wb3J0IHsgb25FeGl0IH0gZnJvbSBcIi4vdmVuZG9ycy9zaWduYWwtZXhpdFwiO1xuXG5leHBvcnQgdHlwZSBTcGF3bmVkUHJvbWlzZSA9IFByb21pc2U8e1xuICBleGl0Q29kZTogbnVtYmVyIHwgbnVsbDtcbiAgZXJyb3I/OiBFcnJvcjtcbiAgc2lnbmFsOiBOb2RlSlMuU2lnbmFscyB8IG51bGw7XG4gIHRpbWVkT3V0OiBib29sZWFuO1xufT47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTcGF3bmVkUHJvbWlzZShcbiAgc3Bhd25lZDogY2hpbGRQcm9jZXNzLkNoaWxkUHJvY2Vzc1dpdGhvdXROdWxsU3RyZWFtcyxcbiAgeyB0aW1lb3V0IH06IHsgdGltZW91dD86IG51bWJlciB9ID0ge30sXG4pOiBTcGF3bmVkUHJvbWlzZSB7XG4gIGNvbnN0IHNwYXduZWRQcm9taXNlOiBTcGF3bmVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBzcGF3bmVkLm9uKFwiZXhpdFwiLCAoZXhpdENvZGUsIHNpZ25hbCkgPT4ge1xuICAgICAgcmVzb2x2ZSh7IGV4aXRDb2RlLCBzaWduYWwsIHRpbWVkT3V0OiBmYWxzZSB9KTtcbiAgICB9KTtcblxuICAgIHNwYXduZWQub24oXCJlcnJvclwiLCAoZXJyb3IpID0+IHtcbiAgICAgIHJlamVjdChlcnJvcik7XG4gICAgfSk7XG5cbiAgICBpZiAoc3Bhd25lZC5zdGRpbikge1xuICAgICAgc3Bhd25lZC5zdGRpbi5vbihcImVycm9yXCIsIChlcnJvcikgPT4ge1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCByZW1vdmVFeGl0SGFuZGxlciA9IG9uRXhpdCgoKSA9PiB7XG4gICAgc3Bhd25lZC5raWxsKCk7XG4gIH0pO1xuXG4gIGlmICh0aW1lb3V0ID09PSAwIHx8IHRpbWVvdXQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBzcGF3bmVkUHJvbWlzZS5maW5hbGx5KCgpID0+IHJlbW92ZUV4aXRIYW5kbGVyKCkpO1xuICB9XG5cbiAgbGV0IHRpbWVvdXRJZDogTm9kZUpTLlRpbWVvdXQ7XG4gIGNvbnN0IHRpbWVvdXRQcm9taXNlOiBTcGF3bmVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChfcmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBzcGF3bmVkLmtpbGwoXCJTSUdURVJNXCIpO1xuICAgICAgcmVqZWN0KE9iamVjdC5hc3NpZ24obmV3IEVycm9yKFwiVGltZWQgb3V0XCIpLCB7IHRpbWVkT3V0OiB0cnVlLCBzaWduYWw6IFwiU0lHVEVSTVwiIH0pKTtcbiAgICB9LCB0aW1lb3V0KTtcbiAgfSk7XG5cbiAgY29uc3Qgc2FmZVNwYXduZWRQcm9taXNlID0gc3Bhd25lZFByb21pc2UuZmluYWxseSgoKSA9PiB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gIH0pO1xuXG4gIHJldHVybiBQcm9taXNlLnJhY2UoW3RpbWVvdXRQcm9taXNlLCBzYWZlU3Bhd25lZFByb21pc2VdKS5maW5hbGx5KCgpID0+IHJlbW92ZUV4aXRIYW5kbGVyKCkpO1xufVxuXG5jbGFzcyBNYXhCdWZmZXJFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJUaGUgb3V0cHV0IGlzIHRvbyBiaWdcIik7XG4gICAgdGhpcy5uYW1lID0gXCJNYXhCdWZmZXJFcnJvclwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJ1ZmZlclN0cmVhbTxUIGV4dGVuZHMgc3RyaW5nIHwgQnVmZmVyPihvcHRpb25zOiB7IGVuY29kaW5nOiBCdWZmZXJFbmNvZGluZyB8IFwiYnVmZmVyXCIgfSkge1xuICBjb25zdCB7IGVuY29kaW5nIH0gPSBvcHRpb25zO1xuICBjb25zdCBpc0J1ZmZlciA9IGVuY29kaW5nID09PSBcImJ1ZmZlclwiO1xuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgbWlzc2luZyB0aGUgbWV0aG9kcyB3ZSBhcmUgYWRkaW5nIGJlbG93XG4gIGNvbnN0IHN0cmVhbTogU3RyZWFtLlBhc3NUaHJvdWdoICYgeyBnZXRCdWZmZXJlZFZhbHVlOiAoKSA9PiBUOyBnZXRCdWZmZXJlZExlbmd0aDogKCkgPT4gbnVtYmVyIH0gPVxuICAgIG5ldyBTdHJlYW0uUGFzc1Rocm91Z2goeyBvYmplY3RNb2RlOiBmYWxzZSB9KTtcblxuICBpZiAoZW5jb2RpbmcgJiYgZW5jb2RpbmcgIT09IFwiYnVmZmVyXCIpIHtcbiAgICBzdHJlYW0uc2V0RW5jb2RpbmcoZW5jb2RpbmcpO1xuICB9XG5cbiAgbGV0IGxlbmd0aCA9IDA7XG4gIGNvbnN0IGNodW5rczogYW55W10gPSBbXTtcblxuICBzdHJlYW0ub24oXCJkYXRhXCIsIChjaHVuaykgPT4ge1xuICAgIGNodW5rcy5wdXNoKGNodW5rKTtcblxuICAgIGxlbmd0aCArPSBjaHVuay5sZW5ndGg7XG4gIH0pO1xuXG4gIHN0cmVhbS5nZXRCdWZmZXJlZFZhbHVlID0gKCkgPT4ge1xuICAgIHJldHVybiAoaXNCdWZmZXIgPyBCdWZmZXIuY29uY2F0KGNodW5rcywgbGVuZ3RoKSA6IGNodW5rcy5qb2luKFwiXCIpKSBhcyBUO1xuICB9O1xuXG4gIHN0cmVhbS5nZXRCdWZmZXJlZExlbmd0aCA9ICgpID0+IGxlbmd0aDtcblxuICByZXR1cm4gc3RyZWFtO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRTdHJlYW08VCBleHRlbmRzIHN0cmluZyB8IEJ1ZmZlcj4oXG4gIGlucHV0U3RyZWFtOiBTdHJlYW0uUmVhZGFibGUsXG4gIG9wdGlvbnM6IHsgZW5jb2Rpbmc6IEJ1ZmZlckVuY29kaW5nIHwgXCJidWZmZXJcIiB9LFxuKSB7XG4gIGNvbnN0IHN0cmVhbSA9IGJ1ZmZlclN0cmVhbTxUPihvcHRpb25zKTtcblxuICBhd2FpdCBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgcmVqZWN0UHJvbWlzZSA9IChlcnJvcjogRXJyb3IgJiB7IGJ1ZmZlcmVkRGF0YT86IFQgfSkgPT4ge1xuICAgICAgLy8gRG9uJ3QgcmV0cmlldmUgYW4gb3ZlcnNpemVkIGJ1ZmZlci5cbiAgICAgIGlmIChlcnJvciAmJiBzdHJlYW0uZ2V0QnVmZmVyZWRMZW5ndGgoKSA8PSBCdWZmZXJDb25zdGFudHMuTUFYX0xFTkdUSCkge1xuICAgICAgICBlcnJvci5idWZmZXJlZERhdGEgPSBzdHJlYW0uZ2V0QnVmZmVyZWRWYWx1ZSgpO1xuICAgICAgfVxuXG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH07XG5cbiAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgcHJvbWlzaWZ5KFN0cmVhbS5waXBlbGluZSkoaW5wdXRTdHJlYW0sIHN0cmVhbSk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJlamVjdFByb21pc2UoZXJyb3IgYXMgYW55KTtcbiAgICAgIH1cbiAgICB9KSgpO1xuXG4gICAgc3RyZWFtLm9uKFwiZGF0YVwiLCAoKSA9PiB7XG4gICAgICAvLyA4MG1iXG4gICAgICBpZiAoc3RyZWFtLmdldEJ1ZmZlcmVkTGVuZ3RoKCkgPiAxMDAwICogMTAwMCAqIDgwKSB7XG4gICAgICAgIHJlamVjdFByb21pc2UobmV3IE1heEJ1ZmZlckVycm9yKCkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gc3RyZWFtLmdldEJ1ZmZlcmVkVmFsdWUoKTtcbn1cblxuLy8gT24gZmFpbHVyZSwgYHJlc3VsdC5zdGRvdXR8c3RkZXJyYCBzaG91bGQgY29udGFpbiB0aGUgY3VycmVudGx5IGJ1ZmZlcmVkIHN0cmVhbVxuYXN5bmMgZnVuY3Rpb24gZ2V0QnVmZmVyZWREYXRhPFQgZXh0ZW5kcyBzdHJpbmcgfCBCdWZmZXI+KHN0cmVhbTogU3RyZWFtLlJlYWRhYmxlLCBzdHJlYW1Qcm9taXNlOiBQcm9taXNlPFQ+KSB7XG4gIHN0cmVhbS5kZXN0cm95KCk7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gYXdhaXQgc3RyZWFtUHJvbWlzZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gKGVycm9yIGFzIGFueSBhcyB7IGJ1ZmZlcmVkRGF0YTogVCB9KS5idWZmZXJlZERhdGE7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFNwYXduZWRSZXN1bHQ8VCBleHRlbmRzIHN0cmluZyB8IEJ1ZmZlcj4oXG4gIHsgc3Rkb3V0LCBzdGRlcnIgfTogY2hpbGRQcm9jZXNzLkNoaWxkUHJvY2Vzc1dpdGhvdXROdWxsU3RyZWFtcyxcbiAgeyBlbmNvZGluZyB9OiB7IGVuY29kaW5nOiBCdWZmZXJFbmNvZGluZyB8IFwiYnVmZmVyXCIgfSxcbiAgcHJvY2Vzc0RvbmU6IFNwYXduZWRQcm9taXNlLFxuKSB7XG4gIGNvbnN0IHN0ZG91dFByb21pc2UgPSBnZXRTdHJlYW08VD4oc3Rkb3V0LCB7IGVuY29kaW5nIH0pO1xuICBjb25zdCBzdGRlcnJQcm9taXNlID0gZ2V0U3RyZWFtPFQ+KHN0ZGVyciwgeyBlbmNvZGluZyB9KTtcblxuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbChbcHJvY2Vzc0RvbmUsIHN0ZG91dFByb21pc2UsIHN0ZGVyclByb21pc2VdKTtcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICB7XG4gICAgICAgIGVycm9yOiBlcnJvciBhcyBFcnJvcixcbiAgICAgICAgZXhpdENvZGU6IG51bGwsXG4gICAgICAgIHNpZ25hbDogZXJyb3Iuc2lnbmFsIGFzIE5vZGVKUy5TaWduYWxzIHwgbnVsbCxcbiAgICAgICAgdGltZWRPdXQ6IChlcnJvci50aW1lZE91dCBhcyBib29sZWFuKSB8fCBmYWxzZSxcbiAgICAgIH0sXG4gICAgICBnZXRCdWZmZXJlZERhdGEoc3Rkb3V0LCBzdGRvdXRQcm9taXNlKSxcbiAgICAgIGdldEJ1ZmZlcmVkRGF0YShzdGRlcnIsIHN0ZGVyclByb21pc2UpLFxuICAgIF0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0cmlwRmluYWxOZXdsaW5lPFQgZXh0ZW5kcyBzdHJpbmcgfCBCdWZmZXI+KGlucHV0OiBUKSB7XG4gIGNvbnN0IExGID0gdHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiID8gXCJcXG5cIiA6IFwiXFxuXCIuY2hhckNvZGVBdCgwKTtcbiAgY29uc3QgQ1IgPSB0eXBlb2YgaW5wdXQgPT09IFwic3RyaW5nXCIgPyBcIlxcclwiIDogXCJcXHJcIi5jaGFyQ29kZUF0KDApO1xuXG4gIGlmIChpbnB1dFtpbnB1dC5sZW5ndGggLSAxXSA9PT0gTEYpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHdlIGFyZSBkb2luZyBzb21lIG5hc3R5IHN0dWZmIGhlcmVcbiAgICBpbnB1dCA9IGlucHV0LnNsaWNlKDAsIC0xKTtcbiAgfVxuXG4gIGlmIChpbnB1dFtpbnB1dC5sZW5ndGggLSAxXSA9PT0gQ1IpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHdlIGFyZSBkb2luZyBzb21lIG5hc3R5IHN0dWZmIGhlcmVcbiAgICBpbnB1dCA9IGlucHV0LnNsaWNlKDAsIC0xKTtcbiAgfVxuXG4gIHJldHVybiBpbnB1dDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZU91dHB1dDxUIGV4dGVuZHMgc3RyaW5nIHwgQnVmZmVyPihvcHRpb25zOiB7IHN0cmlwRmluYWxOZXdsaW5lPzogYm9vbGVhbiB9LCB2YWx1ZTogVCkge1xuICBpZiAob3B0aW9ucy5zdHJpcEZpbmFsTmV3bGluZSkge1xuICAgIHJldHVybiBzdHJpcEZpbmFsTmV3bGluZSh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGdldEVycm9yUHJlZml4KHtcbiAgdGltZWRPdXQsXG4gIHRpbWVvdXQsXG4gIHNpZ25hbCxcbiAgZXhpdENvZGUsXG59OiB7XG4gIGV4aXRDb2RlOiBudW1iZXIgfCBudWxsO1xuICBzaWduYWw6IE5vZGVKUy5TaWduYWxzIHwgbnVsbDtcbiAgdGltZWRPdXQ6IGJvb2xlYW47XG4gIHRpbWVvdXQ/OiBudW1iZXI7XG59KSB7XG4gIGlmICh0aW1lZE91dCkge1xuICAgIHJldHVybiBgdGltZWQgb3V0IGFmdGVyICR7dGltZW91dH0gbWlsbGlzZWNvbmRzYDtcbiAgfVxuXG4gIGlmIChzaWduYWwgIT09IHVuZGVmaW5lZCAmJiBzaWduYWwgIT09IG51bGwpIHtcbiAgICByZXR1cm4gYHdhcyBraWxsZWQgd2l0aCAke3NpZ25hbH1gO1xuICB9XG5cbiAgaWYgKGV4aXRDb2RlICE9PSB1bmRlZmluZWQgJiYgZXhpdENvZGUgIT09IG51bGwpIHtcbiAgICByZXR1cm4gYGZhaWxlZCB3aXRoIGV4aXQgY29kZSAke2V4aXRDb2RlfWA7XG4gIH1cblxuICByZXR1cm4gXCJmYWlsZWRcIjtcbn1cblxuZnVuY3Rpb24gbWFrZUVycm9yKHtcbiAgc3Rkb3V0LFxuICBzdGRlcnIsXG4gIGVycm9yLFxuICBzaWduYWwsXG4gIGV4aXRDb2RlLFxuICBjb21tYW5kLFxuICB0aW1lZE91dCxcbiAgb3B0aW9ucyxcbiAgcGFyZW50RXJyb3IsXG59OiB7XG4gIHN0ZG91dDogc3RyaW5nIHwgQnVmZmVyO1xuICBzdGRlcnI6IHN0cmluZyB8IEJ1ZmZlcjtcbiAgZXJyb3I/OiBFcnJvcjtcbiAgZXhpdENvZGU6IG51bWJlciB8IG51bGw7XG4gIHNpZ25hbDogTm9kZUpTLlNpZ25hbHMgfCBudWxsO1xuICB0aW1lZE91dDogYm9vbGVhbjtcbiAgY29tbWFuZDogc3RyaW5nO1xuICBvcHRpb25zPzogeyB0aW1lb3V0PzogbnVtYmVyIH07XG4gIHBhcmVudEVycm9yOiBFcnJvcjtcbn0pIHtcbiAgY29uc3QgcHJlZml4ID0gZ2V0RXJyb3JQcmVmaXgoeyB0aW1lZE91dCwgdGltZW91dDogb3B0aW9ucz8udGltZW91dCwgc2lnbmFsLCBleGl0Q29kZSB9KTtcbiAgY29uc3QgZXhlY2FNZXNzYWdlID0gYENvbW1hbmQgJHtwcmVmaXh9OiAke2NvbW1hbmR9YDtcbiAgY29uc3Qgc2hvcnRNZXNzYWdlID0gZXJyb3IgPyBgJHtleGVjYU1lc3NhZ2V9XFxuJHtlcnJvci5tZXNzYWdlfWAgOiBleGVjYU1lc3NhZ2U7XG4gIGNvbnN0IG1lc3NhZ2UgPSBbc2hvcnRNZXNzYWdlLCBzdGRlcnIsIHN0ZG91dF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCJcXG5cIik7XG5cbiAgaWYgKGVycm9yKSB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBub3Qgb24gRXJyb3JcbiAgICBlcnJvci5vcmlnaW5hbE1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xuICB9IGVsc2Uge1xuICAgIGVycm9yID0gcGFyZW50RXJyb3I7XG4gIH1cblxuICBlcnJvci5tZXNzYWdlID0gbWVzc2FnZTtcblxuICAvLyBAdHMtZXhwZWN0LWVycm9yIG5vdCBvbiBFcnJvclxuICBlcnJvci5zaG9ydE1lc3NhZ2UgPSBzaG9ydE1lc3NhZ2U7XG4gIC8vIEB0cy1leHBlY3QtZXJyb3Igbm90IG9uIEVycm9yXG4gIGVycm9yLmNvbW1hbmQgPSBjb21tYW5kO1xuICAvLyBAdHMtZXhwZWN0LWVycm9yIG5vdCBvbiBFcnJvclxuICBlcnJvci5leGl0Q29kZSA9IGV4aXRDb2RlO1xuICAvLyBAdHMtZXhwZWN0LWVycm9yIG5vdCBvbiBFcnJvclxuICBlcnJvci5zaWduYWwgPSBzaWduYWw7XG4gIC8vIEB0cy1leHBlY3QtZXJyb3Igbm90IG9uIEVycm9yXG4gIGVycm9yLnN0ZG91dCA9IHN0ZG91dDtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBub3Qgb24gRXJyb3JcbiAgZXJyb3Iuc3RkZXJyID0gc3RkZXJyO1xuXG4gIGlmIChcImJ1ZmZlcmVkRGF0YVwiIGluIGVycm9yKSB7XG4gICAgZGVsZXRlIGVycm9yW1wiYnVmZmVyZWREYXRhXCJdO1xuICB9XG5cbiAgcmV0dXJuIGVycm9yO1xufVxuXG5leHBvcnQgdHlwZSBQYXJzZUV4ZWNPdXRwdXRIYW5kbGVyPFxuICBULFxuICBEZWNvZGVkT3V0cHV0IGV4dGVuZHMgc3RyaW5nIHwgQnVmZmVyID0gc3RyaW5nIHwgQnVmZmVyLFxuICBPcHRpb25zID0gdW5rbm93bixcbj4gPSAoYXJnczoge1xuICAvKiogVGhlIG91dHB1dCBvZiB0aGUgcHJvY2VzcyBvbiBzdGRvdXQuICovXG4gIHN0ZG91dDogRGVjb2RlZE91dHB1dDtcbiAgLyoqIFRoZSBvdXRwdXQgb2YgdGhlIHByb2Nlc3Mgb24gc3RkZXJyLiAqL1xuICBzdGRlcnI6IERlY29kZWRPdXRwdXQ7XG4gIGVycm9yPzogRXJyb3I7XG4gIC8qKiBUaGUgbnVtZXJpYyBleGl0IGNvZGUgb2YgdGhlIHByb2Nlc3MgdGhhdCB3YXMgcnVuLiAqL1xuICBleGl0Q29kZTogbnVtYmVyIHwgbnVsbDtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBzaWduYWwgdGhhdCB3YXMgdXNlZCB0byB0ZXJtaW5hdGUgdGhlIHByb2Nlc3MuIEZvciBleGFtcGxlLCBTSUdGUEUuXG4gICAqXG4gICAqIElmIGEgc2lnbmFsIHRlcm1pbmF0ZWQgdGhlIHByb2Nlc3MsIHRoaXMgcHJvcGVydHkgaXMgZGVmaW5lZC4gT3RoZXJ3aXNlIGl0IGlzIG51bGwuXG4gICAqL1xuICBzaWduYWw6IE5vZGVKUy5TaWduYWxzIHwgbnVsbDtcbiAgLyoqIFdoZXRoZXIgdGhlIHByb2Nlc3MgdGltZWQgb3V0LiAqL1xuICB0aW1lZE91dDogYm9vbGVhbjtcbiAgLyoqIFRoZSBjb21tYW5kIHRoYXQgd2FzIHJ1biwgZm9yIGxvZ2dpbmcgcHVycG9zZXMuICovXG4gIGNvbW1hbmQ6IHN0cmluZztcbiAgb3B0aW9ucz86IE9wdGlvbnM7XG59KSA9PiBUO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFBhcnNpbmc8VCBleHRlbmRzIHN0cmluZyB8IEJ1ZmZlcj4oe1xuICBzdGRvdXQsXG4gIHN0ZGVycixcbiAgZXJyb3IsXG4gIGV4aXRDb2RlLFxuICBzaWduYWwsXG4gIHRpbWVkT3V0LFxuICBjb21tYW5kLFxuICBvcHRpb25zLFxuICBwYXJlbnRFcnJvcixcbn06IHtcbiAgc3Rkb3V0OiBUO1xuICBzdGRlcnI6IFQ7XG4gIGVycm9yPzogRXJyb3I7XG4gIGV4aXRDb2RlOiBudW1iZXIgfCBudWxsO1xuICBzaWduYWw6IE5vZGVKUy5TaWduYWxzIHwgbnVsbDtcbiAgdGltZWRPdXQ6IGJvb2xlYW47XG4gIGNvbW1hbmQ6IHN0cmluZztcbiAgb3B0aW9ucz86IHsgdGltZW91dD86IG51bWJlciB9O1xuICBwYXJlbnRFcnJvcjogRXJyb3I7XG59KSB7XG4gIGlmIChlcnJvciB8fCBleGl0Q29kZSAhPT0gMCB8fCBzaWduYWwgIT09IG51bGwpIHtcbiAgICBjb25zdCByZXR1cm5lZEVycm9yID0gbWFrZUVycm9yKHtcbiAgICAgIGVycm9yLFxuICAgICAgZXhpdENvZGUsXG4gICAgICBzaWduYWwsXG4gICAgICBzdGRvdXQsXG4gICAgICBzdGRlcnIsXG4gICAgICBjb21tYW5kLFxuICAgICAgdGltZWRPdXQsXG4gICAgICBvcHRpb25zLFxuICAgICAgcGFyZW50RXJyb3IsXG4gICAgfSk7XG5cbiAgICB0aHJvdyByZXR1cm5lZEVycm9yO1xuICB9XG5cbiAgcmV0dXJuIHN0ZG91dDtcbn1cbiIsICIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnQgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbi8vIE5vdGU6IHNpbmNlIG55YyB1c2VzIHRoaXMgbW9kdWxlIHRvIG91dHB1dCBjb3ZlcmFnZSwgYW55IGxpbmVzXG4vLyB0aGF0IGFyZSBpbiB0aGUgZGlyZWN0IHN5bmMgZmxvdyBvZiBueWMncyBvdXRwdXRDb3ZlcmFnZSBhcmVcbi8vIGlnbm9yZWQsIHNpbmNlIHdlIGNhbiBuZXZlciBnZXQgY292ZXJhZ2UgZm9yIHRoZW0uXG4vLyBncmFiIGEgcmVmZXJlbmNlIHRvIG5vZGUncyByZWFsIHByb2Nlc3Mgb2JqZWN0IHJpZ2h0IGF3YXlcblxuY29uc3QgcHJvY2Vzc09rID0gKHByb2Nlc3M6IGFueSkgPT5cbiAgISFwcm9jZXNzICYmXG4gIHR5cGVvZiBwcm9jZXNzID09PSBcIm9iamVjdFwiICYmXG4gIHR5cGVvZiBwcm9jZXNzLnJlbW92ZUxpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgdHlwZW9mIHByb2Nlc3MuZW1pdCA9PT0gXCJmdW5jdGlvblwiICYmXG4gIHR5cGVvZiBwcm9jZXNzLnJlYWxseUV4aXQgPT09IFwiZnVuY3Rpb25cIiAmJlxuICB0eXBlb2YgcHJvY2Vzcy5saXN0ZW5lcnMgPT09IFwiZnVuY3Rpb25cIiAmJlxuICB0eXBlb2YgcHJvY2Vzcy5raWxsID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgdHlwZW9mIHByb2Nlc3MucGlkID09PSBcIm51bWJlclwiICYmXG4gIHR5cGVvZiBwcm9jZXNzLm9uID09PSBcImZ1bmN0aW9uXCI7XG5jb25zdCBrRXhpdEVtaXR0ZXIgPSAvKiAjX19QVVJFX18gKi8gU3ltYm9sLmZvcihcInNpZ25hbC1leGl0IGVtaXR0ZXJcIik7XG4vLyB0ZWVueSBzcGVjaWFsIHB1cnBvc2UgZWVcbmNsYXNzIEVtaXR0ZXIge1xuICBlbWl0dGVkID0ge1xuICAgIGFmdGVyRXhpdDogZmFsc2UsXG4gICAgZXhpdDogZmFsc2UsXG4gIH07XG4gIGxpc3RlbmVycyA9IHtcbiAgICBhZnRlckV4aXQ6IFtdLFxuICAgIGV4aXQ6IFtdLFxuICB9O1xuICBjb3VudCA9IDA7XG4gIGlkID0gTWF0aC5yYW5kb20oKTtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmIChnbG9iYWxba0V4aXRFbWl0dGVyXSkge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgcmV0dXJuIGdsb2JhbFtrRXhpdEVtaXR0ZXJdO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2xvYmFsLCBrRXhpdEVtaXR0ZXIsIHtcbiAgICAgIHZhbHVlOiB0aGlzLFxuICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgIH0pO1xuICB9XG4gIG9uKGV2OiBhbnksIGZuOiBhbnkpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdGhpcy5saXN0ZW5lcnNbZXZdLnB1c2goZm4pO1xuICB9XG4gIHJlbW92ZUxpc3RlbmVyKGV2OiBhbnksIGZuOiBhbnkpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3QgbGlzdCA9IHRoaXMubGlzdGVuZXJzW2V2XTtcbiAgICBjb25zdCBpID0gbGlzdC5pbmRleE9mKGZuKTtcbiAgICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgICBpZiAoaSA9PT0gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLyogYzggaWdub3JlIHN0b3AgKi9cbiAgICBpZiAoaSA9PT0gMCAmJiBsaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgbGlzdC5sZW5ndGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICB9XG4gIH1cbiAgZW1pdChldjogYW55LCBjb2RlOiBhbnksIHNpZ25hbDogYW55KTogYW55IHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKHRoaXMuZW1pdHRlZFtldl0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHRoaXMuZW1pdHRlZFtldl0gPSB0cnVlO1xuICAgIGxldCByZXQgPSBmYWxzZTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZm9yIChjb25zdCBmbiBvZiB0aGlzLmxpc3RlbmVyc1tldl0pIHtcbiAgICAgIHJldCA9IGZuKGNvZGUsIHNpZ25hbCkgPT09IHRydWUgfHwgcmV0O1xuICAgIH1cbiAgICBpZiAoZXYgPT09IFwiZXhpdFwiKSB7XG4gICAgICByZXQgPSB0aGlzLmVtaXQoXCJhZnRlckV4aXRcIiwgY29kZSwgc2lnbmFsKSB8fCByZXQ7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cbn1cblxuY2xhc3MgU2lnbmFsRXhpdEZhbGxiYWNrIHtcbiAgb25FeGl0KCkge1xuICAgIHJldHVybiAoKSA9PiB7fTtcbiAgfVxuICBsb2FkKCkge31cbiAgdW5sb2FkKCkge31cbn1cbmNsYXNzIFNpZ25hbEV4aXQge1xuICAvLyBcIlNJR0hVUFwiIHRocm93cyBhbiBgRU5PU1lTYCBlcnJvciBvbiBXaW5kb3dzLFxuICAvLyBzbyB1c2UgYSBzdXBwb3J0ZWQgc2lnbmFsIGluc3RlYWRcbiAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gIC8vIEB0cy1pZ25vcmVcbiAgI2h1cFNpZyA9IHByb2Nlc3MucGxhdGZvcm0gPT09IFwid2luMzJcIiA/IFwiU0lHSU5UXCIgOiBcIlNJR0hVUFwiO1xuICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xuICAjZW1pdHRlciA9IG5ldyBFbWl0dGVyKCk7XG4gICNwcm9jZXNzOiBhbnk7XG4gICNvcmlnaW5hbFByb2Nlc3NFbWl0OiBhbnk7XG4gICNvcmlnaW5hbFByb2Nlc3NSZWFsbHlFeGl0OiBhbnk7XG4gICNzaWdMaXN0ZW5lcnMgPSB7fTtcbiAgI2xvYWRlZCA9IGZhbHNlO1xuICAjc2lnbmFsczogc3RyaW5nW10gPSBbXTtcbiAgY29uc3RydWN0b3IocHJvY2VzczogYW55KSB7XG4gICAgLyoqXG4gICAgICogVGhpcyBpcyBub3QgdGhlIHNldCBvZiBhbGwgcG9zc2libGUgc2lnbmFscy5cbiAgICAgKlxuICAgICAqIEl0IElTLCBob3dldmVyLCB0aGUgc2V0IG9mIGFsbCBzaWduYWxzIHRoYXQgdHJpZ2dlclxuICAgICAqIGFuIGV4aXQgb24gZWl0aGVyIExpbnV4IG9yIEJTRCBzeXN0ZW1zLiAgTGludXggaXMgYVxuICAgICAqIHN1cGVyc2V0IG9mIHRoZSBzaWduYWwgbmFtZXMgc3VwcG9ydGVkIG9uIEJTRCwgYW5kXG4gICAgICogdGhlIHVua25vd24gc2lnbmFscyBqdXN0IGZhaWwgdG8gcmVnaXN0ZXIsIHNvIHdlIGNhblxuICAgICAqIGNhdGNoIHRoYXQgZWFzaWx5IGVub3VnaC5cbiAgICAgKlxuICAgICAqIFdpbmRvd3Mgc2lnbmFscyBhcmUgYSBkaWZmZXJlbnQgc2V0LCBzaW5jZSB0aGVyZSBhcmVcbiAgICAgKiBzaWduYWxzIHRoYXQgdGVybWluYXRlIFdpbmRvd3MgcHJvY2Vzc2VzLCBidXQgZG9uJ3RcbiAgICAgKiB0ZXJtaW5hdGUgKG9yIGRvbid0IGV2ZW4gZXhpc3QpIG9uIFBvc2l4IHN5c3RlbXMuXG4gICAgICpcbiAgICAgKiBEb24ndCBib3RoZXIgd2l0aCBTSUdLSUxMLiAgSXQncyB1bmNhdGNoYWJsZSwgd2hpY2hcbiAgICAgKiBtZWFucyB0aGF0IHdlIGNhbid0IGZpcmUgYW55IGNhbGxiYWNrcyBhbnl3YXkuXG4gICAgICpcbiAgICAgKiBJZiBhIHVzZXIgZG9lcyBoYXBwZW4gdG8gcmVnaXN0ZXIgYSBoYW5kbGVyIG9uIGEgbm9uLVxuICAgICAqIGZhdGFsIHNpZ25hbCBsaWtlIFNJR1dJTkNIIG9yIHNvbWV0aGluZywgYW5kIHRoZW5cbiAgICAgKiBleGl0LCBpdCdsbCBlbmQgdXAgZmlyaW5nIGBwcm9jZXNzLmVtaXQoJ2V4aXQnKWAsIHNvXG4gICAgICogdGhlIGhhbmRsZXIgd2lsbCBiZSBmaXJlZCBhbnl3YXkuXG4gICAgICpcbiAgICAgKiBTSUdCVVMsIFNJR0ZQRSwgU0lHU0VHViBhbmQgU0lHSUxMLCB3aGVuIG5vdCByYWlzZWRcbiAgICAgKiBhcnRpZmljaWFsbHksIGluaGVyZW50bHkgbGVhdmUgdGhlIHByb2Nlc3MgaW4gYVxuICAgICAqIHN0YXRlIGZyb20gd2hpY2ggaXQgaXMgbm90IHNhZmUgdG8gdHJ5IGFuZCBlbnRlciBKU1xuICAgICAqIGxpc3RlbmVycy5cbiAgICAgKi9cbiAgICB0aGlzLiNzaWduYWxzLnB1c2goXCJTSUdIVVBcIiwgXCJTSUdJTlRcIiwgXCJTSUdURVJNXCIpO1xuICAgIGlmIChnbG9iYWxUaGlzLnByb2Nlc3MucGxhdGZvcm0gIT09IFwid2luMzJcIikge1xuICAgICAgdGhpcy4jc2lnbmFscy5wdXNoKFxuICAgICAgICBcIlNJR0FMUk1cIixcbiAgICAgICAgXCJTSUdBQlJUXCIsXG4gICAgICAgIFwiU0lHVlRBTFJNXCIsXG4gICAgICAgIFwiU0lHWENQVVwiLFxuICAgICAgICBcIlNJR1hGU1pcIixcbiAgICAgICAgXCJTSUdVU1IyXCIsXG4gICAgICAgIFwiU0lHVFJBUFwiLFxuICAgICAgICBcIlNJR1NZU1wiLFxuICAgICAgICBcIlNJR1FVSVRcIixcbiAgICAgICAgXCJTSUdJT1RcIixcbiAgICAgICAgLy8gc2hvdWxkIGRldGVjdCBwcm9maWxlciBhbmQgZW5hYmxlL2Rpc2FibGUgYWNjb3JkaW5nbHkuXG4gICAgICAgIC8vIHNlZSAjMjFcbiAgICAgICAgLy8gJ1NJR1BST0YnXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZ2xvYmFsVGhpcy5wcm9jZXNzLnBsYXRmb3JtID09PSBcImxpbnV4XCIpIHtcbiAgICAgIHRoaXMuI3NpZ25hbHMucHVzaChcIlNJR0lPXCIsIFwiU0lHUE9MTFwiLCBcIlNJR1BXUlwiLCBcIlNJR1NUS0ZMVFwiKTtcbiAgICB9XG4gICAgdGhpcy4jcHJvY2VzcyA9IHByb2Nlc3M7XG4gICAgLy8geyA8c2lnbmFsPjogPGxpc3RlbmVyIGZuPiwgLi4uIH1cbiAgICB0aGlzLiNzaWdMaXN0ZW5lcnMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHNpZyBvZiB0aGlzLiNzaWduYWxzKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLiNzaWdMaXN0ZW5lcnNbc2lnXSA9ICgpID0+IHtcbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIG90aGVyIGxpc3RlbmVycywgYW4gZXhpdCBpcyBjb21pbmchXG4gICAgICAgIC8vIFNpbXBsZXN0IHdheTogcmVtb3ZlIHVzIGFuZCB0aGVuIHJlLXNlbmQgdGhlIHNpZ25hbC5cbiAgICAgICAgLy8gV2Uga25vdyB0aGF0IHRoaXMgd2lsbCBraWxsIHRoZSBwcm9jZXNzLCBzbyB3ZSBjYW5cbiAgICAgICAgLy8gc2FmZWx5IGVtaXQgbm93LlxuICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLiNwcm9jZXNzLmxpc3RlbmVycyhzaWcpO1xuICAgICAgICBsZXQgeyBjb3VudCB9ID0gdGhpcy4jZW1pdHRlcjtcbiAgICAgICAgLy8gVGhpcyBpcyBhIHdvcmthcm91bmQgZm9yIHRoZSBmYWN0IHRoYXQgc2lnbmFsLWV4aXQgdjMgYW5kIHNpZ25hbFxuICAgICAgICAvLyBleGl0IHY0IGFyZSBub3QgYXdhcmUgb2YgZWFjaCBvdGhlciwgYW5kIGVhY2ggd2lsbCBhdHRlbXB0IHRvIGxldFxuICAgICAgICAvLyB0aGUgb3RoZXIgaGFuZGxlIGl0LCBzbyBuZWl0aGVyIG9mIHRoZW0gZG8uIFRvIGNvcnJlY3QgdGhpcywgd2VcbiAgICAgICAgLy8gZGV0ZWN0IGlmIHdlJ3JlIHRoZSBvbmx5IGhhbmRsZXIgKmV4Y2VwdCogZm9yIHByZXZpb3VzIHZlcnNpb25zXG4gICAgICAgIC8vIG9mIHNpZ25hbC1leGl0LCBhbmQgaW5jcmVtZW50IGJ5IHRoZSBjb3VudCBvZiBsaXN0ZW5lcnMgaXQgaGFzXG4gICAgICAgIC8vIGNyZWF0ZWQuXG4gICAgICAgIC8qIGM4IGlnbm9yZSBzdGFydCAqL1xuICAgICAgICBjb25zdCBwID0gcHJvY2VzcztcbiAgICAgICAgaWYgKHR5cGVvZiBwLl9fc2lnbmFsX2V4aXRfZW1pdHRlcl9fID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBwLl9fc2lnbmFsX2V4aXRfZW1pdHRlcl9fLmNvdW50ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgY291bnQgKz0gcC5fX3NpZ25hbF9leGl0X2VtaXR0ZXJfXy5jb3VudDtcbiAgICAgICAgfVxuICAgICAgICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xuICAgICAgICBpZiAobGlzdGVuZXJzLmxlbmd0aCA9PT0gY291bnQpIHtcbiAgICAgICAgICB0aGlzLnVubG9hZCgpO1xuICAgICAgICAgIGNvbnN0IHJldCA9IHRoaXMuI2VtaXR0ZXIuZW1pdChcImV4aXRcIiwgbnVsbCwgc2lnKTtcbiAgICAgICAgICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgICAgICAgICBjb25zdCBzID0gc2lnID09PSBcIlNJR0hVUFwiID8gdGhpcy4jaHVwU2lnIDogc2lnO1xuICAgICAgICAgIGlmICghcmV0KSBwcm9jZXNzLmtpbGwocHJvY2Vzcy5waWQsIHMpO1xuICAgICAgICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIHRoaXMuI29yaWdpbmFsUHJvY2Vzc1JlYWxseUV4aXQgPSBwcm9jZXNzLnJlYWxseUV4aXQ7XG4gICAgdGhpcy4jb3JpZ2luYWxQcm9jZXNzRW1pdCA9IHByb2Nlc3MuZW1pdDtcbiAgfVxuICBvbkV4aXQoY2I6IGFueSwgb3B0czogYW55KSB7XG4gICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgaWYgKCFwcm9jZXNzT2sodGhpcy4jcHJvY2VzcykpIHtcbiAgICAgIHJldHVybiAoKSA9PiB7fTtcbiAgICB9XG4gICAgLyogYzggaWdub3JlIHN0b3AgKi9cbiAgICBpZiAodGhpcy4jbG9hZGVkID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5sb2FkKCk7XG4gICAgfVxuICAgIGNvbnN0IGV2ID0gb3B0cz8uYWx3YXlzTGFzdCA/IFwiYWZ0ZXJFeGl0XCIgOiBcImV4aXRcIjtcbiAgICB0aGlzLiNlbWl0dGVyLm9uKGV2LCBjYik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHRoaXMuI2VtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoZXYsIGNiKTtcbiAgICAgIGlmICh0aGlzLiNlbWl0dGVyLmxpc3RlbmVyc1tcImV4aXRcIl0ubGVuZ3RoID09PSAwICYmIHRoaXMuI2VtaXR0ZXIubGlzdGVuZXJzW1wiYWZ0ZXJFeGl0XCJdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLnVubG9hZCgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgbG9hZCgpIHtcbiAgICBpZiAodGhpcy4jbG9hZGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuI2xvYWRlZCA9IHRydWU7XG4gICAgLy8gVGhpcyBpcyB0aGUgbnVtYmVyIG9mIG9uU2lnbmFsRXhpdCdzIHRoYXQgYXJlIGluIHBsYXkuXG4gICAgLy8gSXQncyBpbXBvcnRhbnQgc28gdGhhdCB3ZSBjYW4gY291bnQgdGhlIGNvcnJlY3QgbnVtYmVyIG9mXG4gICAgLy8gbGlzdGVuZXJzIG9uIHNpZ25hbHMsIGFuZCBkb24ndCB3YWl0IGZvciB0aGUgb3RoZXIgb25lIHRvXG4gICAgLy8gaGFuZGxlIGl0IGluc3RlYWQgb2YgdXMuXG4gICAgdGhpcy4jZW1pdHRlci5jb3VudCArPSAxO1xuICAgIGZvciAoY29uc3Qgc2lnIG9mIHRoaXMuI3NpZ25hbHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgZm4gPSB0aGlzLiNzaWdMaXN0ZW5lcnNbc2lnXTtcbiAgICAgICAgaWYgKGZuKSB0aGlzLiNwcm9jZXNzLm9uKHNpZywgZm4pO1xuICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAvLyBuby1vcFxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLiNwcm9jZXNzLmVtaXQgPSAoZXY6IGFueSwgLi4uYTogYW55KSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy4jcHJvY2Vzc0VtaXQoZXYsIC4uLmEpO1xuICAgIH07XG4gICAgdGhpcy4jcHJvY2Vzcy5yZWFsbHlFeGl0ID0gKGNvZGU6IGFueSkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuI3Byb2Nlc3NSZWFsbHlFeGl0KGNvZGUpO1xuICAgIH07XG4gIH1cbiAgdW5sb2FkKCkge1xuICAgIGlmICghdGhpcy4jbG9hZGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuI2xvYWRlZCA9IGZhbHNlO1xuICAgIHRoaXMuI3NpZ25hbHMuZm9yRWFjaCgoc2lnKSA9PiB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBjb25zdCBsaXN0ZW5lciA9IHRoaXMuI3NpZ0xpc3RlbmVyc1tzaWddO1xuICAgICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgICBpZiAoIWxpc3RlbmVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxpc3RlbmVyIG5vdCBkZWZpbmVkIGZvciBzaWduYWw6IFwiICsgc2lnKTtcbiAgICAgIH1cbiAgICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLiNwcm9jZXNzLnJlbW92ZUxpc3RlbmVyKHNpZywgbGlzdGVuZXIpO1xuICAgICAgICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgLy8gbm8tb3BcbiAgICAgIH1cbiAgICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXG4gICAgfSk7XG4gICAgdGhpcy4jcHJvY2Vzcy5lbWl0ID0gdGhpcy4jb3JpZ2luYWxQcm9jZXNzRW1pdDtcbiAgICB0aGlzLiNwcm9jZXNzLnJlYWxseUV4aXQgPSB0aGlzLiNvcmlnaW5hbFByb2Nlc3NSZWFsbHlFeGl0O1xuICAgIHRoaXMuI2VtaXR0ZXIuY291bnQgLT0gMTtcbiAgfVxuICAjcHJvY2Vzc1JlYWxseUV4aXQoY29kZTogYW55KSB7XG4gICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgaWYgKCFwcm9jZXNzT2sodGhpcy4jcHJvY2VzcykpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICB0aGlzLiNwcm9jZXNzLmV4aXRDb2RlID0gY29kZSB8fCAwO1xuICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXG4gICAgdGhpcy4jZW1pdHRlci5lbWl0KFwiZXhpdFwiLCB0aGlzLiNwcm9jZXNzLmV4aXRDb2RlLCBudWxsKTtcbiAgICByZXR1cm4gdGhpcy4jb3JpZ2luYWxQcm9jZXNzUmVhbGx5RXhpdC5jYWxsKHRoaXMuI3Byb2Nlc3MsIHRoaXMuI3Byb2Nlc3MuZXhpdENvZGUpO1xuICB9XG4gICNwcm9jZXNzRW1pdChldjogYW55LCAuLi5hcmdzOiBhbnkpIHtcbiAgICBjb25zdCBvZyA9IHRoaXMuI29yaWdpbmFsUHJvY2Vzc0VtaXQ7XG4gICAgaWYgKGV2ID09PSBcImV4aXRcIiAmJiBwcm9jZXNzT2sodGhpcy4jcHJvY2VzcykpIHtcbiAgICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICB0aGlzLiNwcm9jZXNzLmV4aXRDb2RlID0gYXJnc1swXTtcbiAgICAgICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgICB9XG4gICAgICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgICAgIGNvbnN0IHJldCA9IG9nLmNhbGwodGhpcy4jcHJvY2VzcywgZXYsIC4uLmFyZ3MpO1xuICAgICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgICB0aGlzLiNlbWl0dGVyLmVtaXQoXCJleGl0XCIsIHRoaXMuI3Byb2Nlc3MuZXhpdENvZGUsIG51bGwpO1xuICAgICAgLyogYzggaWdub3JlIHN0b3AgKi9cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvZy5jYWxsKHRoaXMuI3Byb2Nlc3MsIGV2LCAuLi5hcmdzKTtcbiAgICB9XG4gIH1cbn1cblxubGV0IHNpZ25hbEV4aXQ6IFNpZ25hbEV4aXQgfCBTaWduYWxFeGl0RmFsbGJhY2sgfCBudWxsID0gbnVsbDtcblxuZXhwb3J0IGNvbnN0IG9uRXhpdCA9IChcbiAgY2I6IGFueSxcbiAgb3B0cz86IHtcbiAgICBhbHdheXNMYXN0PzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgfSxcbikgPT4ge1xuICBpZiAoIXNpZ25hbEV4aXQpIHtcbiAgICBzaWduYWxFeGl0ID0gcHJvY2Vzc09rKHByb2Nlc3MpID8gbmV3IFNpZ25hbEV4aXQocHJvY2VzcykgOiBuZXcgU2lnbmFsRXhpdEZhbGxiYWNrKCk7XG4gIH1cbiAgcmV0dXJuIHNpZ25hbEV4aXQub25FeGl0KGNiLCBvcHRzKTtcbn07XG4iLCAiaW1wb3J0IHsgZW52aXJvbm1lbnQgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG5pbXBvcnQgeyBjcmVhdGVSZWFkU3RyZWFtLCBjcmVhdGVXcml0ZVN0cmVhbSwgbWtkaXJTeW5jLCBTdGF0cyB9IGZyb20gXCJub2RlOmZzXCI7XG5pbXBvcnQgeyBzdGF0IH0gZnJvbSBcIm5vZGU6ZnMvcHJvbWlzZXNcIjtcbmltcG9ydCB7IGpvaW4sIG5vcm1hbGl6ZSB9IGZyb20gXCJub2RlOnBhdGhcIjtcbmltcG9ydCB7IHBpcGVsaW5lIH0gZnJvbSBcIm5vZGU6c3RyZWFtL3Byb21pc2VzXCI7XG5pbXBvcnQgeyB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBDaGFpbiBmcm9tIFwiLi92ZW5kb3JzL3N0cmVhbS1jaGFpblwiO1xuaW1wb3J0IHsgcGFyc2VyLCBQaWNrUGFyc2VyLCBTdHJlYW1BcnJheSB9IGZyb20gXCIuL3ZlbmRvcnMvc3RyZWFtLWpzb25cIjtcbmltcG9ydCB7IGlzSlNPTiB9IGZyb20gXCIuL2ZldGNoLXV0aWxzXCI7XG5pbXBvcnQgeyBGbGF0dGVuLCBGdW5jdGlvblJldHVybmluZ1BhZ2luYXRlZFByb21pc2UsIFVzZUNhY2hlZFByb21pc2VSZXR1cm5UeXBlIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IENhY2hlZFByb21pc2VPcHRpb25zLCB1c2VDYWNoZWRQcm9taXNlIH0gZnJvbSBcIi4vdXNlQ2FjaGVkUHJvbWlzZVwiO1xuaW1wb3J0IHsgaGFzaCB9IGZyb20gXCIuL2hlbHBlcnNcIjtcblxudHlwZSBSZXF1ZXN0SW5mbyA9IHN0cmluZyB8IFVSTCB8IGdsb2JhbFRoaXMuUmVxdWVzdDtcblxuYXN5bmMgZnVuY3Rpb24gY2FjaGUodXJsOiBSZXF1ZXN0SW5mbywgZGVzdGluYXRpb246IHN0cmluZywgZmV0Y2hPcHRpb25zPzogUmVxdWVzdEluaXQpIHtcbiAgaWYgKHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgfHwgdXJsLnN0YXJ0c1dpdGgoXCJodHRwOi8vXCIpIHx8IHVybC5zdGFydHNXaXRoKFwiaHR0cHM6Ly9cIikpIHtcbiAgICByZXR1cm4gYXdhaXQgY2FjaGVVUkwodXJsLCBkZXN0aW5hdGlvbiwgZmV0Y2hPcHRpb25zKTtcbiAgfSBlbHNlIGlmICh1cmwuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikpIHtcbiAgICByZXR1cm4gYXdhaXQgY2FjaGVGaWxlKFxuICAgICAgbm9ybWFsaXplKGRlY29kZVVSSUNvbXBvbmVudChuZXcgVVJMKHVybCkucGF0aG5hbWUpKSxcbiAgICAgIGRlc3RpbmF0aW9uLFxuICAgICAgZmV0Y2hPcHRpb25zPy5zaWduYWwgPyBmZXRjaE9wdGlvbnMuc2lnbmFsIDogdW5kZWZpbmVkLFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiT25seSBIVFRQKFMpIG9yIGZpbGUgVVJMcyBhcmUgc3VwcG9ydGVkXCIpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNhY2hlVVJMKHVybDogUmVxdWVzdEluZm8sIGRlc3RpbmF0aW9uOiBzdHJpbmcsIGZldGNoT3B0aW9ucz86IFJlcXVlc3RJbml0KSB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCBmZXRjaE9wdGlvbnMpO1xuXG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggVVJMXCIpO1xuICB9XG5cbiAgaWYgKCFpc0pTT04ocmVzcG9uc2UuaGVhZGVycy5nZXQoXCJjb250ZW50LXR5cGVcIikpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVVJMIGRvZXMgbm90IHJldHVybiBKU09OXCIpO1xuICB9XG4gIGlmICghcmVzcG9uc2UuYm9keSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byByZXRyaWV2ZSBleHBlY3RlZCBKU09OIGNvbnRlbnQ6IFJlc3BvbnNlIGJvZHkgaXMgbWlzc2luZyBvciBpbmFjY2Vzc2libGUuXCIpO1xuICB9XG4gIGF3YWl0IHBpcGVsaW5lKFxuICAgIHJlc3BvbnNlLmJvZHkgYXMgdW5rbm93biBhcyBOb2RlSlMuUmVhZGFibGVTdHJlYW0sXG4gICAgY3JlYXRlV3JpdGVTdHJlYW0oZGVzdGluYXRpb24pLFxuICAgIGZldGNoT3B0aW9ucz8uc2lnbmFsID8geyBzaWduYWw6IGZldGNoT3B0aW9ucy5zaWduYWwgfSA6IHVuZGVmaW5lZCxcbiAgKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2FjaGVGaWxlKHNvdXJjZTogc3RyaW5nLCBkZXN0aW5hdGlvbjogc3RyaW5nLCBhYm9ydFNpZ25hbD86IEFib3J0U2lnbmFsKSB7XG4gIGF3YWl0IHBpcGVsaW5lKFxuICAgIGNyZWF0ZVJlYWRTdHJlYW0oc291cmNlKSxcbiAgICBjcmVhdGVXcml0ZVN0cmVhbShkZXN0aW5hdGlvbiksXG4gICAgYWJvcnRTaWduYWwgPyB7IHNpZ25hbDogYWJvcnRTaWduYWwgfSA6IHVuZGVmaW5lZCxcbiAgKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2FjaGVVUkxJZk5lY2Vzc2FyeShcbiAgdXJsOiBSZXF1ZXN0SW5mbyxcbiAgZm9sZGVyOiBzdHJpbmcsXG4gIGZpbGVOYW1lOiBzdHJpbmcsXG4gIGZvcmNlVXBkYXRlOiBib29sZWFuLFxuICBmZXRjaE9wdGlvbnM/OiBSZXF1ZXN0SW5pdCxcbikge1xuICBjb25zdCBkZXN0aW5hdGlvbiA9IGpvaW4oZm9sZGVyLCBmaWxlTmFtZSk7XG5cbiAgdHJ5IHtcbiAgICBhd2FpdCBzdGF0KGZvbGRlcik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBta2RpclN5bmMoZm9sZGVyLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICBhd2FpdCBjYWNoZSh1cmwsIGRlc3RpbmF0aW9uLCBmZXRjaE9wdGlvbnMpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZm9yY2VVcGRhdGUpIHtcbiAgICBhd2FpdCBjYWNoZSh1cmwsIGRlc3RpbmF0aW9uLCBmZXRjaE9wdGlvbnMpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBzdGF0czogU3RhdHMgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gIHRyeSB7XG4gICAgc3RhdHMgPSBhd2FpdCBzdGF0KGRlc3RpbmF0aW9uKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGF3YWl0IGNhY2hlKHVybCwgZGVzdGluYXRpb24sIGZldGNoT3B0aW9ucyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgfHwgdXJsLnN0YXJ0c1dpdGgoXCJodHRwOi8vXCIpIHx8IHVybC5zdGFydHNXaXRoKFwiaHR0cHM6Ly9cIikpIHtcbiAgICBjb25zdCBoZWFkUmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHsgLi4uZmV0Y2hPcHRpb25zLCBtZXRob2Q6IFwiSEVBRFwiIH0pO1xuICAgIGlmICghaGVhZFJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmV0Y2ggVVJMXCIpO1xuICAgIH1cblxuICAgIGlmICghaXNKU09OKGhlYWRSZXNwb25zZS5oZWFkZXJzLmdldChcImNvbnRlbnQtdHlwZVwiKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVSTCBkb2VzIG5vdCByZXR1cm4gSlNPTlwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBsYXN0TW9kaWZpZWQgPSBEYXRlLnBhcnNlKGhlYWRSZXNwb25zZS5oZWFkZXJzLmdldChcImxhc3QtbW9kaWZpZWRcIikgPz8gXCJcIik7XG4gICAgaWYgKHN0YXRzLnNpemUgPT09IDAgfHwgTnVtYmVyLmlzTmFOKGxhc3RNb2RpZmllZCkgfHwgbGFzdE1vZGlmaWVkID4gc3RhdHMubXRpbWVNcykge1xuICAgICAgYXdhaXQgY2FjaGUodXJsLCBkZXN0aW5hdGlvbiwgZmV0Y2hPcHRpb25zKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0gZWxzZSBpZiAodXJsLnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHNvdXJjZVN0YXRzID0gYXdhaXQgc3RhdChub3JtYWxpemUoZGVjb2RlVVJJQ29tcG9uZW50KG5ldyBVUkwodXJsKS5wYXRobmFtZSkpKTtcbiAgICAgIGlmIChzb3VyY2VTdGF0cy5tdGltZU1zID4gc3RhdHMubXRpbWVNcykge1xuICAgICAgICBhd2FpdCBjYWNoZSh1cmwsIGRlc3RpbmF0aW9uLCBmZXRjaE9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlNvdXJjZSBmaWxlIGNvdWxkIG5vdCBiZSByZWFkXCIpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJPbmx5IEhUVFAoUykgb3IgZmlsZSBVUkxzIGFyZSBzdXBwb3J0ZWRcIik7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24qIHN0cmVhbUpzb25GaWxlPFQ+KFxuICBmaWxlUGF0aDogc3RyaW5nLFxuICBwYWdlU2l6ZTogbnVtYmVyLFxuICBhYm9ydFNpZ25hbD86IEFib3J0U2lnbmFsLFxuICBkYXRhUGF0aD86IHN0cmluZyB8IFJlZ0V4cCxcbiAgZmlsdGVyRm4/OiAoaXRlbTogRmxhdHRlbjxUPikgPT4gYm9vbGVhbixcbiAgdHJhbnNmb3JtRm4/OiAoaXRlbTogYW55KSA9PiBULFxuKTogQXN5bmNHZW5lcmF0b3I8VCBleHRlbmRzIHVua25vd25bXSA/IFQgOiBUW10+IHtcbiAgbGV0IHBhZ2U6IFQgZXh0ZW5kcyB1bmtub3duW10gPyBUIDogVFtdID0gW10gYXMgVCBleHRlbmRzIHVua25vd25bXSA/IFQgOiBUW107XG5cbiAgY29uc3QgcGlwZWxpbmUgPSBDaGFpbihbXG4gICAgY3JlYXRlUmVhZFN0cmVhbShmaWxlUGF0aCksXG4gICAgZGF0YVBhdGggPyBQaWNrUGFyc2VyKHsgZmlsdGVyOiBkYXRhUGF0aCB9KSA6IHBhcnNlcigpLFxuICAgIFN0cmVhbUFycmF5KCksXG4gICAgKGRhdGE6IGFueSkgPT4gdHJhbnNmb3JtRm4/LihkYXRhLnZhbHVlKSA/PyBkYXRhLnZhbHVlLFxuICBdKTtcblxuICBhYm9ydFNpZ25hbD8uYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsICgpID0+IHtcbiAgICBwaXBlbGluZS5kZXN0cm95KCk7XG4gIH0pO1xuXG4gIHRyeSB7XG4gICAgZm9yIGF3YWl0IChjb25zdCBkYXRhIG9mIHBpcGVsaW5lKSB7XG4gICAgICBpZiAoYWJvcnRTaWduYWw/LmFib3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKCFmaWx0ZXJGbiB8fCBmaWx0ZXJGbihkYXRhKSkge1xuICAgICAgICBwYWdlLnB1c2goZGF0YSk7XG4gICAgICB9XG4gICAgICBpZiAocGFnZS5sZW5ndGggPj0gcGFnZVNpemUpIHtcbiAgICAgICAgeWllbGQgcGFnZTtcbiAgICAgICAgcGFnZSA9IFtdIGFzIFQgZXh0ZW5kcyB1bmtub3duW10gPyBUIDogVFtdO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHBpcGVsaW5lLmRlc3Ryb3koKTtcbiAgICB0aHJvdyBlO1xuICB9XG5cbiAgaWYgKHBhZ2UubGVuZ3RoID4gMCkge1xuICAgIHlpZWxkIHBhZ2U7XG4gIH1cblxuICByZXR1cm4gW107XG59XG5cbnR5cGUgT3B0aW9uczxUPiA9IHtcbiAgLyoqXG4gICAqIFRoZSBob29rIGV4cGVjdHMgdG8gaXRlcmF0ZSB0aHJvdWdoIGFuIGFycmF5IG9mIGRhdGEsIHNvIGJ5IGRlZmF1bHQsIGl0IGFzc3VtZXMgdGhlIEpTT04gaXQgcmVjZWl2ZXMgaXRzZWxmIHJlcHJlc2VudHMgYW4gYXJyYXkuIEhvd2V2ZXIsIHNvbWV0aW1lcyB0aGUgYXJyYXkgb2YgZGF0YSBpcyB3cmFwcGVkIGluIGFuIG9iamVjdCxcbiAgICogaS5lLiBgeyBcInN1Y2Nlc3NcIjogdHJ1ZSwgXCJkYXRhXCI6IFvigKZdIH1gLCBvciBldmVuIGB7IFwic3VjY2Vzc1wiOiB0cnVlLCBcInJlc3VsdHNcIjogeyBcImRhdGFcIjogW+KApl0gfSB9YC4gSW4gdGhvc2UgY2FzZXMsIHlvdSBjYW4gdXNlIGBkYXRhUGF0aGAgdG8gc3BlY2lmeSB3aGVyZSB0aGUgZGF0YSBhcnJheSBjYW4gYmUgZm91bmQuXG4gICAqXG4gICAqIEByZW1hcmsgSWYgeW91ciBKU09OIG9iamVjdCBoYXMgbXVsdGlwbGUgYXJyYXlzIHRoYXQgeW91IHdhbnQgdG8gc3RyZWFtIGRhdGEgZnJvbSwgeW91IGNhbiBwYXNzIGEgcmVndWxhciBleHByZXNzaW9uIHRvIHN0cmVhbSB0aHJvdWdoIGFsbCBvZiB0aGVtLlxuICAgKlxuICAgKiBAZXhhbXBsZSBGb3IgYHsgXCJzdWNjZXNzXCI6IHRydWUsIFwiZGF0YVwiOiBb4oCmXSB9YCwgZGF0YVBhdGggd291bGQgYmUgYGRhdGFgXG4gICAqIEBleGFtcGxlIEZvciBgeyBcInN1Y2Nlc3NcIjogdHJ1ZSwgXCJyZXN1bHRzXCI6IHsgXCJkYXRhXCI6IFvigKZdIH0gfWAsIGRhdGFQYXRoIHdvdWxkIGJlIGByZXN1bHRzLmRhdGFgXG4gICAqIEBleGFtcGxlIEZvciBgeyBcInN1Y2Nlc3NcIjogdHJ1ZSwgXCJyZXN1bHRzXCI6IHsgXCJmaXJzdF9saXN0XCI6IFvigKZdLCBcInNlY29uZF9saXN0XCI6IFvigKZdLCBcInRoaXJkX2xpc3RcIjogW+KApl0gfSB9YCwgZGF0YVBhdGggd291bGQgYmUgYC9ecmVzdWx0c1xcLihmaXJzdF9saXN0fHNlY29uZF9saXN0fHRoaXJkX2xpc3QpJFxuL2AuXG4gICAqL1xuICBkYXRhUGF0aD86IHN0cmluZyB8IFJlZ0V4cDtcbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gdG8gZGVjaWRlIHdoZXRoZXIgYSBwYXJ0aWN1bGFyIGl0ZW0gc2hvdWxkIGJlIGtlcHQgb3Igbm90LlxuICAgKiBEZWZhdWx0cyB0byBgdW5kZWZpbmVkYCwga2VlcGluZyBhbnkgZW5jb3VudGVyZWQgaXRlbS5cbiAgICpcbiAgICogQHJlbWFyayBUaGUgaG9vayB3aWxsIHJldmFsaWRhdGUgZXZlcnkgdGltZSB0aGUgZmlsdGVyIGZ1bmN0aW9uIGNoYW5nZXMsIHNvIHlvdSBuZWVkIHRvIHVzZSBbdXNlQ2FsbGJhY2tdKGh0dHBzOi8vcmVhY3QuZGV2L3JlZmVyZW5jZS9yZWFjdC91c2VDYWxsYmFjaykgdG8gbWFrZSBzdXJlIGl0IG9ubHkgY2hhbmdlcyB3aGVuIGl0IG5lZWRzIHRvLlxuICAgKi9cbiAgZmlsdGVyPzogKGl0ZW06IEZsYXR0ZW48VD4pID0+IGJvb2xlYW47XG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRvIGFwcGx5IHRvIGVhY2ggaXRlbSBhcyBpdCBpcyBlbmNvdW50ZXJlZC4gVXNlZnVsIGZvciBhIGNvdXBsZSBvZiB0aGluZ3M6XG4gICAqIDEuIGVuc3VyaW5nIHRoYXQgYWxsIGl0ZW1zIGhhdmUgdGhlIGV4cGVjdGVkIHByb3BlcnRpZXMsIGFuZCwgYXMgb24gb3B0aW1pemF0aW9uLCBmb3IgZ2V0dGluZyByaWQgb2YgdGhlIHByb3BlcnRpZXMgdGhhdCB5b3UgZG9uJ3QgY2FyZSBhYm91dC5cbiAgICogMi4gd2hlbiB0b3AtbGV2ZWwgb2JqZWN0cyBhY3R1YWxseSByZXByZXNlbnQgbmVzdGVkIGRhdGEsIHdoaWNoIHNob3VsZCBiZSBmbGF0dGVuZWQuIEluIHRoaXMgY2FzZSwgYHRyYW5zZm9ybWAgY2FuIHJldHVybiBhbiBhcnJheSBvZiBpdGVtcywgYW5kIHRoZSBob29rIHdpbGwgc3RyZWFtIHRocm91Z2ggZWFjaCBvbmUgb2YgdGhvc2UgaXRlbXMsXG4gICAqIHBhc3NpbmcgdGhlbSB0byBgZmlsdGVyYCBldGMuXG4gICAqXG4gICAqIERlZmF1bHRzIHRvIGEgcGFzc3Rocm91Z2ggZnVuY3Rpb24gaWYgbm90IHByb3ZpZGVkLlxuICAgKlxuICAgKiBAcmVtYXJrIFRoZSBob29rIHdpbGwgcmV2YWxpZGF0ZSBldmVyeSB0aW1lIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gY2hhbmdlcywgc28gaXQgaXMgaW1wb3J0YW50IHRvIHVzZSBbdXNlQ2FsbGJhY2tdKGh0dHBzOi8vcmVhY3QuZGV2L3JlZmVyZW5jZS9yZWFjdC91c2VDYWxsYmFjaykgdG8gZW5zdXJlIGl0IG9ubHkgY2hhbmdlcyB3aGVuIG5lY2Vzc2FyeSB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IHJlLXJlbmRlcnMgb3IgY29tcHV0YXRpb25zLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBcbiAgICogLy8gRm9yIGRhdGE6IGB7IFwiZGF0YVwiOiBbIHsgXCJ0eXBlXCI6IFwiZm9sZGVyXCIsIFwibmFtZVwiOiBcIml0ZW0gMVwiLCBcImNoaWxkcmVuXCI6IFsgeyBcInR5cGVcIjogXCJpdGVtXCIsIFwibmFtZVwiOiBcIml0ZW0gMlwiIH0sIHsgXCJ0eXBlXCI6IFwiaXRlbVwiLCBcIm5hbWVcIjogXCJpdGVtIDNcIiB9IF0gfSwgeyBcInR5cGVcIjogXCJmb2xkZXJcIiwgXCJuYW1lXCI6IFwiaXRlbSA0XCIsIGNoaWxkcmVuOiBbXSB9IF0gfWBcbiAgICpcbiAgICogdHlwZSBJdGVtID0ge1xuICAgKiAgdHlwZTogXCJpdGVtXCI7XG4gICAqICBuYW1lOiBzdHJpbmc7XG4gICAqIH07XG4gICAqXG4gICAqIHR5cGUgRm9sZGVyID0ge1xuICAgKiAgIHR5cGU6IFwiZm9sZGVyXCI7XG4gICAqICAgbmFtZTogc3RyaW5nO1xuICAgKiAgIGNoaWxkcmVuOiAoSXRlbSB8IEZvbGRlcilbXTtcbiAgICogfTtcbiAgICpcbiAgICogZnVuY3Rpb24gZmxhdHRlbihpdGVtOiBJdGVtIHwgRm9sZGVyKTogeyBuYW1lOiBzdHJpbmcgfVtdIHtcbiAgICogICBjb25zdCBmbGF0dGVuZWQ6IHsgbmFtZTogc3RyaW5nIH1bXSA9IFtdO1xuICAgKiAgIGlmIChpdGVtLnR5cGUgPT09IFwiZm9sZGVyXCIpIHtcbiAgICogICAgIGZsYXR0ZW5lZC5wdXNoKC4uLml0ZW0uY2hpbGRyZW4ubWFwKGZsYXR0ZW4pLmZsYXQoKSk7XG4gICAqICAgfVxuICAgKiAgIGlmIChpdGVtLnR5cGUgPT09IFwiaXRlbVwiKSB7XG4gICAqICAgICBmbGF0dGVuZWQucHVzaCh7IG5hbWU6IGl0ZW0ubmFtZSB9KTtcbiAgICogICB9XG4gICAqICAgcmV0dXJuIGZsYXR0ZW5lZDtcbiAgICogfVxuICAgKlxuICAgKiBjb25zdCB0cmFuc2Zvcm0gPSB1c2VDYWxsYmFjayhmbGF0dGVuLCBbXSk7XG4gICAqIGNvbnN0IGZpbHRlciA9IHVzZUNhbGxiYWNrKChpdGVtOiB7IG5hbWU6IHN0cmluZyB9KSA9PiB7XG4gICAqICAg4oCmXG4gICAqIH0pXG4gICAqIGBgYFxuICAgKi9cbiAgdHJhbnNmb3JtPzogKGl0ZW06IGFueSkgPT4gVDtcbiAgLyoqXG4gICAqIFRoZSBhbW91bnQgb2YgaXRlbXMgdG8gcmV0dXJuIGZvciBlYWNoIHBhZ2UuXG4gICAqIERlZmF1bHRzIHRvIGAyMGAuXG4gICAqL1xuICBwYWdlU2l6ZT86IG51bWJlcjtcbn07XG5cbi8qKlxuICogVGFrZXMgYSBgaHR0cDovL2AsIGBodHRwczovL2Agb3IgYGZpbGU6Ly8vYCBVUkwgcG9pbnRpbmcgdG8gYSBKU09OIHJlc291cmNlLCBjYWNoZXMgaXQgdG8gdGhlIGNvbW1hbmQncyBzdXBwb3J0XG4gKiBmb2xkZXIsIGFuZCBzdHJlYW1zIHRocm91Z2ggaXRzIGNvbnRlbnQuIFVzZWZ1bCB3aGVuIGRlYWxpbmcgd2l0aCBsYXJnZSBKU09OIGFycmF5cyB3aGljaCB3b3VsZCBiZSB0b28gYmlnIHRvIGZpdFxuICogaW4gdGhlIGNvbW1hbmQncyBtZW1vcnkuXG4gKlxuICogQHJlbWFyayBUaGUgSlNPTiByZXNvdXJjZSBuZWVkcyB0byBjb25zaXN0IG9mIGFuIGFycmF5IG9mIG9iamVjdHNcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiBpbXBvcnQgeyBMaXN0IH0gZnJvbSBcIkByYXljYXN0L2FwaVwiO1xuICogaW1wb3J0IHsgdXNlU3RyZWFtSlNPTiB9IGZyb20gXCJAcmF5Y2FzdC91dGlsc1wiO1xuICpcbiAqIHR5cGUgRm9ybXVsYSA9IHsgbmFtZTogc3RyaW5nOyBkZXNjPzogc3RyaW5nIH07XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTWFpbigpOiBSZWFjdC5KU1guRWxlbWVudCB7XG4gKiAgIGNvbnN0IHsgZGF0YSwgaXNMb2FkaW5nLCBwYWdpbmF0aW9uIH0gPSB1c2VTdHJlYW1KU09OPEZvcm11bGE+KFwiaHR0cHM6Ly9mb3JtdWxhZS5icmV3LnNoL2FwaS9mb3JtdWxhLmpzb25cIik7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxMaXN0IGlzTG9hZGluZz17aXNMb2FkaW5nfSBwYWdpbmF0aW9uPXtwYWdpbmF0aW9ufT5cbiAqICAgICAgIDxMaXN0LlNlY3Rpb24gdGl0bGU9XCJGb3JtdWxhZVwiPlxuICogICAgICAgICB7ZGF0YT8ubWFwKChkKSA9PiA8TGlzdC5JdGVtIGtleT17ZC5uYW1lfSB0aXRsZT17ZC5uYW1lfSBzdWJ0aXRsZT17ZC5kZXNjfSAvPil9XG4gKiAgICAgICA8L0xpc3QuU2VjdGlvbj5cbiAqICAgICA8L0xpc3Q+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiBpbXBvcnQgeyBMaXN0IH0gZnJvbSBcIkByYXljYXN0L2FwaVwiO1xuICogaW1wb3J0IHsgdXNlU3RyZWFtSlNPTiB9IGZyb20gXCJAcmF5Y2FzdC91dGlsc1wiO1xuICogaW1wb3J0IHsgaG9tZWRpciB9IGZyb20gXCJvc1wiO1xuICogaW1wb3J0IHsgam9pbiB9IGZyb20gXCJwYXRoXCI7XG4gKlxuICogdHlwZSBGb3JtdWxhID0geyBuYW1lOiBzdHJpbmc7IGRlc2M/OiBzdHJpbmcgfTtcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNYWluKCk6IFJlYWN0LkpTWC5FbGVtZW50IHtcbiAqICAgY29uc3QgeyBkYXRhLCBpc0xvYWRpbmcsIHBhZ2luYXRpb24gfSA9IHVzZVN0cmVhbUpTT048Rm9ybXVsYT4oYGZpbGU6Ly8vJHtqb2luKGhvbWVkaXIoKSwgXCJEb3dubG9hZHNcIiwgXCJmb3JtdWxhZS5qc29uXCIpfWApO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8TGlzdCBpc0xvYWRpbmc9e2lzTG9hZGluZ30gcGFnaW5hdGlvbj17cGFnaW5hdGlvbn0+XG4gKiAgICAgICA8TGlzdC5TZWN0aW9uIHRpdGxlPVwiRm9ybXVsYWVcIj5cbiAqICAgICAgICAge2RhdGE/Lm1hcCgoZCkgPT4gPExpc3QuSXRlbSBrZXk9e2QubmFtZX0gdGl0bGU9e2QubmFtZX0gc3VidGl0bGU9e2QuZGVzY30gLz4pfVxuICogICAgICAgPC9MaXN0LlNlY3Rpb24+XG4gKiAgICAgPC9MaXN0PlxuICogICApO1xuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VTdHJlYW1KU09OPFQsIFUgPSB1bmtub3duPih1cmw6IFJlcXVlc3RJbmZvKTogVXNlQ2FjaGVkUHJvbWlzZVJldHVyblR5cGU8VCwgVT47XG5cbi8qKlxuICogVGFrZXMgYSBgaHR0cDovL2AsIGBodHRwczovL2Agb3IgYGZpbGU6Ly8vYCBVUkwgcG9pbnRpbmcgdG8gYSBKU09OIHJlc291cmNlLCBjYWNoZXMgaXQgdG8gdGhlIGNvbW1hbmQncyBzdXBwb3J0XG4gKiBmb2xkZXIsIGFuZCBzdHJlYW1zIHRocm91Z2ggaXRzIGNvbnRlbnQuIFVzZWZ1bCB3aGVuIGRlYWxpbmcgd2l0aCBsYXJnZSBKU09OIGFycmF5cyB3aGljaCB3b3VsZCBiZSB0b28gYmlnIHRvIGZpdFxuICogaW4gdGhlIGNvbW1hbmQncyBtZW1vcnkuXG4gKlxuICogQHJlbWFyayBUaGUgSlNPTiByZXNvdXJjZSBuZWVkcyB0byBjb25zaXN0IG9mIGFuIGFycmF5IG9mIG9iamVjdHNcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiBpbXBvcnQgeyBMaXN0LCBlbnZpcm9ubWVudCB9IGZyb20gXCJAcmF5Y2FzdC9hcGlcIjtcbiAqIGltcG9ydCB7IHVzZVN0cmVhbUpTT04gfSBmcm9tIFwiQHJheWNhc3QvdXRpbHNcIjtcbiAqIGltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcbiAqIGltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuICpcbiAqIHR5cGUgRm9ybXVsYSA9IHsgbmFtZTogc3RyaW5nOyBkZXNjPzogc3RyaW5nIH07XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTWFpbigpOiBSZWFjdC5KU1guRWxlbWVudCB7XG4gKiAgIGNvbnN0IFtzZWFyY2hUZXh0LCBzZXRTZWFyY2hUZXh0XSA9IHVzZVN0YXRlKFwiXCIpO1xuICpcbiAqICAgY29uc3QgZm9ybXVsYUZpbHRlciA9IHVzZUNhbGxiYWNrKFxuICogICAgIChpdGVtOiBGb3JtdWxhKSA9PiB7XG4gKiAgICAgICBpZiAoIXNlYXJjaFRleHQpIHJldHVybiB0cnVlO1xuICogICAgICAgcmV0dXJuIGl0ZW0ubmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpLmluY2x1ZGVzKHNlYXJjaFRleHQpO1xuICogICAgIH0sXG4gKiAgICAgW3NlYXJjaFRleHRdLFxuICogICApO1xuICpcbiAqICAgY29uc3QgZm9ybXVsYVRyYW5zZm9ybSA9IHVzZUNhbGxiYWNrKChpdGVtOiBhbnkpOiBGb3JtdWxhID0+IHtcbiAqICAgICByZXR1cm4geyBuYW1lOiBpdGVtLm5hbWUsIGRlc2M6IGl0ZW0uZGVzYyB9O1xuICogICB9LCBbXSk7XG4gKlxuICogICBjb25zdCB7IGRhdGEsIGlzTG9hZGluZywgcGFnaW5hdGlvbiB9ID0gdXNlU3RyZWFtSlNPTihcImh0dHBzOi8vZm9ybXVsYWUuYnJldy5zaC9hcGkvZm9ybXVsYS5qc29uXCIsIHtcbiAqICAgICBpbml0aWFsRGF0YTogW10gYXMgRm9ybXVsYVtdLFxuICogICAgIHBhZ2VTaXplOiAyMCxcbiAqICAgICBmaWx0ZXI6IGZvcm11bGFGaWx0ZXIsXG4gKiAgICAgdHJhbnNmb3JtOiBmb3JtdWxhVHJhbnNmb3JtLFxuICogICB9KTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPExpc3QgaXNMb2FkaW5nPXtpc0xvYWRpbmd9IHBhZ2luYXRpb249e3BhZ2luYXRpb259IG9uU2VhcmNoVGV4dENoYW5nZT17c2V0U2VhcmNoVGV4dH0+XG4gKiAgICAgICA8TGlzdC5TZWN0aW9uIHRpdGxlPVwiRm9ybXVsYWVcIj5cbiAqICAgICAgICAge2RhdGEubWFwKChkKSA9PiAoXG4gKiAgICAgICAgICAgPExpc3QuSXRlbSBrZXk9e2QubmFtZX0gdGl0bGU9e2QubmFtZX0gc3VidGl0bGU9e2QuZGVzY30gLz5cbiAqICAgICAgICAgKSl9XG4gKiAgICAgICA8L0xpc3QuU2VjdGlvbj5cbiAqICAgICA8L0xpc3Q+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGAgc3VwcG9ydCBmb2xkZXIsIGFuZCBzdHJlYW1zIHRocm91Z2ggaXRzIGNvbnRlbnQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogaW1wb3J0IHsgTGlzdCwgZW52aXJvbm1lbnQgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG4gKiBpbXBvcnQgeyB1c2VTdHJlYW1KU09OIH0gZnJvbSBcIkByYXljYXN0L3V0aWxzXCI7XG4gKiBpbXBvcnQgeyBqb2luIH0gZnJvbSBcInBhdGhcIjtcbiAqIGltcG9ydCB7IGhvbWVkaXIgfSBmcm9tIFwib3NcIjtcbiAqIGltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuICpcbiAqIHR5cGUgRm9ybXVsYSA9IHsgbmFtZTogc3RyaW5nOyBkZXNjPzogc3RyaW5nIH07XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTWFpbigpOiBSZWFjdC5KU1guRWxlbWVudCB7XG4gKiAgIGNvbnN0IFtzZWFyY2hUZXh0LCBzZXRTZWFyY2hUZXh0XSA9IHVzZVN0YXRlKFwiXCIpO1xuICpcbiAqICAgY29uc3QgZm9ybXVsYUZpbHRlciA9IHVzZUNhbGxiYWNrKFxuICogICAgIChpdGVtOiBGb3JtdWxhKSA9PiB7XG4gKiAgICAgICBpZiAoIXNlYXJjaFRleHQpIHJldHVybiB0cnVlO1xuICogICAgICAgcmV0dXJuIGl0ZW0ubmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpLmluY2x1ZGVzKHNlYXJjaFRleHQpO1xuICogICAgIH0sXG4gKiAgICAgW3NlYXJjaFRleHRdLFxuICogICApO1xuICpcbiAqICAgY29uc3QgZm9ybXVsYVRyYW5zZm9ybSA9IHVzZUNhbGxiYWNrKChpdGVtOiBhbnkpOiBGb3JtdWxhID0+IHtcbiAqICAgICByZXR1cm4geyBuYW1lOiBpdGVtLm5hbWUsIGRlc2M6IGl0ZW0uZGVzYyB9O1xuICogICB9LCBbXSk7XG4gKlxuICogICBjb25zdCB7IGRhdGEsIGlzTG9hZGluZywgcGFnaW5hdGlvbiB9ID0gdXNlU3RyZWFtSlNPTihgZmlsZTovLy8ke2pvaW4oaG9tZWRpcigpLCBcIkRvd25sb2Fkc1wiLCBcImZvcm11bGFlLmpzb25cIil9YCwge1xuICogICAgIGluaXRpYWxEYXRhOiBbXSBhcyBGb3JtdWxhW10sXG4gKiAgICAgcGFnZVNpemU6IDIwLFxuICogICAgIGZpbHRlcjogZm9ybXVsYUZpbHRlcixcbiAqICAgICB0cmFuc2Zvcm06IGZvcm11bGFUcmFuc2Zvcm0sXG4gKiAgIH0pO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8TGlzdCBpc0xvYWRpbmc9e2lzTG9hZGluZ30gcGFnaW5hdGlvbj17cGFnaW5hdGlvbn0gb25TZWFyY2hUZXh0Q2hhbmdlPXtzZXRTZWFyY2hUZXh0fT5cbiAqICAgICAgIDxMaXN0LlNlY3Rpb24gdGl0bGU9XCJGb3JtdWxhZVwiPlxuICogICAgICAgICB7ZGF0YS5tYXAoKGQpID0+IChcbiAqICAgICAgICAgICA8TGlzdC5JdGVtIGtleT17ZC5uYW1lfSB0aXRsZT17ZC5uYW1lfSBzdWJ0aXRsZT17ZC5kZXNjfSAvPlxuICogICAgICAgICApKX1cbiAqICAgICAgIDwvTGlzdC5TZWN0aW9uPlxuICogICAgIDwvTGlzdD5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU3RyZWFtSlNPTjxULCBVIGV4dGVuZHMgYW55W10gPSBhbnlbXT4oXG4gIHVybDogUmVxdWVzdEluZm8sXG4gIG9wdGlvbnM6IE9wdGlvbnM8VD4gJiBSZXF1ZXN0SW5pdCAmIE9taXQ8Q2FjaGVkUHJvbWlzZU9wdGlvbnM8RnVuY3Rpb25SZXR1cm5pbmdQYWdpbmF0ZWRQcm9taXNlLCBVPiwgXCJhYm9ydGFibGVcIj4sXG4pOiBVc2VDYWNoZWRQcm9taXNlUmV0dXJuVHlwZTxUIGV4dGVuZHMgdW5rbm93bltdID8gVCA6IFRbXSwgVT47XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTdHJlYW1KU09OPFQsIFUgZXh0ZW5kcyBhbnlbXSA9IGFueVtdPihcbiAgdXJsOiBSZXF1ZXN0SW5mbyxcbiAgb3B0aW9ucz86IE9wdGlvbnM8VD4gJiBSZXF1ZXN0SW5pdCAmIE9taXQ8Q2FjaGVkUHJvbWlzZU9wdGlvbnM8RnVuY3Rpb25SZXR1cm5pbmdQYWdpbmF0ZWRQcm9taXNlLCBVPiwgXCJhYm9ydGFibGVcIj4sXG4pOiBVc2VDYWNoZWRQcm9taXNlUmV0dXJuVHlwZTxUIGV4dGVuZHMgdW5rbm93bltdID8gVCA6IFRbXSwgVT4ge1xuICBjb25zdCB7XG4gICAgaW5pdGlhbERhdGEsXG4gICAgZXhlY3V0ZSxcbiAgICBrZWVwUHJldmlvdXNEYXRhLFxuICAgIG9uRXJyb3IsXG4gICAgb25EYXRhLFxuICAgIG9uV2lsbEV4ZWN1dGUsXG4gICAgZmFpbHVyZVRvYXN0T3B0aW9ucyxcbiAgICBkYXRhUGF0aCxcbiAgICBmaWx0ZXIsXG4gICAgdHJhbnNmb3JtLFxuICAgIHBhZ2VTaXplID0gMjAsXG4gICAgLi4uZmV0Y2hPcHRpb25zXG4gIH0gPSBvcHRpb25zID8/IHt9O1xuICBjb25zdCBwcmV2aW91c1VybCA9IHVzZVJlZjxSZXF1ZXN0SW5mbz4obnVsbCk7XG4gIGNvbnN0IHByZXZpb3VzRGVzdGluYXRpb24gPSB1c2VSZWY8c3RyaW5nPihudWxsKTtcblxuICBjb25zdCB1c2VDYWNoZWRQcm9taXNlT3B0aW9uczogQ2FjaGVkUHJvbWlzZU9wdGlvbnM8RnVuY3Rpb25SZXR1cm5pbmdQYWdpbmF0ZWRQcm9taXNlLCBVPiA9IHtcbiAgICBpbml0aWFsRGF0YSxcbiAgICBleGVjdXRlLFxuICAgIGtlZXBQcmV2aW91c0RhdGEsXG4gICAgb25FcnJvcixcbiAgICBvbkRhdGEsXG4gICAgb25XaWxsRXhlY3V0ZSxcbiAgICBmYWlsdXJlVG9hc3RPcHRpb25zLFxuICB9O1xuXG4gIGNvbnN0IGdlbmVyYXRvclJlZiA9IHVzZVJlZjxBc3luY0dlbmVyYXRvcjxUIGV4dGVuZHMgdW5rbm93bltdID8gVCA6IFRbXT4gfCBudWxsPihudWxsKTtcbiAgY29uc3QgY29udHJvbGxlclJlZiA9IHVzZVJlZjxBYm9ydENvbnRyb2xsZXIgfCBudWxsPihudWxsKTtcbiAgY29uc3QgaGFzTW9yZVJlZiA9IHVzZVJlZihmYWxzZSk7XG5cbiAgcmV0dXJuIHVzZUNhY2hlZFByb21pc2UoXG4gICAgKFxuICAgICAgdXJsOiBSZXF1ZXN0SW5mbyxcbiAgICAgIHBhZ2VTaXplOiBudW1iZXIsXG4gICAgICBmZXRjaE9wdGlvbnM6IFJlcXVlc3RJbml0IHwgdW5kZWZpbmVkLFxuICAgICAgZGF0YVBhdGg6IHN0cmluZyB8IFJlZ0V4cCB8IHVuZGVmaW5lZCxcbiAgICAgIGZpbHRlcjogKChpdGVtOiBGbGF0dGVuPFQ+KSA9PiBib29sZWFuKSB8IHVuZGVmaW5lZCxcbiAgICAgIHRyYW5zZm9ybTogKChpdGVtOiB1bmtub3duKSA9PiBUKSB8IHVuZGVmaW5lZCxcbiAgICApID0+XG4gICAgICBhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgICAgY29uc3QgZmlsZU5hbWUgPSBoYXNoKHVybCkgKyBcIi5qc29uXCI7XG4gICAgICAgIGNvbnN0IGZvbGRlciA9IGVudmlyb25tZW50LnN1cHBvcnRQYXRoO1xuICAgICAgICBpZiAocGFnZSA9PT0gMCkge1xuICAgICAgICAgIGNvbnRyb2xsZXJSZWYuY3VycmVudD8uYWJvcnQoKTtcbiAgICAgICAgICBjb250cm9sbGVyUmVmLmN1cnJlbnQgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgICAgICAgY29uc3QgZGVzdGluYXRpb24gPSBqb2luKGZvbGRlciwgZmlsZU5hbWUpO1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEZvcmNlIHVwZGF0ZSB0aGUgY2FjaGUgd2hlbiB0aGUgVVJMIGNoYW5nZXMgYnV0IHRoZSBjYWNoZSBkZXN0aW5hdGlvbiBkb2VzIG5vdC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBjb25zdCBmb3JjZUNhY2hlVXBkYXRlID0gQm9vbGVhbihcbiAgICAgICAgICAgIHByZXZpb3VzVXJsLmN1cnJlbnQgJiZcbiAgICAgICAgICAgICAgcHJldmlvdXNVcmwuY3VycmVudCAhPT0gdXJsICYmXG4gICAgICAgICAgICAgIHByZXZpb3VzRGVzdGluYXRpb24uY3VycmVudCAmJlxuICAgICAgICAgICAgICBwcmV2aW91c0Rlc3RpbmF0aW9uLmN1cnJlbnQgPT09IGRlc3RpbmF0aW9uLFxuICAgICAgICAgICk7XG4gICAgICAgICAgcHJldmlvdXNVcmwuY3VycmVudCA9IHVybDtcbiAgICAgICAgICBwcmV2aW91c0Rlc3RpbmF0aW9uLmN1cnJlbnQgPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgICBhd2FpdCBjYWNoZVVSTElmTmVjZXNzYXJ5KHVybCwgZm9sZGVyLCBmaWxlTmFtZSwgZm9yY2VDYWNoZVVwZGF0ZSwge1xuICAgICAgICAgICAgLi4uZmV0Y2hPcHRpb25zLFxuICAgICAgICAgICAgc2lnbmFsOiBjb250cm9sbGVyUmVmLmN1cnJlbnQ/LnNpZ25hbCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBnZW5lcmF0b3JSZWYuY3VycmVudCA9IHN0cmVhbUpzb25GaWxlKFxuICAgICAgICAgICAgZGVzdGluYXRpb24sXG4gICAgICAgICAgICBwYWdlU2l6ZSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJSZWYuY3VycmVudD8uc2lnbmFsLFxuICAgICAgICAgICAgZGF0YVBhdGgsXG4gICAgICAgICAgICBmaWx0ZXIsXG4gICAgICAgICAgICB0cmFuc2Zvcm0sXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWdlbmVyYXRvclJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHsgaGFzTW9yZTogaGFzTW9yZVJlZi5jdXJyZW50LCBkYXRhOiBbXSBhcyBUIGV4dGVuZHMgdW5rbm93bltdID8gVCA6IFRbXSB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgdmFsdWU6IG5ld0RhdGEsIGRvbmUgfSA9IGF3YWl0IGdlbmVyYXRvclJlZi5jdXJyZW50Lm5leHQoKTtcbiAgICAgICAgaGFzTW9yZVJlZi5jdXJyZW50ID0gIWRvbmU7XG4gICAgICAgIHJldHVybiB7IGhhc01vcmU6IGhhc01vcmVSZWYuY3VycmVudCwgZGF0YTogKG5ld0RhdGEgPz8gW10pIGFzIFQgZXh0ZW5kcyB1bmtub3duW10gPyBUIDogVFtdIH07XG4gICAgICB9LFxuICAgIFt1cmwsIHBhZ2VTaXplLCBmZXRjaE9wdGlvbnMsIGRhdGFQYXRoLCBmaWx0ZXIsIHRyYW5zZm9ybV0sXG4gICAgdXNlQ2FjaGVkUHJvbWlzZU9wdGlvbnMsXG4gICk7XG59XG4iLCAiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50ICovXG5pbXBvcnQgeyBSZWFkYWJsZSwgV3JpdGFibGUsIER1cGxleCB9IGZyb20gXCJub2RlOnN0cmVhbVwiO1xuXG5leHBvcnQgY29uc3Qgbm9uZSA9IC8qICNfX1BVUkVfXyAqLyBTeW1ib2wuZm9yKFwib2JqZWN0LXN0cmVhbS5ub25lXCIpO1xuY29uc3Qgc3RvcCA9IC8qICNfX1BVUkVfXyAqLyBTeW1ib2wuZm9yKFwib2JqZWN0LXN0cmVhbS5zdG9wXCIpO1xuXG5jb25zdCBmaW5hbFN5bWJvbCA9IC8qICNfX1BVUkVfXyAqLyBTeW1ib2wuZm9yKFwib2JqZWN0LXN0cmVhbS5maW5hbFwiKTtcbmNvbnN0IG1hbnlTeW1ib2wgPSAvKiAjX19QVVJFX18gKi8gU3ltYm9sLmZvcihcIm9iamVjdC1zdHJlYW0ubWFueVwiKTtcbmNvbnN0IGZsdXNoU3ltYm9sID0gLyogI19fUFVSRV9fICovIFN5bWJvbC5mb3IoXCJvYmplY3Qtc3RyZWFtLmZsdXNoXCIpO1xuY29uc3QgZkxpc3RTeW1ib2wgPSAvKiAjX19QVVJFX18gKi8gU3ltYm9sLmZvcihcIm9iamVjdC1zdHJlYW0uZkxpc3RcIik7XG5cbmNvbnN0IGZpbmFsVmFsdWUgPSAodmFsdWU6IGFueSkgPT4gKHsgW2ZpbmFsU3ltYm9sXTogMSwgdmFsdWUgfSk7XG5leHBvcnQgY29uc3QgbWFueSA9ICh2YWx1ZXM6IGFueSkgPT4gKHsgW21hbnlTeW1ib2xdOiAxLCB2YWx1ZXMgfSk7XG5cbmNvbnN0IGlzRmluYWxWYWx1ZSA9IChvOiBhbnkpID0+IG8gJiYgb1tmaW5hbFN5bWJvbF0gPT09IDE7XG5jb25zdCBpc01hbnkgPSAobzogYW55KSA9PiBvICYmIG9bbWFueVN5bWJvbF0gPT09IDE7XG5jb25zdCBpc0ZsdXNoYWJsZSA9IChvOiBhbnkpID0+IG8gJiYgb1tmbHVzaFN5bWJvbF0gPT09IDE7XG5jb25zdCBpc0Z1bmN0aW9uTGlzdCA9IChvOiBhbnkpID0+IG8gJiYgb1tmTGlzdFN5bWJvbF0gPT09IDE7XG5cbmNvbnN0IGdldEZpbmFsVmFsdWUgPSAobzogYW55KSA9PiBvLnZhbHVlO1xuY29uc3QgZ2V0TWFueVZhbHVlcyA9IChvOiBhbnkpID0+IG8udmFsdWVzO1xuY29uc3QgZ2V0RnVuY3Rpb25MaXN0ID0gKG86IGFueSkgPT4gby5mTGlzdDtcblxuZXhwb3J0IGNvbnN0IGNvbWJpbmVNYW55TXV0ID0gKGE6IGFueSwgYjogYW55KSA9PiB7XG4gIGNvbnN0IHZhbHVlcyA9IGEgPT09IG5vbmUgPyBbXSA6IGE/LlttYW55U3ltYm9sXSA9PT0gMSA/IGEudmFsdWVzIDogW2FdO1xuICBpZiAoYiA9PT0gbm9uZSkge1xuICAgIC8vIGRvIG5vdGhpbmdcbiAgfSBlbHNlIGlmIChiPy5bbWFueVN5bWJvbF0gPT09IDEpIHtcbiAgICB2YWx1ZXMucHVzaCguLi5iLnZhbHVlcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWVzLnB1c2goYik7XG4gIH1cbiAgcmV0dXJuIG1hbnkodmFsdWVzKTtcbn07XG5cbmV4cG9ydCBjb25zdCBmbHVzaGFibGUgPSAod3JpdGU6ICh2YWx1ZTogYW55KSA9PiBhbnksIGZpbmFsID0gbnVsbCkgPT4ge1xuICBjb25zdCBmbiA9IGZpbmFsID8gKHZhbHVlOiBhbnkpID0+ICh2YWx1ZSA9PT0gbm9uZSA/IGZpbmFsVmFsdWUodW5kZWZpbmVkKSA6IHdyaXRlKHZhbHVlKSkgOiB3cml0ZTtcbiAgLy8gQHRzLWlnbm9yZVxuICBmbltmbHVzaFN5bWJvbF0gPSAxO1xuICByZXR1cm4gZm47XG59O1xuXG5jb25zdCBzZXRGdW5jdGlvbkxpc3QgPSAobzogYW55LCBmbnM6IGFueSkgPT4ge1xuICBvLmZMaXN0ID0gZm5zO1xuICBvW2ZMaXN0U3ltYm9sXSA9IDE7XG4gIHJldHVybiBvO1xufTtcblxuLy8gaXMqTm9kZVN0cmVhbSBmdW5jdGlvbnMgdGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi9tYXN0ZXIvbGliL2ludGVybmFsL3N0cmVhbXMvdXRpbHMuanNcbmNvbnN0IGlzUmVhZGFibGVOb2RlU3RyZWFtID0gKG9iajogYW55KSA9PlxuICBvYmogJiZcbiAgdHlwZW9mIG9iai5waXBlID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgdHlwZW9mIG9iai5vbiA9PT0gXCJmdW5jdGlvblwiICYmXG4gICghb2JqLl93cml0YWJsZVN0YXRlIHx8ICh0eXBlb2Ygb2JqLl9yZWFkYWJsZVN0YXRlID09PSBcIm9iamVjdFwiID8gb2JqLl9yZWFkYWJsZVN0YXRlLnJlYWRhYmxlIDogbnVsbCkgIT09IGZhbHNlKSAmJiAvLyBEdXBsZXhcbiAgKCFvYmouX3dyaXRhYmxlU3RhdGUgfHwgb2JqLl9yZWFkYWJsZVN0YXRlKTsgLy8gV3JpdGFibGUgaGFzIC5waXBlLlxuXG5jb25zdCBpc1dyaXRhYmxlTm9kZVN0cmVhbSA9IChvYmo6IGFueSkgPT5cbiAgb2JqICYmXG4gIHR5cGVvZiBvYmoud3JpdGUgPT09IFwiZnVuY3Rpb25cIiAmJlxuICB0eXBlb2Ygb2JqLm9uID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgKCFvYmouX3JlYWRhYmxlU3RhdGUgfHwgKHR5cGVvZiBvYmouX3dyaXRhYmxlU3RhdGUgPT09IFwib2JqZWN0XCIgPyBvYmouX3dyaXRhYmxlU3RhdGUud3JpdGFibGUgOiBudWxsKSAhPT0gZmFsc2UpOyAvLyBEdXBsZXhcblxuY29uc3QgaXNEdXBsZXhOb2RlU3RyZWFtID0gKG9iajogYW55KSA9PlxuICBvYmogJiZcbiAgdHlwZW9mIG9iai5waXBlID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgb2JqLl9yZWFkYWJsZVN0YXRlICYmXG4gIHR5cGVvZiBvYmoub24gPT09IFwiZnVuY3Rpb25cIiAmJlxuICB0eXBlb2Ygb2JqLndyaXRlID09PSBcImZ1bmN0aW9uXCI7XG5cbmNvbnN0IGlzUmVhZGFibGVXZWJTdHJlYW0gPSAob2JqOiBhbnkpID0+IG9iaiAmJiBnbG9iYWxUaGlzLlJlYWRhYmxlU3RyZWFtICYmIG9iaiBpbnN0YW5jZW9mIGdsb2JhbFRoaXMuUmVhZGFibGVTdHJlYW07XG5cbmNvbnN0IGlzV3JpdGFibGVXZWJTdHJlYW0gPSAob2JqOiBhbnkpID0+IG9iaiAmJiBnbG9iYWxUaGlzLldyaXRhYmxlU3RyZWFtICYmIG9iaiBpbnN0YW5jZW9mIGdsb2JhbFRoaXMuV3JpdGFibGVTdHJlYW07XG5cbmNvbnN0IGlzRHVwbGV4V2ViU3RyZWFtID0gKG9iajogYW55KSA9PlxuICBvYmogJiZcbiAgZ2xvYmFsVGhpcy5SZWFkYWJsZVN0cmVhbSAmJlxuICBvYmoucmVhZGFibGUgaW5zdGFuY2VvZiBnbG9iYWxUaGlzLlJlYWRhYmxlU3RyZWFtICYmXG4gIGdsb2JhbFRoaXMuV3JpdGFibGVTdHJlYW0gJiZcbiAgb2JqLndyaXRhYmxlIGluc3RhbmNlb2YgZ2xvYmFsVGhpcy5Xcml0YWJsZVN0cmVhbTtcblxuY29uc3QgZ3JvdXBGdW5jdGlvbnMgPSAob3V0cHV0OiBhbnksIGZuOiBhbnksIGluZGV4OiBhbnksIGZuczogYW55KSA9PiB7XG4gIGlmIChcbiAgICBpc0R1cGxleE5vZGVTdHJlYW0oZm4pIHx8XG4gICAgKCFpbmRleCAmJiBpc1JlYWRhYmxlTm9kZVN0cmVhbShmbikpIHx8XG4gICAgKGluZGV4ID09PSBmbnMubGVuZ3RoIC0gMSAmJiBpc1dyaXRhYmxlTm9kZVN0cmVhbShmbikpXG4gICkge1xuICAgIG91dHB1dC5wdXNoKGZuKTtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG4gIGlmIChpc0R1cGxleFdlYlN0cmVhbShmbikpIHtcbiAgICBvdXRwdXQucHVzaChEdXBsZXguZnJvbVdlYihmbiwgeyBvYmplY3RNb2RlOiB0cnVlIH0pKTtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG4gIGlmICghaW5kZXggJiYgaXNSZWFkYWJsZVdlYlN0cmVhbShmbikpIHtcbiAgICBvdXRwdXQucHVzaChSZWFkYWJsZS5mcm9tV2ViKGZuLCB7IG9iamVjdE1vZGU6IHRydWUgfSkpO1xuICAgIHJldHVybiBvdXRwdXQ7XG4gIH1cbiAgaWYgKGluZGV4ID09PSBmbnMubGVuZ3RoIC0gMSAmJiBpc1dyaXRhYmxlV2ViU3RyZWFtKGZuKSkge1xuICAgIG91dHB1dC5wdXNoKFdyaXRhYmxlLmZyb21XZWIoZm4sIHsgb2JqZWN0TW9kZTogdHJ1ZSB9KSk7XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfVxuICBpZiAodHlwZW9mIGZuICE9IFwiZnVuY3Rpb25cIikgdGhyb3cgVHlwZUVycm9yKFwiSXRlbSAjXCIgKyBpbmRleCArIFwiIGlzIG5vdCBhIHByb3BlciBzdHJlYW0sIG5vciBhIGZ1bmN0aW9uLlwiKTtcbiAgaWYgKCFvdXRwdXQubGVuZ3RoKSBvdXRwdXQucHVzaChbXSk7XG4gIGNvbnN0IGxhc3QgPSBvdXRwdXRbb3V0cHV0Lmxlbmd0aCAtIDFdO1xuICBpZiAoQXJyYXkuaXNBcnJheShsYXN0KSkge1xuICAgIGxhc3QucHVzaChmbik7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0LnB1c2goW2ZuXSk7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn07XG5cbmNsYXNzIFN0b3AgZXh0ZW5kcyBFcnJvciB7fVxuXG5leHBvcnQgY29uc3QgYXNTdHJlYW0gPSAoZm46IGFueSkgPT4ge1xuICBpZiAodHlwZW9mIGZuICE9IFwiZnVuY3Rpb25cIikgdGhyb3cgVHlwZUVycm9yKFwiT25seSBhIGZ1bmN0aW9uIGlzIGFjY2VwdGVkIGFzIHRoZSBmaXJzdCBhcmd1bWVudFwiKTtcblxuICAvLyBwdW1wIHZhcmlhYmxlc1xuICBsZXQgcGF1c2VkID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIGxldCByZXNvbHZlUGF1c2VkOiAoKHZhbHVlOiB2b2lkIHwgUHJvbWlzZUxpa2U8dm9pZD4pID0+IHZvaWQpIHwgbnVsbCA9IG51bGw7XG4gIGNvbnN0IHF1ZXVlOiBhbnlbXSA9IFtdO1xuXG4gIC8vIHBhdXNlL3Jlc3VtZVxuICBjb25zdCByZXN1bWU6IGFueSA9ICgpID0+IHtcbiAgICBpZiAoIXJlc29sdmVQYXVzZWQpIHJldHVybjtcbiAgICByZXNvbHZlUGF1c2VkKCk7XG4gICAgcmVzb2x2ZVBhdXNlZCA9IG51bGw7XG4gICAgcGF1c2VkID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH07XG4gIGNvbnN0IHBhdXNlOiBhbnkgPSAoKSA9PiB7XG4gICAgaWYgKHJlc29sdmVQYXVzZWQpIHJldHVybjtcbiAgICBwYXVzZWQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gKHJlc29sdmVQYXVzZWQgPSByZXNvbHZlKSk7XG4gIH07XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1jb25zdFxuICBsZXQgc3RyZWFtOiBEdXBsZXg7IC8vIHdpbGwgYmUgYXNzaWduZWQgbGF0ZXJcblxuICAvLyBkYXRhIHByb2Nlc3NpbmdcbiAgY29uc3QgcHVzaFJlc3VsdHM6IGFueSA9ICh2YWx1ZXM6IGFueSkgPT4ge1xuICAgIGlmICh2YWx1ZXMgJiYgdHlwZW9mIHZhbHVlcy5uZXh0ID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgLy8gZ2VuZXJhdG9yXG4gICAgICBxdWV1ZS5wdXNoKHZhbHVlcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGFycmF5XG4gICAgcXVldWUucHVzaCh2YWx1ZXNbU3ltYm9sLml0ZXJhdG9yXSgpKTtcbiAgfTtcbiAgY29uc3QgcHVtcDogYW55ID0gYXN5bmMgKCkgPT4ge1xuICAgIHdoaWxlIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgIGF3YWl0IHBhdXNlZDtcbiAgICAgIGNvbnN0IGdlbiA9IHF1ZXVlW3F1ZXVlLmxlbmd0aCAtIDFdO1xuICAgICAgbGV0IHJlc3VsdCA9IGdlbi5uZXh0KCk7XG4gICAgICBpZiAocmVzdWx0ICYmIHR5cGVvZiByZXN1bHQudGhlbiA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgIHF1ZXVlLnBvcCgpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGxldCB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdmFsdWUgPSBhd2FpdCB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGF3YWl0IHNhbml0aXplKHZhbHVlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHNhbml0aXplOiBhbnkgPSBhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSBub25lKSByZXR1cm47XG4gICAgaWYgKHZhbHVlID09PSBzdG9wKSB0aHJvdyBuZXcgU3RvcCgpO1xuXG4gICAgaWYgKGlzTWFueSh2YWx1ZSkpIHtcbiAgICAgIHB1c2hSZXN1bHRzKGdldE1hbnlWYWx1ZXModmFsdWUpKTtcbiAgICAgIHJldHVybiBwdW1wKCk7XG4gICAgfVxuXG4gICAgaWYgKGlzRmluYWxWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIC8vIGEgZmluYWwgdmFsdWUgaXMgbm90IHN1cHBvcnRlZCwgaXQgaXMgdHJlYXRlZCBhcyBhIHJlZ3VsYXIgdmFsdWVcbiAgICAgIHZhbHVlID0gZ2V0RmluYWxWYWx1ZSh2YWx1ZSk7XG4gICAgICByZXR1cm4gcHJvY2Vzc1ZhbHVlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoIXN0cmVhbS5wdXNoKHZhbHVlKSkge1xuICAgICAgcGF1c2UoKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHByb2Nlc3NDaHVuazogYW55ID0gYXN5bmMgKGNodW5rOiBhbnksIGVuY29kaW5nOiBhbnkpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdmFsdWUgPSBmbihjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgYXdhaXQgcHJvY2Vzc1ZhbHVlKHZhbHVlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgU3RvcCkge1xuICAgICAgICBzdHJlYW0ucHVzaChudWxsKTtcbiAgICAgICAgc3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9O1xuICBjb25zdCBwcm9jZXNzVmFsdWU6IGFueSA9IGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZS50aGVuID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgLy8gdGhlbmFibGVcbiAgICAgIHJldHVybiB2YWx1ZS50aGVuKCh2YWx1ZTogYW55KSA9PiBwcm9jZXNzVmFsdWUodmFsdWUpKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZS5uZXh0ID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgLy8gZ2VuZXJhdG9yXG4gICAgICBwdXNoUmVzdWx0cyh2YWx1ZSk7XG4gICAgICByZXR1cm4gcHVtcCgpO1xuICAgIH1cbiAgICByZXR1cm4gc2FuaXRpemUodmFsdWUpO1xuICB9O1xuXG4gIHN0cmVhbSA9IG5ldyBEdXBsZXgoXG4gICAgT2JqZWN0LmFzc2lnbih7IHdyaXRhYmxlT2JqZWN0TW9kZTogdHJ1ZSwgcmVhZGFibGVPYmplY3RNb2RlOiB0cnVlIH0sIHVuZGVmaW5lZCwge1xuICAgICAgd3JpdGUoY2h1bms6IGFueSwgZW5jb2Rpbmc6IGFueSwgY2FsbGJhY2s6IGFueSkge1xuICAgICAgICBwcm9jZXNzQ2h1bmsoY2h1bmssIGVuY29kaW5nKS50aGVuKFxuICAgICAgICAgICgpID0+IGNhbGxiYWNrKG51bGwpLFxuICAgICAgICAgIChlcnJvcjogYW55KSA9PiBjYWxsYmFjayhlcnJvciksXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgZmluYWwoY2FsbGJhY2s6IGFueSkge1xuICAgICAgICBpZiAoIWlzRmx1c2hhYmxlKGZuKSkge1xuICAgICAgICAgIHN0cmVhbS5wdXNoKG51bGwpO1xuICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBwcm9jZXNzQ2h1bmsobm9uZSwgbnVsbCkudGhlbihcbiAgICAgICAgICAoKSA9PiAoc3RyZWFtLnB1c2gobnVsbCksIGNhbGxiYWNrKG51bGwpKSxcbiAgICAgICAgICAoZXJyb3I6IGFueSkgPT4gY2FsbGJhY2soZXJyb3IpLFxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIHJlYWQoKSB7XG4gICAgICAgIHJlc3VtZSgpO1xuICAgICAgfSxcbiAgICB9KSxcbiAgKTtcblxuICByZXR1cm4gc3RyZWFtO1xufTtcblxuY29uc3QgcHJvZHVjZVN0cmVhbXMgPSAoaXRlbTogYW55KSA9PiB7XG4gIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pKSB7XG4gICAgaWYgKCFpdGVtLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gICAgaWYgKGl0ZW0ubGVuZ3RoID09IDEpIHJldHVybiBpdGVtWzBdICYmIGFzU3RyZWFtKGl0ZW1bMF0pO1xuICAgIHJldHVybiBhc1N0cmVhbShnZW4oLi4uaXRlbSkpO1xuICB9XG4gIHJldHVybiBpdGVtO1xufTtcblxuY29uc3QgbmV4dDogYW55ID0gYXN5bmMgZnVuY3Rpb24qICh2YWx1ZTogYW55LCBmbnM6IGFueSwgaW5kZXg6IGFueSkge1xuICBmb3IgKGxldCBpID0gaW5kZXg7IGkgPD0gZm5zLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZS50aGVuID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgLy8gdGhlbmFibGVcbiAgICAgIHZhbHVlID0gYXdhaXQgdmFsdWU7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gbm9uZSkgYnJlYWs7XG4gICAgaWYgKHZhbHVlID09PSBzdG9wKSB0aHJvdyBuZXcgU3RvcCgpO1xuICAgIGlmIChpc0ZpbmFsVmFsdWUodmFsdWUpKSB7XG4gICAgICB5aWVsZCBnZXRGaW5hbFZhbHVlKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoaXNNYW55KHZhbHVlKSkge1xuICAgICAgY29uc3QgdmFsdWVzID0gZ2V0TWFueVZhbHVlcyh2YWx1ZSk7XG4gICAgICBpZiAoaSA9PSBmbnMubGVuZ3RoKSB7XG4gICAgICAgIHlpZWxkKiB2YWx1ZXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZhbHVlcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgIHlpZWxkKiBuZXh0KHZhbHVlc1tqXSwgZm5zLCBpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUubmV4dCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIC8vIGdlbmVyYXRvclxuICAgICAgZm9yICg7Oykge1xuICAgICAgICBsZXQgZGF0YSA9IHZhbHVlLm5leHQoKTtcbiAgICAgICAgaWYgKGRhdGEgJiYgdHlwZW9mIGRhdGEudGhlbiA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBkYXRhID0gYXdhaXQgZGF0YTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5kb25lKSBicmVhaztcbiAgICAgICAgaWYgKGkgPT0gZm5zLmxlbmd0aCkge1xuICAgICAgICAgIHlpZWxkIGRhdGEudmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeWllbGQqIG5leHQoZGF0YS52YWx1ZSwgZm5zLCBpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmIChpID09IGZucy5sZW5ndGgpIHtcbiAgICAgIHlpZWxkIHZhbHVlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNvbnN0IGYgPSBmbnNbaV07XG4gICAgdmFsdWUgPSBmKHZhbHVlKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGdlbiA9ICguLi5mbnM6IGFueSkgPT4ge1xuICBmbnMgPSBmbnNcbiAgICAuZmlsdGVyKChmbjogYW55KSA9PiBmbilcbiAgICAuZmxhdChJbmZpbml0eSlcbiAgICAubWFwKChmbjogYW55KSA9PiAoaXNGdW5jdGlvbkxpc3QoZm4pID8gZ2V0RnVuY3Rpb25MaXN0KGZuKSA6IGZuKSlcbiAgICAuZmxhdChJbmZpbml0eSk7XG4gIGlmICghZm5zLmxlbmd0aCkge1xuICAgIGZucyA9IFsoeDogYW55KSA9PiB4XTtcbiAgfVxuICBsZXQgZmx1c2hlZCA9IGZhbHNlO1xuICBsZXQgZyA9IGFzeW5jIGZ1bmN0aW9uKiAodmFsdWU6IGFueSkge1xuICAgIGlmIChmbHVzaGVkKSB0aHJvdyBFcnJvcihcIkNhbGwgdG8gYSBmbHVzaGVkIHBpcGUuXCIpO1xuICAgIGlmICh2YWx1ZSAhPT0gbm9uZSkge1xuICAgICAgeWllbGQqIG5leHQodmFsdWUsIGZucywgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZsdXNoZWQgPSB0cnVlO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgZiA9IGZuc1tpXTtcbiAgICAgICAgaWYgKGlzRmx1c2hhYmxlKGYpKSB7XG4gICAgICAgICAgeWllbGQqIG5leHQoZihub25lKSwgZm5zLCBpICsgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IG5lZWRUb0ZsdXNoID0gZm5zLnNvbWUoKGZuOiBhbnkpID0+IGlzRmx1c2hhYmxlKGZuKSk7XG4gIGlmIChuZWVkVG9GbHVzaCkgZyA9IGZsdXNoYWJsZShnKTtcbiAgcmV0dXJuIHNldEZ1bmN0aW9uTGlzdChnLCBmbnMpO1xufTtcblxuY29uc3Qgd3JpdGUgPSAoaW5wdXQ6IGFueSwgY2h1bms6IGFueSwgZW5jb2Rpbmc6IGFueSwgY2FsbGJhY2s6IGFueSkgPT4ge1xuICBsZXQgZXJyb3I6IGFueSA9IG51bGw7XG4gIHRyeSB7XG4gICAgaW5wdXQud3JpdGUoY2h1bmssIGVuY29kaW5nLCAoZTogYW55KSA9PiBjYWxsYmFjayhlIHx8IGVycm9yKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnJvciA9IGU7XG4gIH1cbn07XG5cbmNvbnN0IGZpbmFsID0gKGlucHV0OiBhbnksIGNhbGxiYWNrOiBhbnkpID0+IHtcbiAgbGV0IGVycm9yOiBhbnkgPSBudWxsO1xuICB0cnkge1xuICAgIGlucHV0LmVuZChudWxsLCBudWxsLCAoZTogYW55KSA9PiBjYWxsYmFjayhlIHx8IGVycm9yKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnJvciA9IGU7XG4gIH1cbn07XG5cbmNvbnN0IHJlYWQgPSAob3V0cHV0OiBhbnkpID0+IHtcbiAgb3V0cHV0LnJlc3VtZSgpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2hhaW4oZm5zOiBhbnkpIHtcbiAgZm5zID0gZm5zLmZsYXQoSW5maW5pdHkpLmZpbHRlcigoZm46IGFueSkgPT4gZm4pO1xuXG4gIGNvbnN0IHN0cmVhbXMgPSBmbnNcbiAgICAgIC5tYXAoKGZuOiBhbnkpID0+IChpc0Z1bmN0aW9uTGlzdChmbikgPyBnZXRGdW5jdGlvbkxpc3QoZm4pIDogZm4pKVxuICAgICAgLmZsYXQoSW5maW5pdHkpXG4gICAgICAucmVkdWNlKGdyb3VwRnVuY3Rpb25zLCBbXSlcbiAgICAgIC5tYXAocHJvZHVjZVN0cmVhbXMpXG4gICAgICAuZmlsdGVyKChzOiBhbnkpID0+IHMpLFxuICAgIGlucHV0ID0gc3RyZWFtc1swXSxcbiAgICBvdXRwdXQgPSBzdHJlYW1zLnJlZHVjZSgob3V0cHV0OiBhbnksIGl0ZW06IGFueSkgPT4gKG91dHB1dCAmJiBvdXRwdXQucGlwZShpdGVtKSkgfHwgaXRlbSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1jb25zdFxuICBsZXQgc3RyZWFtOiBEdXBsZXg7IC8vIHdpbGwgYmUgYXNzaWduZWQgbGF0ZXJcblxuICBsZXQgd3JpdGVNZXRob2QgPSAoY2h1bms6IGFueSwgZW5jb2Rpbmc6IGFueSwgY2FsbGJhY2s6IGFueSkgPT4gd3JpdGUoaW5wdXQsIGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spLFxuICAgIGZpbmFsTWV0aG9kID0gKGNhbGxiYWNrOiBhbnkpID0+IGZpbmFsKGlucHV0LCBjYWxsYmFjayksXG4gICAgcmVhZE1ldGhvZCA9ICgpID0+IHJlYWQob3V0cHV0KTtcblxuICBpZiAoIWlzV3JpdGFibGVOb2RlU3RyZWFtKGlucHV0KSkge1xuICAgIHdyaXRlTWV0aG9kID0gKF8xLCBfMiwgY2FsbGJhY2spID0+IGNhbGxiYWNrKG51bGwpO1xuICAgIGZpbmFsTWV0aG9kID0gKGNhbGxiYWNrKSA9PiBjYWxsYmFjayhudWxsKTtcbiAgICBpbnB1dC5vbihcImVuZFwiLCAoKSA9PiBzdHJlYW0uZW5kKCkpO1xuICB9XG5cbiAgaWYgKGlzUmVhZGFibGVOb2RlU3RyZWFtKG91dHB1dCkpIHtcbiAgICBvdXRwdXQub24oXCJkYXRhXCIsIChjaHVuazogYW55KSA9PiAhc3RyZWFtLnB1c2goY2h1bmspICYmIG91dHB1dC5wYXVzZSgpKTtcbiAgICBvdXRwdXQub24oXCJlbmRcIiwgKCkgPT4gc3RyZWFtLnB1c2gobnVsbCkpO1xuICB9IGVsc2Uge1xuICAgIHJlYWRNZXRob2QgPSAoKSA9PiB7fTsgLy8gbm9wXG4gICAgb3V0cHV0Lm9uKFwiZmluaXNoXCIsICgpID0+IHN0cmVhbS5wdXNoKG51bGwpKTtcbiAgfVxuXG4gIHN0cmVhbSA9IG5ldyBEdXBsZXgoXG4gICAgT2JqZWN0LmFzc2lnbihcbiAgICAgIHsgd3JpdGFibGVPYmplY3RNb2RlOiB0cnVlLCByZWFkYWJsZU9iamVjdE1vZGU6IHRydWUgfSxcbiAgICAgIHtcbiAgICAgICAgcmVhZGFibGU6IGlzUmVhZGFibGVOb2RlU3RyZWFtKG91dHB1dCksXG4gICAgICAgIHdyaXRhYmxlOiBpc1dyaXRhYmxlTm9kZVN0cmVhbShpbnB1dCksXG4gICAgICAgIHdyaXRlOiB3cml0ZU1ldGhvZCxcbiAgICAgICAgZmluYWw6IGZpbmFsTWV0aG9kLFxuICAgICAgICByZWFkOiByZWFkTWV0aG9kLFxuICAgICAgfSxcbiAgICApLFxuICApO1xuICAvLyBAdHMtaWdub3JlXG4gIHN0cmVhbS5zdHJlYW1zID0gc3RyZWFtcztcbiAgLy8gQHRzLWlnbm9yZVxuICBzdHJlYW0uaW5wdXQgPSBpbnB1dDtcbiAgLy8gQHRzLWlnbm9yZVxuICBzdHJlYW0ub3V0cHV0ID0gb3V0cHV0O1xuXG4gIGlmICghaXNSZWFkYWJsZU5vZGVTdHJlYW0ob3V0cHV0KSkge1xuICAgIHN0cmVhbS5yZXN1bWUoKTtcbiAgfVxuXG4gIC8vIGNvbm5lY3QgZXZlbnRzXG4gIHN0cmVhbXMuZm9yRWFjaCgoaXRlbTogYW55KSA9PiBpdGVtLm9uKFwiZXJyb3JcIiwgKGVycm9yOiBhbnkpID0+IHN0cmVhbS5lbWl0KFwiZXJyb3JcIiwgZXJyb3IpKSk7XG5cbiAgcmV0dXJuIHN0cmVhbTtcbn1cbiIsICIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnQgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnRyb2wtcmVnZXggKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZWxlc3MtZXNjYXBlICovXG5pbXBvcnQgeyBmbHVzaGFibGUsIGdlbiwgbWFueSwgbm9uZSwgY29tYmluZU1hbnlNdXQgfSBmcm9tIFwiLi9zdHJlYW0tY2hhaW5cIjtcbmltcG9ydCB7IFN0cmluZ0RlY29kZXIgfSBmcm9tIFwibm9kZTpzdHJpbmdfZGVjb2RlclwiO1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tIFwibm9kZTpldmVudHNcIjtcblxuY29uc3QgZml4VXRmOFN0cmVhbSA9ICgpID0+IHtcbiAgY29uc3Qgc3RyaW5nRGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKCk7XG4gIGxldCBpbnB1dCA9IFwiXCI7XG4gIHJldHVybiBmbHVzaGFibGUoKGNodW5rOiBhbnkpID0+IHtcbiAgICBpZiAoY2h1bmsgPT09IG5vbmUpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGlucHV0ICsgc3RyaW5nRGVjb2Rlci5lbmQoKTtcbiAgICAgIGlucHV0ID0gXCJcIjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY2h1bmsgPT0gXCJzdHJpbmdcIikge1xuICAgICAgaWYgKCFpbnB1dCkgcmV0dXJuIGNodW5rO1xuICAgICAgY29uc3QgcmVzdWx0ID0gaW5wdXQgKyBjaHVuaztcbiAgICAgIGlucHV0ID0gXCJcIjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGlmIChjaHVuayBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgICAgY29uc3QgcmVzdWx0ID0gaW5wdXQgKyBzdHJpbmdEZWNvZGVyLndyaXRlKGNodW5rKTtcbiAgICAgIGlucHV0ID0gXCJcIjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBhIHN0cmluZyBvciBhIEJ1ZmZlclwiKTtcbiAgfSk7XG59O1xuXG5jb25zdCBwYXR0ZXJucyA9IHtcbiAgdmFsdWUxOiAvW1xcXCJcXHtcXFtcXF1cXC1cXGRdfHRydWVcXGJ8ZmFsc2VcXGJ8bnVsbFxcYnxcXHN7MSwyNTZ9L3ksXG4gIHN0cmluZzogL1teXFx4MDAtXFx4MWZcXFwiXFxcXF17MSwyNTZ9fFxcXFxbYmZucnRcXFwiXFxcXFxcL118XFxcXHVbXFxkYS1mQS1GXXs0fXxcXFwiL3ksXG4gIGtleTE6IC9bXFxcIlxcfV18XFxzezEsMjU2fS95LFxuICBjb2xvbjogL1xcOnxcXHN7MSwyNTZ9L3ksXG4gIGNvbW1hOiAvW1xcLFxcXVxcfV18XFxzezEsMjU2fS95LFxuICB3czogL1xcc3sxLDI1Nn0veSxcbiAgbnVtYmVyU3RhcnQ6IC9cXGQveSxcbiAgbnVtYmVyRGlnaXQ6IC9cXGR7MCwyNTZ9L3ksXG4gIG51bWJlckZyYWN0aW9uOiAvW1xcLmVFXS95LFxuICBudW1iZXJFeHBvbmVudDogL1tlRV0veSxcbiAgbnVtYmVyRXhwU2lnbjogL1stK10veSxcbn07XG5jb25zdCBNQVhfUEFUVEVSTl9TSVpFID0gMTY7XG5cbmNvbnN0IHZhbHVlczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHsgdHJ1ZTogdHJ1ZSwgZmFsc2U6IGZhbHNlLCBudWxsOiBudWxsIH0sXG4gIGV4cGVjdGVkOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0geyBvYmplY3Q6IFwib2JqZWN0U3RvcFwiLCBhcnJheTogXCJhcnJheVN0b3BcIiwgXCJcIjogXCJkb25lXCIgfTtcblxuLy8gbG9uZyBoZXhhZGVjaW1hbCBjb2RlczogXFx1WFhYWFxuY29uc3QgZnJvbUhleCA9IChzOiBzdHJpbmcpID0+IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQocy5zbGljZSgyKSwgMTYpKTtcblxuLy8gc2hvcnQgY29kZXM6IFxcYiBcXGYgXFxuIFxcciBcXHQgXFxcIiBcXFxcIFxcL1xuY29uc3QgY29kZXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XG4gIGI6IFwiXFxiXCIsXG4gIGY6IFwiXFxmXCIsXG4gIG46IFwiXFxuXCIsXG4gIHI6IFwiXFxyXCIsXG4gIHQ6IFwiXFx0XCIsXG4gICdcIic6ICdcIicsXG4gIFwiXFxcXFwiOiBcIlxcXFxcIixcbiAgXCIvXCI6IFwiL1wiLFxufTtcblxuY29uc3QganNvblBhcnNlciA9IChvcHRpb25zPzogYW55KSA9PiB7XG4gIGxldCBwYWNrS2V5cyA9IHRydWUsXG4gICAgcGFja1N0cmluZ3MgPSB0cnVlLFxuICAgIHBhY2tOdW1iZXJzID0gdHJ1ZSxcbiAgICBzdHJlYW1LZXlzID0gdHJ1ZSxcbiAgICBzdHJlYW1TdHJpbmdzID0gdHJ1ZSxcbiAgICBzdHJlYW1OdW1iZXJzID0gdHJ1ZSxcbiAgICBqc29uU3RyZWFtaW5nID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBcInBhY2tWYWx1ZXNcIiBpbiBvcHRpb25zICYmIChwYWNrS2V5cyA9IHBhY2tTdHJpbmdzID0gcGFja051bWJlcnMgPSBvcHRpb25zLnBhY2tWYWx1ZXMpO1xuICAgIFwicGFja0tleXNcIiBpbiBvcHRpb25zICYmIChwYWNrS2V5cyA9IG9wdGlvbnMucGFja0tleXMpO1xuICAgIFwicGFja1N0cmluZ3NcIiBpbiBvcHRpb25zICYmIChwYWNrU3RyaW5ncyA9IG9wdGlvbnMucGFja1N0cmluZ3MpO1xuICAgIFwicGFja051bWJlcnNcIiBpbiBvcHRpb25zICYmIChwYWNrTnVtYmVycyA9IG9wdGlvbnMucGFja051bWJlcnMpO1xuICAgIFwic3RyZWFtVmFsdWVzXCIgaW4gb3B0aW9ucyAmJiAoc3RyZWFtS2V5cyA9IHN0cmVhbVN0cmluZ3MgPSBzdHJlYW1OdW1iZXJzID0gb3B0aW9ucy5zdHJlYW1WYWx1ZXMpO1xuICAgIFwic3RyZWFtS2V5c1wiIGluIG9wdGlvbnMgJiYgKHN0cmVhbUtleXMgPSBvcHRpb25zLnN0cmVhbUtleXMpO1xuICAgIFwic3RyZWFtU3RyaW5nc1wiIGluIG9wdGlvbnMgJiYgKHN0cmVhbVN0cmluZ3MgPSBvcHRpb25zLnN0cmVhbVN0cmluZ3MpO1xuICAgIFwic3RyZWFtTnVtYmVyc1wiIGluIG9wdGlvbnMgJiYgKHN0cmVhbU51bWJlcnMgPSBvcHRpb25zLnN0cmVhbU51bWJlcnMpO1xuICAgIGpzb25TdHJlYW1pbmcgPSBvcHRpb25zLmpzb25TdHJlYW1pbmc7XG4gIH1cblxuICAhcGFja0tleXMgJiYgKHN0cmVhbUtleXMgPSB0cnVlKTtcbiAgIXBhY2tTdHJpbmdzICYmIChzdHJlYW1TdHJpbmdzID0gdHJ1ZSk7XG4gICFwYWNrTnVtYmVycyAmJiAoc3RyZWFtTnVtYmVycyA9IHRydWUpO1xuXG4gIGxldCBkb25lID0gZmFsc2UsXG4gICAgZXhwZWN0ID0ganNvblN0cmVhbWluZyA/IFwiZG9uZVwiIDogXCJ2YWx1ZVwiLFxuICAgIHBhcmVudCA9IFwiXCIsXG4gICAgb3Blbk51bWJlciA9IGZhbHNlLFxuICAgIGFjY3VtdWxhdG9yID0gXCJcIixcbiAgICBidWZmZXIgPSBcIlwiO1xuXG4gIGNvbnN0IHN0YWNrOiBhbnlbXSA9IFtdO1xuXG4gIHJldHVybiBmbHVzaGFibGUoKGJ1ZjogYW55KSA9PiB7XG4gICAgY29uc3QgdG9rZW5zOiBhbnlbXSA9IFtdO1xuXG4gICAgaWYgKGJ1ZiA9PT0gbm9uZSkge1xuICAgICAgZG9uZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1ZmZlciArPSBidWY7XG4gICAgfVxuXG4gICAgbGV0IG1hdGNoOiBhbnk7XG4gICAgbGV0IHZhbHVlOiBhbnk7XG4gICAgbGV0IGluZGV4ID0gMDtcblxuICAgIG1haW46IGZvciAoOzspIHtcbiAgICAgIHN3aXRjaCAoZXhwZWN0KSB7XG4gICAgICAgIGNhc2UgXCJ2YWx1ZTFcIjpcbiAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgcGF0dGVybnMudmFsdWUxLmxhc3RJbmRleCA9IGluZGV4O1xuICAgICAgICAgIG1hdGNoID0gcGF0dGVybnMudmFsdWUxLmV4ZWMoYnVmZmVyKTtcbiAgICAgICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgICAgICBpZiAoZG9uZSB8fCBpbmRleCArIE1BWF9QQVRURVJOX1NJWkUgPCBidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGlmIChpbmRleCA8IGJ1ZmZlci5sZW5ndGgpIHRocm93IG5ldyBFcnJvcihcIlBhcnNlciBjYW5ub3QgcGFyc2UgaW5wdXQ6IGV4cGVjdGVkIGEgdmFsdWVcIik7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhcnNlciBoYXMgZXhwZWN0ZWQgYSB2YWx1ZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrIG1haW47IC8vIHdhaXQgZm9yIG1vcmUgaW5wdXRcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWUgPSBtYXRjaFswXTtcbiAgICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlICdcIic6XG4gICAgICAgICAgICAgIGlmIChzdHJlYW1TdHJpbmdzKSB0b2tlbnMucHVzaCh7IG5hbWU6IFwic3RhcnRTdHJpbmdcIiB9KTtcbiAgICAgICAgICAgICAgZXhwZWN0ID0gXCJzdHJpbmdcIjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwie1wiOlxuICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7IG5hbWU6IFwic3RhcnRPYmplY3RcIiB9KTtcbiAgICAgICAgICAgICAgc3RhY2sucHVzaChwYXJlbnQpO1xuICAgICAgICAgICAgICBwYXJlbnQgPSBcIm9iamVjdFwiO1xuICAgICAgICAgICAgICBleHBlY3QgPSBcImtleTFcIjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiW1wiOlxuICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7IG5hbWU6IFwic3RhcnRBcnJheVwiIH0pO1xuICAgICAgICAgICAgICBzdGFjay5wdXNoKHBhcmVudCk7XG4gICAgICAgICAgICAgIHBhcmVudCA9IFwiYXJyYXlcIjtcbiAgICAgICAgICAgICAgZXhwZWN0ID0gXCJ2YWx1ZTFcIjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiXVwiOlxuICAgICAgICAgICAgICBpZiAoZXhwZWN0ICE9PSBcInZhbHVlMVwiKSB0aHJvdyBuZXcgRXJyb3IoXCJQYXJzZXIgY2Fubm90IHBhcnNlIGlucHV0OiB1bmV4cGVjdGVkIHRva2VuICddJ1wiKTtcbiAgICAgICAgICAgICAgaWYgKG9wZW5OdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RyZWFtTnVtYmVycykgdG9rZW5zLnB1c2goeyBuYW1lOiBcImVuZE51bWJlclwiIH0pO1xuICAgICAgICAgICAgICAgIG9wZW5OdW1iZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAocGFja051bWJlcnMpIHtcbiAgICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHsgbmFtZTogXCJudW1iZXJWYWx1ZVwiLCB2YWx1ZTogYWNjdW11bGF0b3IgfSk7XG4gICAgICAgICAgICAgICAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRva2Vucy5wdXNoKHsgbmFtZTogXCJlbmRBcnJheVwiIH0pO1xuICAgICAgICAgICAgICBwYXJlbnQgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgZXhwZWN0ID0gZXhwZWN0ZWRbcGFyZW50XTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiLVwiOlxuICAgICAgICAgICAgICBvcGVuTnVtYmVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgaWYgKHN0cmVhbU51bWJlcnMpIHtcbiAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7IG5hbWU6IFwic3RhcnROdW1iZXJcIiB9LCB7IG5hbWU6IFwibnVtYmVyQ2h1bmtcIiwgdmFsdWU6IFwiLVwiIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHBhY2tOdW1iZXJzICYmIChhY2N1bXVsYXRvciA9IFwiLVwiKTtcbiAgICAgICAgICAgICAgZXhwZWN0ID0gXCJudW1iZXJTdGFydFwiO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCIwXCI6XG4gICAgICAgICAgICAgIG9wZW5OdW1iZXIgPSB0cnVlO1xuICAgICAgICAgICAgICBpZiAoc3RyZWFtTnVtYmVycykge1xuICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHsgbmFtZTogXCJzdGFydE51bWJlclwiIH0sIHsgbmFtZTogXCJudW1iZXJDaHVua1wiLCB2YWx1ZTogXCIwXCIgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcGFja051bWJlcnMgJiYgKGFjY3VtdWxhdG9yID0gXCIwXCIpO1xuICAgICAgICAgICAgICBleHBlY3QgPSBcIm51bWJlckZyYWN0aW9uXCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIjFcIjpcbiAgICAgICAgICAgIGNhc2UgXCIyXCI6XG4gICAgICAgICAgICBjYXNlIFwiM1wiOlxuICAgICAgICAgICAgY2FzZSBcIjRcIjpcbiAgICAgICAgICAgIGNhc2UgXCI1XCI6XG4gICAgICAgICAgICBjYXNlIFwiNlwiOlxuICAgICAgICAgICAgY2FzZSBcIjdcIjpcbiAgICAgICAgICAgIGNhc2UgXCI4XCI6XG4gICAgICAgICAgICBjYXNlIFwiOVwiOlxuICAgICAgICAgICAgICBvcGVuTnVtYmVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgaWYgKHN0cmVhbU51bWJlcnMpIHtcbiAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7IG5hbWU6IFwic3RhcnROdW1iZXJcIiB9LCB7IG5hbWU6IFwibnVtYmVyQ2h1bmtcIiwgdmFsdWU6IHZhbHVlIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHBhY2tOdW1iZXJzICYmIChhY2N1bXVsYXRvciA9IHZhbHVlKTtcbiAgICAgICAgICAgICAgZXhwZWN0ID0gXCJudW1iZXJEaWdpdFwiO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ0cnVlXCI6XG4gICAgICAgICAgICBjYXNlIFwiZmFsc2VcIjpcbiAgICAgICAgICAgIGNhc2UgXCJudWxsXCI6XG4gICAgICAgICAgICAgIGlmIChidWZmZXIubGVuZ3RoIC0gaW5kZXggPT09IHZhbHVlLmxlbmd0aCAmJiAhZG9uZSkgYnJlYWsgbWFpbjsgLy8gd2FpdCBmb3IgbW9yZSBpbnB1dFxuICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7IG5hbWU6IHZhbHVlICsgXCJWYWx1ZVwiLCB2YWx1ZTogdmFsdWVzW3ZhbHVlXSB9KTtcbiAgICAgICAgICAgICAgZXhwZWN0ID0gZXhwZWN0ZWRbcGFyZW50XTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvLyBkZWZhdWx0OiAvLyB3c1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbmRleCArPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJrZXlWYWxcIjpcbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgIHBhdHRlcm5zLnN0cmluZy5sYXN0SW5kZXggPSBpbmRleDtcbiAgICAgICAgICBtYXRjaCA9IHBhdHRlcm5zLnN0cmluZy5leGVjKGJ1ZmZlcik7XG4gICAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgYnVmZmVyLmxlbmd0aCAmJiAoZG9uZSB8fCBidWZmZXIubGVuZ3RoIC0gaW5kZXggPj0gNikpXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhcnNlciBjYW5ub3QgcGFyc2UgaW5wdXQ6IGVzY2FwZWQgY2hhcmFjdGVyc1wiKTtcbiAgICAgICAgICAgIGlmIChkb25lKSB0aHJvdyBuZXcgRXJyb3IoXCJQYXJzZXIgaGFzIGV4cGVjdGVkIGEgc3RyaW5nIHZhbHVlXCIpO1xuICAgICAgICAgICAgYnJlYWsgbWFpbjsgLy8gd2FpdCBmb3IgbW9yZSBpbnB1dFxuICAgICAgICAgIH1cbiAgICAgICAgICB2YWx1ZSA9IG1hdGNoWzBdO1xuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJ1wiJykge1xuICAgICAgICAgICAgaWYgKGV4cGVjdCA9PT0gXCJrZXlWYWxcIikge1xuICAgICAgICAgICAgICBpZiAoc3RyZWFtS2V5cykgdG9rZW5zLnB1c2goeyBuYW1lOiBcImVuZEtleVwiIH0pO1xuICAgICAgICAgICAgICBpZiAocGFja0tleXMpIHtcbiAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7IG5hbWU6IFwia2V5VmFsdWVcIiwgdmFsdWU6IGFjY3VtdWxhdG9yIH0pO1xuICAgICAgICAgICAgICAgIGFjY3VtdWxhdG9yID0gXCJcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBleHBlY3QgPSBcImNvbG9uXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoc3RyZWFtU3RyaW5ncykgdG9rZW5zLnB1c2goeyBuYW1lOiBcImVuZFN0cmluZ1wiIH0pO1xuICAgICAgICAgICAgICBpZiAocGFja1N0cmluZ3MpIHtcbiAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7IG5hbWU6IFwic3RyaW5nVmFsdWVcIiwgdmFsdWU6IGFjY3VtdWxhdG9yIH0pO1xuICAgICAgICAgICAgICAgIGFjY3VtdWxhdG9yID0gXCJcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBleHBlY3QgPSBleHBlY3RlZFtwYXJlbnRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUubGVuZ3RoID4gMSAmJiB2YWx1ZS5jaGFyQXQoMCkgPT09IFwiXFxcXFwiKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gdmFsdWUubGVuZ3RoID09IDIgPyBjb2Rlc1t2YWx1ZS5jaGFyQXQoMSldIDogZnJvbUhleCh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoZXhwZWN0ID09PSBcImtleVZhbFwiID8gc3RyZWFtS2V5cyA6IHN0cmVhbVN0cmluZ3MpIHtcbiAgICAgICAgICAgICAgdG9rZW5zLnB1c2goeyBuYW1lOiBcInN0cmluZ0NodW5rXCIsIHZhbHVlOiB0IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV4cGVjdCA9PT0gXCJrZXlWYWxcIiA/IHBhY2tLZXlzIDogcGFja1N0cmluZ3MpIHtcbiAgICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGV4cGVjdCA9PT0gXCJrZXlWYWxcIiA/IHN0cmVhbUtleXMgOiBzdHJlYW1TdHJpbmdzKSB7XG4gICAgICAgICAgICAgIHRva2Vucy5wdXNoKHsgbmFtZTogXCJzdHJpbmdDaHVua1wiLCB2YWx1ZTogdmFsdWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXhwZWN0ID09PSBcImtleVZhbFwiID8gcGFja0tleXMgOiBwYWNrU3RyaW5ncykge1xuICAgICAgICAgICAgICBhY2N1bXVsYXRvciArPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaW5kZXggKz0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwia2V5MVwiOlxuICAgICAgICBjYXNlIFwia2V5XCI6XG4gICAgICAgICAgcGF0dGVybnMua2V5MS5sYXN0SW5kZXggPSBpbmRleDtcbiAgICAgICAgICBtYXRjaCA9IHBhdHRlcm5zLmtleTEuZXhlYyhidWZmZXIpO1xuICAgICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA8IGJ1ZmZlci5sZW5ndGggfHwgZG9uZSkgdGhyb3cgbmV3IEVycm9yKFwiUGFyc2VyIGNhbm5vdCBwYXJzZSBpbnB1dDogZXhwZWN0ZWQgYW4gb2JqZWN0IGtleVwiKTtcbiAgICAgICAgICAgIGJyZWFrIG1haW47IC8vIHdhaXQgZm9yIG1vcmUgaW5wdXRcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWUgPSBtYXRjaFswXTtcbiAgICAgICAgICBpZiAodmFsdWUgPT09ICdcIicpIHtcbiAgICAgICAgICAgIGlmIChzdHJlYW1LZXlzKSB0b2tlbnMucHVzaCh7IG5hbWU6IFwic3RhcnRLZXlcIiB9KTtcbiAgICAgICAgICAgIGV4cGVjdCA9IFwia2V5VmFsXCI7XG4gICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gXCJ9XCIpIHtcbiAgICAgICAgICAgIGlmIChleHBlY3QgIT09IFwia2V5MVwiKSB0aHJvdyBuZXcgRXJyb3IoXCJQYXJzZXIgY2Fubm90IHBhcnNlIGlucHV0OiB1bmV4cGVjdGVkIHRva2VuICd9J1wiKTtcbiAgICAgICAgICAgIHRva2Vucy5wdXNoKHsgbmFtZTogXCJlbmRPYmplY3RcIiB9KTtcbiAgICAgICAgICAgIHBhcmVudCA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgZXhwZWN0ID0gZXhwZWN0ZWRbcGFyZW50XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5kZXggKz0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiY29sb25cIjpcbiAgICAgICAgICBwYXR0ZXJucy5jb2xvbi5sYXN0SW5kZXggPSBpbmRleDtcbiAgICAgICAgICBtYXRjaCA9IHBhdHRlcm5zLmNvbG9uLmV4ZWMoYnVmZmVyKTtcbiAgICAgICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCBidWZmZXIubGVuZ3RoIHx8IGRvbmUpIHRocm93IG5ldyBFcnJvcihcIlBhcnNlciBjYW5ub3QgcGFyc2UgaW5wdXQ6IGV4cGVjdGVkICc6J1wiKTtcbiAgICAgICAgICAgIGJyZWFrIG1haW47IC8vIHdhaXQgZm9yIG1vcmUgaW5wdXRcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWUgPSBtYXRjaFswXTtcbiAgICAgICAgICB2YWx1ZSA9PT0gXCI6XCIgJiYgKGV4cGVjdCA9IFwidmFsdWVcIik7XG4gICAgICAgICAgaW5kZXggKz0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiYXJyYXlTdG9wXCI6XG4gICAgICAgIGNhc2UgXCJvYmplY3RTdG9wXCI6XG4gICAgICAgICAgcGF0dGVybnMuY29tbWEubGFzdEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgbWF0Y2ggPSBwYXR0ZXJucy5jb21tYS5leGVjKGJ1ZmZlcik7XG4gICAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgYnVmZmVyLmxlbmd0aCB8fCBkb25lKSB0aHJvdyBuZXcgRXJyb3IoXCJQYXJzZXIgY2Fubm90IHBhcnNlIGlucHV0OiBleHBlY3RlZCAnLCdcIik7XG4gICAgICAgICAgICBicmVhayBtYWluOyAvLyB3YWl0IGZvciBtb3JlIGlucHV0XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvcGVuTnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAoc3RyZWFtTnVtYmVycykgdG9rZW5zLnB1c2goeyBuYW1lOiBcImVuZE51bWJlclwiIH0pO1xuICAgICAgICAgICAgb3Blbk51bWJlciA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHBhY2tOdW1iZXJzKSB7XG4gICAgICAgICAgICAgIHRva2Vucy5wdXNoKHsgbmFtZTogXCJudW1iZXJWYWx1ZVwiLCB2YWx1ZTogYWNjdW11bGF0b3IgfSk7XG4gICAgICAgICAgICAgIGFjY3VtdWxhdG9yID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWUgPSBtYXRjaFswXTtcbiAgICAgICAgICBpZiAodmFsdWUgPT09IFwiLFwiKSB7XG4gICAgICAgICAgICBleHBlY3QgPSBleHBlY3QgPT09IFwiYXJyYXlTdG9wXCIgPyBcInZhbHVlXCIgOiBcImtleVwiO1xuICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IFwifVwiIHx8IHZhbHVlID09PSBcIl1cIikge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBcIn1cIiA/IGV4cGVjdCA9PT0gXCJhcnJheVN0b3BcIiA6IGV4cGVjdCAhPT0gXCJhcnJheVN0b3BcIikge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYXJzZXIgY2Fubm90IHBhcnNlIGlucHV0OiBleHBlY3RlZCAnXCIgKyAoZXhwZWN0ID09PSBcImFycmF5U3RvcFwiID8gXCJdXCIgOiBcIn1cIikgKyBcIidcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b2tlbnMucHVzaCh7IG5hbWU6IHZhbHVlID09PSBcIn1cIiA/IFwiZW5kT2JqZWN0XCIgOiBcImVuZEFycmF5XCIgfSk7XG4gICAgICAgICAgICBwYXJlbnQgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgIGV4cGVjdCA9IGV4cGVjdGVkW3BhcmVudF07XG4gICAgICAgICAgfVxuICAgICAgICAgIGluZGV4ICs9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gbnVtYmVyIGNodW5rc1xuICAgICAgICBjYXNlIFwibnVtYmVyU3RhcnRcIjogLy8gWzAtOV1cbiAgICAgICAgICBwYXR0ZXJucy5udW1iZXJTdGFydC5sYXN0SW5kZXggPSBpbmRleDtcbiAgICAgICAgICBtYXRjaCA9IHBhdHRlcm5zLm51bWJlclN0YXJ0LmV4ZWMoYnVmZmVyKTtcbiAgICAgICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCBidWZmZXIubGVuZ3RoIHx8IGRvbmUpIHRocm93IG5ldyBFcnJvcihcIlBhcnNlciBjYW5ub3QgcGFyc2UgaW5wdXQ6IGV4cGVjdGVkIGEgc3RhcnRpbmcgZGlnaXRcIik7XG4gICAgICAgICAgICBicmVhayBtYWluOyAvLyB3YWl0IGZvciBtb3JlIGlucHV0XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbHVlID0gbWF0Y2hbMF07XG4gICAgICAgICAgaWYgKHN0cmVhbU51bWJlcnMpIHRva2Vucy5wdXNoKHsgbmFtZTogXCJudW1iZXJDaHVua1wiLCB2YWx1ZTogdmFsdWUgfSk7XG4gICAgICAgICAgcGFja051bWJlcnMgJiYgKGFjY3VtdWxhdG9yICs9IHZhbHVlKTtcbiAgICAgICAgICBleHBlY3QgPSB2YWx1ZSA9PT0gXCIwXCIgPyBcIm51bWJlckZyYWN0aW9uXCIgOiBcIm51bWJlckRpZ2l0XCI7XG4gICAgICAgICAgaW5kZXggKz0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibnVtYmVyRGlnaXRcIjogLy8gWzAtOV0qXG4gICAgICAgICAgcGF0dGVybnMubnVtYmVyRGlnaXQubGFzdEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgbWF0Y2ggPSBwYXR0ZXJucy5udW1iZXJEaWdpdC5leGVjKGJ1ZmZlcik7XG4gICAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgYnVmZmVyLmxlbmd0aCB8fCBkb25lKSB0aHJvdyBuZXcgRXJyb3IoXCJQYXJzZXIgY2Fubm90IHBhcnNlIGlucHV0OiBleHBlY3RlZCBhIGRpZ2l0XCIpO1xuICAgICAgICAgICAgYnJlYWsgbWFpbjsgLy8gd2FpdCBmb3IgbW9yZSBpbnB1dFxuICAgICAgICAgIH1cbiAgICAgICAgICB2YWx1ZSA9IG1hdGNoWzBdO1xuICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHN0cmVhbU51bWJlcnMpIHRva2Vucy5wdXNoKHsgbmFtZTogXCJudW1iZXJDaHVua1wiLCB2YWx1ZTogdmFsdWUgfSk7XG4gICAgICAgICAgICBwYWNrTnVtYmVycyAmJiAoYWNjdW11bGF0b3IgKz0gdmFsdWUpO1xuICAgICAgICAgICAgaW5kZXggKz0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCBidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGV4cGVjdCA9IFwibnVtYmVyRnJhY3Rpb25cIjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICBleHBlY3QgPSBleHBlY3RlZFtwYXJlbnRdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrIG1haW47IC8vIHdhaXQgZm9yIG1vcmUgaW5wdXRcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJudW1iZXJGcmFjdGlvblwiOiAvLyBbXFwuZUVdP1xuICAgICAgICAgIHBhdHRlcm5zLm51bWJlckZyYWN0aW9uLmxhc3RJbmRleCA9IGluZGV4O1xuICAgICAgICAgIG1hdGNoID0gcGF0dGVybnMubnVtYmVyRnJhY3Rpb24uZXhlYyhidWZmZXIpO1xuICAgICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA8IGJ1ZmZlci5sZW5ndGggfHwgZG9uZSkge1xuICAgICAgICAgICAgICBleHBlY3QgPSBleHBlY3RlZFtwYXJlbnRdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrIG1haW47IC8vIHdhaXQgZm9yIG1vcmUgaW5wdXRcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWUgPSBtYXRjaFswXTtcbiAgICAgICAgICBpZiAoc3RyZWFtTnVtYmVycykgdG9rZW5zLnB1c2goeyBuYW1lOiBcIm51bWJlckNodW5rXCIsIHZhbHVlOiB2YWx1ZSB9KTtcbiAgICAgICAgICBwYWNrTnVtYmVycyAmJiAoYWNjdW11bGF0b3IgKz0gdmFsdWUpO1xuICAgICAgICAgIGV4cGVjdCA9IHZhbHVlID09PSBcIi5cIiA/IFwibnVtYmVyRnJhY1N0YXJ0XCIgOiBcIm51bWJlckV4cFNpZ25cIjtcbiAgICAgICAgICBpbmRleCArPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJudW1iZXJGcmFjU3RhcnRcIjogLy8gWzAtOV1cbiAgICAgICAgICBwYXR0ZXJucy5udW1iZXJTdGFydC5sYXN0SW5kZXggPSBpbmRleDtcbiAgICAgICAgICBtYXRjaCA9IHBhdHRlcm5zLm51bWJlclN0YXJ0LmV4ZWMoYnVmZmVyKTtcbiAgICAgICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCBidWZmZXIubGVuZ3RoIHx8IGRvbmUpXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhcnNlciBjYW5ub3QgcGFyc2UgaW5wdXQ6IGV4cGVjdGVkIGEgZnJhY3Rpb25hbCBwYXJ0IG9mIGEgbnVtYmVyXCIpO1xuICAgICAgICAgICAgYnJlYWsgbWFpbjsgLy8gd2FpdCBmb3IgbW9yZSBpbnB1dFxuICAgICAgICAgIH1cbiAgICAgICAgICB2YWx1ZSA9IG1hdGNoWzBdO1xuICAgICAgICAgIGlmIChzdHJlYW1OdW1iZXJzKSB0b2tlbnMucHVzaCh7IG5hbWU6IFwibnVtYmVyQ2h1bmtcIiwgdmFsdWU6IHZhbHVlIH0pO1xuICAgICAgICAgIHBhY2tOdW1iZXJzICYmIChhY2N1bXVsYXRvciArPSB2YWx1ZSk7XG4gICAgICAgICAgZXhwZWN0ID0gXCJudW1iZXJGcmFjRGlnaXRcIjtcbiAgICAgICAgICBpbmRleCArPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJudW1iZXJGcmFjRGlnaXRcIjogLy8gWzAtOV0qXG4gICAgICAgICAgcGF0dGVybnMubnVtYmVyRGlnaXQubGFzdEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgbWF0Y2ggPSBwYXR0ZXJucy5udW1iZXJEaWdpdC5leGVjKGJ1ZmZlcik7XG4gICAgICAgICAgdmFsdWUgPSBtYXRjaFswXTtcbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChzdHJlYW1OdW1iZXJzKSB0b2tlbnMucHVzaCh7IG5hbWU6IFwibnVtYmVyQ2h1bmtcIiwgdmFsdWU6IHZhbHVlIH0pO1xuICAgICAgICAgICAgcGFja051bWJlcnMgJiYgKGFjY3VtdWxhdG9yICs9IHZhbHVlKTtcbiAgICAgICAgICAgIGluZGV4ICs9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgICBleHBlY3QgPSBcIm51bWJlckV4cG9uZW50XCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgZXhwZWN0ID0gZXhwZWN0ZWRbcGFyZW50XTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhayBtYWluOyAvLyB3YWl0IGZvciBtb3JlIGlucHV0XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibnVtYmVyRXhwb25lbnRcIjogLy8gW2VFXT9cbiAgICAgICAgICBwYXR0ZXJucy5udW1iZXJFeHBvbmVudC5sYXN0SW5kZXggPSBpbmRleDtcbiAgICAgICAgICBtYXRjaCA9IHBhdHRlcm5zLm51bWJlckV4cG9uZW50LmV4ZWMoYnVmZmVyKTtcbiAgICAgICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCBidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGV4cGVjdCA9IGV4cGVjdGVkW3BhcmVudF07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgZXhwZWN0ID0gXCJkb25lXCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWsgbWFpbjsgLy8gd2FpdCBmb3IgbW9yZSBpbnB1dFxuICAgICAgICAgIH1cbiAgICAgICAgICB2YWx1ZSA9IG1hdGNoWzBdO1xuICAgICAgICAgIGlmIChzdHJlYW1OdW1iZXJzKSB0b2tlbnMucHVzaCh7IG5hbWU6IFwibnVtYmVyQ2h1bmtcIiwgdmFsdWU6IHZhbHVlIH0pO1xuICAgICAgICAgIHBhY2tOdW1iZXJzICYmIChhY2N1bXVsYXRvciArPSB2YWx1ZSk7XG4gICAgICAgICAgZXhwZWN0ID0gXCJudW1iZXJFeHBTaWduXCI7XG4gICAgICAgICAgaW5kZXggKz0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibnVtYmVyRXhwU2lnblwiOiAvLyBbLStdP1xuICAgICAgICAgIHBhdHRlcm5zLm51bWJlckV4cFNpZ24ubGFzdEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgbWF0Y2ggPSBwYXR0ZXJucy5udW1iZXJFeHBTaWduLmV4ZWMoYnVmZmVyKTtcbiAgICAgICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCBidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGV4cGVjdCA9IFwibnVtYmVyRXhwU3RhcnRcIjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZG9uZSkgdGhyb3cgbmV3IEVycm9yKFwiUGFyc2VyIGhhcyBleHBlY3RlZCBhbiBleHBvbmVudCB2YWx1ZSBvZiBhIG51bWJlclwiKTtcbiAgICAgICAgICAgIGJyZWFrIG1haW47IC8vIHdhaXQgZm9yIG1vcmUgaW5wdXRcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWUgPSBtYXRjaFswXTtcbiAgICAgICAgICBpZiAoc3RyZWFtTnVtYmVycykgdG9rZW5zLnB1c2goeyBuYW1lOiBcIm51bWJlckNodW5rXCIsIHZhbHVlOiB2YWx1ZSB9KTtcbiAgICAgICAgICBwYWNrTnVtYmVycyAmJiAoYWNjdW11bGF0b3IgKz0gdmFsdWUpO1xuICAgICAgICAgIGV4cGVjdCA9IFwibnVtYmVyRXhwU3RhcnRcIjtcbiAgICAgICAgICBpbmRleCArPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJudW1iZXJFeHBTdGFydFwiOiAvLyBbMC05XVxuICAgICAgICAgIHBhdHRlcm5zLm51bWJlclN0YXJ0Lmxhc3RJbmRleCA9IGluZGV4O1xuICAgICAgICAgIG1hdGNoID0gcGF0dGVybnMubnVtYmVyU3RhcnQuZXhlYyhidWZmZXIpO1xuICAgICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA8IGJ1ZmZlci5sZW5ndGggfHwgZG9uZSlcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGFyc2VyIGNhbm5vdCBwYXJzZSBpbnB1dDogZXhwZWN0ZWQgYW4gZXhwb25lbnQgcGFydCBvZiBhIG51bWJlclwiKTtcbiAgICAgICAgICAgIGJyZWFrIG1haW47IC8vIHdhaXQgZm9yIG1vcmUgaW5wdXRcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWUgPSBtYXRjaFswXTtcbiAgICAgICAgICBpZiAoc3RyZWFtTnVtYmVycykgdG9rZW5zLnB1c2goeyBuYW1lOiBcIm51bWJlckNodW5rXCIsIHZhbHVlOiB2YWx1ZSB9KTtcbiAgICAgICAgICBwYWNrTnVtYmVycyAmJiAoYWNjdW11bGF0b3IgKz0gdmFsdWUpO1xuICAgICAgICAgIGV4cGVjdCA9IFwibnVtYmVyRXhwRGlnaXRcIjtcbiAgICAgICAgICBpbmRleCArPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJudW1iZXJFeHBEaWdpdFwiOiAvLyBbMC05XSpcbiAgICAgICAgICBwYXR0ZXJucy5udW1iZXJEaWdpdC5sYXN0SW5kZXggPSBpbmRleDtcbiAgICAgICAgICBtYXRjaCA9IHBhdHRlcm5zLm51bWJlckRpZ2l0LmV4ZWMoYnVmZmVyKTtcbiAgICAgICAgICB2YWx1ZSA9IG1hdGNoWzBdO1xuICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHN0cmVhbU51bWJlcnMpIHRva2Vucy5wdXNoKHsgbmFtZTogXCJudW1iZXJDaHVua1wiLCB2YWx1ZTogdmFsdWUgfSk7XG4gICAgICAgICAgICBwYWNrTnVtYmVycyAmJiAoYWNjdW11bGF0b3IgKz0gdmFsdWUpO1xuICAgICAgICAgICAgaW5kZXggKz0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCBidWZmZXIubGVuZ3RoIHx8IGRvbmUpIHtcbiAgICAgICAgICAgICAgZXhwZWN0ID0gZXhwZWN0ZWRbcGFyZW50XTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhayBtYWluOyAvLyB3YWl0IGZvciBtb3JlIGlucHV0XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZG9uZVwiOlxuICAgICAgICAgIHBhdHRlcm5zLndzLmxhc3RJbmRleCA9IGluZGV4O1xuICAgICAgICAgIG1hdGNoID0gcGF0dGVybnMud3MuZXhlYyhidWZmZXIpO1xuICAgICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA8IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgaWYgKGpzb25TdHJlYW1pbmcpIHtcbiAgICAgICAgICAgICAgICBleHBlY3QgPSBcInZhbHVlXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGFyc2VyIGNhbm5vdCBwYXJzZSBpbnB1dDogdW5leHBlY3RlZCBjaGFyYWN0ZXJzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWsgbWFpbjsgLy8gd2FpdCBmb3IgbW9yZSBpbnB1dFxuICAgICAgICAgIH1cbiAgICAgICAgICB2YWx1ZSA9IG1hdGNoWzBdO1xuICAgICAgICAgIGlmIChvcGVuTnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAoc3RyZWFtTnVtYmVycykgdG9rZW5zLnB1c2goeyBuYW1lOiBcImVuZE51bWJlclwiIH0pO1xuICAgICAgICAgICAgb3Blbk51bWJlciA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHBhY2tOdW1iZXJzKSB7XG4gICAgICAgICAgICAgIHRva2Vucy5wdXNoKHsgbmFtZTogXCJudW1iZXJWYWx1ZVwiLCB2YWx1ZTogYWNjdW11bGF0b3IgfSk7XG4gICAgICAgICAgICAgIGFjY3VtdWxhdG9yID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaW5kZXggKz0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZG9uZSAmJiBvcGVuTnVtYmVyKSB7XG4gICAgICBpZiAoc3RyZWFtTnVtYmVycykgdG9rZW5zLnB1c2goeyBuYW1lOiBcImVuZE51bWJlclwiIH0pO1xuICAgICAgb3Blbk51bWJlciA9IGZhbHNlO1xuICAgICAgaWYgKHBhY2tOdW1iZXJzKSB7XG4gICAgICAgIHRva2Vucy5wdXNoKHsgbmFtZTogXCJudW1iZXJWYWx1ZVwiLCB2YWx1ZTogYWNjdW11bGF0b3IgfSk7XG4gICAgICAgIGFjY3VtdWxhdG9yID0gXCJcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgYnVmZmVyID0gYnVmZmVyLnNsaWNlKGluZGV4KTtcbiAgICByZXR1cm4gdG9rZW5zLmxlbmd0aCA/IG1hbnkodG9rZW5zKSA6IG5vbmU7XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHBhcnNlciA9IChvcHRpb25zPzogYW55KSA9PiBnZW4oZml4VXRmOFN0cmVhbSgpLCBqc29uUGFyc2VyKG9wdGlvbnMpKTtcblxuY29uc3Qgd2l0aFBhcnNlciA9IChmbjogYW55LCBvcHRpb25zPzogYW55KSA9PiBnZW4ocGFyc2VyKG9wdGlvbnMpLCBmbihvcHRpb25zKSk7XG5cbmNvbnN0IGNoZWNrYWJsZVRva2VucyA9IHtcbiAgICBzdGFydE9iamVjdDogMSxcbiAgICBzdGFydEFycmF5OiAxLFxuICAgIHN0YXJ0U3RyaW5nOiAxLFxuICAgIHN0YXJ0TnVtYmVyOiAxLFxuICAgIG51bGxWYWx1ZTogMSxcbiAgICB0cnVlVmFsdWU6IDEsXG4gICAgZmFsc2VWYWx1ZTogMSxcbiAgICBzdHJpbmdWYWx1ZTogMSxcbiAgICBudW1iZXJWYWx1ZTogMSxcbiAgfSxcbiAgc3RvcFRva2VucyA9IHtcbiAgICBzdGFydE9iamVjdDogXCJlbmRPYmplY3RcIixcbiAgICBzdGFydEFycmF5OiBcImVuZEFycmF5XCIsXG4gICAgc3RhcnRTdHJpbmc6IFwiZW5kU3RyaW5nXCIsXG4gICAgc3RhcnROdW1iZXI6IFwiZW5kTnVtYmVyXCIsXG4gIH0sXG4gIG9wdGlvbmFsVG9rZW5zID0geyBlbmRTdHJpbmc6IFwic3RyaW5nVmFsdWVcIiwgZW5kTnVtYmVyOiBcIm51bWJlclZhbHVlXCIgfTtcblxuY29uc3QgZGVmYXVsdEZpbHRlciA9IChfc3RhY2s6IHN0cmluZ1tdLCBfYTogYW55KSA9PiB0cnVlO1xuXG5jb25zdCBzdHJpbmdGaWx0ZXIgPSAoc3RyaW5nOiBzdHJpbmcsIHNlcGFyYXRvcjogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHN0cmluZ1dpdGhTZXBhcmF0b3IgPSBzdHJpbmcgKyBzZXBhcmF0b3I7XG4gIHJldHVybiAoc3RhY2s6IHN0cmluZ1tdLCBfYTogYW55KSA9PiB7XG4gICAgY29uc3QgcGF0aCA9IHN0YWNrLmpvaW4oc2VwYXJhdG9yKTtcbiAgICByZXR1cm4gcGF0aCA9PT0gc3RyaW5nIHx8IHBhdGguc3RhcnRzV2l0aChzdHJpbmdXaXRoU2VwYXJhdG9yKTtcbiAgfTtcbn07XG5cbmNvbnN0IHJlZ0V4cEZpbHRlciA9IChyZWdFeHA6IFJlZ0V4cCwgc2VwYXJhdG9yOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIChzdGFjazogc3RyaW5nW10sIF9hOiBhbnkpID0+IHJlZ0V4cC50ZXN0KHN0YWNrLmpvaW4oc2VwYXJhdG9yKSk7XG59O1xuXG5jb25zdCBmaWx0ZXJCYXNlID1cbiAgKHtcbiAgICBzcGVjaWFsQWN0aW9uID0gXCJhY2NlcHRcIixcbiAgICBkZWZhdWx0QWN0aW9uID0gXCJpZ25vcmVcIixcbiAgICBub25DaGVja2FibGVBY3Rpb24gPSBcInByb2Nlc3Mta2V5XCIsXG4gICAgdHJhbnNpdGlvbiA9IHVuZGVmaW5lZCBhcyBhbnksXG4gIH0gPSB7fSkgPT5cbiAgKG9wdGlvbnM6IGFueSkgPT4ge1xuICAgIGNvbnN0IG9uY2UgPSBvcHRpb25zPy5vbmNlLFxuICAgICAgc2VwYXJhdG9yID0gb3B0aW9ucz8ucGF0aFNlcGFyYXRvciB8fCBcIi5cIjtcbiAgICBsZXQgZmlsdGVyID0gZGVmYXVsdEZpbHRlcixcbiAgICAgIHN0cmVhbUtleXMgPSB0cnVlO1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmlsdGVyID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBmaWx0ZXIgPSBvcHRpb25zLmZpbHRlcjtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuZmlsdGVyID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZmlsdGVyID0gc3RyaW5nRmlsdGVyKG9wdGlvbnMuZmlsdGVyLCBzZXBhcmF0b3IpO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmZpbHRlciBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICBmaWx0ZXIgPSByZWdFeHBGaWx0ZXIob3B0aW9ucy5maWx0ZXIsIHNlcGFyYXRvcik7XG4gICAgICB9XG4gICAgICBpZiAoXCJzdHJlYW1WYWx1ZXNcIiBpbiBvcHRpb25zKSBzdHJlYW1LZXlzID0gb3B0aW9ucy5zdHJlYW1WYWx1ZXM7XG4gICAgICBpZiAoXCJzdHJlYW1LZXlzXCIgaW4gb3B0aW9ucykgc3RyZWFtS2V5cyA9IG9wdGlvbnMuc3RyZWFtS2V5cztcbiAgICB9XG4gICAgY29uc3Qgc2FuaXRpemVkT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHsgZmlsdGVyLCBzdHJlYW1LZXlzLCBzZXBhcmF0b3IgfSk7XG4gICAgbGV0IHN0YXRlID0gXCJjaGVja1wiO1xuICAgIGNvbnN0IHN0YWNrOiBhbnlbXSA9IFtdO1xuICAgIGxldCBkZXB0aCA9IDAsXG4gICAgICBwcmV2aW91c1Rva2VuID0gXCJcIixcbiAgICAgIGVuZFRva2VuID0gXCJcIixcbiAgICAgIG9wdGlvbmFsVG9rZW4gPSBcIlwiLFxuICAgICAgc3RhcnRUcmFuc2l0aW9uID0gZmFsc2U7XG4gICAgcmV0dXJuIGZsdXNoYWJsZSgoY2h1bmspID0+IHtcbiAgICAgIC8vIHRoZSBmbHVzaFxuICAgICAgaWYgKGNodW5rID09PSBub25lKSByZXR1cm4gdHJhbnNpdGlvbiA/IHRyYW5zaXRpb24oW10sIG51bGwsIFwiZmx1c2hcIiwgc2FuaXRpemVkT3B0aW9ucykgOiBub25lO1xuXG4gICAgICAvLyBwcm9jZXNzIHRoZSBvcHRpb25hbCB2YWx1ZSB0b2tlbiAodW5maW5pc2hlZClcbiAgICAgIGlmIChvcHRpb25hbFRva2VuKSB7XG4gICAgICAgIGlmIChvcHRpb25hbFRva2VuID09PSBjaHVuay5uYW1lKSB7XG4gICAgICAgICAgbGV0IHJldHVyblRva2VuID0gbm9uZTtcbiAgICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlIFwicHJvY2Vzcy1rZXlcIjpcbiAgICAgICAgICAgICAgc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0gPSBjaHVuay52YWx1ZTtcbiAgICAgICAgICAgICAgc3RhdGUgPSBcImNoZWNrXCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImFjY2VwdC12YWx1ZVwiOlxuICAgICAgICAgICAgICByZXR1cm5Ub2tlbiA9IGNodW5rO1xuICAgICAgICAgICAgICBzdGF0ZSA9IG9uY2UgPyBcInBhc3NcIiA6IFwiY2hlY2tcIjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzdGF0ZSA9IG9uY2UgPyBcImFsbFwiIDogXCJjaGVja1wiO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgb3B0aW9uYWxUb2tlbiA9IFwiXCI7XG4gICAgICAgICAgcmV0dXJuIHJldHVyblRva2VuO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbmFsVG9rZW4gPSBcIlwiO1xuICAgICAgICBzdGF0ZSA9IG9uY2UgJiYgc3RhdGUgIT09IFwicHJvY2Vzcy1rZXlcIiA/IFwicGFzc1wiIDogXCJjaGVja1wiO1xuICAgICAgfVxuXG4gICAgICBsZXQgcmV0dXJuVG9rZW46IGFueSA9IG5vbmU7XG5cbiAgICAgIHJlY2hlY2s6IGZvciAoOzspIHtcbiAgICAgICAgLy8gYWNjZXB0L3JlamVjdCB0b2tlbnNcbiAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgICAgIGNhc2UgXCJwcm9jZXNzLWtleVwiOlxuICAgICAgICAgICAgaWYgKGNodW5rLm5hbWUgPT09IFwiZW5kS2V5XCIpIG9wdGlvbmFsVG9rZW4gPSBcImtleVZhbHVlXCI7XG4gICAgICAgICAgICByZXR1cm4gbm9uZTtcbiAgICAgICAgICBjYXNlIFwicGFzc1wiOlxuICAgICAgICAgICAgcmV0dXJuIG5vbmU7XG4gICAgICAgICAgY2FzZSBcImFsbFwiOlxuICAgICAgICAgICAgcmV0dXJuIGNodW5rO1xuICAgICAgICAgIGNhc2UgXCJhY2NlcHRcIjpcbiAgICAgICAgICBjYXNlIFwicmVqZWN0XCI6XG4gICAgICAgICAgICBpZiAoc3RhcnRUcmFuc2l0aW9uKSB7XG4gICAgICAgICAgICAgIHN0YXJ0VHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm5Ub2tlbiA9IHRyYW5zaXRpb24oc3RhY2ssIGNodW5rLCBzdGF0ZSwgc2FuaXRpemVkT3B0aW9ucykgfHwgbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAoY2h1bmsubmFtZSkge1xuICAgICAgICAgICAgICBjYXNlIFwic3RhcnRPYmplY3RcIjpcbiAgICAgICAgICAgICAgY2FzZSBcInN0YXJ0QXJyYXlcIjpcbiAgICAgICAgICAgICAgICArK2RlcHRoO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiZW5kT2JqZWN0XCI6XG4gICAgICAgICAgICAgIGNhc2UgXCJlbmRBcnJheVwiOlxuICAgICAgICAgICAgICAgIC0tZGVwdGg7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGUgPT09IFwiYWNjZXB0XCIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuVG9rZW4gPSBjb21iaW5lTWFueU11dChyZXR1cm5Ub2tlbiwgY2h1bmspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkZXB0aCkge1xuICAgICAgICAgICAgICBpZiAob25jZSkge1xuICAgICAgICAgICAgICAgIHN0YXRlID0gc3RhdGUgPT09IFwiYWNjZXB0XCIgPyBcInBhc3NcIiA6IFwiYWxsXCI7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhdGUgPSBcImNoZWNrXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXR1cm5Ub2tlbjtcbiAgICAgICAgICBjYXNlIFwiYWNjZXB0LXZhbHVlXCI6XG4gICAgICAgICAgY2FzZSBcInJlamVjdC12YWx1ZVwiOlxuICAgICAgICAgICAgaWYgKHN0YXJ0VHJhbnNpdGlvbikge1xuICAgICAgICAgICAgICBzdGFydFRyYW5zaXRpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuVG9rZW4gPSB0cmFuc2l0aW9uKHN0YWNrLCBjaHVuaywgc3RhdGUsIHNhbml0aXplZE9wdGlvbnMpIHx8IG5vbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGUgPT09IFwiYWNjZXB0LXZhbHVlXCIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuVG9rZW4gPSBjb21iaW5lTWFueU11dChyZXR1cm5Ub2tlbiwgY2h1bmspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNodW5rLm5hbWUgPT09IGVuZFRva2VuKSB7XG4gICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgb3B0aW9uYWxUb2tlbiA9IG9wdGlvbmFsVG9rZW5zW2VuZFRva2VuXSB8fCBcIlwiO1xuICAgICAgICAgICAgICBlbmRUb2tlbiA9IFwiXCI7XG4gICAgICAgICAgICAgIGlmICghb3B0aW9uYWxUb2tlbikge1xuICAgICAgICAgICAgICAgIGlmIChvbmNlKSB7XG4gICAgICAgICAgICAgICAgICBzdGF0ZSA9IHN0YXRlID09PSBcImFjY2VwdC12YWx1ZVwiID8gXCJwYXNzXCIgOiBcImFsbFwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBzdGF0ZSA9IFwiY2hlY2tcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXR1cm5Ub2tlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgbGFzdCBpbmRleCBpbiB0aGUgc3RhY2tcbiAgICAgICAgaWYgKHR5cGVvZiBzdGFja1tzdGFjay5sZW5ndGggLSAxXSA9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgLy8gYXJyYXlcbiAgICAgICAgICBzd2l0Y2ggKGNodW5rLm5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzdGFydE9iamVjdFwiOlxuICAgICAgICAgICAgY2FzZSBcInN0YXJ0QXJyYXlcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzdGFydFN0cmluZ1wiOlxuICAgICAgICAgICAgY2FzZSBcInN0YXJ0TnVtYmVyXCI6XG4gICAgICAgICAgICBjYXNlIFwibnVsbFZhbHVlXCI6XG4gICAgICAgICAgICBjYXNlIFwidHJ1ZVZhbHVlXCI6XG4gICAgICAgICAgICBjYXNlIFwiZmFsc2VWYWx1ZVwiOlxuICAgICAgICAgICAgICArK3N0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJudW1iZXJWYWx1ZVwiOlxuICAgICAgICAgICAgICBpZiAocHJldmlvdXNUb2tlbiAhPT0gXCJlbmROdW1iZXJcIikgKytzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwic3RyaW5nVmFsdWVcIjpcbiAgICAgICAgICAgICAgaWYgKHByZXZpb3VzVG9rZW4gIT09IFwiZW5kU3RyaW5nXCIpICsrc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoY2h1bmsubmFtZSA9PT0gXCJrZXlWYWx1ZVwiKSBzdGFja1tzdGFjay5sZW5ndGggLSAxXSA9IGNodW5rLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzVG9rZW4gPSBjaHVuay5uYW1lO1xuXG4gICAgICAgIC8vIGNoZWNrIHRoZSB0b2tlblxuICAgICAgICBjb25zdCBhY3Rpb24gPVxuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBjaGVja2FibGVUb2tlbnNbY2h1bmsubmFtZV0gIT09IDEgPyBub25DaGVja2FibGVBY3Rpb24gOiBmaWx0ZXIoc3RhY2ssIGNodW5rKSA/IHNwZWNpYWxBY3Rpb24gOiBkZWZhdWx0QWN0aW9uO1xuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgZW5kVG9rZW4gPSBzdG9wVG9rZW5zW2NodW5rLm5hbWVdIHx8IFwiXCI7XG4gICAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgICAgY2FzZSBcInByb2Nlc3Mta2V5XCI6XG4gICAgICAgICAgICBpZiAoY2h1bmsubmFtZSA9PT0gXCJzdGFydEtleVwiKSB7XG4gICAgICAgICAgICAgIHN0YXRlID0gXCJwcm9jZXNzLWtleVwiO1xuICAgICAgICAgICAgICBjb250aW51ZSByZWNoZWNrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImFjY2VwdC10b2tlblwiOlxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgaWYgKGVuZFRva2VuICYmIG9wdGlvbmFsVG9rZW5zW2VuZFRva2VuXSkge1xuICAgICAgICAgICAgICBzdGF0ZSA9IFwiYWNjZXB0LXZhbHVlXCI7XG4gICAgICAgICAgICAgIHN0YXJ0VHJhbnNpdGlvbiA9ICEhdHJhbnNpdGlvbjtcbiAgICAgICAgICAgICAgY29udGludWUgcmVjaGVjaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uKSByZXR1cm5Ub2tlbiA9IHRyYW5zaXRpb24oc3RhY2ssIGNodW5rLCBhY3Rpb24sIHNhbml0aXplZE9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuVG9rZW4gPSBjb21iaW5lTWFueU11dChyZXR1cm5Ub2tlbiwgY2h1bmspO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImFjY2VwdFwiOlxuICAgICAgICAgICAgaWYgKGVuZFRva2VuKSB7XG4gICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgc3RhdGUgPSBvcHRpb25hbFRva2Vuc1tlbmRUb2tlbl0gPyBcImFjY2VwdC12YWx1ZVwiIDogXCJhY2NlcHRcIjtcbiAgICAgICAgICAgICAgc3RhcnRUcmFuc2l0aW9uID0gISF0cmFuc2l0aW9uO1xuICAgICAgICAgICAgICBjb250aW51ZSByZWNoZWNrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb24pIHJldHVyblRva2VuID0gdHJhbnNpdGlvbihzdGFjaywgY2h1bmssIGFjdGlvbiwgc2FuaXRpemVkT3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm5Ub2tlbiA9IGNvbWJpbmVNYW55TXV0KHJldHVyblRva2VuLCBjaHVuayk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwicmVqZWN0XCI6XG4gICAgICAgICAgICBpZiAoZW5kVG9rZW4pIHtcbiAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICBzdGF0ZSA9IG9wdGlvbmFsVG9rZW5zW2VuZFRva2VuXSA/IFwicmVqZWN0LXZhbHVlXCIgOiBcInJlamVjdFwiO1xuICAgICAgICAgICAgICBzdGFydFRyYW5zaXRpb24gPSAhIXRyYW5zaXRpb247XG4gICAgICAgICAgICAgIGNvbnRpbnVlIHJlY2hlY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHJhbnNpdGlvbikgcmV0dXJuVG9rZW4gPSB0cmFuc2l0aW9uKHN0YWNrLCBjaHVuaywgYWN0aW9uLCBzYW5pdGl6ZWRPcHRpb25zKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJwYXNzXCI6XG4gICAgICAgICAgICBzdGF0ZSA9IFwicGFzc1wiO1xuICAgICAgICAgICAgY29udGludWUgcmVjaGVjaztcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICAvLyB1cGRhdGUgdGhlIHN0YWNrXG4gICAgICBzd2l0Y2ggKGNodW5rLm5hbWUpIHtcbiAgICAgICAgY2FzZSBcInN0YXJ0T2JqZWN0XCI6XG4gICAgICAgICAgc3RhY2sucHVzaChudWxsKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInN0YXJ0QXJyYXlcIjpcbiAgICAgICAgICBzdGFjay5wdXNoKC0xKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImVuZE9iamVjdFwiOlxuICAgICAgICBjYXNlIFwiZW5kQXJyYXlcIjpcbiAgICAgICAgICBzdGFjay5wb3AoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldHVyblRva2VuO1xuICAgIH0pO1xuICB9O1xuXG5leHBvcnQgY29uc3QgUGlja1BhcnNlciA9IChvcHRpb25zPzogYW55KSA9PiB3aXRoUGFyc2VyKGZpbHRlckJhc2UoKSwgT2JqZWN0LmFzc2lnbih7IHBhY2tLZXlzOiB0cnVlIH0sIG9wdGlvbnMpKTtcblxuY2xhc3MgQ291bnRlciB7XG4gIGRlcHRoOiBudW1iZXI7XG4gIGNvbnN0cnVjdG9yKGluaXRpYWxEZXB0aDogbnVtYmVyKSB7XG4gICAgdGhpcy5kZXB0aCA9IGluaXRpYWxEZXB0aDtcbiAgfVxuICBzdGFydE9iamVjdCgpIHtcbiAgICArK3RoaXMuZGVwdGg7XG4gIH1cbiAgZW5kT2JqZWN0KCkge1xuICAgIC0tdGhpcy5kZXB0aDtcbiAgfVxuICBzdGFydEFycmF5KCkge1xuICAgICsrdGhpcy5kZXB0aDtcbiAgfVxuICBlbmRBcnJheSgpIHtcbiAgICAtLXRoaXMuZGVwdGg7XG4gIH1cbn1cblxuY2xhc3MgQXNzZW1ibGVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgc3RhdGljIGNvbm5lY3RUbyhzdHJlYW06IGFueSwgb3B0aW9uczogYW55KSB7XG4gICAgcmV0dXJuIG5ldyBBc3NlbWJsZXIob3B0aW9ucykuY29ubmVjdFRvKHN0cmVhbSk7XG4gIH1cblxuICBzdGFjazogYW55O1xuICBjdXJyZW50OiBhbnk7XG4gIGtleTogYW55O1xuICBkb25lOiBib29sZWFuO1xuICByZXZpdmVyOiBhbnk7XG4gIC8vIEB0cy1pZ25vcmVcbiAgc3RyaW5nVmFsdWU6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xuICB0YXBDaGFpbjogKGNodW5rOiBhbnkpID0+IGFueTtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBhbnkpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc3RhY2sgPSBbXTtcbiAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLmtleSA9IG51bGw7XG4gICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgdGhpcy5yZXZpdmVyID0gdHlwZW9mIG9wdGlvbnMucmV2aXZlciA9PSBcImZ1bmN0aW9uXCIgJiYgb3B0aW9ucy5yZXZpdmVyO1xuICAgICAgaWYgKHRoaXMucmV2aXZlcikge1xuICAgICAgICB0aGlzLnN0cmluZ1ZhbHVlID0gdGhpcy5fc2F2ZVZhbHVlID0gdGhpcy5fc2F2ZVZhbHVlV2l0aFJldml2ZXI7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5udW1iZXJBc1N0cmluZykge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMubnVtYmVyVmFsdWUgPSB0aGlzLnN0cmluZ1ZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudGFwQ2hhaW4gPSAoY2h1bmspID0+IHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGlmICh0aGlzW2NodW5rLm5hbWVdKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpc1tjaHVuay5uYW1lXShjaHVuay52YWx1ZSk7XG4gICAgICAgIGlmICh0aGlzLmRvbmUpIHJldHVybiB0aGlzLmN1cnJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9uZTtcbiAgICB9O1xuXG4gICAgdGhpcy5zdHJpbmdWYWx1ZSA9IHRoaXMuX3NhdmVWYWx1ZTtcbiAgfVxuXG4gIGNvbm5lY3RUbyhzdHJlYW06IGFueSkge1xuICAgIHN0cmVhbS5vbihcImRhdGFcIiwgKGNodW5rOiBhbnkpID0+IHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGlmICh0aGlzW2NodW5rLm5hbWVdKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpc1tjaHVuay5uYW1lXShjaHVuay52YWx1ZSk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKHRoaXMuZG9uZSkgdGhpcy5lbWl0KFwiZG9uZVwiLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldCBkZXB0aCgpIHtcbiAgICByZXR1cm4gKHRoaXMuc3RhY2subGVuZ3RoID4+IDEpICsgKHRoaXMuZG9uZSA/IDAgOiAxKTtcbiAgfVxuXG4gIGdldCBwYXRoKCkge1xuICAgIGNvbnN0IHBhdGg6IGFueVtdID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN0YWNrLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICBjb25zdCBrZXkgPSB0aGlzLnN0YWNrW2kgKyAxXTtcbiAgICAgIHBhdGgucHVzaChrZXkgPT09IG51bGwgPyB0aGlzLnN0YWNrW2ldLmxlbmd0aCA6IGtleSk7XG4gICAgfVxuICAgIHJldHVybiBwYXRoO1xuICB9XG5cbiAgZHJvcFRvTGV2ZWwobGV2ZWw6IGFueSkge1xuICAgIGlmIChsZXZlbCA8IHRoaXMuZGVwdGgpIHtcbiAgICAgIGlmIChsZXZlbCA+IDApIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSAobGV2ZWwgLSAxKSA8PCAxO1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLnN0YWNrW2luZGV4XTtcbiAgICAgICAgdGhpcy5rZXkgPSB0aGlzLnN0YWNrW2luZGV4ICsgMV07XG4gICAgICAgIHRoaXMuc3RhY2suc3BsaWNlKGluZGV4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc3RhY2sgPSBbXTtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5rZXkgPSBudWxsO1xuICAgICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNvbnN1bWUoY2h1bms6IGFueSkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB0aGlzW2NodW5rLm5hbWVdICYmIHRoaXNbY2h1bmsubmFtZV0oY2h1bmsudmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAga2V5VmFsdWUodmFsdWU6IGFueSkge1xuICAgIHRoaXMua2V5ID0gdmFsdWU7XG4gIH1cblxuICAvL3N0cmluZ1ZhbHVlKCkgLSBhbGlhc2VkIGJlbG93IHRvIF9zYXZlVmFsdWUoKVxuXG4gIG51bWJlclZhbHVlKHZhbHVlOiBhbnkpIHtcbiAgICB0aGlzLl9zYXZlVmFsdWUocGFyc2VGbG9hdCh2YWx1ZSkpO1xuICB9XG4gIG51bGxWYWx1ZSgpIHtcbiAgICB0aGlzLl9zYXZlVmFsdWUobnVsbCk7XG4gIH1cbiAgdHJ1ZVZhbHVlKCkge1xuICAgIHRoaXMuX3NhdmVWYWx1ZSh0cnVlKTtcbiAgfVxuICBmYWxzZVZhbHVlKCkge1xuICAgIHRoaXMuX3NhdmVWYWx1ZShmYWxzZSk7XG4gIH1cblxuICBzdGFydE9iamVjdCgpIHtcbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGFjay5wdXNoKHRoaXMuY3VycmVudCwgdGhpcy5rZXkpO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnQgPSBuZXcgT2JqZWN0KCk7XG4gICAgdGhpcy5rZXkgPSBudWxsO1xuICB9XG5cbiAgZW5kT2JqZWN0KCkge1xuICAgIGlmICh0aGlzLnN0YWNrLmxlbmd0aCkge1xuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICB0aGlzLmtleSA9IHRoaXMuc3RhY2sucG9wKCk7XG4gICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLnN0YWNrLnBvcCgpO1xuICAgICAgdGhpcy5fc2F2ZVZhbHVlKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBzdGFydEFycmF5KCkge1xuICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YWNrLnB1c2godGhpcy5jdXJyZW50LCB0aGlzLmtleSk7XG4gICAgfVxuICAgIHRoaXMuY3VycmVudCA9IFtdO1xuICAgIHRoaXMua2V5ID0gbnVsbDtcbiAgfVxuXG4gIGVuZEFycmF5KCkge1xuICAgIGlmICh0aGlzLnN0YWNrLmxlbmd0aCkge1xuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICB0aGlzLmtleSA9IHRoaXMuc3RhY2sucG9wKCk7XG4gICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLnN0YWNrLnBvcCgpO1xuICAgICAgdGhpcy5fc2F2ZVZhbHVlKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBfc2F2ZVZhbHVlKHZhbHVlOiBhbnkpIHtcbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICB0aGlzLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuY3VycmVudCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHRoaXMuY3VycmVudC5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY3VycmVudFt0aGlzLmtleV0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5rZXkgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBfc2F2ZVZhbHVlV2l0aFJldml2ZXIodmFsdWU6IGFueSkge1xuICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMucmV2aXZlcihcIlwiLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnQgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICB2YWx1ZSA9IHRoaXMucmV2aXZlcihcIlwiICsgdGhpcy5jdXJyZW50Lmxlbmd0aCwgdmFsdWUpO1xuICAgICAgICB0aGlzLmN1cnJlbnQucHVzaCh2YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZGVsZXRlIHRoaXMuY3VycmVudFt0aGlzLmN1cnJlbnQubGVuZ3RoIC0gMV07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gdGhpcy5yZXZpdmVyKHRoaXMua2V5LCB2YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5jdXJyZW50W3RoaXMua2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMua2V5ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuY29uc3Qgc3RyZWFtQmFzZSA9XG4gICh7IHB1c2gsIGZpcnN0LCBsZXZlbCB9OiBhbnkpID0+XG4gIChvcHRpb25zID0ge30gYXMgYW55KSA9PiB7XG4gICAgY29uc3QgeyBvYmplY3RGaWx0ZXIsIGluY2x1ZGVVbmRlY2lkZWQgfSA9IG9wdGlvbnM7XG4gICAgbGV0IGFzbSA9IG5ldyBBc3NlbWJsZXIob3B0aW9ucykgYXMgYW55LFxuICAgICAgc3RhdGUgPSBmaXJzdCA/IFwiZmlyc3RcIiA6IFwiY2hlY2tcIixcbiAgICAgIHNhdmVkQXNtID0gbnVsbCBhcyBhbnk7XG5cbiAgICBpZiAodHlwZW9mIG9iamVjdEZpbHRlciAhPSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIC8vIG5vIG9iamVjdCBmaWx0ZXIgKyBubyBmaXJzdCBjaGVja1xuICAgICAgaWYgKHN0YXRlID09PSBcImNoZWNrXCIpXG4gICAgICAgIHJldHVybiAoY2h1bms6IGFueSkgPT4ge1xuICAgICAgICAgIGlmIChhc21bY2h1bmsubmFtZV0pIHtcbiAgICAgICAgICAgIGFzbVtjaHVuay5uYW1lXShjaHVuay52YWx1ZSk7XG4gICAgICAgICAgICBpZiAoYXNtLmRlcHRoID09PSBsZXZlbCkge1xuICAgICAgICAgICAgICByZXR1cm4gcHVzaChhc20pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbm9uZTtcbiAgICAgICAgfTtcbiAgICAgIC8vIG5vIG9iamVjdCBmaWx0ZXJcbiAgICAgIHJldHVybiAoY2h1bms6IGFueSkgPT4ge1xuICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgICAgY2FzZSBcImZpcnN0XCI6XG4gICAgICAgICAgICBmaXJzdChjaHVuayk7XG4gICAgICAgICAgICBzdGF0ZSA9IFwiYWNjZXB0XCI7XG4gICAgICAgICAgLy8gZmFsbCB0aHJvdWdoXG4gICAgICAgICAgY2FzZSBcImFjY2VwdFwiOlxuICAgICAgICAgICAgaWYgKGFzbVtjaHVuay5uYW1lXSkge1xuICAgICAgICAgICAgICBhc21bY2h1bmsubmFtZV0oY2h1bmsudmFsdWUpO1xuICAgICAgICAgICAgICBpZiAoYXNtLmRlcHRoID09PSBsZXZlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwdXNoKGFzbSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub25lO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBvYmplY3QgZmlsdGVyICsgYSBwb3NzaWJsZSBmaXJzdCBjaGVja1xuICAgIHJldHVybiAoY2h1bms6IGFueSkgPT4ge1xuICAgICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgICBjYXNlIFwiZmlyc3RcIjpcbiAgICAgICAgICBmaXJzdChjaHVuayk7XG4gICAgICAgICAgc3RhdGUgPSBcImNoZWNrXCI7XG4gICAgICAgIC8vIGZhbGwgdGhyb3VnaFxuICAgICAgICBjYXNlIFwiY2hlY2tcIjpcbiAgICAgICAgICBpZiAoYXNtW2NodW5rLm5hbWVdKSB7XG4gICAgICAgICAgICBhc21bY2h1bmsubmFtZV0oY2h1bmsudmFsdWUpO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gb2JqZWN0RmlsdGVyKGFzbSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgIHN0YXRlID0gXCJhY2NlcHRcIjtcbiAgICAgICAgICAgICAgaWYgKGFzbS5kZXB0aCA9PT0gbGV2ZWwpIHJldHVybiBwdXNoKGFzbSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgaWYgKGFzbS5kZXB0aCA9PT0gbGV2ZWwpIHJldHVybiBwdXNoKGFzbSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHN0YXRlID0gXCJyZWplY3RcIjtcbiAgICAgICAgICAgICAgc2F2ZWRBc20gPSBhc207XG4gICAgICAgICAgICAgIGFzbSA9IG5ldyBDb3VudGVyKHNhdmVkQXNtLmRlcHRoKTtcbiAgICAgICAgICAgICAgc2F2ZWRBc20uZHJvcFRvTGV2ZWwobGV2ZWwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGFzbS5kZXB0aCA9PT0gbGV2ZWwpIHJldHVybiBwdXNoKGFzbSwgIWluY2x1ZGVVbmRlY2lkZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImFjY2VwdFwiOlxuICAgICAgICAgIGlmIChhc21bY2h1bmsubmFtZV0pIHtcbiAgICAgICAgICAgIGFzbVtjaHVuay5uYW1lXShjaHVuay52YWx1ZSk7XG4gICAgICAgICAgICBpZiAoYXNtLmRlcHRoID09PSBsZXZlbCkge1xuICAgICAgICAgICAgICBzdGF0ZSA9IFwiY2hlY2tcIjtcbiAgICAgICAgICAgICAgcmV0dXJuIHB1c2goYXNtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJyZWplY3RcIjpcbiAgICAgICAgICBpZiAoYXNtW2NodW5rLm5hbWVdKSB7XG4gICAgICAgICAgICBhc21bY2h1bmsubmFtZV0oY2h1bmsudmFsdWUpO1xuICAgICAgICAgICAgaWYgKGFzbS5kZXB0aCA9PT0gbGV2ZWwpIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSBcImNoZWNrXCI7XG4gICAgICAgICAgICAgIGFzbSA9IHNhdmVkQXNtO1xuICAgICAgICAgICAgICBzYXZlZEFzbSA9IG51bGw7XG4gICAgICAgICAgICAgIHJldHVybiBwdXNoKGFzbSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vbmU7XG4gICAgfTtcbiAgfTtcblxuZXhwb3J0IGNvbnN0IFN0cmVhbUFycmF5ID0gKG9wdGlvbnM/OiBhbnkpID0+IHtcbiAgbGV0IGtleSA9IDA7XG4gIHJldHVybiBzdHJlYW1CYXNlKHtcbiAgICBsZXZlbDogMSxcblxuICAgIGZpcnN0KGNodW5rOiBhbnkpIHtcbiAgICAgIGlmIChjaHVuay5uYW1lICE9PSBcInN0YXJ0QXJyYXlcIikgdGhyb3cgbmV3IEVycm9yKFwiVG9wLWxldmVsIG9iamVjdCBzaG91bGQgYmUgYW4gYXJyYXkuXCIpO1xuICAgIH0sXG5cbiAgICBwdXNoKGFzbTogYW55LCBkaXNjYXJkOiBhbnkpIHtcbiAgICAgIGlmIChhc20uY3VycmVudC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGRpc2NhcmQpIHtcbiAgICAgICAgICArK2tleTtcbiAgICAgICAgICBhc20uY3VycmVudC5wb3AoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4geyBrZXk6IGtleSsrLCB2YWx1ZTogYXNtLmN1cnJlbnQucG9wKCkgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5vbmU7XG4gICAgfSxcbiAgfSkob3B0aW9ucyk7XG59O1xuIiwgImltcG9ydCB7IExpc3QsIE1lbnVCYXJFeHRyYSwgSWNvbiwgb3BlbiwgTGF1bmNoVHlwZSwgZW52aXJvbm1lbnQsIEFjdGlvblBhbmVsLCBBY3Rpb24gfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG5pbXBvcnQgeyBleGlzdHNTeW5jIH0gZnJvbSBcIm5vZGU6ZnNcIjtcbmltcG9ydCBvcyBmcm9tIFwibm9kZTpvc1wiO1xuaW1wb3J0IHsgdXNlUmVmLCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIHVzZU1lbW8gfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVByb21pc2UsIFByb21pc2VPcHRpb25zIH0gZnJvbSBcIi4vdXNlUHJvbWlzZVwiO1xuaW1wb3J0IHsgdXNlTGF0ZXN0IH0gZnJvbSBcIi4vdXNlTGF0ZXN0XCI7XG5pbXBvcnQgeyBzaG93RmFpbHVyZVRvYXN0IH0gZnJvbSBcIi4vc2hvd0ZhaWx1cmVUb2FzdFwiO1xuaW1wb3J0IHsgYmFzZUV4ZWN1dGVTUUwsIFBlcm1pc3Npb25FcnJvciwgaXNQZXJtaXNzaW9uRXJyb3IgfSBmcm9tIFwiLi9zcWwtdXRpbHNcIjtcblxuLyoqXG4gKiBFeGVjdXRlcyBhIHF1ZXJ5IG9uIGEgbG9jYWwgU1FMIGRhdGFiYXNlIGFuZCByZXR1cm5zIHRoZSB7QGxpbmsgQXN5bmNTdGF0ZX0gY29ycmVzcG9uZGluZyB0byB0aGUgcXVlcnkgb2YgdGhlIGNvbW1hbmQuIFRoZSBsYXN0IHZhbHVlIHdpbGwgYmUga2VwdCBiZXR3ZWVuIGNvbW1hbmQgcnVucy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiBpbXBvcnQgeyB1c2VTUUwgfSBmcm9tIFwiQHJheWNhc3QvdXRpbHNcIjtcbiAqIGltcG9ydCB7IHJlc29sdmUgfSBmcm9tIFwicGF0aFwiO1xuICogaW1wb3J0IHsgaG9tZWRpciB9IGZyb20gXCJvc1wiO1xuICpcbiAqIGNvbnN0IE5PVEVTX0RCID0gcmVzb2x2ZShob21lZGlyKCksIFwiTGlicmFyeS9Hcm91cCBDb250YWluZXJzL2dyb3VwLmNvbS5hcHBsZS5ub3Rlcy9Ob3RlU3RvcmUuc3FsaXRlXCIpO1xuICogY29uc3Qgbm90ZXNRdWVyeSA9IGBTRUxFQ1QgaWQsIHRpdGxlIEZST00gLi4uYDtcbiAqIHR5cGUgTm90ZUl0ZW0gPSB7XG4gKiAgIGlkOiBzdHJpbmc7XG4gKiAgIHRpdGxlOiBzdHJpbmc7XG4gKiB9O1xuICpcbiAqIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbW1hbmQoKSB7XG4gKiAgIGNvbnN0IHsgaXNMb2FkaW5nLCBkYXRhLCBwZXJtaXNzaW9uVmlldyB9ID0gdXNlU1FMPE5vdGVJdGVtPihOT1RFU19EQiwgbm90ZXNRdWVyeSk7XG4gKlxuICogICBpZiAocGVybWlzc2lvblZpZXcpIHtcbiAqICAgICByZXR1cm4gcGVybWlzc2lvblZpZXc7XG4gKiAgIH1cbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPExpc3QgaXNMb2FkaW5nPXtpc0xvYWRpbmd9PlxuICogICAgICAgeyhkYXRhIHx8IFtdKS5tYXAoKGl0ZW0pID0+IChcbiAqICAgICAgICAgPExpc3QuSXRlbSBrZXk9e2l0ZW0uaWR9IHRpdGxlPXtpdGVtLnRpdGxlfSAvPlxuICogICAgICAgKSl9XG4gKiAgICAgPC9MaXN0PlxuICogICk7XG4gKiB9O1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VTUUw8VCA9IHVua25vd24+KFxuICBkYXRhYmFzZVBhdGg6IHN0cmluZyxcbiAgcXVlcnk6IHN0cmluZyxcbiAgb3B0aW9ucz86IHtcbiAgICAvKiogQSBzdHJpbmcgZXhwbGFpbmluZyB3aHkgdGhlIGV4dGVuc2lvbiBuZWVkcyBmdWxsIGRpc2sgYWNjZXNzLiBGb3IgZXhhbXBsZSwgdGhlIEFwcGxlIE5vdGVzIGV4dGVuc2lvbiB1c2VzIGBcIlRoaXMgaXMgcmVxdWlyZWQgdG8gc2VhcmNoIHlvdXIgQXBwbGUgTm90ZXMuXCJgLiBXaGlsZSBpdCBpcyBvcHRpb25hbCwgd2UgcmVjb21tZW5kIHNldHRpbmcgaXQgdG8gaGVscCB1c2VycyB1bmRlcnN0YW5kLiAqL1xuICAgIHBlcm1pc3Npb25QcmltaW5nPzogc3RyaW5nO1xuICB9ICYgT21pdDxQcm9taXNlT3B0aW9uczwoZGF0YWJhc2U6IHN0cmluZywgcXVlcnk6IHN0cmluZykgPT4gUHJvbWlzZTxUW10+PiwgXCJhYm9ydGFibGVcIj4sXG4pIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICBjb25zdCB7IHBlcm1pc3Npb25QcmltaW5nLCAuLi51c2VQcm9taXNlT3B0aW9ucyB9ID0gb3B0aW9ucyB8fCB7fTtcblxuICBjb25zdCBbcGVybWlzc2lvblZpZXcsIHNldFBlcm1pc3Npb25WaWV3XSA9IHVzZVN0YXRlPFJlYWN0LkpTWC5FbGVtZW50IHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IGxhdGVzdE9wdGlvbnMgPSB1c2VMYXRlc3Qob3B0aW9ucyB8fCB7fSk7XG4gIGNvbnN0IGFib3J0YWJsZSA9IHVzZVJlZjxBYm9ydENvbnRyb2xsZXI+KG51bGwpO1xuXG4gIGNvbnN0IGhhbmRsZUVycm9yID0gdXNlQ2FsbGJhY2soXG4gICAgKF9lcnJvcjogRXJyb3IpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoX2Vycm9yKTtcbiAgICAgIGNvbnN0IGVycm9yID1cbiAgICAgICAgX2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgX2Vycm9yLm1lc3NhZ2UuaW5jbHVkZXMoXCJhdXRob3JpemF0aW9uIGRlbmllZFwiKVxuICAgICAgICAgID8gbmV3IFBlcm1pc3Npb25FcnJvcihcIllvdSBkbyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIGFjY2VzcyB0aGUgZGF0YWJhc2UuXCIpXG4gICAgICAgICAgOiAoX2Vycm9yIGFzIEVycm9yKTtcblxuICAgICAgaWYgKGlzUGVybWlzc2lvbkVycm9yKGVycm9yKSkge1xuICAgICAgICBzZXRQZXJtaXNzaW9uVmlldyg8UGVybWlzc2lvbkVycm9yU2NyZWVuIHByaW1pbmc9e2xhdGVzdE9wdGlvbnMuY3VycmVudC5wZXJtaXNzaW9uUHJpbWluZ30gLz4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGxhdGVzdE9wdGlvbnMuY3VycmVudC5vbkVycm9yKSB7XG4gICAgICAgICAgbGF0ZXN0T3B0aW9ucy5jdXJyZW50Lm9uRXJyb3IoZXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChlbnZpcm9ubWVudC5sYXVuY2hUeXBlICE9PSBMYXVuY2hUeXBlLkJhY2tncm91bmQpIHtcbiAgICAgICAgICAgIHNob3dGYWlsdXJlVG9hc3QoZXJyb3IsIHtcbiAgICAgICAgICAgICAgdGl0bGU6IFwiQ2Fubm90IHF1ZXJ5IHRoZSBkYXRhXCIsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFtsYXRlc3RPcHRpb25zXSxcbiAgKTtcblxuICBjb25zdCBmbiA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmICghZXhpc3RzU3luYyhkYXRhYmFzZVBhdGgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZGF0YWJhc2UgZG9lcyBub3QgZXhpc3RcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFzeW5jIChkYXRhYmFzZVBhdGg6IHN0cmluZywgcXVlcnk6IHN0cmluZykgPT4ge1xuICAgICAgY29uc3QgYWJvcnRTaWduYWwgPSBhYm9ydGFibGUuY3VycmVudD8uc2lnbmFsO1xuICAgICAgcmV0dXJuIGJhc2VFeGVjdXRlU1FMPFQ+KGRhdGFiYXNlUGF0aCwgcXVlcnksIHsgc2lnbmFsOiBhYm9ydFNpZ25hbCB9KTtcbiAgICB9O1xuICB9LCBbZGF0YWJhc2VQYXRoXSk7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi51c2VQcm9taXNlKGZuLCBbZGF0YWJhc2VQYXRoLCBxdWVyeV0sIHsgLi4udXNlUHJvbWlzZU9wdGlvbnMsIG9uRXJyb3I6IGhhbmRsZUVycm9yIH0pLFxuICAgIHBlcm1pc3Npb25WaWV3LFxuICB9O1xufVxuXG5mdW5jdGlvbiBQZXJtaXNzaW9uRXJyb3JTY3JlZW4ocHJvcHM6IHsgcHJpbWluZz86IHN0cmluZyB9KSB7XG4gIGNvbnN0IG1hY29zVmVudHVyYUFuZExhdGVyID0gcGFyc2VJbnQob3MucmVsZWFzZSgpLnNwbGl0KFwiLlwiKVswXSkgPj0gMjI7XG4gIGNvbnN0IHByZWZlcmVuY2VzU3RyaW5nID0gbWFjb3NWZW50dXJhQW5kTGF0ZXIgPyBcIlNldHRpbmdzXCIgOiBcIlByZWZlcmVuY2VzXCI7XG5cbiAgY29uc3QgYWN0aW9uID0gbWFjb3NWZW50dXJhQW5kTGF0ZXJcbiAgICA/IHtcbiAgICAgICAgdGl0bGU6IFwiT3BlbiBTeXN0ZW0gU2V0dGluZ3MgLT4gUHJpdmFjeVwiLFxuICAgICAgICB0YXJnZXQ6IFwieC1hcHBsZS5zeXN0ZW1wcmVmZXJlbmNlczpjb20uYXBwbGUucHJlZmVyZW5jZS5zZWN1cml0eT9Qcml2YWN5X0FsbEZpbGVzXCIsXG4gICAgICB9XG4gICAgOiB7XG4gICAgICAgIHRpdGxlOiBcIk9wZW4gU3lzdGVtIFByZWZlcmVuY2VzIC0+IFNlY3VyaXR5XCIsXG4gICAgICAgIHRhcmdldDogXCJ4LWFwcGxlLnN5c3RlbXByZWZlcmVuY2VzOmNvbS5hcHBsZS5wcmVmZXJlbmNlLnNlY3VyaXR5P1ByaXZhY3lfQWxsRmlsZXNcIixcbiAgICAgIH07XG5cbiAgaWYgKGVudmlyb25tZW50LmNvbW1hbmRNb2RlID09PSBcIm1lbnUtYmFyXCIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPE1lbnVCYXJFeHRyYSBpY29uPXtJY29uLldhcm5pbmd9IHRpdGxlPXtlbnZpcm9ubWVudC5jb21tYW5kTmFtZX0+XG4gICAgICAgIDxNZW51QmFyRXh0cmEuSXRlbVxuICAgICAgICAgIHRpdGxlPVwiUmF5Y2FzdCBuZWVkcyBmdWxsIGRpc2sgYWNjZXNzXCJcbiAgICAgICAgICB0b29sdGlwPXtgWW91IGNhbiByZXZlcnQgdGhpcyBhY2Nlc3MgaW4gJHtwcmVmZXJlbmNlc1N0cmluZ30gd2hlbmV2ZXIgeW91IHdhbnRgfVxuICAgICAgICAvPlxuICAgICAgICB7cHJvcHMucHJpbWluZyA/IChcbiAgICAgICAgICA8TWVudUJhckV4dHJhLkl0ZW1cbiAgICAgICAgICAgIHRpdGxlPXtwcm9wcy5wcmltaW5nfVxuICAgICAgICAgICAgdG9vbHRpcD17YFlvdSBjYW4gcmV2ZXJ0IHRoaXMgYWNjZXNzIGluICR7cHJlZmVyZW5jZXNTdHJpbmd9IHdoZW5ldmVyIHlvdSB3YW50YH1cbiAgICAgICAgICAvPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPE1lbnVCYXJFeHRyYS5TZXBhcmF0b3IgLz5cbiAgICAgICAgPE1lbnVCYXJFeHRyYS5JdGVtIHRpdGxlPXthY3Rpb24udGl0bGV9IG9uQWN0aW9uPXsoKSA9PiBvcGVuKGFjdGlvbi50YXJnZXQpfSAvPlxuICAgICAgPC9NZW51QmFyRXh0cmE+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPExpc3Q+XG4gICAgICA8TGlzdC5FbXB0eVZpZXdcbiAgICAgICAgaWNvbj17e1xuICAgICAgICAgIHNvdXJjZToge1xuICAgICAgICAgICAgbGlnaHQ6IFwiaHR0cHM6Ly9yYXljYXN0LmNvbS91cGxvYWRzL2V4dGVuc2lvbnMtdXRpbHMtc2VjdXJpdHktcGVybWlzc2lvbnMtbGlnaHQucG5nXCIsXG4gICAgICAgICAgICBkYXJrOiBcImh0dHBzOi8vcmF5Y2FzdC5jb20vdXBsb2Fkcy9leHRlbnNpb25zLXV0aWxzLXNlY3VyaXR5LXBlcm1pc3Npb25zLWRhcmsucG5nXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfX1cbiAgICAgICAgdGl0bGU9XCJSYXljYXN0IG5lZWRzIGZ1bGwgZGlzayBhY2Nlc3MuXCJcbiAgICAgICAgZGVzY3JpcHRpb249e2Ake1xuICAgICAgICAgIHByb3BzLnByaW1pbmcgPyBwcm9wcy5wcmltaW5nICsgXCJcXG5cIiA6IFwiXCJcbiAgICAgICAgfVlvdSBjYW4gcmV2ZXJ0IHRoaXMgYWNjZXNzIGluICR7cHJlZmVyZW5jZXNTdHJpbmd9IHdoZW5ldmVyIHlvdSB3YW50LmB9XG4gICAgICAgIGFjdGlvbnM9e1xuICAgICAgICAgIDxBY3Rpb25QYW5lbD5cbiAgICAgICAgICAgIDxBY3Rpb24uT3BlbiB7Li4uYWN0aW9ufSAvPlxuICAgICAgICAgIDwvQWN0aW9uUGFuZWw+XG4gICAgICAgIH1cbiAgICAgIC8+XG4gICAgPC9MaXN0PlxuICApO1xufVxuIiwgImltcG9ydCB7IGV4aXN0c1N5bmMgfSBmcm9tIFwibm9kZTpmc1wiO1xuaW1wb3J0IHsgY29weUZpbGUsIG1rZGlyLCB3cml0ZUZpbGUgfSBmcm9tIFwibm9kZTpmcy9wcm9taXNlc1wiO1xuaW1wb3J0IG9zIGZyb20gXCJub2RlOm9zXCI7XG5pbXBvcnQgY2hpbGRQcm9jZXNzIGZyb20gXCJub2RlOmNoaWxkX3Byb2Nlc3NcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJub2RlOnBhdGhcIjtcbmltcG9ydCB7IGdldFNwYXduZWRQcm9taXNlLCBnZXRTcGF3bmVkUmVzdWx0IH0gZnJvbSBcIi4vZXhlYy11dGlsc1wiO1xuaW1wb3J0IHsgaGFzaCB9IGZyb20gXCIuL2hlbHBlcnNcIjtcblxuZXhwb3J0IGNsYXNzIFBlcm1pc3Npb25FcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gXCJQZXJtaXNzaW9uRXJyb3JcIjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQZXJtaXNzaW9uRXJyb3IoZXJyb3I6IHVua25vd24pOiBlcnJvciBpcyBQZXJtaXNzaW9uRXJyb3Ige1xuICByZXR1cm4gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiBlcnJvci5uYW1lID09PSBcIlBlcm1pc3Npb25FcnJvclwiO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYmFzZUV4ZWN1dGVTUUw8VCA9IHVua25vd24+KFxuICBkYXRhYmFzZVBhdGg6IHN0cmluZyxcbiAgcXVlcnk6IHN0cmluZyxcbiAgb3B0aW9ucz86IHtcbiAgICBzaWduYWw/OiBBYm9ydFNpZ25hbDtcbiAgfSxcbik6IFByb21pc2U8VFtdPiB7XG4gIGlmICghZXhpc3RzU3luYyhkYXRhYmFzZVBhdGgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGRhdGFiYXNlIGRvZXMgbm90IGV4aXN0XCIpO1xuICB9XG5cbiAgbGV0IHNxbGl0ZTM6IHR5cGVvZiBpbXBvcnQoXCJub2RlOnNxbGl0ZVwiKTtcbiAgdHJ5IHtcbiAgICBzcWxpdGUzID0gcmVxdWlyZShcIm5vZGU6c3FsaXRlXCIpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIC8vIElmIHNxbGl0ZTMgaXMgbm90IGF2YWlsYWJsZSwgd2UgZmFsbGJhY2sgdG8gdXNpbmcgdGhlIHNxbGl0ZTMgQ0xJIChhdmFpbGFibGUgb24gbWFjT1MgYW5kIExpbnV4IGJ5IGRlZmF1bHQpLlxuICAgIHJldHVybiBzcWxpdGVGYWxsYmFjazxUPihkYXRhYmFzZVBhdGgsIHF1ZXJ5LCBvcHRpb25zKTtcbiAgfVxuXG4gIGxldCBkYiA9IG5ldyBzcWxpdGUzLkRhdGFiYXNlU3luYyhkYXRhYmFzZVBhdGgsIHsgb3BlbjogZmFsc2UsIHJlYWRPbmx5OiB0cnVlIH0pO1xuXG4gIGNvbnN0IGFib3J0U2lnbmFsID0gb3B0aW9ucz8uc2lnbmFsO1xuXG4gIHRyeSB7XG4gICAgZGIub3BlbigpO1xuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgIGlmIChlcnJvci5tZXNzYWdlLm1hdGNoKFwiKDUpXCIpIHx8IGVycm9yLm1lc3NhZ2UubWF0Y2goXCIoMTQpXCIpKSB7XG4gICAgICAvLyBUaGF0IG1lYW5zIHRoYXQgdGhlIERCIGlzIGJ1c3kgYmVjYXVzZSBvZiBhbm90aGVyIGFwcCBpcyBsb2NraW5nIGl0XG4gICAgICAvLyBUaGlzIGhhcHBlbnMgd2hlbiBDaHJvbWUgb3IgQXJjIGlzIG9wZW5lZDogdGhleSBsb2NrIHRoZSBIaXN0b3J5IGRiLlxuICAgICAgLy8gQXMgYW4gdWdseSB3b3JrYXJvdW5kLCB3ZSBkdXBsaWNhdGUgdGhlIGZpbGUgYW5kIHJlYWQgdGhhdCBpbnN0ZWFkXG4gICAgICAvLyAod2l0aCB2ZnMgdW5peCAtIG5vbmUgdG8ganVzdCBub3QgY2FyZSBhYm91dCBsb2NrcylcbiAgICAgIGxldCB3b3JrYXJvdW5kQ29waWVkRGI6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAgIGlmICghd29ya2Fyb3VuZENvcGllZERiKSB7XG4gICAgICAgIGNvbnN0IHRlbXBGb2xkZXIgPSBwYXRoLmpvaW4ob3MudG1wZGlyKCksIFwidXNlU1FMXCIsIGhhc2goZGF0YWJhc2VQYXRoKSk7XG4gICAgICAgIGF3YWl0IG1rZGlyKHRlbXBGb2xkZXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgICAgICBjaGVja0Fib3J0ZWQoYWJvcnRTaWduYWwpO1xuXG4gICAgICAgIHdvcmthcm91bmRDb3BpZWREYiA9IHBhdGguam9pbih0ZW1wRm9sZGVyLCBcImRiLmRiXCIpO1xuICAgICAgICBhd2FpdCBjb3B5RmlsZShkYXRhYmFzZVBhdGgsIHdvcmthcm91bmRDb3BpZWREYik7XG5cbiAgICAgICAgYXdhaXQgd3JpdGVGaWxlKHdvcmthcm91bmRDb3BpZWREYiArIFwiLXNobVwiLCBcIlwiKTtcbiAgICAgICAgYXdhaXQgd3JpdGVGaWxlKHdvcmthcm91bmRDb3BpZWREYiArIFwiLXdhbFwiLCBcIlwiKTtcblxuICAgICAgICBjaGVja0Fib3J0ZWQoYWJvcnRTaWduYWwpO1xuICAgICAgfVxuXG4gICAgICBkYiA9IG5ldyBzcWxpdGUzLkRhdGFiYXNlU3luYyh3b3JrYXJvdW5kQ29waWVkRGIsIHsgb3BlbjogZmFsc2UsIHJlYWRPbmx5OiB0cnVlIH0pO1xuICAgICAgZGIub3BlbigpO1xuICAgICAgY2hlY2tBYm9ydGVkKGFib3J0U2lnbmFsKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBzdGF0ZW1lbnQgPSBkYi5wcmVwYXJlKHF1ZXJ5KTtcbiAgY2hlY2tBYm9ydGVkKGFib3J0U2lnbmFsKTtcblxuICBjb25zdCByZXN1bHQgPSBzdGF0ZW1lbnQuYWxsKCk7XG5cbiAgZGIuY2xvc2UoKTtcblxuICByZXR1cm4gcmVzdWx0IGFzIFRbXTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc3FsaXRlRmFsbGJhY2s8VCA9IHVua25vd24+KFxuICBkYXRhYmFzZVBhdGg6IHN0cmluZyxcbiAgcXVlcnk6IHN0cmluZyxcbiAgb3B0aW9ucz86IHtcbiAgICBzaWduYWw/OiBBYm9ydFNpZ25hbDtcbiAgfSxcbik6IFByb21pc2U8VFtdPiB7XG4gIGNvbnN0IGFib3J0U2lnbmFsID0gb3B0aW9ucz8uc2lnbmFsO1xuXG4gIGxldCBzcGF3bmVkID0gY2hpbGRQcm9jZXNzLnNwYXduKFwic3FsaXRlM1wiLCBbXCItLWpzb25cIiwgXCItLXJlYWRvbmx5XCIsIGRhdGFiYXNlUGF0aCwgcXVlcnldLCB7IHNpZ25hbDogYWJvcnRTaWduYWwgfSk7XG4gIGxldCBzcGF3bmVkUHJvbWlzZSA9IGdldFNwYXduZWRQcm9taXNlKHNwYXduZWQpO1xuICBsZXQgW3sgZXJyb3IsIGV4aXRDb2RlLCBzaWduYWwgfSwgc3Rkb3V0UmVzdWx0LCBzdGRlcnJSZXN1bHRdID0gYXdhaXQgZ2V0U3Bhd25lZFJlc3VsdDxzdHJpbmc+KFxuICAgIHNwYXduZWQsXG4gICAgeyBlbmNvZGluZzogXCJ1dGYtOFwiIH0sXG4gICAgc3Bhd25lZFByb21pc2UsXG4gICk7XG4gIGNoZWNrQWJvcnRlZChhYm9ydFNpZ25hbCk7XG5cbiAgaWYgKHN0ZGVyclJlc3VsdC5tYXRjaChcIig1KVwiKSB8fCBzdGRlcnJSZXN1bHQubWF0Y2goXCIoMTQpXCIpKSB7XG4gICAgLy8gVGhhdCBtZWFucyB0aGF0IHRoZSBEQiBpcyBidXN5IGJlY2F1c2Ugb2YgYW5vdGhlciBhcHAgaXMgbG9ja2luZyBpdFxuICAgIC8vIFRoaXMgaGFwcGVucyB3aGVuIENocm9tZSBvciBBcmMgaXMgb3BlbmVkOiB0aGV5IGxvY2sgdGhlIEhpc3RvcnkgZGIuXG4gICAgLy8gQXMgYW4gdWdseSB3b3JrYXJvdW5kLCB3ZSBkdXBsaWNhdGUgdGhlIGZpbGUgYW5kIHJlYWQgdGhhdCBpbnN0ZWFkXG4gICAgLy8gKHdpdGggdmZzIHVuaXggLSBub25lIHRvIGp1c3Qgbm90IGNhcmUgYWJvdXQgbG9ja3MpXG4gICAgbGV0IHdvcmthcm91bmRDb3BpZWREYjogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIGlmICghd29ya2Fyb3VuZENvcGllZERiKSB7XG4gICAgICBjb25zdCB0ZW1wRm9sZGVyID0gcGF0aC5qb2luKG9zLnRtcGRpcigpLCBcInVzZVNRTFwiLCBoYXNoKGRhdGFiYXNlUGF0aCkpO1xuICAgICAgYXdhaXQgbWtkaXIodGVtcEZvbGRlciwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgICBjaGVja0Fib3J0ZWQoYWJvcnRTaWduYWwpO1xuXG4gICAgICB3b3JrYXJvdW5kQ29waWVkRGIgPSBwYXRoLmpvaW4odGVtcEZvbGRlciwgXCJkYi5kYlwiKTtcbiAgICAgIGF3YWl0IGNvcHlGaWxlKGRhdGFiYXNlUGF0aCwgd29ya2Fyb3VuZENvcGllZERiKTtcblxuICAgICAgYXdhaXQgd3JpdGVGaWxlKHdvcmthcm91bmRDb3BpZWREYiArIFwiLXNobVwiLCBcIlwiKTtcbiAgICAgIGF3YWl0IHdyaXRlRmlsZSh3b3JrYXJvdW5kQ29waWVkRGIgKyBcIi13YWxcIiwgXCJcIik7XG5cbiAgICAgIGNoZWNrQWJvcnRlZChhYm9ydFNpZ25hbCk7XG4gICAgfVxuXG4gICAgc3Bhd25lZCA9IGNoaWxkUHJvY2Vzcy5zcGF3bihcInNxbGl0ZTNcIiwgW1wiLS1qc29uXCIsIFwiLS1yZWFkb25seVwiLCBcIi0tdmZzXCIsIFwidW5peC1ub25lXCIsIHdvcmthcm91bmRDb3BpZWREYiwgcXVlcnldLCB7XG4gICAgICBzaWduYWw6IGFib3J0U2lnbmFsLFxuICAgIH0pO1xuICAgIHNwYXduZWRQcm9taXNlID0gZ2V0U3Bhd25lZFByb21pc2Uoc3Bhd25lZCk7XG4gICAgW3sgZXJyb3IsIGV4aXRDb2RlLCBzaWduYWwgfSwgc3Rkb3V0UmVzdWx0LCBzdGRlcnJSZXN1bHRdID0gYXdhaXQgZ2V0U3Bhd25lZFJlc3VsdDxzdHJpbmc+KFxuICAgICAgc3Bhd25lZCxcbiAgICAgIHsgZW5jb2Rpbmc6IFwidXRmLThcIiB9LFxuICAgICAgc3Bhd25lZFByb21pc2UsXG4gICAgKTtcbiAgICBjaGVja0Fib3J0ZWQoYWJvcnRTaWduYWwpO1xuICB9XG5cbiAgaWYgKGVycm9yIHx8IGV4aXRDb2RlICE9PSAwIHx8IHNpZ25hbCAhPT0gbnVsbCkge1xuICAgIGlmIChzdGRlcnJSZXN1bHQuaW5jbHVkZXMoXCJhdXRob3JpemF0aW9uIGRlbmllZFwiKSkge1xuICAgICAgdGhyb3cgbmV3IFBlcm1pc3Npb25FcnJvcihcIllvdSBkbyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIGFjY2VzcyB0aGUgZGF0YWJhc2UuXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3Ioc3RkZXJyUmVzdWx0IHx8IFwiVW5rbm93biBlcnJvclwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gSlNPTi5wYXJzZShzdGRvdXRSZXN1bHQudHJpbSgpIHx8IFwiW11cIikgYXMgVFtdO1xufVxuXG5mdW5jdGlvbiBjaGVja0Fib3J0ZWQoc2lnbmFsPzogQWJvcnRTaWduYWwpIHtcbiAgaWYgKHNpZ25hbD8uYWJvcnRlZCkge1xuICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFwiYWJvcnRlZFwiKTtcbiAgICBlcnJvci5uYW1lID0gXCJBYm9ydEVycm9yXCI7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBGb3JtIH0gZnJvbSBcIkByYXljYXN0L2FwaVwiO1xuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUNhbGxiYWNrLCB1c2VNZW1vLCB1c2VSZWYsIFNldFN0YXRlQWN0aW9uIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VMYXRlc3QgfSBmcm9tIFwiLi91c2VMYXRlc3RcIjtcblxuLyoqXG4gKiBTaG9ydGhhbmRzIGZvciBjb21tb24gdmFsaWRhdGlvbiBjYXNlc1xuICovXG5leHBvcnQgZW51bSBGb3JtVmFsaWRhdGlvbiB7XG4gIC8qKiBTaG93IGFuIGVycm9yIHdoZW4gdGhlIHZhbHVlIG9mIHRoZSBpdGVtIGlzIGVtcHR5ICovXG4gIFJlcXVpcmVkID0gXCJyZXF1aXJlZFwiLFxufVxuXG50eXBlIFZhbGlkYXRpb25FcnJvciA9IHN0cmluZyB8IHVuZGVmaW5lZCB8IG51bGw7XG50eXBlIFZhbGlkYXRvcjxWYWx1ZVR5cGU+ID0gKCh2YWx1ZTogVmFsdWVUeXBlIHwgdW5kZWZpbmVkKSA9PiBWYWxpZGF0aW9uRXJyb3IpIHwgRm9ybVZhbGlkYXRpb247XG5cbmZ1bmN0aW9uIHZhbGlkYXRpb25FcnJvcjxWYWx1ZVR5cGU+KFxuICB2YWxpZGF0aW9uOiBWYWxpZGF0b3I8VmFsdWVUeXBlPiB8IHVuZGVmaW5lZCxcbiAgdmFsdWU6IFZhbHVlVHlwZSB8IHVuZGVmaW5lZCxcbik6IFZhbGlkYXRpb25FcnJvciB7XG4gIGlmICh2YWxpZGF0aW9uKSB7XG4gICAgaWYgKHR5cGVvZiB2YWxpZGF0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiB2YWxpZGF0aW9uKHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZhbGlkYXRpb24gPT09IEZvcm1WYWxpZGF0aW9uLlJlcXVpcmVkKSB7XG4gICAgICBsZXQgdmFsdWVJc1ZhbGlkID0gdHlwZW9mIHZhbHVlICE9PSBcInVuZGVmaW5lZFwiICYmIHZhbHVlICE9PSBudWxsO1xuICAgICAgaWYgKHZhbHVlSXNWYWxpZCkge1xuICAgICAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgIHZhbHVlSXNWYWxpZCA9IHZhbHVlLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgdmFsdWVJc1ZhbGlkID0gdmFsdWUubGVuZ3RoID4gMDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICAgIHZhbHVlSXNWYWxpZCA9IHZhbHVlLmdldFRpbWUoKSA+IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghdmFsdWVJc1ZhbGlkKSB7XG4gICAgICAgIHJldHVybiBcIlRoZSBpdGVtIGlzIHJlcXVpcmVkXCI7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnR5cGUgVmFsaWRhdGlvbjxUIGV4dGVuZHMgRm9ybS5WYWx1ZXM+ID0geyBbaWQgaW4ga2V5b2YgVF0/OiBWYWxpZGF0b3I8VFtpZF0+IH07XG5cbmludGVyZmFjZSBGb3JtUHJvcHM8VCBleHRlbmRzIEZvcm0uVmFsdWVzPiB7XG4gIC8qKiBGdW5jdGlvbiB0byBwYXNzIHRvIHRoZSBgb25TdWJtaXRgIHByb3Agb2YgdGhlIGA8QWN0aW9uLlN1Ym1pdEZvcm0+YCBlbGVtZW50LiBJdCB3cmFwcyB0aGUgaW5pdGlhbCBgb25TdWJtaXRgIGFyZ3VtZW50IHdpdGggc29tZSBnb29kaWVzIHJlbGF0ZWQgdG8gdGhlIHZhbGlkYXRpb24uICovXG4gIGhhbmRsZVN1Ym1pdDogKHZhbHVlczogVCkgPT4gdm9pZCB8IGJvb2xlYW4gfCBQcm9taXNlPHZvaWQgfCBib29sZWFuPjtcbiAgLyoqIFRoZSBwcm9wcyB0aGF0IG11c3QgYmUgcGFzc2VkIHRvIHRoZSBgPEZvcm0uSXRlbT5gIGVsZW1lbnRzIHRvIGhhbmRsZSB0aGUgdmFsaWRhdGlvbnMuICovXG4gIGl0ZW1Qcm9wczoge1xuICAgIFtpZCBpbiBrZXlvZiBSZXF1aXJlZDxUPl06IFBhcnRpYWw8Rm9ybS5JdGVtUHJvcHM8VFtpZF0+PiAmIHtcbiAgICAgIGlkOiBzdHJpbmc7XG4gICAgfTtcbiAgfTtcbiAgLyoqIEZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gcHJvZ3JhbW1hdGljYWxseSBzZXQgdGhlIHZhbGlkYXRpb24gb2YgYSBzcGVjaWZpYyBmaWVsZC4gKi9cbiAgc2V0VmFsaWRhdGlvbkVycm9yOiAoaWQ6IGtleW9mIFQsIGVycm9yOiBWYWxpZGF0aW9uRXJyb3IpID0+IHZvaWQ7XG4gIC8qKiBGdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIHByb2dyYW1tYXRpY2FsbHkgc2V0IHRoZSB2YWx1ZSBvZiBhIHNwZWNpZmljIGZpZWxkLiAqL1xuICBzZXRWYWx1ZTogPEsgZXh0ZW5kcyBrZXlvZiBUPihpZDogSywgdmFsdWU6IFNldFN0YXRlQWN0aW9uPFRbS10+KSA9PiB2b2lkO1xuICAvKiogVGhlIGN1cnJlbnQgdmFsdWVzIG9mIHRoZSBmb3JtLiAqL1xuICB2YWx1ZXM6IFQ7XG4gIC8qKiBGdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIHByb2dyYW1tYXRpY2FsbHkgZm9jdXMgYSBzcGVjaWZpYyBmaWVsZC4gKi9cbiAgZm9jdXM6IChpZDoga2V5b2YgVCkgPT4gdm9pZDtcbiAgLyoqIEZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVzZXQgdGhlIHZhbHVlcyBvZiB0aGUgRm9ybS4gKi9cbiAgcmVzZXQ6IChpbml0aWFsVmFsdWVzPzogUGFydGlhbDxUPikgPT4gdm9pZDtcbn1cblxuLyoqXG4gKiBIb29rIHRoYXQgcHJvdmlkZXMgYSBoaWdoLWxldmVsIGludGVyZmFjZSB0byB3b3JrIHdpdGggRm9ybXMsIGFuZCBtb3JlIHBhcnRpY3VsYXJseSwgd2l0aCBGb3JtIHZhbGlkYXRpb25zLiBJdCBpbmNvcnBvcmF0ZXMgYWxsIHRoZSBnb29kIHByYWN0aWNlcyB0byBwcm92aWRlIGEgZ3JlYXQgVXNlciBFeHBlcmllbmNlIGZvciB5b3VyIEZvcm1zLlxuICpcbiAqIEByZXR1cm5zIGFuIG9iamVjdCB3aGljaCBjb250YWlucyB0aGUgbmVjZXNzYXJ5IG1ldGhvZHMgYW5kIHByb3BzIHRvIHByb3ZpZGUgYSBnb29kIFVzZXIgRXhwZXJpZW5jZSBpbiB5b3VyIEZvcm0uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogaW1wb3J0IHsgQWN0aW9uLCBBY3Rpb25QYW5lbCwgRm9ybSwgc2hvd1RvYXN0LCBUb2FzdCB9IGZyb20gXCJAcmF5Y2FzdC9hcGlcIjtcbiAqIGltcG9ydCB7IHVzZUZvcm0sIEZvcm1WYWxpZGF0aW9uIH0gZnJvbSBcIkByYXljYXN0L3V0aWxzXCI7XG4gKlxuICogaW50ZXJmYWNlIFNpZ25VcEZvcm1WYWx1ZXMge1xuICogICBuaWNrbmFtZTogc3RyaW5nO1xuICogICBwYXNzd29yZDogc3RyaW5nO1xuICogfVxuICpcbiAqIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbW1hbmQoKSB7XG4gKiAgIGNvbnN0IHsgaGFuZGxlU3VibWl0LCBpdGVtUHJvcHMgfSA9IHVzZUZvcm08U2lnblVwRm9ybVZhbHVlcz4oe1xuICogICAgIG9uU3VibWl0KHZhbHVlcykge1xuICogICAgICAgc2hvd1RvYXN0KFRvYXN0LlN0eWxlLlN1Y2Nlc3MsIFwiWWF5IVwiLCBgJHt2YWx1ZXMubmlja25hbWV9IGFjY291bnQgY3JlYXRlZGApO1xuICogICAgIH0sXG4gKiAgICAgdmFsaWRhdGlvbjoge1xuICogICAgICAgbmlja25hbWU6IEZvcm1WYWxpZGF0aW9uLlJlcXVpcmVkLFxuICogICAgICAgcGFzc3dvcmQ6ICh2YWx1ZSkgPT4ge1xuICogICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUubGVuZ3RoIDwgOCkge1xuICogICAgICAgICAgIHJldHVybiBcIlBhc3N3b3JkIG11c3QgYmUgYXQgbGVhc3QgOCBzeW1ib2xzXCI7XG4gKiAgICAgICAgIH0gZWxzZSBpZiAoIXZhbHVlKSB7XG4gKiAgICAgICAgICAgcmV0dXJuIFwiVGhlIGl0ZW0gaXMgcmVxdWlyZWRcIjtcbiAqICAgICAgICAgfVxuICogICAgICAgfSxcbiAqICAgICB9LFxuICogICB9KTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPEZvcm1cbiAqICAgICAgIGFjdGlvbnM9e1xuICogICAgICAgICA8QWN0aW9uUGFuZWw+XG4gKiAgICAgICAgICAgPEFjdGlvbi5TdWJtaXRGb3JtIHRpdGxlPVwiU3VibWl0XCIgb25TdWJtaXQ9e2hhbmRsZVN1Ym1pdH0gLz5cbiAqICAgICAgICAgPC9BY3Rpb25QYW5lbD5cbiAqICAgICAgIH1cbiAqICAgICA+XG4gKiAgICAgICA8Rm9ybS5UZXh0RmllbGQgdGl0bGU9XCJOaWNrbmFtZVwiIHBsYWNlaG9sZGVyPVwiRW50ZXIgeW91ciBuaWNrbmFtZVwiIHsuLi5pdGVtUHJvcHMubmlja25hbWV9IC8+XG4gKiAgICAgICA8Rm9ybS5QYXNzd29yZEZpZWxkXG4gKiAgICAgICAgIHRpdGxlPVwiUGFzc3dvcmRcIlxuICogICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHBhc3N3b3JkIGF0IGxlYXN0IDggY2hhcmFjdGVycyBsb25nXCJcbiAqICAgICAgICAgey4uLml0ZW1Qcm9wcy5wYXNzd29yZH1cbiAqICAgICAgIC8+XG4gKiAgICAgPC9Gb3JtPlxuICogICApO1xuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VGb3JtPFQgZXh0ZW5kcyBGb3JtLlZhbHVlcz4ocHJvcHM6IHtcbiAgLyoqIENhbGxiYWNrIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgZm9ybSBpcyBzdWJtaXR0ZWQgYW5kIGFsbCB2YWxpZGF0aW9ucyBwYXNzLiAqL1xuICBvblN1Ym1pdDogKHZhbHVlczogVCkgPT4gdm9pZCB8IGJvb2xlYW4gfCBQcm9taXNlPHZvaWQgfCBib29sZWFuPjtcbiAgLyoqIFRoZSBpbml0aWFsIHZhbHVlcyB0byBzZXQgd2hlbiB0aGUgRm9ybSBpcyBmaXJzdCByZW5kZXJlZC4gKi9cbiAgaW5pdGlhbFZhbHVlcz86IFBhcnRpYWw8VD47XG4gIC8qKiBUaGUgdmFsaWRhdGlvbiBydWxlcyBmb3IgdGhlIEZvcm0uIEEgdmFsaWRhdGlvbiBmb3IgYSBGb3JtIGl0ZW0gaXMgYSBmdW5jdGlvbiB0aGF0IHRha2VzIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBpdGVtIGFzIGFuIGFyZ3VtZW50IGFuZCBtdXN0IHJldHVybiBhIHN0cmluZyB3aGVuIHRoZSB2YWxpZGF0aW9uIGlzIGZhaWxpbmcuXG4gICAqXG4gICAqIFRoZXJlIGFyZSBhbHNvIHNvbWUgc2hvcnRoYW5kcyBmb3IgY29tbW9uIGNhc2VzLCBzZWUge0BsaW5rIEZvcm1WYWxpZGF0aW9ufS5cbiAgICogKi9cbiAgdmFsaWRhdGlvbj86IFZhbGlkYXRpb248VD47XG59KTogRm9ybVByb3BzPFQ+IHtcbiAgY29uc3QgeyBvblN1Ym1pdDogX29uU3VibWl0LCB2YWxpZGF0aW9uLCBpbml0aWFsVmFsdWVzID0ge30gfSA9IHByb3BzO1xuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgaXQncyBmaW5lIGlmIHdlIGRvbid0IHNwZWNpZnkgYWxsIHRoZSB2YWx1ZXNcbiAgY29uc3QgW3ZhbHVlcywgc2V0VmFsdWVzXSA9IHVzZVN0YXRlPFQ+KGluaXRpYWxWYWx1ZXMpO1xuICBjb25zdCBbZXJyb3JzLCBzZXRFcnJvcnNdID0gdXNlU3RhdGU8eyBbaWQgaW4ga2V5b2YgVF0/OiBWYWxpZGF0aW9uRXJyb3IgfT4oe30pO1xuICBjb25zdCByZWZzID0gdXNlUmVmPHsgW2lkIGluIGtleW9mIFRdPzogRm9ybS5JdGVtUmVmZXJlbmNlIH0+KHt9KTtcblxuICBjb25zdCBsYXRlc3RWYWxpZGF0aW9uID0gdXNlTGF0ZXN0PFZhbGlkYXRpb248VD4+KHZhbGlkYXRpb24gfHwge30pO1xuICBjb25zdCBsYXRlc3RPblN1Ym1pdCA9IHVzZUxhdGVzdChfb25TdWJtaXQpO1xuXG4gIGNvbnN0IGZvY3VzID0gdXNlQ2FsbGJhY2soXG4gICAgKGlkOiBrZXlvZiBUKSA9PiB7XG4gICAgICByZWZzLmN1cnJlbnRbaWRdPy5mb2N1cygpO1xuICAgIH0sXG4gICAgW3JlZnNdLFxuICApO1xuXG4gIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jICh2YWx1ZXM6IFQpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICAgIGxldCB2YWxpZGF0aW9uRXJyb3JzOiBmYWxzZSB8IHsgW2tleSBpbiBrZXlvZiBUXT86IFZhbGlkYXRpb25FcnJvciB9ID0gZmFsc2U7XG4gICAgICBmb3IgKGNvbnN0IFtpZCwgdmFsaWRhdGlvbl0gb2YgT2JqZWN0LmVudHJpZXMobGF0ZXN0VmFsaWRhdGlvbi5jdXJyZW50KSkge1xuICAgICAgICBjb25zdCBlcnJvciA9IHZhbGlkYXRpb25FcnJvcih2YWxpZGF0aW9uLCB2YWx1ZXNbaWRdKTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgaWYgKCF2YWxpZGF0aW9uRXJyb3JzKSB7XG4gICAgICAgICAgICB2YWxpZGF0aW9uRXJyb3JzID0ge307XG4gICAgICAgICAgICAvLyB3ZSBmb2N1cyB0aGUgZmlyc3QgaXRlbSB0aGF0IGhhcyBhbiBlcnJvclxuICAgICAgICAgICAgZm9jdXMoaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YWxpZGF0aW9uRXJyb3JzW2lkIGFzIGtleW9mIFRdID0gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh2YWxpZGF0aW9uRXJyb3JzKSB7XG4gICAgICAgIHNldEVycm9ycyh2YWxpZGF0aW9uRXJyb3JzKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbGF0ZXN0T25TdWJtaXQuY3VycmVudCh2YWx1ZXMpO1xuICAgICAgcmV0dXJuIHR5cGVvZiByZXN1bHQgPT09IFwiYm9vbGVhblwiID8gcmVzdWx0IDogdHJ1ZTtcbiAgICB9LFxuICAgIFtsYXRlc3RWYWxpZGF0aW9uLCBsYXRlc3RPblN1Ym1pdCwgZm9jdXNdLFxuICApO1xuXG4gIGNvbnN0IHNldFZhbGlkYXRpb25FcnJvciA9IHVzZUNhbGxiYWNrKFxuICAgIChpZDoga2V5b2YgVCwgZXJyb3I6IFZhbGlkYXRpb25FcnJvcikgPT4ge1xuICAgICAgc2V0RXJyb3JzKChlcnJvcnMpID0+ICh7IC4uLmVycm9ycywgW2lkXTogZXJyb3IgfSkpO1xuICAgIH0sXG4gICAgW3NldEVycm9yc10sXG4gICk7XG5cbiAgY29uc3Qgc2V0VmFsdWUgPSB1c2VDYWxsYmFjayhcbiAgICBmdW5jdGlvbiA8SyBleHRlbmRzIGtleW9mIFQ+KGlkOiBLLCB2YWx1ZTogU2V0U3RhdGVBY3Rpb248VFtLXT4pIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVFMgaXMgYWx3YXlzIGNvbmZ1c2VkIGFib3V0IFNldFN0YXRlQWN0aW9uLCBidXQgaXQncyBmaW5lIGhlcmVcbiAgICAgIHNldFZhbHVlcygodmFsdWVzKSA9PiAoeyAuLi52YWx1ZXMsIFtpZF06IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdmFsdWUodmFsdWVzW2lkXSkgOiB2YWx1ZSB9KSk7XG4gICAgfSxcbiAgICBbc2V0VmFsdWVzXSxcbiAgKTtcblxuICBjb25zdCBpdGVtUHJvcHMgPSB1c2VNZW1vPHsgW2lkIGluIGtleW9mIFJlcXVpcmVkPFQ+XTogUGFydGlhbDxGb3JtLkl0ZW1Qcm9wczxUW2lkXT4+ICYgeyBpZDogc3RyaW5nIH0gfT4oKCkgPT4ge1xuICAgIC8vIHdlIGhhdmUgdG8gdXNlIGEgcHJveHkgYmVjYXVzZSB3ZSBkb24ndCBhY3R1YWxseSBoYXZlIGFueSBvYmplY3QgdG8gaXRlcmF0ZSB0aHJvdWdoXG4gICAgLy8gc28gaW5zdGVhZCB3ZSBkeW5hbWljYWxseSBjcmVhdGUgdGhlIHByb3BzIHdoZW4gcmVxdWlyZWRcbiAgICByZXR1cm4gbmV3IFByb3h5PHsgW2lkIGluIGtleW9mIFJlcXVpcmVkPFQ+XTogUGFydGlhbDxGb3JtLkl0ZW1Qcm9wczxUW2lkXT4+ICYgeyBpZDogc3RyaW5nIH0gfT4oXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRoZSB3aG9sZSBwb2ludCBvZiBhIHByb3h5Li4uXG4gICAgICB7fSxcbiAgICAgIHtcbiAgICAgICAgZ2V0KHRhcmdldCwgaWQ6IGtleW9mIFQpIHtcbiAgICAgICAgICBjb25zdCB2YWxpZGF0aW9uID0gbGF0ZXN0VmFsaWRhdGlvbi5jdXJyZW50W2lkXTtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1tpZF07XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9uQ2hhbmdlKHZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmIChlcnJvcnNbaWRdKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSB2YWxpZGF0aW9uRXJyb3IodmFsaWRhdGlvbiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgIHNldFZhbGlkYXRpb25FcnJvcihpZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc2V0VmFsdWUoaWQsIHZhbHVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkJsdXIoZXZlbnQpIHtcbiAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSB2YWxpZGF0aW9uRXJyb3IodmFsaWRhdGlvbiwgZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgc2V0VmFsaWRhdGlvbkVycm9yKGlkLCBlcnJvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZXJyb3JzW2lkXSxcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgLy8gd2Ugc2hvdWxkbid0IHJldHVybiBgdW5kZWZpbmVkYCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhbiB1bmNvbnRyb2xsZWQgY29tcG9uZW50XG4gICAgICAgICAgICB2YWx1ZTogdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiID8gbnVsbCA6IHZhbHVlLFxuICAgICAgICAgICAgcmVmOiAoaW5zdGFuY2U6IEZvcm0uSXRlbVJlZmVyZW5jZSkgPT4ge1xuICAgICAgICAgICAgICByZWZzLmN1cnJlbnRbaWRdID0gaW5zdGFuY2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0gYXMgUGFydGlhbDxGb3JtLkl0ZW1Qcm9wczxUW2tleW9mIFRdPj4gJiB7IGlkOiBzdHJpbmcgfTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgKTtcbiAgfSwgW2Vycm9ycywgbGF0ZXN0VmFsaWRhdGlvbiwgc2V0VmFsaWRhdGlvbkVycm9yLCB2YWx1ZXMsIHJlZnMsIHNldFZhbHVlXSk7XG5cbiAgY29uc3QgcmVzZXQgPSB1c2VDYWxsYmFjayhcbiAgICAodmFsdWVzPzogUGFydGlhbDxUPikgPT4ge1xuICAgICAgc2V0RXJyb3JzKHt9KTtcbiAgICAgIE9iamVjdC5lbnRyaWVzKHJlZnMuY3VycmVudCkuZm9yRWFjaCgoW2lkLCByZWZdKSA9PiB7XG4gICAgICAgIGlmICghdmFsdWVzPy5baWRdKSB7XG4gICAgICAgICAgcmVmPy5yZXNldCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICh2YWx1ZXMpIHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBpdCdzIGZpbmUgaWYgd2UgZG9uJ3Qgc3BlY2lmeSBhbGwgdGhlIHZhbHVlc1xuICAgICAgICBzZXRWYWx1ZXModmFsdWVzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtzZXRWYWx1ZXMsIHNldEVycm9ycywgcmVmc10sXG4gICk7XG5cbiAgcmV0dXJuIHsgaGFuZGxlU3VibWl0LCBzZXRWYWxpZGF0aW9uRXJyb3IsIHNldFZhbHVlLCB2YWx1ZXMsIGl0ZW1Qcm9wcywgZm9jdXMsIHJlc2V0IH07XG59XG4iLCAiaW1wb3J0IHsgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQUkgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG5pbXBvcnQgeyBQcm9taXNlT3B0aW9ucywgdXNlUHJvbWlzZSB9IGZyb20gXCIuL3VzZVByb21pc2VcIjtcbmltcG9ydCB7IEZ1bmN0aW9uUmV0dXJuaW5nUHJvbWlzZSB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbi8qKlxuICogU3RyZWFtIGEgcHJvbXB0IGNvbXBsZXRpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IERldGFpbCwgTGF1bmNoUHJvcHMgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG4gKiBpbXBvcnQgeyB1c2UgQUkgfSBmcm9tIFwiQHJheWNhc3QvdXRpbHNcIjtcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb21tYW5kKHByb3BzOiBMYXVuY2hQcm9wczx7IGFyZ3VtZW50czogeyBwcm9tcHQ6IHN0cmluZyB9IH0+KSB7XG4gKiAgIGNvbnN0IHsgaXNMb2FkaW5nLCBkYXRhIH0gPSB1c2VBSShwcm9wcy5hcmd1bWVudHMucHJvbXB0KTtcbiAqXG4gKiAgIHJldHVybiA8RGV0YWlsIGlzTG9hZGluZz17aXNMb2FkaW5nfSBtYXJrZG93bj17ZGF0YX0gLz47XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUFJKFxuICBwcm9tcHQ6IHN0cmluZyxcbiAgb3B0aW9uczoge1xuICAgIC8qKlxuICAgICAqIENvbmNyZXRlIHRhc2tzLCBzdWNoIGFzIGZpeGluZyBncmFtbWFyLCByZXF1aXJlIGxlc3MgY3JlYXRpdml0eSB3aGlsZSBvcGVuLWVuZGVkIHF1ZXN0aW9ucywgc3VjaCBhcyBnZW5lcmF0aW5nIGlkZWFzLCByZXF1aXJlIG1vcmUuXG4gICAgICogSWYgYSBudW1iZXIgaXMgcGFzc2VkLCBpdCBuZWVkcyB0byBiZSBpbiB0aGUgcmFuZ2UgMC0yLiBGb3IgbGFyZ2VyIHZhbHVlcywgMiB3aWxsIGJlIHVzZWQuIEZvciBsb3dlciB2YWx1ZXMsIDAgd2lsbCBiZSB1c2VkLlxuICAgICAqL1xuICAgIGNyZWF0aXZpdHk/OiBBSS5DcmVhdGl2aXR5O1xuICAgIC8qKlxuICAgICAqIFRoZSBBSSBtb2RlbCB0byB1c2UgdG8gYW5zd2VyIHRvIHRoZSBwcm9tcHQuXG4gICAgICovXG4gICAgbW9kZWw/OiBBSS5Nb2RlbDtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIHN0cmVhbSB0aGUgYW5zd2VyIG9yIG9ubHkgdXBkYXRlIHRoZSBkYXRhIHdoZW4gdGhlIGVudGlyZSBhbnN3ZXIgaGFzIGJlZW4gcmVjZWl2ZWQuXG4gICAgICovXG4gICAgc3RyZWFtPzogYm9vbGVhbjtcbiAgfSAmIE9taXQ8UHJvbWlzZU9wdGlvbnM8RnVuY3Rpb25SZXR1cm5pbmdQcm9taXNlPiwgXCJhYm9ydGFibGVcIj4gPSB7fSxcbikge1xuICBjb25zdCB7IGNyZWF0aXZpdHksIHN0cmVhbSwgbW9kZWwsIC4uLnVzZVByb21pc2VPcHRpb25zIH0gPSBvcHRpb25zO1xuICBjb25zdCBbZGF0YSwgc2V0RGF0YV0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3QgYWJvcnRhYmxlID0gdXNlUmVmPEFib3J0Q29udHJvbGxlcj4obnVsbCk7XG4gIGNvbnN0IHsgaXNMb2FkaW5nLCBlcnJvciwgcmV2YWxpZGF0ZSB9ID0gdXNlUHJvbWlzZShcbiAgICBhc3luYyAocHJvbXB0OiBzdHJpbmcsIGNyZWF0aXZpdHk/OiBBSS5DcmVhdGl2aXR5LCBzaG91bGRTdHJlYW0/OiBib29sZWFuKSA9PiB7XG4gICAgICBzZXREYXRhKFwiXCIpO1xuICAgICAgY29uc3Qgc3RyZWFtID0gQUkuYXNrKHByb21wdCwgeyBjcmVhdGl2aXR5LCBtb2RlbCwgc2lnbmFsOiBhYm9ydGFibGUuY3VycmVudD8uc2lnbmFsIH0pO1xuICAgICAgaWYgKHNob3VsZFN0cmVhbSA9PT0gZmFsc2UpIHtcbiAgICAgICAgc2V0RGF0YShhd2FpdCBzdHJlYW0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyZWFtLm9uKFwiZGF0YVwiLCAoZGF0YSkgPT4ge1xuICAgICAgICAgIHNldERhdGEoKHgpID0+IHggKyBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHN0cmVhbTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtwcm9tcHQsIGNyZWF0aXZpdHksIHN0cmVhbV0sXG4gICAgeyAuLi51c2VQcm9taXNlT3B0aW9ucywgYWJvcnRhYmxlIH0sXG4gICk7XG5cbiAgcmV0dXJuIHsgaXNMb2FkaW5nLCBkYXRhLCBlcnJvciwgcmV2YWxpZGF0ZSB9O1xufVxuIiwgImltcG9ydCB7IHVzZU1lbW8sIHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VMYXRlc3QgfSBmcm9tIFwiLi91c2VMYXRlc3RcIjtcbmltcG9ydCB7IHVzZUNhY2hlZFN0YXRlIH0gZnJvbSBcIi4vdXNlQ2FjaGVkU3RhdGVcIjtcblxuLy8gVGhlIGFsZ29yaXRobSBiZWxvdyBpcyBpbnNwaXJlZCBieSB0aGUgb25lIHVzZWQgYnkgRmlyZWZveDpcbi8vIGh0dHBzOi8vd2lraS5tb3ppbGxhLm9yZy9Vc2VyOkplc3NlL05ld0ZyZWNlbmN5XG5cbnR5cGUgRnJlY2VuY3kgPSB7XG4gIGxhc3RWaXNpdGVkOiBudW1iZXI7XG4gIGZyZWNlbmN5OiBudW1iZXI7XG59O1xuXG5jb25zdCBIQUxGX0xJRkVfREFZUyA9IDEwO1xuXG5jb25zdCBNU19QRVJfREFZID0gMjQgKiA2MCAqIDYwICogMTAwMDtcblxuY29uc3QgVklTSVRfVFlQRV9QT0lOVFMgPSB7XG4gIERlZmF1bHQ6IDEwMCxcbiAgRW1iZWQ6IDAsXG4gIEJvb2ttYXJrOiAxNDAsXG59O1xuXG5mdW5jdGlvbiBnZXROZXdGcmVjZW5jeShpdGVtPzogRnJlY2VuY3kpOiBGcmVjZW5jeSB7XG4gIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gIGNvbnN0IGxhc3RWaXNpdGVkID0gaXRlbSA/IGl0ZW0ubGFzdFZpc2l0ZWQgOiAwO1xuICBjb25zdCBmcmVjZW5jeSA9IGl0ZW0gPyBpdGVtLmZyZWNlbmN5IDogMDtcblxuICBjb25zdCB2aXNpdEFnZUluRGF5cyA9IChub3cgLSBsYXN0VmlzaXRlZCkgLyBNU19QRVJfREFZO1xuICBjb25zdCBERUNBWV9SQVRFX0NPTlNUQU5UID0gTWF0aC5sb2coMikgLyAoSEFMRl9MSUZFX0RBWVMgKiBNU19QRVJfREFZKTtcbiAgY29uc3QgY3VycmVudFZpc2l0VmFsdWUgPSBWSVNJVF9UWVBFX1BPSU5UUy5EZWZhdWx0ICogTWF0aC5leHAoLURFQ0FZX1JBVEVfQ09OU1RBTlQgKiB2aXNpdEFnZUluRGF5cyk7XG4gIGNvbnN0IHRvdGFsVmlzaXRWYWx1ZSA9IGZyZWNlbmN5ICsgY3VycmVudFZpc2l0VmFsdWU7XG5cbiAgcmV0dXJuIHtcbiAgICBsYXN0VmlzaXRlZDogbm93LFxuICAgIGZyZWNlbmN5OiB0b3RhbFZpc2l0VmFsdWUsXG4gIH07XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5jb25zdCBkZWZhdWx0S2V5ID0gKGl0ZW06IGFueSk6IHN0cmluZyA9PiB7XG4gIGlmIChcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcbiAgICAodHlwZW9mIGl0ZW0gIT09IFwib2JqZWN0XCIgfHwgIWl0ZW0gfHwgIShcImlkXCIgaW4gaXRlbSkgfHwgdHlwZW9mIGl0ZW0uaWQgIT0gXCJzdHJpbmdcIilcbiAgKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3BlY2lmeSBhIGtleSBmdW5jdGlvbiBvciBtYWtlIHN1cmUgeW91ciBpdGVtcyBoYXZlIGFuICdpZCcgcHJvcGVydHlcIik7XG4gIH1cbiAgcmV0dXJuIGl0ZW0uaWQ7XG59O1xuXG4vKipcbiAqIFNvcnQgYW4gYXJyYXkgYnkgaXRzIGZyZWNlbmN5IGFuZCBwcm92aWRlIG1ldGhvZHMgdG8gdXBkYXRlIHRoZSBmcmVjZW5jeSBvZiBpdHMgaXRlbXMuXG4gKiBGcmVjZW5jeSBpcyBhIG1lYXN1cmUgdGhhdCBjb21iaW5lcyBmcmVxdWVuY3kgYW5kIHJlY2VuY3kuIFRoZSBtb3JlIG9mdGVuIGFuIGl0ZW0gaXMgdmlzaXRlZC91c2VkLCBhbmQgdGhlIG1vcmUgcmVjZW50bHkgYW4gaXRlbSBpcyB2aXNpdGVkL3VzZWQsIHRoZSBoaWdoZXIgaXQgd2lsbCByYW5rLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqIGltcG9ydCB7IExpc3QsIEFjdGlvblBhbmVsLCBBY3Rpb24sIEljb24gfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG4gKiBpbXBvcnQgeyB1c2VGZXRjaCwgdXNlRnJlY2VuY3lTb3J0aW5nIH0gZnJvbSBcIkByYXljYXN0L3V0aWxzXCI7XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29tbWFuZCgpIHtcbiAqICAgY29uc3QgeyBpc0xvYWRpbmcsIGRhdGEgfSA9IHVzZUZldGNoKFwiaHR0cHM6Ly9hcGkuZXhhbXBsZVwiKTtcbiAqICAgY29uc3QgeyBkYXRhOiBzb3J0ZWREYXRhLCB2aXNpdEl0ZW0sIHJlc2V0UmFua2luZyB9ID0gdXNlRnJlY2VuY3lTb3J0aW5nKGRhdGEpO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8TGlzdCBpc0xvYWRpbmc9e2lzTG9hZGluZ30+XG4gKiAgICAgICB7c29ydGVkRGF0YS5tYXAoKGl0ZW0pID0+IChcbiAqICAgICAgICAgPExpc3QuSXRlbVxuICogICAgICAgICAgIGtleT17aXRlbS5pZH1cbiAqICAgICAgICAgICB0aXRsZT17aXRlbS50aXRsZX1cbiAqICAgICAgICAgICBhY3Rpb25zPXtcbiAqICAgICAgICAgICAgIDxBY3Rpb25QYW5lbD5cbiAqICAgICAgICAgICAgICAgPEFjdGlvbi5PcGVuSW5Ccm93c2VyIHVybD17aXRlbS51cmx9IG9uT3Blbj17KCkgPT4gdmlzaXRJdGVtKGl0ZW0pfSAvPlxuICogICAgICAgICAgICAgICA8QWN0aW9uLkNvcHlUb0NsaXBib2FyZCB0aXRsZT1cIkNvcHkgTGlua1wiIGNvbnRlbnQ9e2l0ZW0udXJsfSBvbkNvcHk9eygpID0+IHZpc2l0SXRlbShpdGVtKX0gLz5cbiAqICAgICAgICAgICAgICAgPEFjdGlvbiB0aXRsZT1cIlJlc2V0IFJhbmtpbmdcIiBpY29uPXtJY29uLkFycm93Q291bnRlckNsb2Nrd2lzZX0gb25BY3Rpb249eygpID0+IHJlc2V0UmFua2luZyhpdGVtKX0gLz5cbiAqICAgICAgICAgICAgIDwvQWN0aW9uUGFuZWw+XG4gKiAgICAgICAgICAgfVxuICogICAgICAgICAvPlxuICogICAgICAgKSl9XG4gKiAgICAgPC9MaXN0PlxuICogICApO1xuICogfTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlRnJlY2VuY3lTb3J0aW5nPFQgZXh0ZW5kcyB7IGlkOiBzdHJpbmcgfT4oXG4gIGRhdGE/OiBUW10sXG4gIG9wdGlvbnM/OiB7IG5hbWVzcGFjZT86IHN0cmluZzsga2V5PzogKGl0ZW06IFQpID0+IHN0cmluZzsgc29ydFVudmlzaXRlZD86IChhOiBULCBiOiBUKSA9PiBudW1iZXIgfSxcbik6IHtcbiAgZGF0YTogVFtdO1xuICB2aXNpdEl0ZW06IChpdGVtOiBUKSA9PiBQcm9taXNlPHZvaWQ+O1xuICByZXNldFJhbmtpbmc6IChpdGVtOiBUKSA9PiBQcm9taXNlPHZvaWQ+O1xufTtcbmV4cG9ydCBmdW5jdGlvbiB1c2VGcmVjZW5jeVNvcnRpbmc8VD4oXG4gIGRhdGE6IFRbXSB8IHVuZGVmaW5lZCxcbiAgb3B0aW9uczogeyBuYW1lc3BhY2U/OiBzdHJpbmc7IGtleTogKGl0ZW06IFQpID0+IHN0cmluZzsgc29ydFVudmlzaXRlZD86IChhOiBULCBiOiBUKSA9PiBudW1iZXIgfSxcbik6IHtcbiAgZGF0YTogVFtdO1xuICB2aXNpdEl0ZW06IChpdGVtOiBUKSA9PiBQcm9taXNlPHZvaWQ+O1xuICByZXNldFJhbmtpbmc6IChpdGVtOiBUKSA9PiBQcm9taXNlPHZvaWQ+O1xufTtcbmV4cG9ydCBmdW5jdGlvbiB1c2VGcmVjZW5jeVNvcnRpbmc8VD4oXG4gIGRhdGE/OiBUW10sXG4gIG9wdGlvbnM/OiB7IG5hbWVzcGFjZT86IHN0cmluZzsga2V5PzogKGl0ZW06IFQpID0+IHN0cmluZzsgc29ydFVudmlzaXRlZD86IChhOiBULCBiOiBUKSA9PiBudW1iZXIgfSxcbik6IHtcbiAgZGF0YTogVFtdO1xuICB2aXNpdEl0ZW06IChpdGVtOiBUKSA9PiBQcm9taXNlPHZvaWQ+O1xuICByZXNldFJhbmtpbmc6IChpdGVtOiBUKSA9PiBQcm9taXNlPHZvaWQ+O1xufSB7XG4gIGNvbnN0IGtleVJlZiA9IHVzZUxhdGVzdChvcHRpb25zPy5rZXkgfHwgZGVmYXVsdEtleSk7XG4gIGNvbnN0IHNvcnRVbnZpc2l0ZWRSZWYgPSB1c2VMYXRlc3Qob3B0aW9ucz8uc29ydFVudmlzaXRlZCk7XG5cbiAgY29uc3QgW3N0b3JlZEZyZWNlbmNpZXMsIHNldFN0b3JlZEZyZWNlbmNpZXNdID0gdXNlQ2FjaGVkU3RhdGU8UmVjb3JkPHN0cmluZywgRnJlY2VuY3kgfCB1bmRlZmluZWQ+PihcbiAgICBgcmF5Y2FzdF9mcmVjZW5jeV8ke29wdGlvbnM/Lm5hbWVzcGFjZX1gLFxuICAgIHt9LFxuICApO1xuXG4gIGNvbnN0IHZpc2l0SXRlbSA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUZyZWNlbmN5KGl0ZW06IFQpIHtcbiAgICAgIGNvbnN0IGl0ZW1LZXkgPSBrZXlSZWYuY3VycmVudChpdGVtKTtcblxuICAgICAgc2V0U3RvcmVkRnJlY2VuY2llcygoc3RvcmVkRnJlY2VuY2llcykgPT4ge1xuICAgICAgICBjb25zdCBmcmVjZW5jeSA9IHN0b3JlZEZyZWNlbmNpZXNbaXRlbUtleV07XG4gICAgICAgIGNvbnN0IG5ld0ZyZWNlbmN5ID0gZ2V0TmV3RnJlY2VuY3koZnJlY2VuY3kpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uc3RvcmVkRnJlY2VuY2llcyxcbiAgICAgICAgICBbaXRlbUtleV06IG5ld0ZyZWNlbmN5LFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBba2V5UmVmLCBzZXRTdG9yZWRGcmVjZW5jaWVzXSxcbiAgKTtcblxuICBjb25zdCByZXNldFJhbmtpbmcgPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyBmdW5jdGlvbiByZW1vdmVGcmVjZW5jeShpdGVtOiBUKSB7XG4gICAgICBjb25zdCBpdGVtS2V5ID0ga2V5UmVmLmN1cnJlbnQoaXRlbSk7XG5cbiAgICAgIHNldFN0b3JlZEZyZWNlbmNpZXMoKHN0b3JlZEZyZWNlbmNpZXMpID0+IHtcbiAgICAgICAgY29uc3QgbmV3RnJlbmNlbmNpZXMgPSB7IC4uLnN0b3JlZEZyZWNlbmNpZXMgfTtcbiAgICAgICAgZGVsZXRlIG5ld0ZyZW5jZW5jaWVzW2l0ZW1LZXldO1xuXG4gICAgICAgIHJldHVybiBuZXdGcmVuY2VuY2llcztcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgW2tleVJlZiwgc2V0U3RvcmVkRnJlY2VuY2llc10sXG4gICk7XG5cbiAgY29uc3Qgc29ydGVkRGF0YSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmICghZGF0YSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGNvbnN0IGZyZWNlbmN5QSA9IHN0b3JlZEZyZWNlbmNpZXNba2V5UmVmLmN1cnJlbnQoYSldO1xuICAgICAgY29uc3QgZnJlY2VuY3lCID0gc3RvcmVkRnJlY2VuY2llc1trZXlSZWYuY3VycmVudChiKV07XG5cbiAgICAgIC8vIElmIGEgaGFzIGEgZnJlY2VuY3ksIGJ1dCBiIGRvZXNuJ3QsIGEgc2hvdWxkIGNvbWUgZmlyc3RcbiAgICAgIGlmIChmcmVjZW5jeUEgJiYgIWZyZWNlbmN5Qikge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGIgaGFzIGEgZnJlY2VuY3ksIGJ1dCBhIGRvZXNuJ3QsIGIgc2hvdWxkIGNvbWUgZmlyc3RcbiAgICAgIGlmICghZnJlY2VuY3lBICYmIGZyZWNlbmN5Qikge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYm90aCBmcmVjZW5jaWVzIGFyZSBkZWZpbmVkLHB1dCB0aGUgb25lIHdpdGggdGhlIGhpZ2hlciBmcmVjZW5jeSBmaXJzdFxuICAgICAgaWYgKGZyZWNlbmN5QSAmJiBmcmVjZW5jeUIpIHtcbiAgICAgICAgcmV0dXJuIGZyZWNlbmN5Qi5mcmVjZW5jeSAtIGZyZWNlbmN5QS5mcmVjZW5jeTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYm90aCBmcmVjZW5jaWVzIGFyZSB1bmRlZmluZWQsIGtlZXAgdGhlIG9yaWdpbmFsIG9yZGVyXG4gICAgICByZXR1cm4gc29ydFVudmlzaXRlZFJlZi5jdXJyZW50ID8gc29ydFVudmlzaXRlZFJlZi5jdXJyZW50KGEsIGIpIDogMDtcbiAgICB9KTtcbiAgfSwgW3N0b3JlZEZyZWNlbmNpZXMsIGRhdGEsIGtleVJlZiwgc29ydFVudmlzaXRlZFJlZl0pO1xuXG4gIHJldHVybiB7IGRhdGE6IHNvcnRlZERhdGEsIHZpc2l0SXRlbSwgcmVzZXRSYW5raW5nIH07XG59XG4iLCAiaW1wb3J0IHsgTG9jYWxTdG9yYWdlIH0gZnJvbSBcIkByYXljYXN0L2FwaVwiO1xuaW1wb3J0IHsgc2hvd0ZhaWx1cmVUb2FzdCB9IGZyb20gXCIuL3Nob3dGYWlsdXJlVG9hc3RcIjtcbmltcG9ydCB7IHJlcGxhY2VyLCByZXZpdmVyIH0gZnJvbSBcIi4vaGVscGVyc1wiO1xuaW1wb3J0IHsgdXNlUHJvbWlzZSB9IGZyb20gXCIuL3VzZVByb21pc2VcIjtcblxuLyoqXG4gKiBBIGhvb2sgdG8gbWFuYWdlIGEgdmFsdWUgaW4gdGhlIGxvY2FsIHN0b3JhZ2UuXG4gKlxuICogQHJlbWFyayBUaGUgdmFsdWUgaXMgc3RvcmVkIGFzIGEgSlNPTiBzdHJpbmcgaW4gdGhlIGxvY2FsIHN0b3JhZ2UuXG4gKlxuICogQHBhcmFtIGtleSAtIFRoZSBrZXkgdG8gdXNlIGZvciB0aGUgdmFsdWUgaW4gdGhlIGxvY2FsIHN0b3JhZ2UuXG4gKiBAcGFyYW0gaW5pdGlhbFZhbHVlIC0gVGhlIGluaXRpYWwgdmFsdWUgdG8gdXNlIGlmIHRoZSBrZXkgZG9lc24ndCBleGlzdCBpbiB0aGUgbG9jYWwgc3RvcmFnZS5cbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIC0gYHZhbHVlYDogVGhlIHZhbHVlIGZyb20gdGhlIGxvY2FsIHN0b3JhZ2Ugb3IgdGhlIGluaXRpYWwgdmFsdWUgaWYgdGhlIGtleSBkb2Vzbid0IGV4aXN0LlxuICogLSBgc2V0VmFsdWVgOiBBIGZ1bmN0aW9uIHRvIHVwZGF0ZSB0aGUgdmFsdWUgaW4gdGhlIGxvY2FsIHN0b3JhZ2UuXG4gKiAtIGByZW1vdmVWYWx1ZWA6IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoZSB2YWx1ZSBmcm9tIHRoZSBsb2NhbCBzdG9yYWdlLlxuICogLSBgaXNMb2FkaW5nYDogQSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIHZhbHVlIGlzIGxvYWRpbmcuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogY29uc3QgeyB2YWx1ZSwgc2V0VmFsdWUgfSA9IHVzZUxvY2FsU3RvcmFnZTxzdHJpbmc+KFwibXkta2V5XCIpO1xuICogY29uc3QgeyB2YWx1ZSwgc2V0VmFsdWUgfSA9IHVzZUxvY2FsU3RvcmFnZTxzdHJpbmc+KFwibXkta2V5XCIsIFwiZGVmYXVsdCB2YWx1ZVwiKTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTG9jYWxTdG9yYWdlPFQ+KGtleTogc3RyaW5nLCBpbml0aWFsVmFsdWU/OiBUKSB7XG4gIGNvbnN0IHtcbiAgICBkYXRhOiB2YWx1ZSxcbiAgICBpc0xvYWRpbmcsXG4gICAgbXV0YXRlLFxuICB9ID0gdXNlUHJvbWlzZShcbiAgICBhc3luYyAoc3RvcmFnZUtleTogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBpdGVtID0gYXdhaXQgTG9jYWxTdG9yYWdlLmdldEl0ZW08c3RyaW5nPihzdG9yYWdlS2V5KTtcblxuICAgICAgcmV0dXJuIHR5cGVvZiBpdGVtICE9PSBcInVuZGVmaW5lZFwiID8gKEpTT04ucGFyc2UoaXRlbSwgcmV2aXZlcikgYXMgVCkgOiBpbml0aWFsVmFsdWU7XG4gICAgfSxcbiAgICBba2V5XSxcbiAgKTtcblxuICBhc3luYyBmdW5jdGlvbiBzZXRWYWx1ZSh2YWx1ZTogVCkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBtdXRhdGUoTG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgcmVwbGFjZXIpKSwge1xuICAgICAgICBvcHRpbWlzdGljVXBkYXRlKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGF3YWl0IHNob3dGYWlsdXJlVG9hc3QoZXJyb3IsIHsgdGl0bGU6IFwiRmFpbGVkIHRvIHNldCB2YWx1ZSBpbiBsb2NhbCBzdG9yYWdlXCIgfSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gcmVtb3ZlVmFsdWUoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IG11dGF0ZShMb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpLCB7XG4gICAgICAgIG9wdGltaXN0aWNVcGRhdGUoKSB7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBhd2FpdCBzaG93RmFpbHVyZVRvYXN0KGVycm9yLCB7IHRpdGxlOiBcIkZhaWxlZCB0byByZW1vdmUgdmFsdWUgZnJvbSBsb2NhbCBzdG9yYWdlXCIgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHsgdmFsdWUsIHNldFZhbHVlLCByZW1vdmVWYWx1ZSwgaXNMb2FkaW5nIH07XG59XG4iLCAiZXhwb3J0IHsgZ2V0QXZhdGFySWNvbiB9IGZyb20gXCIuL2F2YXRhclwiO1xuZXhwb3J0IHsgZ2V0RmF2aWNvbiB9IGZyb20gXCIuL2Zhdmljb25cIjtcbmV4cG9ydCB7IGdldFByb2dyZXNzSWNvbiB9IGZyb20gXCIuL3Byb2dyZXNzXCI7XG4iLCAiaW1wb3J0IHR5cGUgeyBJbWFnZSB9IGZyb20gXCJAcmF5Y2FzdC9hcGlcIjtcbmltcG9ydCB7IHNsaWdodGx5TGlnaHRlckNvbG9yLCBzbGlnaHRseURhcmtlckNvbG9yIH0gZnJvbSBcIi4vY29sb3JcIjtcblxuZnVuY3Rpb24gZ2V0V2hvbGVDaGFyQW5kSShzdHI6IHN0cmluZywgaTogbnVtYmVyKTogW3N0cmluZywgbnVtYmVyXSB7XG4gIGNvbnN0IGNvZGUgPSBzdHIuY2hhckNvZGVBdChpKTtcblxuICBpZiAoTnVtYmVyLmlzTmFOKGNvZGUpKSB7XG4gICAgcmV0dXJuIFtcIlwiLCBpXTtcbiAgfVxuICBpZiAoY29kZSA8IDB4ZDgwMCB8fCBjb2RlID4gMHhkZmZmKSB7XG4gICAgcmV0dXJuIFtzdHIuY2hhckF0KGkpLCBpXTsgLy8gTm9ybWFsIGNoYXJhY3Rlciwga2VlcGluZyAnaScgdGhlIHNhbWVcbiAgfVxuXG4gIC8vIEhpZ2ggc3Vycm9nYXRlIChjb3VsZCBjaGFuZ2UgbGFzdCBoZXggdG8gMHhEQjdGIHRvIHRyZWF0IGhpZ2ggcHJpdmF0ZVxuICAvLyBzdXJyb2dhdGVzIGFzIHNpbmdsZSBjaGFyYWN0ZXJzKVxuICBpZiAoMHhkODAwIDw9IGNvZGUgJiYgY29kZSA8PSAweGRiZmYpIHtcbiAgICBpZiAoc3RyLmxlbmd0aCA8PSBpICsgMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSGlnaCBzdXJyb2dhdGUgd2l0aG91dCBmb2xsb3dpbmcgbG93IHN1cnJvZ2F0ZVwiKTtcbiAgICB9XG4gICAgY29uc3QgbmV4dCA9IHN0ci5jaGFyQ29kZUF0KGkgKyAxKTtcbiAgICBpZiAoMHhkYzAwID4gbmV4dCB8fCBuZXh0ID4gMHhkZmZmKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJIaWdoIHN1cnJvZ2F0ZSB3aXRob3V0IGZvbGxvd2luZyBsb3cgc3Vycm9nYXRlXCIpO1xuICAgIH1cbiAgICByZXR1cm4gW3N0ci5jaGFyQXQoaSkgKyBzdHIuY2hhckF0KGkgKyAxKSwgaSArIDFdO1xuICB9XG5cbiAgLy8gTG93IHN1cnJvZ2F0ZSAoMHhEQzAwIDw9IGNvZGUgJiYgY29kZSA8PSAweERGRkYpXG4gIGlmIChpID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTG93IHN1cnJvZ2F0ZSB3aXRob3V0IHByZWNlZGluZyBoaWdoIHN1cnJvZ2F0ZVwiKTtcbiAgfVxuXG4gIGNvbnN0IHByZXYgPSBzdHIuY2hhckNvZGVBdChpIC0gMSk7XG5cbiAgLy8gKGNvdWxkIGNoYW5nZSBsYXN0IGhleCB0byAweERCN0YgdG8gdHJlYXQgaGlnaCBwcml2YXRlIHN1cnJvZ2F0ZXNcbiAgLy8gYXMgc2luZ2xlIGNoYXJhY3RlcnMpXG4gIGlmICgweGQ4MDAgPiBwcmV2IHx8IHByZXYgPiAweGRiZmYpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJMb3cgc3Vycm9nYXRlIHdpdGhvdXQgcHJlY2VkaW5nIGhpZ2ggc3Vycm9nYXRlXCIpO1xuICB9XG5cbiAgLy8gUmV0dXJuIHRoZSBuZXh0IGNoYXJhY3RlciBpbnN0ZWFkIChhbmQgaW5jcmVtZW50KVxuICByZXR1cm4gW3N0ci5jaGFyQXQoaSArIDEpLCBpICsgMV07XG59XG5cbmNvbnN0IGF2YXRhckNvbG9yU2V0ID0gW1xuICBcIiNEQzgyOUFcIiwgLy8gUGlua1xuICBcIiNENjQ4NTRcIiwgLy8gUmVkXG4gIFwiI0Q0NzYwMFwiLCAvLyBZZWxsb3dPcmFuZ2VcbiAgXCIjRDM2Q0REXCIsIC8vIE1hZ2VudGFcbiAgXCIjNTJBOUU0XCIsIC8vIEFxdWFcbiAgXCIjNzg3MUU4XCIsIC8vIEluZGlnb1xuICBcIiM3MDkyMEZcIiwgLy8gWWVsbG93R3JlZW5cbiAgXCIjNDNCOTNBXCIsIC8vIEdyZWVuXG4gIFwiI0VCNkIzRVwiLCAvLyBPcmFuZ2VcbiAgXCIjMjZCNzk1XCIsIC8vIEJsdWVHcmVlblxuICBcIiNEODVBOUJcIiwgLy8gSG90UGlua1xuICBcIiNBMDY3RENcIiwgLy8gUHVycGxlXG4gIFwiI0JEOTUwMFwiLCAvLyBZZWxsb3dcbiAgXCIjNTM4NUQ5XCIsIC8vIEJsdWVcbl07XG5cbi8qKlxuICogSWNvbiB0byByZXByZXNlbnQgYW4gYXZhdGFyIHdoZW4geW91IGRvbid0IGhhdmUgb25lLiBUaGUgZ2VuZXJhdGVkIGF2YXRhclxuICogd2lsbCBiZSBnZW5lcmF0ZWQgZnJvbSB0aGUgaW5pdGlhbHMgb2YgdGhlIG5hbWUgYW5kIGhhdmUgYSBjb2xvcmZ1bCBidXQgY29uc2lzdGVudCBiYWNrZ3JvdW5kLlxuICpcbiAqIEByZXR1cm5zIGFuIEltYWdlIHRoYXQgY2FuIGJlIHVzZWQgd2hlcmUgUmF5Y2FzdCBleHBlY3RzIHRoZW0uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogPExpc3QuSXRlbSBpY29uPXtnZXRBdmF0YXJJY29uKCdNYXRoaWV1IER1dG91cicpfSB0aXRsZT1cIlByb2plY3RcIiAvPlxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBdmF0YXJJY29uKFxuICBuYW1lOiBzdHJpbmcsXG4gIG9wdGlvbnM/OiB7XG4gICAgLyoqXG4gICAgICogQ3VzdG9tIGJhY2tncm91bmQgY29sb3JcbiAgICAgKi9cbiAgICBiYWNrZ3JvdW5kPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdG8gdXNlIGEgZ3JhZGllbnQgZm9yIHRoZSBiYWNrZ3JvdW5kIG9yIG5vdC5cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgZ3JhZGllbnQ/OiBib29sZWFuO1xuICB9LFxuKTogSW1hZ2UuQXNzZXQge1xuICBjb25zdCB3b3JkcyA9IG5hbWUudHJpbSgpLnNwbGl0KFwiIFwiKTtcbiAgbGV0IGluaXRpYWxzOiBzdHJpbmc7XG4gIGlmICh3b3Jkcy5sZW5ndGggPT0gMSAmJiBnZXRXaG9sZUNoYXJBbmRJKHdvcmRzWzBdLCAwKVswXSkge1xuICAgIGluaXRpYWxzID0gZ2V0V2hvbGVDaGFyQW5kSSh3b3Jkc1swXSwgMClbMF07XG4gIH0gZWxzZSBpZiAod29yZHMubGVuZ3RoID4gMSkge1xuICAgIGNvbnN0IGZpcnN0V29yZEZpcnN0TGV0dGVyID0gZ2V0V2hvbGVDaGFyQW5kSSh3b3Jkc1swXSwgMClbMF0gfHwgXCJcIjtcbiAgICBjb25zdCBsYXN0V29yZEZpcnN0TGV0dGVyID0gZ2V0V2hvbGVDaGFyQW5kSSh3b3Jkc1t3b3Jkcy5sZW5ndGggLSAxXSwgMClbMF0gPz8gXCJcIjtcbiAgICBpbml0aWFscyA9IGZpcnN0V29yZEZpcnN0TGV0dGVyICsgbGFzdFdvcmRGaXJzdExldHRlcjtcbiAgfSBlbHNlIHtcbiAgICBpbml0aWFscyA9IFwiXCI7XG4gIH1cblxuICBsZXQgYmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XG5cbiAgaWYgKG9wdGlvbnM/LmJhY2tncm91bmQpIHtcbiAgICBiYWNrZ3JvdW5kQ29sb3IgPSBvcHRpb25zPy5iYWNrZ3JvdW5kO1xuICB9IGVsc2Uge1xuICAgIGxldCBpbml0aWFsc0NoYXJJbmRleCA9IDA7XG4gICAgbGV0IFtjaGFyLCBpXSA9IGdldFdob2xlQ2hhckFuZEkoaW5pdGlhbHMsIDApO1xuICAgIHdoaWxlIChjaGFyKSB7XG4gICAgICBpbml0aWFsc0NoYXJJbmRleCArPSBjaGFyLmNoYXJDb2RlQXQoMCk7XG4gICAgICBbY2hhciwgaV0gPSBnZXRXaG9sZUNoYXJBbmRJKGluaXRpYWxzLCBpICsgMSk7XG4gICAgfVxuXG4gICAgY29uc3QgY29sb3JJbmRleCA9IGluaXRpYWxzQ2hhckluZGV4ICUgYXZhdGFyQ29sb3JTZXQubGVuZ3RoO1xuICAgIGJhY2tncm91bmRDb2xvciA9IGF2YXRhckNvbG9yU2V0W2NvbG9ySW5kZXhdO1xuICB9XG5cbiAgY29uc3QgcGFkZGluZyA9IDA7XG4gIGNvbnN0IHJhZGl1cyA9IDUwIC0gcGFkZGluZztcblxuICBjb25zdCBzdmcgPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIxMDBweFwiIGhlaWdodD1cIjEwMHB4XCI+XG4gICR7XG4gICAgb3B0aW9ucz8uZ3JhZGllbnQgIT09IGZhbHNlXG4gICAgICA/IGA8ZGVmcz5cbiAgICAgIDxsaW5lYXJHcmFkaWVudCBpZD1cIkdyYWRpZW50XCIgeDE9XCIwLjI1XCIgeDI9XCIwLjc1XCIgeTE9XCIwXCIgeTI9XCIxXCI+XG4gICAgICAgIDxzdG9wIG9mZnNldD1cIjAlXCIgc3RvcC1jb2xvcj1cIiR7c2xpZ2h0bHlMaWdodGVyQ29sb3IoYmFja2dyb3VuZENvbG9yKX1cIi8+XG4gICAgICAgIDxzdG9wIG9mZnNldD1cIjUwJVwiIHN0b3AtY29sb3I9XCIke2JhY2tncm91bmRDb2xvcn1cIi8+XG4gICAgICAgIDxzdG9wIG9mZnNldD1cIjEwMCVcIiBzdG9wLWNvbG9yPVwiJHtzbGlnaHRseURhcmtlckNvbG9yKGJhY2tncm91bmRDb2xvcil9XCIvPlxuICAgICAgPC9saW5lYXJHcmFkaWVudD5cbiAgPC9kZWZzPmBcbiAgICAgIDogXCJcIlxuICB9XG4gICAgICA8Y2lyY2xlIGN4PVwiNTBcIiBjeT1cIjUwXCIgcj1cIiR7cmFkaXVzfVwiIGZpbGw9XCIke1xuICAgICAgICBvcHRpb25zPy5ncmFkaWVudCAhPT0gZmFsc2UgPyBcInVybCgjR3JhZGllbnQpXCIgOiBiYWNrZ3JvdW5kQ29sb3JcbiAgICAgIH1cIiAvPlxuICAgICAgJHtcbiAgICAgICAgaW5pdGlhbHNcbiAgICAgICAgICA/IGA8dGV4dCB4PVwiNTBcIiB5PVwiODBcIiBmb250LXNpemU9XCIke1xuICAgICAgICAgICAgICByYWRpdXMgLSAxXG4gICAgICAgICAgICB9XCIgZm9udC1mYW1pbHk9XCJJbnRlciwgc2Fucy1zZXJpZlwiIHRleHQtYW5jaG9yPVwibWlkZGxlXCIgZmlsbD1cIndoaXRlXCI+JHtpbml0aWFscy50b1VwcGVyQ2FzZSgpfTwvdGV4dD5gXG4gICAgICAgICAgOiBcIlwiXG4gICAgICB9XG4gICAgPC9zdmc+XG4gIGAucmVwbGFjZUFsbChcIlxcblwiLCBcIlwiKTtcbiAgcmV0dXJuIGBkYXRhOmltYWdlL3N2Zyt4bWwsJHtlbmNvZGVVUklDb21wb25lbnQoc3ZnKX1gO1xufVxuIiwgImZ1bmN0aW9uIGhleFRvUkdCKGhleDogc3RyaW5nKSB7XG4gIGxldCByID0gMDtcbiAgbGV0IGcgPSAwO1xuICBsZXQgYiA9IDA7XG5cbiAgLy8gMyBkaWdpdHNcbiAgaWYgKGhleC5sZW5ndGggPT09IDQpIHtcbiAgICByID0gcGFyc2VJbnQoYCR7aGV4WzFdfSR7aGV4WzFdfWAsIDE2KTtcbiAgICBnID0gcGFyc2VJbnQoYCR7aGV4WzJdfSR7aGV4WzJdfWAsIDE2KTtcbiAgICBiID0gcGFyc2VJbnQoYCR7aGV4WzNdfSR7aGV4WzNdfWAsIDE2KTtcblxuICAgIC8vIDYgZGlnaXRzXG4gIH0gZWxzZSBpZiAoaGV4Lmxlbmd0aCA9PT0gNykge1xuICAgIHIgPSBwYXJzZUludChgJHtoZXhbMV19JHtoZXhbMl19YCwgMTYpO1xuICAgIGcgPSBwYXJzZUludChgJHtoZXhbM119JHtoZXhbNF19YCwgMTYpO1xuICAgIGIgPSBwYXJzZUludChgJHtoZXhbNV19JHtoZXhbNl19YCwgMTYpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgTWFsZm9ybWVkIGhleCBjb2xvcjogJHtoZXh9YCk7XG4gIH1cblxuICByZXR1cm4geyByLCBnLCBiIH07XG59XG5cbmZ1bmN0aW9uIHJnYlRvSGV4KHsgciwgZywgYiB9OiB7IHI6IG51bWJlcjsgZzogbnVtYmVyOyBiOiBudW1iZXIgfSkge1xuICBsZXQgclN0cmluZyA9IHIudG9TdHJpbmcoMTYpO1xuICBsZXQgZ1N0cmluZyA9IGcudG9TdHJpbmcoMTYpO1xuICBsZXQgYlN0cmluZyA9IGIudG9TdHJpbmcoMTYpO1xuXG4gIGlmIChyU3RyaW5nLmxlbmd0aCA9PT0gMSkge1xuICAgIHJTdHJpbmcgPSBgMCR7clN0cmluZ31gO1xuICB9XG4gIGlmIChnU3RyaW5nLmxlbmd0aCA9PT0gMSkge1xuICAgIGdTdHJpbmcgPSBgMCR7Z1N0cmluZ31gO1xuICB9XG4gIGlmIChiU3RyaW5nLmxlbmd0aCA9PT0gMSkge1xuICAgIGJTdHJpbmcgPSBgMCR7YlN0cmluZ31gO1xuICB9XG5cbiAgcmV0dXJuIGAjJHtyU3RyaW5nfSR7Z1N0cmluZ30ke2JTdHJpbmd9YDtcbn1cblxuZnVuY3Rpb24gcmdiVG9IU0woeyByLCBnLCBiIH06IHsgcjogbnVtYmVyOyBnOiBudW1iZXI7IGI6IG51bWJlciB9KSB7XG4gIC8vIE1ha2UgciwgZywgYW5kIGIgZnJhY3Rpb25zIG9mIDFcbiAgciAvPSAyNTU7XG4gIGcgLz0gMjU1O1xuICBiIC89IDI1NTtcblxuICAvLyBGaW5kIGdyZWF0ZXN0IGFuZCBzbWFsbGVzdCBjaGFubmVsIHZhbHVlc1xuICBjb25zdCBjbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gIGNvbnN0IGNtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgY29uc3QgZGVsdGEgPSBjbWF4IC0gY21pbjtcbiAgbGV0IGggPSAwO1xuICBsZXQgcyA9IDA7XG4gIGxldCBsID0gMDtcblxuICAvLyBDYWxjdWxhdGUgaHVlXG4gIC8vIE5vIGRpZmZlcmVuY2VcbiAgaWYgKGRlbHRhID09PSAwKSB7XG4gICAgaCA9IDA7XG4gIH1cbiAgLy8gUmVkIGlzIG1heFxuICBlbHNlIGlmIChjbWF4ID09PSByKSB7XG4gICAgaCA9ICgoZyAtIGIpIC8gZGVsdGEpICUgNjtcbiAgfVxuICAvLyBHcmVlbiBpcyBtYXhcbiAgZWxzZSBpZiAoY21heCA9PT0gZykge1xuICAgIGggPSAoYiAtIHIpIC8gZGVsdGEgKyAyO1xuICB9XG4gIC8vIEJsdWUgaXMgbWF4XG4gIGVsc2Uge1xuICAgIGggPSAociAtIGcpIC8gZGVsdGEgKyA0O1xuICB9XG5cbiAgaCA9IE1hdGgucm91bmQoaCAqIDYwKTtcblxuICAvLyBNYWtlIG5lZ2F0aXZlIGh1ZXMgcG9zaXRpdmUgYmVoaW5kIDM2MMKwXG4gIGlmIChoIDwgMCkge1xuICAgIGggKz0gMzYwO1xuICB9XG5cbiAgLy8gQ2FsY3VsYXRlIGxpZ2h0bmVzc1xuICBsID0gKGNtYXggKyBjbWluKSAvIDI7XG5cbiAgLy8gQ2FsY3VsYXRlIHNhdHVyYXRpb25cbiAgcyA9IGRlbHRhID09PSAwID8gMCA6IGRlbHRhIC8gKDEgLSBNYXRoLmFicygyICogbCAtIDEpKTtcblxuICAvLyBNdWx0aXBseSBsIGFuZCBzIGJ5IDEwMFxuICBzID0gKyhzICogMTAwKS50b0ZpeGVkKDEpO1xuICBsID0gKyhsICogMTAwKS50b0ZpeGVkKDEpO1xuXG4gIHJldHVybiB7IGgsIHMsIGwgfTtcbn1cblxuZnVuY3Rpb24gaHNsVG9SR0IoeyBoLCBzLCBsIH06IHsgaDogbnVtYmVyOyBzOiBudW1iZXI7IGw6IG51bWJlciB9KSB7XG4gIC8vIE11c3QgYmUgZnJhY3Rpb25zIG9mIDFcbiAgcyAvPSAxMDA7XG4gIGwgLz0gMTAwO1xuXG4gIGNvbnN0IGMgPSAoMSAtIE1hdGguYWJzKDIgKiBsIC0gMSkpICogcztcbiAgY29uc3QgeCA9IGMgKiAoMSAtIE1hdGguYWJzKCgoaCAvIDYwKSAlIDIpIC0gMSkpO1xuICBjb25zdCBtID0gbCAtIGMgLyAyO1xuICBsZXQgciA9IDA7XG4gIGxldCBnID0gMDtcbiAgbGV0IGIgPSAwO1xuXG4gIGlmIChoID49IDAgJiYgaCA8IDYwKSB7XG4gICAgciA9IGM7XG4gICAgZyA9IHg7XG4gICAgYiA9IDA7XG4gIH0gZWxzZSBpZiAoaCA+PSA2MCAmJiBoIDwgMTIwKSB7XG4gICAgciA9IHg7XG4gICAgZyA9IGM7XG4gICAgYiA9IDA7XG4gIH0gZWxzZSBpZiAoaCA+PSAxMjAgJiYgaCA8IDE4MCkge1xuICAgIHIgPSAwO1xuICAgIGcgPSBjO1xuICAgIGIgPSB4O1xuICB9IGVsc2UgaWYgKGggPj0gMTgwICYmIGggPCAyNDApIHtcbiAgICByID0gMDtcbiAgICBnID0geDtcbiAgICBiID0gYztcbiAgfSBlbHNlIGlmIChoID49IDI0MCAmJiBoIDwgMzAwKSB7XG4gICAgciA9IHg7XG4gICAgZyA9IDA7XG4gICAgYiA9IGM7XG4gIH0gZWxzZSBpZiAoaCA+PSAzMDAgJiYgaCA8IDM2MCkge1xuICAgIHIgPSBjO1xuICAgIGcgPSAwO1xuICAgIGIgPSB4O1xuICB9XG4gIHIgPSBNYXRoLnJvdW5kKChyICsgbSkgKiAyNTUpO1xuICBnID0gTWF0aC5yb3VuZCgoZyArIG0pICogMjU1KTtcbiAgYiA9IE1hdGgucm91bmQoKGIgKyBtKSAqIDI1NSk7XG5cbiAgcmV0dXJuIHsgciwgZywgYiB9O1xufVxuXG5mdW5jdGlvbiBoZXhUb0hTTChoZXg6IHN0cmluZykge1xuICByZXR1cm4gcmdiVG9IU0woaGV4VG9SR0IoaGV4KSk7XG59XG5cbmZ1bmN0aW9uIGhzbFRvSGV4KGhzbDogeyBoOiBudW1iZXI7IHM6IG51bWJlcjsgbDogbnVtYmVyIH0pIHtcbiAgcmV0dXJuIHJnYlRvSGV4KGhzbFRvUkdCKGhzbCkpO1xufVxuXG5mdW5jdGlvbiBjbGFtcCh2YWx1ZTogbnVtYmVyLCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIpIHtcbiAgcmV0dXJuIG1pbiA8IG1heCA/ICh2YWx1ZSA8IG1pbiA/IG1pbiA6IHZhbHVlID4gbWF4ID8gbWF4IDogdmFsdWUpIDogdmFsdWUgPCBtYXggPyBtYXggOiB2YWx1ZSA+IG1pbiA/IG1pbiA6IHZhbHVlO1xufVxuXG5jb25zdCBvZmZzZXQgPSAxMjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNsaWdodGx5RGFya2VyQ29sb3IoaGV4OiBzdHJpbmcpIHtcbiAgY29uc3QgaHNsID0gaGV4VG9IU0woaGV4KTtcblxuICByZXR1cm4gaHNsVG9IZXgoe1xuICAgIGg6IGhzbC5oLFxuICAgIHM6IGhzbC5zLFxuICAgIGw6IGNsYW1wKGhzbC5sIC0gb2Zmc2V0LCAwLCAxMDApLFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNsaWdodGx5TGlnaHRlckNvbG9yKGhleDogc3RyaW5nKSB7XG4gIGNvbnN0IGhzbCA9IGhleFRvSFNMKGhleCk7XG5cbiAgcmV0dXJuIGhzbFRvSGV4KHtcbiAgICBoOiBoc2wuaCxcbiAgICBzOiBoc2wucyxcbiAgICBsOiBjbGFtcChoc2wubCArIG9mZnNldCwgMCwgMTAwKSxcbiAgfSk7XG59XG4iLCAiaW1wb3J0IHsgSWNvbiwgSW1hZ2UgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG5pbXBvcnQgeyBVUkwgfSBmcm9tIFwibm9kZTp1cmxcIjtcblxuLyoqXG4gKiBJY29uIHNob3dpbmcgdGhlIGZhdmljb24gb2YgYSB3ZWJzaXRlLlxuICpcbiAqIEEgZmF2aWNvbiAoZmF2b3JpdGUgaWNvbikgaXMgYSB0aW55IGljb24gaW5jbHVkZWQgYWxvbmcgd2l0aCBhIHdlYnNpdGUsIHdoaWNoIGlzIGRpc3BsYXllZCBpbiBwbGFjZXMgbGlrZSB0aGUgYnJvd3NlcidzIGFkZHJlc3MgYmFyLCBwYWdlIHRhYnMsIGFuZCBib29rbWFya3MgbWVudS5cbiAqXG4gKiBAcGFyYW0gdXJsIFRoZSBVUkwgb2YgdGhlIHdlYnNpdGUgdG8gcmVwcmVzZW50LlxuICpcbiAqIEByZXR1cm5zIGFuIEltYWdlIHRoYXQgY2FuIGJlIHVzZWQgd2hlcmUgUmF5Y2FzdCBleHBlY3RzIHRoZW0uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogPExpc3QuSXRlbSBpY29uPXtnZXRGYXZpY29uKFwiaHR0cHM6Ly9yYXljYXN0LmNvbVwiKX0gdGl0bGU9XCJSYXljYXN0IFdlYnNpdGVcIiAvPlxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGYXZpY29uKFxuICB1cmw6IHN0cmluZyB8IFVSTCxcbiAgb3B0aW9ucz86IHtcbiAgICAvKipcbiAgICAgKiBTaXplIG9mIHRoZSBGYXZpY29uXG4gICAgICogQGRlZmF1bHQgNjRcbiAgICAgKi9cbiAgICBzaXplPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEZhbGxiYWNrIGljb24gaW4gY2FzZSB0aGUgRmF2aWNvbiBpcyBub3QgZm91bmQuXG4gICAgICogQGRlZmF1bHQgSWNvbi5MaW5rXG4gICAgICovXG4gICAgZmFsbGJhY2s/OiBJbWFnZS5GYWxsYmFjaztcbiAgICAvKipcbiAgICAgKiBBIHtAbGluayBJbWFnZS5NYXNrfSB0byBhcHBseSB0byB0aGUgRmF2aWNvbi5cbiAgICAgKi9cbiAgICBtYXNrPzogSW1hZ2UuTWFzaztcbiAgfSxcbik6IEltYWdlLkltYWdlTGlrZSB7XG4gIC8vIGEgZnVuYyBhZGRpbmcgaHR0cHM6Ly8gdG8gdGhlIFVSTFxuICAvLyBmb3IgY2FzZXMgd2hlcmUgdGhlIFVSTCBpcyBub3QgYSBmdWxsIFVSTFxuICAvLyBlLmcuIFwicmF5Y2FzdC5jb21cIlxuICBjb25zdCB3aXRoSHR0cHMgPSAodXJsOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoIXVybC5zdGFydHNXaXRoKFwiaHR0cFwiKSkge1xuICAgICAgcmV0dXJuIGBodHRwczovLyR7dXJsfWA7XG4gICAgfVxuICAgIHJldHVybiB1cmw7XG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBzYW5pdGl6ZSA9ICh1cmw6IHN0cmluZykgPT4ge1xuICAgICAgaWYgKCF1cmwuc3RhcnRzV2l0aChcImh0dHBcIikpIHtcbiAgICAgICAgcmV0dXJuIGBodHRwczovLyR7dXJsfWA7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXJsO1xuICAgIH07XG5cbiAgICBjb25zdCB1cmxPYmogPSB0eXBlb2YgdXJsID09PSBcInN0cmluZ1wiID8gbmV3IFVSTChzYW5pdGl6ZSh1cmwpKSA6IHVybDtcbiAgICBjb25zdCBob3N0bmFtZSA9IHVybE9iai5ob3N0bmFtZTtcblxuICAgIGNvbnN0IGZhdmljb25Qcm92aWRlcjogXCJub25lXCIgfCBcInJheWNhc3RcIiB8IFwiYXBwbGVcIiB8IFwiZ29vZ2xlXCIgfCBcImR1Y2tEdWNrR29cIiB8IFwiZHVja2R1Y2tnb1wiIHwgXCJsZWdhY3lcIiA9XG4gICAgICAocHJvY2Vzcy5lbnYuRkFWSUNPTl9QUk9WSURFUiBhcyBhbnkpID8/IFwicmF5Y2FzdFwiO1xuXG4gICAgc3dpdGNoIChmYXZpY29uUHJvdmlkZXIpIHtcbiAgICAgIGNhc2UgXCJub25lXCI6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc291cmNlOiBvcHRpb25zPy5mYWxsYmFjayA/PyBJY29uLkxpbmssXG4gICAgICAgICAgbWFzazogb3B0aW9ucz8ubWFzayxcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgXCJhcHBsZVwiOlxuICAgICAgICAvLyB3ZSBjYW4ndCBzdXBwb3J0IGFwcGxlIGZhdmljb25zIGFzIGl0J3MgYSBuYXRpdmUgQVBJXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc291cmNlOiBvcHRpb25zPy5mYWxsYmFjayA/PyBJY29uLkxpbmssXG4gICAgICAgICAgbWFzazogb3B0aW9ucz8ubWFzayxcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgXCJkdWNrZHVja2dvXCI6XG4gICAgICBjYXNlIFwiZHVja0R1Y2tHb1wiOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNvdXJjZTogYGh0dHBzOi8vaWNvbnMuZHVja2R1Y2tnby5jb20vaXAzLyR7aG9zdG5hbWV9Lmljb2AsXG4gICAgICAgICAgZmFsbGJhY2s6IG9wdGlvbnM/LmZhbGxiYWNrID8/IEljb24uTGluayxcbiAgICAgICAgICBtYXNrOiBvcHRpb25zPy5tYXNrLFxuICAgICAgICB9O1xuICAgICAgY2FzZSBcImdvb2dsZVwiOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNvdXJjZTogYGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/c3o9JHtvcHRpb25zPy5zaXplID8/IDY0fSZkb21haW49JHtob3N0bmFtZX1gLFxuICAgICAgICAgIGZhbGxiYWNrOiBvcHRpb25zPy5mYWxsYmFjayA/PyBJY29uLkxpbmssXG4gICAgICAgICAgbWFzazogb3B0aW9ucz8ubWFzayxcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgXCJsZWdhY3lcIjpcbiAgICAgIGNhc2UgXCJyYXljYXN0XCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNvdXJjZTogYGh0dHBzOi8vYXBpLnJheS5zby9mYXZpY29uP3VybD0ke2hvc3RuYW1lfSZzaXplPSR7b3B0aW9ucz8uc2l6ZSA/PyA2NH1gLFxuICAgICAgICAgIGZhbGxiYWNrOiBvcHRpb25zPy5mYWxsYmFjayA/PyBJY29uLkxpbmssXG4gICAgICAgICAgbWFzazogb3B0aW9ucz8ubWFzayxcbiAgICAgICAgfTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgIHJldHVybiBJY29uLkxpbms7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBlbnZpcm9ubWVudCwgQ29sb3IgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG5pbXBvcnQgdHlwZSB7IEltYWdlIH0gZnJvbSBcIkByYXljYXN0L2FwaVwiO1xuXG5mdW5jdGlvbiBwb2xhclRvQ2FydGVzaWFuKGNlbnRlclg6IG51bWJlciwgY2VudGVyWTogbnVtYmVyLCByYWRpdXM6IG51bWJlciwgYW5nbGVJbkRlZ3JlZXM6IG51bWJlcikge1xuICBjb25zdCBhbmdsZUluUmFkaWFucyA9ICgoYW5nbGVJbkRlZ3JlZXMgLSA5MCkgKiBNYXRoLlBJKSAvIDE4MC4wO1xuXG4gIHJldHVybiB7XG4gICAgeDogY2VudGVyWCArIHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlSW5SYWRpYW5zKSxcbiAgICB5OiBjZW50ZXJZICsgcmFkaXVzICogTWF0aC5zaW4oYW5nbGVJblJhZGlhbnMpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBkZXNjcmliZUFyYyh4OiBudW1iZXIsIHk6IG51bWJlciwgcmFkaXVzOiBudW1iZXIsIHN0YXJ0QW5nbGU6IG51bWJlciwgZW5kQW5nbGU6IG51bWJlcikge1xuICBjb25zdCBzdGFydCA9IHBvbGFyVG9DYXJ0ZXNpYW4oeCwgeSwgcmFkaXVzLCBlbmRBbmdsZSk7XG4gIGNvbnN0IGVuZCA9IHBvbGFyVG9DYXJ0ZXNpYW4oeCwgeSwgcmFkaXVzLCBzdGFydEFuZ2xlKTtcblxuICBjb25zdCBsYXJnZUFyY0ZsYWcgPSBlbmRBbmdsZSAtIHN0YXJ0QW5nbGUgPD0gMTgwID8gXCIwXCIgOiBcIjFcIjtcblxuICBjb25zdCBkID0gW1wiTVwiLCBzdGFydC54LCBzdGFydC55LCBcIkFcIiwgcmFkaXVzLCByYWRpdXMsIDAsIGxhcmdlQXJjRmxhZywgMCwgZW5kLngsIGVuZC55XS5qb2luKFwiIFwiKTtcblxuICByZXR1cm4gZDtcbn1cblxuLyoqXG4gKiBJY29uIHRvIHJlcHJlc2VudCB0aGUgcHJvZ3Jlc3Mgb2YgX3NvbWV0aGluZ18uXG4gKlxuICogQHBhcmFtIHByb2dyZXNzIE51bWJlciBiZXR3ZWVuIDAgYW5kIDEuXG4gKiBAcGFyYW0gY29sb3IgSGV4IGNvbG9yIChkZWZhdWx0IGBcIiNGRjYzNjNcImApIG9yIENvbG9yLlxuICpcbiAqIEByZXR1cm5zIGFuIEltYWdlIHRoYXQgY2FuIGJlIHVzZWQgd2hlcmUgUmF5Y2FzdCBleHBlY3RzIHRoZW0uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogPExpc3QuSXRlbSBpY29uPXtnZXRQcm9ncmVzc0ljb24oMC4xKX0gdGl0bGU9XCJQcm9qZWN0XCIgLz5cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvZ3Jlc3NJY29uKFxuICBwcm9ncmVzczogbnVtYmVyLFxuICBjb2xvcjogQ29sb3IgfCBzdHJpbmcgPSBDb2xvci5SZWQsXG4gIG9wdGlvbnM/OiB7IGJhY2tncm91bmQ/OiBDb2xvciB8IHN0cmluZzsgYmFja2dyb3VuZE9wYWNpdHk/OiBudW1iZXIgfSxcbik6IEltYWdlLkFzc2V0IHtcbiAgY29uc3QgYmFja2dyb3VuZCA9IG9wdGlvbnM/LmJhY2tncm91bmQgfHwgKGVudmlyb25tZW50LmFwcGVhcmFuY2UgPT09IFwibGlnaHRcIiA/IFwiYmxhY2tcIiA6IFwid2hpdGVcIik7XG4gIGNvbnN0IGJhY2tncm91bmRPcGFjaXR5ID0gb3B0aW9ucz8uYmFja2dyb3VuZE9wYWNpdHkgfHwgMC4xO1xuXG4gIGNvbnN0IHN0cm9rZSA9IDEwO1xuICBjb25zdCBwYWRkaW5nID0gNTtcbiAgY29uc3QgcmFkaXVzID0gNTAgLSBwYWRkaW5nIC0gc3Ryb2tlIC8gMjtcblxuICBjb25zdCBzdmcgPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIxMDBweFwiIGhlaWdodD1cIjEwMHB4XCI+XG4gICAgICA8Y2lyY2xlIGN4PVwiNTBcIiBjeT1cIjUwXCIgcj1cIiR7cmFkaXVzfVwiIHN0cm9rZS13aWR0aD1cIiR7c3Ryb2tlfVwiIHN0cm9rZT1cIiR7XG4gICAgICAgIHByb2dyZXNzIDwgMSA/IGJhY2tncm91bmQgOiBjb2xvclxuICAgICAgfVwiIG9wYWNpdHk9XCIke3Byb2dyZXNzIDwgMSA/IGJhY2tncm91bmRPcGFjaXR5IDogXCIxXCJ9XCIgZmlsbD1cIm5vbmVcIiAvPlxuICAgICAgJHtcbiAgICAgICAgcHJvZ3Jlc3MgPiAwICYmIHByb2dyZXNzIDwgMVxuICAgICAgICAgID8gYDxwYXRoIGQ9XCIke2Rlc2NyaWJlQXJjKFxuICAgICAgICAgICAgICA1MCxcbiAgICAgICAgICAgICAgNTAsXG4gICAgICAgICAgICAgIHJhZGl1cyxcbiAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgcHJvZ3Jlc3MgKiAzNjAsXG4gICAgICAgICAgICApfVwiIHN0cm9rZT1cIiR7Y29sb3J9XCIgc3Ryb2tlLXdpZHRoPVwiJHtzdHJva2V9XCIgZmlsbD1cIm5vbmVcIiAvPmBcbiAgICAgICAgICA6IFwiXCJcbiAgICAgIH1cbiAgICA8L3N2Zz5cbiAgYC5yZXBsYWNlQWxsKFwiXFxuXCIsIFwiXCIpO1xuICByZXR1cm4gYGRhdGE6aW1hZ2Uvc3ZnK3htbCwke2VuY29kZVVSSUNvbXBvbmVudChzdmcpfWA7XG59XG4iLCAiZXhwb3J0IHsgT0F1dGhTZXJ2aWNlIH0gZnJvbSBcIi4vT0F1dGhTZXJ2aWNlXCI7XG5leHBvcnQgeyB3aXRoQWNjZXNzVG9rZW4sIGdldEFjY2Vzc1Rva2VuIH0gZnJvbSBcIi4vd2l0aEFjY2Vzc1Rva2VuXCI7XG5cbmV4cG9ydCB0eXBlIHsgV2l0aEFjY2Vzc1Rva2VuQ29tcG9uZW50T3JGbiB9IGZyb20gXCIuL3dpdGhBY2Nlc3NUb2tlblwiO1xuZXhwb3J0IHR5cGUge1xuICBPbkF1dGhvcml6ZVBhcmFtcyxcbiAgT0F1dGhTZXJ2aWNlT3B0aW9ucyxcbiAgUHJvdmlkZXJXaXRoRGVmYXVsdENsaWVudE9wdGlvbnMsXG4gIFByb3ZpZGVyT3B0aW9ucyxcbn0gZnJvbSBcIi4vdHlwZXNcIjtcbiIsICJpbXBvcnQgeyBDb2xvciwgT0F1dGggfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG5pbXBvcnQgeyBQUk9WSURFUl9DTElFTlRfSURTIH0gZnJvbSBcIi4vcHJvdmlkZXJzXCI7XG5pbXBvcnQgdHlwZSB7XG4gIE9BdXRoU2VydmljZU9wdGlvbnMsXG4gIE9uQXV0aG9yaXplUGFyYW1zLFxuICBQcm92aWRlck9wdGlvbnMsXG4gIFByb3ZpZGVyV2l0aERlZmF1bHRDbGllbnRPcHRpb25zLFxufSBmcm9tIFwiLi90eXBlc1wiO1xuXG4vKipcbiAqIENsYXNzIGFsbG93aW5nIHRvIGNyZWF0ZSBhbiBPQXV0aCBzZXJ2aWNlIHVzaW5nIHRoZSB0aGUgUEtDRSAoUHJvb2YgS2V5IGZvciBDb2RlIEV4Y2hhbmdlKSBmbG93LlxuICpcbiAqIFRoaXMgc2VydmljZSBpcyBjYXBhYmxlIG9mIHN0YXJ0aW5nIHRoZSBhdXRob3JpemF0aW9uIHByb2Nlc3MsIGZldGNoaW5nIGFuZCByZWZyZXNoaW5nIHRva2VucyxcbiAqIGFzIHdlbGwgYXMgbWFuYWdpbmcgdGhlIGF1dGhlbnRpY2F0aW9uIHN0YXRlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBvYXV0aENsaWVudCA9IG5ldyBPQXV0aC5QS0NFQ2xpZW50KHsgLi4uIH0pO1xuICogY29uc3Qgb2F1dGhTZXJ2aWNlID0gbmV3IE9BdXRoU2VydmljZSh7XG4gKiAgIGNsaWVudDogb2F1dGhDbGllbnQsXG4gKiAgIGNsaWVudElkOiAneW91ci1jbGllbnQtaWQnLFxuICogICBzY29wZTogJ3JlcXVpcmVkIHNjb3BlcycsXG4gKiAgIGF1dGhvcml6ZVVybDogJ2h0dHBzOi8vcHJvdmlkZXIuY29tL29hdXRoL2F1dGhvcml6ZScsXG4gKiAgIHRva2VuVXJsOiAnaHR0cHM6Ly9wcm92aWRlci5jb20vb2F1dGgvdG9rZW4nLFxuICogICByZWZyZXNoVG9rZW5Vcmw6ICdodHRwczovL3Byb3ZpZGVyLmNvbS9vYXV0aC90b2tlbicsXG4gKiAgIGV4dHJhUGFyYW1ldGVyczogeyAnYWRkaXRpb25hbF9wYXJhbSc6ICd2YWx1ZScgfVxuICogfSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIE9BdXRoU2VydmljZSBpbXBsZW1lbnRzIE9BdXRoU2VydmljZU9wdGlvbnMge1xuICBwdWJsaWMgY2xpZW50SWQ6IHN0cmluZztcbiAgcHVibGljIHNjb3BlOiBzdHJpbmc7XG4gIHB1YmxpYyBjbGllbnQ6IE9BdXRoLlBLQ0VDbGllbnQ7XG4gIHB1YmxpYyBleHRyYVBhcmFtZXRlcnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICBwdWJsaWMgYXV0aG9yaXplVXJsOiBzdHJpbmc7XG4gIHB1YmxpYyB0b2tlblVybDogc3RyaW5nO1xuICBwdWJsaWMgcmVmcmVzaFRva2VuVXJsPzogc3RyaW5nO1xuICBwdWJsaWMgYm9keUVuY29kaW5nPzogXCJqc29uXCIgfCBcInVybC1lbmNvZGVkXCI7XG4gIHB1YmxpYyBwZXJzb25hbEFjY2Vzc1Rva2VuPzogc3RyaW5nO1xuICBvbkF1dGhvcml6ZT86IChwYXJhbXM6IE9uQXV0aG9yaXplUGFyYW1zKSA9PiB2b2lkO1xuICB0b2tlblJlc3BvbnNlUGFyc2VyOiAocmVzcG9uc2U6IHVua25vd24pID0+IE9BdXRoLlRva2VuUmVzcG9uc2U7XG4gIHRva2VuUmVmcmVzaFJlc3BvbnNlUGFyc2VyOiAocmVzcG9uc2U6IHVua25vd24pID0+IE9BdXRoLlRva2VuUmVzcG9uc2U7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogT0F1dGhTZXJ2aWNlT3B0aW9ucykge1xuICAgIHRoaXMuY2xpZW50SWQgPSBvcHRpb25zLmNsaWVudElkO1xuICAgIHRoaXMuc2NvcGUgPSBBcnJheS5pc0FycmF5KG9wdGlvbnMuc2NvcGUpID8gb3B0aW9ucy5zY29wZS5qb2luKFwiIFwiKSA6IG9wdGlvbnMuc2NvcGU7XG4gICAgdGhpcy5wZXJzb25hbEFjY2Vzc1Rva2VuID0gb3B0aW9ucy5wZXJzb25hbEFjY2Vzc1Rva2VuO1xuICAgIHRoaXMuYm9keUVuY29kaW5nID0gb3B0aW9ucy5ib2R5RW5jb2Rpbmc7XG4gICAgdGhpcy5jbGllbnQgPSBvcHRpb25zLmNsaWVudDtcbiAgICB0aGlzLmV4dHJhUGFyYW1ldGVycyA9IG9wdGlvbnMuZXh0cmFQYXJhbWV0ZXJzO1xuICAgIHRoaXMuYXV0aG9yaXplVXJsID0gb3B0aW9ucy5hdXRob3JpemVVcmw7XG4gICAgdGhpcy50b2tlblVybCA9IG9wdGlvbnMudG9rZW5Vcmw7XG4gICAgdGhpcy5yZWZyZXNoVG9rZW5VcmwgPSBvcHRpb25zLnJlZnJlc2hUb2tlblVybDtcbiAgICB0aGlzLm9uQXV0aG9yaXplID0gb3B0aW9ucy5vbkF1dGhvcml6ZTtcbiAgICB0aGlzLnRva2VuUmVzcG9uc2VQYXJzZXIgPSBvcHRpb25zLnRva2VuUmVzcG9uc2VQYXJzZXIgPz8gKCh4KSA9PiB4IGFzIE9BdXRoLlRva2VuUmVzcG9uc2UpO1xuICAgIHRoaXMudG9rZW5SZWZyZXNoUmVzcG9uc2VQYXJzZXIgPSBvcHRpb25zLnRva2VuUmVmcmVzaFJlc3BvbnNlUGFyc2VyID8/ICgoeCkgPT4geCBhcyBPQXV0aC5Ub2tlblJlc3BvbnNlKTtcbiAgICB0aGlzLmF1dGhvcml6ZSA9IHRoaXMuYXV0aG9yaXplLmJpbmQodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQXNhbmEgT0F1dGggc2VydmljZSBwcm92aWRlZCBvdXQgb2YgdGhlIGJveC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCBhc2FuYSA9IE9BdXRoU2VydmljZS5hc2FuYSh7IHNjb3BlOiAnZGVmYXVsdCcgfSlcbiAgICogYGBgXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGFzYW5hKG9wdGlvbnM6IFByb3ZpZGVyV2l0aERlZmF1bHRDbGllbnRPcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBPQXV0aFNlcnZpY2Uoe1xuICAgICAgY2xpZW50OiBuZXcgT0F1dGguUEtDRUNsaWVudCh7XG4gICAgICAgIHJlZGlyZWN0TWV0aG9kOiBPQXV0aC5SZWRpcmVjdE1ldGhvZC5XZWIsXG4gICAgICAgIHByb3ZpZGVyTmFtZTogXCJBc2FuYVwiLFxuICAgICAgICBwcm92aWRlckljb246IGBkYXRhOmltYWdlL3N2Zyt4bWwsJHtlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICAgICAgYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjUxXCIgaGVpZ2h0PVwiMjMyXCIgZmlsbD1cIm5vbmVcIj48cGF0aCBmaWxsPVwiI0YwNkE2QVwiIGQ9XCJNMTc5LjM4MyA1NC4zNzNjMCAzMC4wMTctMjQuMzM3IDU0LjM3NC01NC4zNTQgNTQuMzc0LTMwLjAzNSAwLTU0LjM3My0yNC4zMzgtNTQuMzczLTU0LjM3NEM3MC42NTYgMjQuMzM4IDk0Ljk5MyAwIDEyNS4wMjkgMGMzMC4wMTcgMCA1NC4zNTQgMjQuMzM4IDU0LjM1NCA1NC4zNzNaTTU0LjM5MyAxMjIuMzNDMjQuMzc2IDEyMi4zMy4wMiAxNDYuNjY4LjAyIDE3Ni42ODVjMCAzMC4wMTcgMjQuMzM3IDU0LjM3MyA1NC4zNzMgNTQuMzczIDMwLjAzNSAwIDU0LjM3My0yNC4zMzggNTQuMzczLTU0LjM3MyAwLTMwLjAxNy0yNC4zMzgtNTQuMzU1LTU0LjM3My01NC4zNTVabTE0MS4yNTMgMGMtMzAuMDM1IDAtNTQuMzczIDI0LjMzOC01NC4zNzMgNTQuMzc0IDAgMzAuMDM1IDI0LjMzOCA1NC4zNzMgNTQuMzczIDU0LjM3MyAzMC4wMTcgMCA1NC4zNzQtMjQuMzM4IDU0LjM3NC01NC4zNzMgMC0zMC4wMzYtMjQuMzM4LTU0LjM3NC01NC4zNzQtNTQuMzc0WlwiLz48L3N2Zz5gLFxuICAgICAgICApfWAsXG4gICAgICAgIHByb3ZpZGVySWQ6IFwiYXNhbmFcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQ29ubmVjdCB5b3VyIEFzYW5hIGFjY291bnRcIixcbiAgICAgIH0pLFxuICAgICAgY2xpZW50SWQ6IG9wdGlvbnMuY2xpZW50SWQgPz8gUFJPVklERVJfQ0xJRU5UX0lEUy5hc2FuYSxcbiAgICAgIGF1dGhvcml6ZVVybDogb3B0aW9ucy5hdXRob3JpemVVcmwgPz8gXCJodHRwczovL2FzYW5hLm9hdXRoLnJheWNhc3QuY29tL2F1dGhvcml6ZVwiLFxuICAgICAgdG9rZW5Vcmw6IG9wdGlvbnMudG9rZW5VcmwgPz8gXCJodHRwczovL2FzYW5hLm9hdXRoLnJheWNhc3QuY29tL3Rva2VuXCIsXG4gICAgICByZWZyZXNoVG9rZW5Vcmw6IG9wdGlvbnMucmVmcmVzaFRva2VuVXJsID8/IFwiaHR0cHM6Ly9hc2FuYS5vYXV0aC5yYXljYXN0LmNvbS9yZWZyZXNoLXRva2VuXCIsXG4gICAgICBzY29wZTogb3B0aW9ucy5zY29wZSxcbiAgICAgIHBlcnNvbmFsQWNjZXNzVG9rZW46IG9wdGlvbnMucGVyc29uYWxBY2Nlc3NUb2tlbixcbiAgICAgIG9uQXV0aG9yaXplOiBvcHRpb25zLm9uQXV0aG9yaXplLFxuICAgICAgYm9keUVuY29kaW5nOiBvcHRpb25zLmJvZHlFbmNvZGluZyxcbiAgICAgIHRva2VuUmVmcmVzaFJlc3BvbnNlUGFyc2VyOiBvcHRpb25zLnRva2VuUmVmcmVzaFJlc3BvbnNlUGFyc2VyLFxuICAgICAgdG9rZW5SZXNwb25zZVBhcnNlcjogb3B0aW9ucy50b2tlblJlc3BvbnNlUGFyc2VyLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdpdEh1YiBPQXV0aCBzZXJ2aWNlIHByb3ZpZGVkIG91dCBvZiB0aGUgYm94LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IGdpdGh1YiA9IE9BdXRoU2VydmljZS5naXRodWIoeyBzY29wZTogJ3JlcG8gdXNlcicgfSlcbiAgICogYGBgXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdpdGh1YihvcHRpb25zOiBQcm92aWRlcldpdGhEZWZhdWx0Q2xpZW50T3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgT0F1dGhTZXJ2aWNlKHtcbiAgICAgIGNsaWVudDogbmV3IE9BdXRoLlBLQ0VDbGllbnQoe1xuICAgICAgICByZWRpcmVjdE1ldGhvZDogT0F1dGguUmVkaXJlY3RNZXRob2QuV2ViLFxuICAgICAgICBwcm92aWRlck5hbWU6IFwiR2l0SHViXCIsXG4gICAgICAgIHByb3ZpZGVySWNvbjoge1xuICAgICAgICAgIHNvdXJjZTogYGRhdGE6aW1hZ2Uvc3ZnK3htbCwke2VuY29kZVVSSUNvbXBvbmVudChcbiAgICAgICAgICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjY0XCIgaGVpZ2h0PVwiNjRcIiB2aWV3Qm94PVwiMCAwIDE2IDE2XCI+PHBhdGggZmlsbC1ydWxlPVwiZXZlbm9kZFwiIGQ9XCJNOCAwQzMuNTggMCAwIDMuNTggMCA4YzAgMy41NCAyLjI5IDYuNTMgNS40NyA3LjU5LjQuMDcuNTUtLjE3LjU1LS4zOCAwLS4xOS0uMDEtLjgyLS4wMS0xLjQ5LTIuMDEuMzctMi41My0uNDktMi42OS0uOTQtLjA5LS4yMy0uNDgtLjk0LS44Mi0xLjEzLS4yOC0uMTUtLjY4LS41Mi0uMDEtLjUzLjYzLS4wMSAxLjA4LjU4IDEuMjMuODIuNzIgMS4yMSAxLjg3Ljg3IDIuMzMuNjYuMDctLjUyLjI4LS44Ny41MS0xLjA3LTEuNzgtLjItMy42NC0uODktMy42NC0zLjk1IDAtLjg3LjMxLTEuNTkuODItMi4xNS0uMDgtLjItLjM2LTEuMDIuMDgtMi4xMiAwIDAgLjY3LS4yMSAyLjIuODIuNjQtLjE4IDEuMzItLjI3IDItLjI3LjY4IDAgMS4zNi4wOSAyIC4yNyAxLjUzLTEuMDQgMi4yLS44MiAyLjItLjgyLjQ0IDEuMS4xNiAxLjkyLjA4IDIuMTIuNTEuNTYuODIgMS4yNy44MiAyLjE1IDAgMy4wNy0xLjg3IDMuNzUtMy42NSAzLjk1LjI5LjI1LjU0LjczLjU0IDEuNDggMCAxLjA3LS4wMSAxLjkzLS4wMSAyLjIgMCAuMjEuMTUuNDYuNTUuMzhBOC4wMTMgOC4wMTMgMCAwIDAgMTYgOGMwLTQuNDItMy41OC04LTgtOHpcIi8+PC9zdmc+YCxcbiAgICAgICAgICApfWAsXG5cbiAgICAgICAgICB0aW50Q29sb3I6IENvbG9yLlByaW1hcnlUZXh0LFxuICAgICAgICB9LFxuICAgICAgICBwcm92aWRlcklkOiBcImdpdGh1YlwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJDb25uZWN0IHlvdXIgR2l0SHViIGFjY291bnRcIixcbiAgICAgIH0pLFxuICAgICAgY2xpZW50SWQ6IG9wdGlvbnMuY2xpZW50SWQgPz8gUFJPVklERVJfQ0xJRU5UX0lEUy5naXRodWIsXG4gICAgICBhdXRob3JpemVVcmw6IG9wdGlvbnMuYXV0aG9yaXplVXJsID8/IFwiaHR0cHM6Ly9naXRodWIub2F1dGgucmF5Y2FzdC5jb20vYXV0aG9yaXplXCIsXG4gICAgICB0b2tlblVybDogb3B0aW9ucy50b2tlblVybCA/PyBcImh0dHBzOi8vZ2l0aHViLm9hdXRoLnJheWNhc3QuY29tL3Rva2VuXCIsXG4gICAgICByZWZyZXNoVG9rZW5Vcmw6IG9wdGlvbnMucmVmcmVzaFRva2VuVXJsID8/IFwiaHR0cHM6Ly9naXRodWIub2F1dGgucmF5Y2FzdC5jb20vcmVmcmVzaC10b2tlblwiLFxuICAgICAgc2NvcGU6IG9wdGlvbnMuc2NvcGUsXG4gICAgICBwZXJzb25hbEFjY2Vzc1Rva2VuOiBvcHRpb25zLnBlcnNvbmFsQWNjZXNzVG9rZW4sXG4gICAgICBvbkF1dGhvcml6ZTogb3B0aW9ucy5vbkF1dGhvcml6ZSxcbiAgICAgIGJvZHlFbmNvZGluZzogb3B0aW9ucy5ib2R5RW5jb2RpbmcsXG4gICAgICB0b2tlblJlZnJlc2hSZXNwb25zZVBhcnNlcjogb3B0aW9ucy50b2tlblJlZnJlc2hSZXNwb25zZVBhcnNlcixcbiAgICAgIHRva2VuUmVzcG9uc2VQYXJzZXI6IG9wdGlvbnMudG9rZW5SZXNwb25zZVBhcnNlcixcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHb29nbGUgT0F1dGggc2VydmljZSBwcm92aWRlZCBvdXQgb2YgdGhlIGJveC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCBnb29nbGUgPSBPQXV0aFNlcnZpY2UuZ29vZ2xlKHtcbiAgICogICBjbGllbnRJZDogJ2N1c3RvbS1jbGllbnQtaWQnLFxuICAgKiAgIGF1dGhvcml6ZVVybDogJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi92Mi9hdXRoJyxcbiAgICogICB0b2tlblVybDogJ2h0dHBzOi8vb2F1dGgyLmdvb2dsZWFwaXMuY29tL3Rva2VuJyxcbiAgICogICBzY29wZTogJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvZHJpdmUucmVhZG9ubHknLFxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdvb2dsZShvcHRpb25zOiBQcm92aWRlck9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IE9BdXRoU2VydmljZSh7XG4gICAgICBjbGllbnQ6IG5ldyBPQXV0aC5QS0NFQ2xpZW50KHtcbiAgICAgICAgcmVkaXJlY3RNZXRob2Q6IE9BdXRoLlJlZGlyZWN0TWV0aG9kLkFwcFVSSSxcbiAgICAgICAgcHJvdmlkZXJOYW1lOiBcIkdvb2dsZVwiLFxuICAgICAgICBwcm92aWRlckljb246IGBkYXRhOmltYWdlL3N2Zyt4bWwsJHtlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICAgICAgYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHN0eWxlPVwiZGlzcGxheTpibG9ja1wiIHZpZXdCb3g9XCIwIDAgNDggNDhcIj48cGF0aCBmaWxsPVwiI0VBNDMzNVwiIGQ9XCJNMjQgOS41YzMuNTQgMCA2LjcxIDEuMjIgOS4yMSAzLjZsNi44NS02Ljg1QzM1LjkgMi4zOCAzMC40NyAwIDI0IDAgMTQuNjIgMCA2LjUxIDUuMzggMi41NiAxMy4yMmw3Ljk4IDYuMTlDMTIuNDMgMTMuNzIgMTcuNzQgOS41IDI0IDkuNXpcIi8+PHBhdGggZmlsbD1cIiM0Mjg1RjRcIiBkPVwiTTQ2Ljk4IDI0LjU1YzAtMS41Ny0uMTUtMy4wOS0uMzgtNC41NUgyNHY5LjAyaDEyLjk0Yy0uNTggMi45Ni0yLjI2IDUuNDgtNC43OCA3LjE4bDcuNzMgNmM0LjUxLTQuMTggNy4wOS0xMC4zNiA3LjA5LTE3LjY1elwiLz48cGF0aCBmaWxsPVwiI0ZCQkMwNVwiIGQ9XCJNMTAuNTMgMjguNTljLS40OC0xLjQ1LS43Ni0yLjk5LS43Ni00LjU5cy4yNy0zLjE0Ljc2LTQuNTlsLTcuOTgtNi4xOUMuOTIgMTYuNDYgMCAyMC4xMiAwIDI0YzAgMy44OC45MiA3LjU0IDIuNTYgMTAuNzhsNy45Ny02LjE5elwiLz48cGF0aCBmaWxsPVwiIzM0QTg1M1wiIGQ9XCJNMjQgNDhjNi40OCAwIDExLjkzLTIuMTMgMTUuODktNS44MWwtNy43My02Yy0yLjE1IDEuNDUtNC45MiAyLjMtOC4xNiAyLjMtNi4yNiAwLTExLjU3LTQuMjItMTMuNDctOS45MWwtNy45OCA2LjE5QzYuNTEgNDIuNjIgMTQuNjIgNDggMjQgNDh6XCIvPjxwYXRoIGZpbGw9XCJub25lXCIgZD1cIk0wIDBoNDh2NDhIMHpcIi8+PC9zdmc+YCxcbiAgICAgICAgKX1gLFxuICAgICAgICBwcm92aWRlcklkOiBcImdvb2dsZVwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJDb25uZWN0IHlvdXIgR29vZ2xlIGFjY291bnRcIixcbiAgICAgIH0pLFxuICAgICAgY2xpZW50SWQ6IG9wdGlvbnMuY2xpZW50SWQsXG4gICAgICBhdXRob3JpemVVcmw6IG9wdGlvbnMuYXV0aG9yaXplVXJsID8/IFwiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL3YyL2F1dGhcIixcbiAgICAgIHRva2VuVXJsOiBvcHRpb25zLnRva2VuVXJsID8/IFwiaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW5cIixcbiAgICAgIHJlZnJlc2hUb2tlblVybDogb3B0aW9ucy50b2tlblVybCxcbiAgICAgIHNjb3BlOiBvcHRpb25zLnNjb3BlLFxuICAgICAgcGVyc29uYWxBY2Nlc3NUb2tlbjogb3B0aW9ucy5wZXJzb25hbEFjY2Vzc1Rva2VuLFxuICAgICAgYm9keUVuY29kaW5nOiBvcHRpb25zLmJvZHlFbmNvZGluZyA/PyBcInVybC1lbmNvZGVkXCIsXG4gICAgICBvbkF1dGhvcml6ZTogb3B0aW9ucy5vbkF1dGhvcml6ZSxcbiAgICAgIHRva2VuUmVmcmVzaFJlc3BvbnNlUGFyc2VyOiBvcHRpb25zLnRva2VuUmVmcmVzaFJlc3BvbnNlUGFyc2VyLFxuICAgICAgdG9rZW5SZXNwb25zZVBhcnNlcjogb3B0aW9ucy50b2tlblJlc3BvbnNlUGFyc2VyLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEppcmEgT0F1dGggc2VydmljZSBwcm92aWRlZCBvdXQgb2YgdGhlIGJveC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCBqaXJhID0gT0F1dGhTZXJ2aWNlLmppcmEoe1xuICAgKiAgIGNsaWVudElkOiAnY3VzdG9tLWNsaWVudC1pZCcsXG4gICAqICAgYXV0aG9yaXplVXJsOiAnaHR0cHM6Ly9hdXRoLmF0bGFzc2lhbi5jb20vYXV0aG9yaXplJyxcbiAgICogICB0b2tlblVybDogJ2h0dHBzOi8vYXBpLmF0bGFzc2lhbi5jb20vb2F1dGgvdG9rZW4nLFxuICAgKiAgIHNjb3BlOiAncmVhZDpqaXJhLXVzZXIgcmVhZDpqaXJhLXdvcmsgb2ZmbGluZV9hY2Nlc3MnXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgamlyYShvcHRpb25zOiBQcm92aWRlck9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IE9BdXRoU2VydmljZSh7XG4gICAgICBjbGllbnQ6IG5ldyBPQXV0aC5QS0NFQ2xpZW50KHtcbiAgICAgICAgcmVkaXJlY3RNZXRob2Q6IE9BdXRoLlJlZGlyZWN0TWV0aG9kLldlYixcbiAgICAgICAgcHJvdmlkZXJOYW1lOiBcIkppcmFcIixcbiAgICAgICAgcHJvdmlkZXJJY29uOiBgZGF0YTppbWFnZS9zdmcreG1sLCR7ZW5jb2RlVVJJQ29tcG9uZW50KFxuICAgICAgICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB3aWR0aD1cIjIzNjFcIiBoZWlnaHQ9XCIyNTAwXCIgdmlld0JveD1cIjIuNTkgMCAyMTQuMDkxIDIyNFwiPjxsaW5lYXJHcmFkaWVudCBpZD1cImFcIiB4MT1cIjEwMi40XCIgeDI9XCI1Ni4xNVwiIHkxPVwiMjE4LjYzXCIgeTI9XCIxNzIuMzlcIiBncmFkaWVudFRyYW5zZm9ybT1cIm1hdHJpeCgxIDAgMCAtMSAwIDI2NClcIiBncmFkaWVudFVuaXRzPVwidXNlclNwYWNlT25Vc2VcIj48c3RvcCBvZmZzZXQ9XCIuMThcIiBzdG9wLWNvbG9yPVwiIzAwNTJjY1wiLz48c3RvcCBvZmZzZXQ9XCIxXCIgc3RvcC1jb2xvcj1cIiMyNjg0ZmZcIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgeGxpbms6aHJlZj1cIiNhXCIgaWQ9XCJiXCIgeDE9XCIxMTQuNjVcIiB4Mj1cIjE2MC44MVwiIHkxPVwiODUuNzdcIiB5Mj1cIjEzMS45MlwiLz48cGF0aCBmaWxsPVwiIzI2ODRmZlwiIGQ9XCJNMjE0LjA2IDEwNS43MyAxMTcuNjcgOS4zNCAxMDguMzMgMCAzNS43NyA3Mi41NiAyLjU5IDEwNS43M2E4Ljg5IDguODkgMCAwIDAgMCAxMi41NGw2Ni4yOSA2Ni4yOUwxMDguMzMgMjI0bDcyLjU1LTcyLjU2IDEuMTMtMS4xMiAzMi4wNS0zMmE4Ljg3IDguODcgMCAwIDAgMC0xMi41OXptLTEwNS43MyAzOS4zOUw3NS4yMSAxMTJsMzMuMTItMzMuMTJMMTQxLjQ0IDExMnpcIi8+PHBhdGggZmlsbD1cInVybCgjYSlcIiBkPVwiTTEwOC4zMyA3OC44OGE1NS43NSA1NS43NSAwIDAgMS0uMjQtNzguNjFMMzUuNjIgNzIuNzFsMzkuNDQgMzkuNDR6XCIvPjxwYXRoIGZpbGw9XCJ1cmwoI2IpXCIgZD1cIm0xNDEuNTMgMTExLjkxLTMzLjIgMzMuMjFhNTUuNzcgNTUuNzcgMCAwIDEgMCA3OC44NkwxODEgMTUxLjM1elwiLz48L3N2Zz5gLFxuICAgICAgICApfWAsXG4gICAgICAgIHByb3ZpZGVySWQ6IFwiamlyYVwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJDb25uZWN0IHlvdXIgSmlyYSBhY2NvdW50XCIsXG4gICAgICB9KSxcbiAgICAgIGNsaWVudElkOiBvcHRpb25zLmNsaWVudElkLFxuICAgICAgYXV0aG9yaXplVXJsOiBvcHRpb25zLmF1dGhvcml6ZVVybCA/PyBcImh0dHBzOi8vYXV0aC5hdGxhc3NpYW4uY29tL2F1dGhvcml6ZVwiLFxuICAgICAgdG9rZW5Vcmw6IG9wdGlvbnMudG9rZW5VcmwgPz8gXCJodHRwczovL2F1dGguYXRsYXNzaWFuLmNvbS9vYXV0aC90b2tlblwiLFxuICAgICAgcmVmcmVzaFRva2VuVXJsOiBvcHRpb25zLnJlZnJlc2hUb2tlblVybCxcbiAgICAgIHNjb3BlOiBvcHRpb25zLnNjb3BlLFxuICAgICAgcGVyc29uYWxBY2Nlc3NUb2tlbjogb3B0aW9ucy5wZXJzb25hbEFjY2Vzc1Rva2VuLFxuICAgICAgb25BdXRob3JpemU6IG9wdGlvbnMub25BdXRob3JpemUsXG4gICAgICBib2R5RW5jb2Rpbmc6IG9wdGlvbnMuYm9keUVuY29kaW5nLFxuICAgICAgdG9rZW5SZWZyZXNoUmVzcG9uc2VQYXJzZXI6IG9wdGlvbnMudG9rZW5SZWZyZXNoUmVzcG9uc2VQYXJzZXIsXG4gICAgICB0b2tlblJlc3BvbnNlUGFyc2VyOiBvcHRpb25zLnRva2VuUmVzcG9uc2VQYXJzZXIsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTGluZWFyIE9BdXRoIHNlcnZpY2UgcHJvdmlkZWQgb3V0IG9mIHRoZSBib3guXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogY29uc3QgbGluZWFyID0gT0F1dGhTZXJ2aWNlLmxpbmVhcih7IHNjb3BlOiAncmVhZCB3cml0ZScgfSlcbiAgICogYGBgXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGxpbmVhcihvcHRpb25zOiBQcm92aWRlcldpdGhEZWZhdWx0Q2xpZW50T3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgT0F1dGhTZXJ2aWNlKHtcbiAgICAgIGNsaWVudDogbmV3IE9BdXRoLlBLQ0VDbGllbnQoe1xuICAgICAgICByZWRpcmVjdE1ldGhvZDogT0F1dGguUmVkaXJlY3RNZXRob2QuV2ViLFxuICAgICAgICBwcm92aWRlck5hbWU6IFwiTGluZWFyXCIsXG4gICAgICAgIHByb3ZpZGVySWNvbjoge1xuICAgICAgICAgIHNvdXJjZToge1xuICAgICAgICAgICAgbGlnaHQ6IGBkYXRhOmltYWdlL3N2Zyt4bWwsJHtlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICAgICAgICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiIzIyMjMyNlwiIHdpZHRoPVwiMjAwXCIgaGVpZ2h0PVwiMjAwXCIgdmlld0JveD1cIjAgMCAxMDAgMTAwXCI+PHBhdGggZD1cIk0xLjIyNTQxIDYxLjUyMjhjLS4yMjI1LS45NDg1LjkwNzQ4LTEuNTQ1OSAxLjU5NjM4LS44NTdMMzkuMzM0MiA5Ny4xNzgyYy42ODg5LjY4ODkuMDkxNSAxLjgxODktLjg1NyAxLjU5NjRDMjAuMDUxNSA5NC40NTIyIDUuNTQ3NzkgNzkuOTQ4NSAxLjIyNTQxIDYxLjUyMjhaTS4wMDE4OTEzNSA0Ni44ODkxYy0uMDE3NjQzNzUuMjgzMy4wODg4NzIxNS41NTk5LjI4OTU3MTY1Ljc2MDZMNTIuMzUwMyA5OS43MDg1Yy4yMDA3LjIwMDcuNDc3My4zMDc1Ljc2MDYuMjg5NiAyLjM2OTItLjE0NzYgNC42OTM4LS40NiA2Ljk2MjQtLjkyNTkuNzY0NS0uMTU3IDEuMDMwMS0xLjA5NjMuNDc4Mi0xLjY0ODFMMi41NzU5NSAzOS40NDg1Yy0uNTUxODYtLjU1MTktMS40OTExNy0uMjg2My0xLjY0ODE3NC40NzgyLS40NjU5MTUgMi4yNjg2LS43NzgzMiA0LjU5MzItLjkyNTg4NDY1IDYuOTYyNFpNNC4yMTA5MyAyOS43MDU0Yy0uMTY2NDkuMzczOC0uMDgxNjkuODEwNi4yMDc2NSAxLjFsNjQuNzc2MDIgNjQuNzc2Yy4yODk0LjI4OTQuNzI2Mi4zNzQyIDEuMS4yMDc3IDEuNzg2MS0uNzk1NiAzLjUxNzEtMS42OTI3IDUuMTg1NS0yLjY4NC41NTIxLS4zMjguNjM3My0xLjA4NjcuMTgzMi0xLjU0MDdMOC40MzU2NiAyNC4zMzY3Yy0uNDU0MDktLjQ1NDEtMS4yMTI3MS0uMzY4OS0xLjU0MDc0LjE4MzItLjk5MTMyIDEuNjY4NC0xLjg4ODQzIDMuMzk5NC0yLjY4Mzk5IDUuMTg1NVpNMTIuNjU4NyAxOC4wNzRjLS4zNzAxLS4zNzAxLS4zOTMtLjk2MzctLjA0NDMtMS4zNTQxQzIxLjc3OTUgNi40NTkzMSAzNS4xMTE0IDAgNDkuOTUxOSAwIDc3LjU5MjcgMCAxMDAgMjIuNDA3MyAxMDAgNTAuMDQ4MWMwIDE0Ljg0MDUtNi40NTkzIDI4LjE3MjQtMTYuNzE5OSAzNy4zMzc1LS4zOTAzLjM0ODctLjk4NC4zMjU4LTEuMzU0Mi0uMDQ0M0wxMi42NTg3IDE4LjA3NFpcIi8+PC9zdmc+YCxcbiAgICAgICAgICAgICl9YCxcbiAgICAgICAgICAgIGRhcms6IGBkYXRhOmltYWdlL3N2Zyt4bWwsJHtlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICAgICAgICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiMjAwXCIgaGVpZ2h0PVwiMjAwXCIgdmlld0JveD1cIjAgMCAxMDAgMTAwXCI+PHBhdGggZD1cIk0xLjIyNTQxIDYxLjUyMjhjLS4yMjI1LS45NDg1LjkwNzQ4LTEuNTQ1OSAxLjU5NjM4LS44NTdMMzkuMzM0MiA5Ny4xNzgyYy42ODg5LjY4ODkuMDkxNSAxLjgxODktLjg1NyAxLjU5NjRDMjAuMDUxNSA5NC40NTIyIDUuNTQ3NzkgNzkuOTQ4NSAxLjIyNTQxIDYxLjUyMjhaTS4wMDE4OTEzNSA0Ni44ODkxYy0uMDE3NjQzNzUuMjgzMy4wODg4NzIxNS41NTk5LjI4OTU3MTY1Ljc2MDZMNTIuMzUwMyA5OS43MDg1Yy4yMDA3LjIwMDcuNDc3My4zMDc1Ljc2MDYuMjg5NiAyLjM2OTItLjE0NzYgNC42OTM4LS40NiA2Ljk2MjQtLjkyNTkuNzY0NS0uMTU3IDEuMDMwMS0xLjA5NjMuNDc4Mi0xLjY0ODFMMi41NzU5NSAzOS40NDg1Yy0uNTUxODYtLjU1MTktMS40OTExNy0uMjg2My0xLjY0ODE3NC40NzgyLS40NjU5MTUgMi4yNjg2LS43NzgzMiA0LjU5MzItLjkyNTg4NDY1IDYuOTYyNFpNNC4yMTA5MyAyOS43MDU0Yy0uMTY2NDkuMzczOC0uMDgxNjkuODEwNi4yMDc2NSAxLjFsNjQuNzc2MDIgNjQuNzc2Yy4yODk0LjI4OTQuNzI2Mi4zNzQyIDEuMS4yMDc3IDEuNzg2MS0uNzk1NiAzLjUxNzEtMS42OTI3IDUuMTg1NS0yLjY4NC41NTIxLS4zMjguNjM3My0xLjA4NjcuMTgzMi0xLjU0MDdMOC40MzU2NiAyNC4zMzY3Yy0uNDU0MDktLjQ1NDEtMS4yMTI3MS0uMzY4OS0xLjU0MDc0LjE4MzItLjk5MTMyIDEuNjY4NC0xLjg4ODQzIDMuMzk5NC0yLjY4Mzk5IDUuMTg1NVpNMTIuNjU4NyAxOC4wNzRjLS4zNzAxLS4zNzAxLS4zOTMtLjk2MzctLjA0NDMtMS4zNTQxQzIxLjc3OTUgNi40NTkzMSAzNS4xMTE0IDAgNDkuOTUxOSAwIDc3LjU5MjcgMCAxMDAgMjIuNDA3MyAxMDAgNTAuMDQ4MWMwIDE0Ljg0MDUtNi40NTkzIDI4LjE3MjQtMTYuNzE5OSAzNy4zMzc1LS4zOTAzLjM0ODctLjk4NC4zMjU4LTEuMzU0Mi0uMDQ0M0wxMi42NTg3IDE4LjA3NFpcIiAvPjwvc3ZnPmAsXG4gICAgICAgICAgICApfWAsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgcHJvdmlkZXJJZDogXCJsaW5lYXJcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQ29ubmVjdCB5b3VyIExpbmVhciBhY2NvdW50XCIsXG4gICAgICB9KSxcbiAgICAgIGNsaWVudElkOiBvcHRpb25zLmNsaWVudElkID8/IFBST1ZJREVSX0NMSUVOVF9JRFMubGluZWFyLFxuICAgICAgYXV0aG9yaXplVXJsOiBvcHRpb25zLmF1dGhvcml6ZVVybCA/PyBcImh0dHBzOi8vbGluZWFyLm9hdXRoLnJheWNhc3QuY29tL2F1dGhvcml6ZVwiLFxuICAgICAgdG9rZW5Vcmw6IG9wdGlvbnMudG9rZW5VcmwgPz8gXCJodHRwczovL2xpbmVhci5vYXV0aC5yYXljYXN0LmNvbS90b2tlblwiLFxuICAgICAgcmVmcmVzaFRva2VuVXJsOiBvcHRpb25zLnJlZnJlc2hUb2tlblVybCA/PyBcImh0dHBzOi8vbGluZWFyLm9hdXRoLnJheWNhc3QuY29tL3JlZnJlc2gtdG9rZW5cIixcbiAgICAgIHNjb3BlOiBvcHRpb25zLnNjb3BlLFxuICAgICAgZXh0cmFQYXJhbWV0ZXJzOiB7XG4gICAgICAgIGFjdG9yOiBcInVzZXJcIixcbiAgICAgIH0sXG4gICAgICBvbkF1dGhvcml6ZTogb3B0aW9ucy5vbkF1dGhvcml6ZSxcbiAgICAgIGJvZHlFbmNvZGluZzogb3B0aW9ucy5ib2R5RW5jb2RpbmcsXG4gICAgICB0b2tlblJlZnJlc2hSZXNwb25zZVBhcnNlcjogb3B0aW9ucy50b2tlblJlZnJlc2hSZXNwb25zZVBhcnNlcixcbiAgICAgIHRva2VuUmVzcG9uc2VQYXJzZXI6IG9wdGlvbnMudG9rZW5SZXNwb25zZVBhcnNlcixcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTbGFjayBPQXV0aCBzZXJ2aWNlIHByb3ZpZGVkIG91dCBvZiB0aGUgYm94LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IHNsYWNrID0gT0F1dGhTZXJ2aWNlLnNsYWNrKHsgc2NvcGU6ICdlbW9qaTpyZWFkJyB9KVxuICAgKiBgYGBcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgc2xhY2sob3B0aW9uczogUHJvdmlkZXJXaXRoRGVmYXVsdENsaWVudE9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IE9BdXRoU2VydmljZSh7XG4gICAgICBjbGllbnQ6IG5ldyBPQXV0aC5QS0NFQ2xpZW50KHtcbiAgICAgICAgcmVkaXJlY3RNZXRob2Q6IE9BdXRoLlJlZGlyZWN0TWV0aG9kLldlYixcbiAgICAgICAgcHJvdmlkZXJOYW1lOiBcIlNsYWNrXCIsXG4gICAgICAgIHByb3ZpZGVySWNvbjogYGRhdGE6aW1hZ2Uvc3ZnK3htbCwke2VuY29kZVVSSUNvbXBvbmVudChcbiAgICAgICAgICBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjczIDczIDEyNCAxMjRcIj48c3R5bGU+LnN0MHtmaWxsOiNlMDFlNWF9LnN0MXtmaWxsOiMzNmM1ZjB9LnN0MntmaWxsOiMyZWI2N2R9LnN0M3tmaWxsOiNlY2IyMmV9PC9zdHlsZT48cGF0aCBkPVwiTTk5LjQgMTUxLjJjMCA3LjEtNS44IDEyLjktMTIuOSAxMi45LTcuMSAwLTEyLjktNS44LTEyLjktMTIuOSAwLTcuMSA1LjgtMTIuOSAxMi45LTEyLjloMTIuOXYxMi45ek0xMDUuOSAxNTEuMmMwLTcuMSA1LjgtMTIuOSAxMi45LTEyLjlzMTIuOSA1LjggMTIuOSAxMi45djMyLjNjMCA3LjEtNS44IDEyLjktMTIuOSAxMi45cy0xMi45LTUuOC0xMi45LTEyLjl2LTMyLjN6XCIgY2xhc3M9XCJzdDBcIi8+PHBhdGggZD1cIk0xMTguOCA5OS40Yy03LjEgMC0xMi45LTUuOC0xMi45LTEyLjkgMC03LjEgNS44LTEyLjkgMTIuOS0xMi45czEyLjkgNS44IDEyLjkgMTIuOXYxMi45aC0xMi45ek0xMTguOCAxMDUuOWM3LjEgMCAxMi45IDUuOCAxMi45IDEyLjlzLTUuOCAxMi45LTEyLjkgMTIuOUg4Ni41Yy03LjEgMC0xMi45LTUuOC0xMi45LTEyLjlzNS44LTEyLjkgMTIuOS0xMi45aDMyLjN6XCIgY2xhc3M9XCJzdDFcIi8+PHBhdGggZD1cIk0xNzAuNiAxMTguOGMwLTcuMSA1LjgtMTIuOSAxMi45LTEyLjkgNy4xIDAgMTIuOSA1LjggMTIuOSAxMi45cy01LjggMTIuOS0xMi45IDEyLjloLTEyLjl2LTEyLjl6TTE2NC4xIDExOC44YzAgNy4xLTUuOCAxMi45LTEyLjkgMTIuOS03LjEgMC0xMi45LTUuOC0xMi45LTEyLjlWODYuNWMwLTcuMSA1LjgtMTIuOSAxMi45LTEyLjkgNy4xIDAgMTIuOSA1LjggMTIuOSAxMi45djMyLjN6XCIgY2xhc3M9XCJzdDJcIi8+PHBhdGggZD1cIk0xNTEuMiAxNzAuNmM3LjEgMCAxMi45IDUuOCAxMi45IDEyLjkgMCA3LjEtNS44IDEyLjktMTIuOSAxMi45LTcuMSAwLTEyLjktNS44LTEyLjktMTIuOXYtMTIuOWgxMi45ek0xNTEuMiAxNjQuMWMtNy4xIDAtMTIuOS01LjgtMTIuOS0xMi45IDAtNy4xIDUuOC0xMi45IDEyLjktMTIuOWgzMi4zYzcuMSAwIDEyLjkgNS44IDEyLjkgMTIuOSAwIDcuMS01LjggMTIuOS0xMi45IDEyLjloLTMyLjN6XCIgY2xhc3M9XCJzdDNcIi8+PC9zdmc+YCxcbiAgICAgICAgKX1gLFxuICAgICAgICBwcm92aWRlcklkOiBcInNsYWNrXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkNvbm5lY3QgeW91ciBTbGFjayBhY2NvdW50XCIsXG4gICAgICB9KSxcbiAgICAgIGNsaWVudElkOiBvcHRpb25zLmNsaWVudElkID8/IFBST1ZJREVSX0NMSUVOVF9JRFMuc2xhY2ssXG4gICAgICBhdXRob3JpemVVcmw6IG9wdGlvbnMuYXV0aG9yaXplVXJsID8/IFwiaHR0cHM6Ly9zbGFjay5vYXV0aC5yYXljYXN0LmNvbS9hdXRob3JpemVcIixcbiAgICAgIHRva2VuVXJsOiBvcHRpb25zLnRva2VuVXJsID8/IFwiaHR0cHM6Ly9zbGFjay5vYXV0aC5yYXljYXN0LmNvbS90b2tlblwiLFxuICAgICAgcmVmcmVzaFRva2VuVXJsOiBvcHRpb25zLnRva2VuVXJsID8/IFwiaHR0cHM6Ly9zbGFjay5vYXV0aC5yYXljYXN0LmNvbS9yZWZyZXNoLXRva2VuXCIsXG4gICAgICBzY29wZTogXCJcIixcbiAgICAgIGV4dHJhUGFyYW1ldGVyczoge1xuICAgICAgICB1c2VyX3Njb3BlOiBvcHRpb25zLnNjb3BlLFxuICAgICAgfSxcbiAgICAgIHBlcnNvbmFsQWNjZXNzVG9rZW46IG9wdGlvbnMucGVyc29uYWxBY2Nlc3NUb2tlbixcbiAgICAgIGJvZHlFbmNvZGluZzogb3B0aW9ucy50b2tlblVybCA/IG9wdGlvbnMuYm9keUVuY29kaW5nID8/IFwidXJsLWVuY29kZWRcIiA6IFwianNvblwiLFxuICAgICAgb25BdXRob3JpemU6IG9wdGlvbnMub25BdXRob3JpemUsXG4gICAgICB0b2tlblJlZnJlc2hSZXNwb25zZVBhcnNlcjogb3B0aW9ucy50b2tlblJlZnJlc2hSZXNwb25zZVBhcnNlcixcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICB0b2tlblJlc3BvbnNlUGFyc2VyOlxuICAgICAgICBvcHRpb25zLnRva2VuUmVzcG9uc2VQYXJzZXIgPz9cbiAgICAgICAgKChyZXNwb25zZTogYW55KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFjY2Vzc190b2tlbjogcmVzcG9uc2UuYXV0aGVkX3VzZXIuYWNjZXNzX3Rva2VuLFxuICAgICAgICAgICAgc2NvcGU6IHJlc3BvbnNlLmF1dGhlZF91c2VyLnNjb3BlLFxuICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFpvb20gT0F1dGggc2VydmljZSBwcm92aWRlZCBvdXQgb2YgdGhlIGJveC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCB6b29tID0gT0F1dGhTZXJ2aWNlLnpvb20oe1xuICAgKiAgIGNsaWVudElkOiAnY3VzdG9tLWNsaWVudC1pZCcsXG4gICAqICAgYXV0aG9yaXplVXJsOiAnaHR0cHM6Ly96b29tLnVzL29hdXRoL2F1dGhvcml6ZScsXG4gICAqICAgdG9rZW5Vcmw6ICdodHRwczovL3pvb20udXMvb2F1dGgvdG9rZW4nLFxuICAgKiAgIHNjb3BlOiAnbWVldGluZzp3cml0ZScsXG4gICAqICAgcGVyc29uYWxBY2Nlc3NUb2tlbjogJ3BlcnNvbmFsLWFjY2Vzcy10b2tlbicsXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgem9vbShvcHRpb25zOiBQcm92aWRlck9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IE9BdXRoU2VydmljZSh7XG4gICAgICBjbGllbnQ6IG5ldyBPQXV0aC5QS0NFQ2xpZW50KHtcbiAgICAgICAgcmVkaXJlY3RNZXRob2Q6IE9BdXRoLlJlZGlyZWN0TWV0aG9kLldlYixcbiAgICAgICAgcHJvdmlkZXJOYW1lOiBcIlpvb21cIixcbiAgICAgICAgcHJvdmlkZXJJY29uOiBgZGF0YTppbWFnZS9zdmcreG1sLCR7ZW5jb2RlVVJJQ29tcG9uZW50KFxuICAgICAgICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDM1MS44NDUgODBcIj48cGF0aCBkPVwiTTczLjc4NiA3OC44MzVIMTAuODhBMTAuODQyIDEwLjg0MiAwIDAgMSAuODMzIDcyLjEyMmExMC44NDEgMTAuODQxIDAgMCAxIDIuMzU3LTExLjg1TDQ2Ljc2NCAxNi43aC0zMS4yM0M2Ljk1NCAxNi42OTkgMCA5Ljc0NCAwIDEuMTY1aDU4LjAxNGM0LjQxNCAwIDguMzU3IDIuNjM0IDEwLjA0NiA2LjcxMmExMC44NDMgMTAuODQzIDAgMCAxLTIuMzU2IDExLjg1TDIyLjEzIDYzLjMwMmgzNi4xMjJjOC41OCAwIDE1LjUzNCA2Ljk1NSAxNS41MzQgMTUuNTM0Wm0yNzguMDU5LTQ4LjU0NEMzNTEuODQ1IDEzLjU4OCAzMzguMjU2IDAgMzIxLjU1MyAwYy04LjkzNCAwLTE2Ljk3NSAzLjg5LTIyLjUyNCAxMC4wNjNDMjkzLjQ4IDMuODkgMjg1LjQ0IDAgMjc2LjUwNSAwYy0xNi43MDMgMC0zMC4yOTEgMTMuNTg4LTMwLjI5MSAzMC4yOTF2NDguNTQ0YzguNTc5IDAgMTUuNTM0LTYuOTU1IDE1LjUzNC0xNS41MzR2LTMzLjAxYzAtOC4xMzcgNi42Mi0xNC43NTcgMTQuNzU3LTE0Ljc1N3MxNC43NTcgNi42MiAxNC43NTcgMTQuNzU3djMzLjAxYzAgOC41OCA2Ljk1NSAxNS41MzQgMTUuNTM0IDE1LjUzNFYzMC4yOTFjMC04LjEzNyA2LjYyLTE0Ljc1NyAxNC43NTctMTQuNzU3czE0Ljc1OCA2LjYyIDE0Ljc1OCAxNC43NTd2MzMuMDFjMCA4LjU4IDYuOTU0IDE1LjUzNCAxNS41MzQgMTUuNTM0VjMwLjI5MVpNMjM4LjQ0NyA0MGMwIDIyLjA5MS0xNy45MDkgNDAtNDAgNDBzLTQwLTE3LjkwOS00MC00MCAxNy45MDgtNDAgNDAtNDAgNDAgMTcuOTA5IDQwIDQwWm0tMTUuNTM0IDBjMC0xMy41MTItMTAuOTU0LTI0LjQ2Ni0yNC40NjYtMjQuNDY2UzE3My45OCAyNi40ODggMTczLjk4IDQwczEwLjk1MyAyNC40NjYgMjQuNDY2IDI0LjQ2NlMyMjIuOTEzIDUzLjUxMiAyMjIuOTEzIDQwWm0tNzAuNjggMGMwIDIyLjA5MS0xNy45MDkgNDAtNDAgNDBzLTQwLTE3LjkwOS00MC00MCAxNy45MDktNDAgNDAtNDAgNDAgMTcuOTA5IDQwIDQwWm0tMTUuNTM0IDBjMC0xMy41MTItMTAuOTU0LTI0LjQ2Ni0yNC40NjYtMjQuNDY2Uzg3Ljc2NyAyNi40ODggODcuNzY3IDQwczEwLjk1NCAyNC40NjYgMjQuNDY2IDI0LjQ2NlMxMzYuNjk5IDUzLjUxMiAxMzYuNjk5IDQwWlwiIHN0eWxlPVwiZmlsbDojMGI1Y2ZmXCIvPjwvc3ZnPmAsXG4gICAgICAgICl9YCxcbiAgICAgICAgcHJvdmlkZXJJZDogXCJ6b29tXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkNvbm5lY3QgeW91ciBab29tIGFjY291bnRcIixcbiAgICAgIH0pLFxuICAgICAgY2xpZW50SWQ6IG9wdGlvbnMuY2xpZW50SWQsXG4gICAgICBhdXRob3JpemVVcmw6IG9wdGlvbnMuYXV0aG9yaXplVXJsID8/IFwiaHR0cHM6Ly96b29tLnVzL29hdXRoL2F1dGhvcml6ZVwiLFxuICAgICAgdG9rZW5Vcmw6IG9wdGlvbnMudG9rZW5VcmwgPz8gXCJodHRwczovL3pvb20udXMvb2F1dGgvdG9rZW5cIixcbiAgICAgIHJlZnJlc2hUb2tlblVybDogb3B0aW9ucy5yZWZyZXNoVG9rZW5VcmwsXG4gICAgICBzY29wZTogb3B0aW9ucy5zY29wZSxcbiAgICAgIHBlcnNvbmFsQWNjZXNzVG9rZW46IG9wdGlvbnMucGVyc29uYWxBY2Nlc3NUb2tlbixcbiAgICAgIGJvZHlFbmNvZGluZzogb3B0aW9ucy5ib2R5RW5jb2RpbmcgPz8gXCJ1cmwtZW5jb2RlZFwiLFxuICAgICAgb25BdXRob3JpemU6IG9wdGlvbnMub25BdXRob3JpemUsXG4gICAgICB0b2tlblJlZnJlc2hSZXNwb25zZVBhcnNlcjogb3B0aW9ucy50b2tlblJlZnJlc2hSZXNwb25zZVBhcnNlcixcbiAgICAgIHRva2VuUmVzcG9uc2VQYXJzZXI6IG9wdGlvbnMudG9rZW5SZXNwb25zZVBhcnNlcixcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWF0ZXMgdGhlIE9BdXRoIGF1dGhvcml6YXRpb24gcHJvY2VzcyBvciByZWZyZXNoZXMgZXhpc3RpbmcgdG9rZW5zIGlmIG5lY2Vzc2FyeS5cbiAgICogSWYgdGhlIGN1cnJlbnQgdG9rZW4gc2V0IGhhcyBhIHJlZnJlc2ggdG9rZW4gYW5kIGl0IGlzIGV4cGlyZWQsIHRoZW4gdGhlIGZ1bmN0aW9uIHdpbGwgcmVmcmVzaCB0aGUgdG9rZW5zLlxuICAgKiBJZiBubyB0b2tlbnMgZXhpc3QsIGl0IHdpbGwgaW5pdGlhdGUgdGhlIE9BdXRoIGF1dGhvcml6YXRpb24gcHJvY2VzcyBhbmQgZmV0Y2ggdGhlIHRva2Vucy5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgYWNjZXNzIHRva2VuIG9idGFpbmVkIGZyb20gdGhlIGF1dGhvcml6YXRpb24gZmxvdywgb3IgbnVsbCBpZiB0aGUgdG9rZW4gY291bGQgbm90IGJlIG9idGFpbmVkLlxuICAgKi9cbiAgYXN5bmMgYXV0aG9yaXplKCkge1xuICAgIGNvbnN0IGN1cnJlbnRUb2tlblNldCA9IGF3YWl0IHRoaXMuY2xpZW50LmdldFRva2VucygpO1xuICAgIGlmIChjdXJyZW50VG9rZW5TZXQ/LmFjY2Vzc1Rva2VuKSB7XG4gICAgICBpZiAoY3VycmVudFRva2VuU2V0LnJlZnJlc2hUb2tlbiAmJiBjdXJyZW50VG9rZW5TZXQuaXNFeHBpcmVkKCkpIHtcbiAgICAgICAgY29uc3QgdG9rZW5zID0gYXdhaXQgdGhpcy5yZWZyZXNoVG9rZW5zKHtcbiAgICAgICAgICB0b2tlbjogY3VycmVudFRva2VuU2V0LnJlZnJlc2hUb2tlbixcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gSW4gdGhlIGNhc2Ugd2hlcmUgdGhlIHJlZnJlc2ggdG9rZW4gZmxvd3MgZmFpbHMsIG5vdGhpbmcgaXMgcmV0dXJuZWQgYW5kIHRoZSBhdXRob3JpemUgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluLlxuICAgICAgICBpZiAodG9rZW5zKSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5jbGllbnQuc2V0VG9rZW5zKHRva2Vucyk7XG4gICAgICAgICAgcmV0dXJuIHRva2Vucy5hY2Nlc3NfdG9rZW47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBjdXJyZW50VG9rZW5TZXQuYWNjZXNzVG9rZW47XG4gICAgfVxuXG4gICAgY29uc3QgYXV0aFJlcXVlc3QgPSBhd2FpdCB0aGlzLmNsaWVudC5hdXRob3JpemF0aW9uUmVxdWVzdCh7XG4gICAgICBlbmRwb2ludDogdGhpcy5hdXRob3JpemVVcmwsXG4gICAgICBjbGllbnRJZDogdGhpcy5jbGllbnRJZCxcbiAgICAgIHNjb3BlOiB0aGlzLnNjb3BlLFxuICAgICAgZXh0cmFQYXJhbWV0ZXJzOiB0aGlzLmV4dHJhUGFyYW1ldGVycyxcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgYXV0aG9yaXphdGlvbkNvZGUgfSA9IGF3YWl0IHRoaXMuY2xpZW50LmF1dGhvcml6ZShhdXRoUmVxdWVzdCk7XG4gICAgY29uc3QgdG9rZW5zID0gYXdhaXQgdGhpcy5mZXRjaFRva2Vucyh7XG4gICAgICBhdXRoUmVxdWVzdCxcbiAgICAgIGF1dGhvcml6YXRpb25Db2RlLFxuICAgIH0pO1xuXG4gICAgYXdhaXQgdGhpcy5jbGllbnQuc2V0VG9rZW5zKHRva2Vucyk7XG5cbiAgICByZXR1cm4gdG9rZW5zLmFjY2Vzc190b2tlbjtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZmV0Y2hUb2tlbnMoe1xuICAgIGF1dGhSZXF1ZXN0LFxuICAgIGF1dGhvcml6YXRpb25Db2RlLFxuICB9OiB7XG4gICAgYXV0aFJlcXVlc3Q6IE9BdXRoLkF1dGhvcml6YXRpb25SZXF1ZXN0O1xuICAgIGF1dGhvcml6YXRpb25Db2RlOiBzdHJpbmc7XG4gIH0pIHtcbiAgICBsZXQgb3B0aW9ucztcbiAgICBpZiAodGhpcy5ib2R5RW5jb2RpbmcgPT09IFwidXJsLWVuY29kZWRcIikge1xuICAgICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgICAgcGFyYW1zLmFwcGVuZChcImNsaWVudF9pZFwiLCB0aGlzLmNsaWVudElkKTtcbiAgICAgIHBhcmFtcy5hcHBlbmQoXCJjb2RlXCIsIGF1dGhvcml6YXRpb25Db2RlKTtcbiAgICAgIHBhcmFtcy5hcHBlbmQoXCJjb2RlX3ZlcmlmaWVyXCIsIGF1dGhSZXF1ZXN0LmNvZGVWZXJpZmllcik7XG4gICAgICBwYXJhbXMuYXBwZW5kKFwiZ3JhbnRfdHlwZVwiLCBcImF1dGhvcml6YXRpb25fY29kZVwiKTtcbiAgICAgIHBhcmFtcy5hcHBlbmQoXCJyZWRpcmVjdF91cmlcIiwgYXV0aFJlcXVlc3QucmVkaXJlY3RVUkkpO1xuXG4gICAgICBvcHRpb25zID0geyBib2R5OiBwYXJhbXMgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIGNsaWVudF9pZDogdGhpcy5jbGllbnRJZCxcbiAgICAgICAgICBjb2RlOiBhdXRob3JpemF0aW9uQ29kZSxcbiAgICAgICAgICBjb2RlX3ZlcmlmaWVyOiBhdXRoUmVxdWVzdC5jb2RlVmVyaWZpZXIsXG4gICAgICAgICAgZ3JhbnRfdHlwZTogXCJhdXRob3JpemF0aW9uX2NvZGVcIixcbiAgICAgICAgICByZWRpcmVjdF91cmk6IGF1dGhSZXF1ZXN0LnJlZGlyZWN0VVJJLFxuICAgICAgICB9KSxcbiAgICAgICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHRoaXMudG9rZW5VcmwsIHsgbWV0aG9kOiBcIlBPU1RcIiwgLi4ub3B0aW9ucyB9KTtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICBjb25zdCByZXNwb25zZVRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICBjb25zb2xlLmVycm9yKFwiZmV0Y2ggdG9rZW5zIGVycm9yOlwiLCByZXNwb25zZVRleHQpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciB3aGlsZSBmZXRjaGluZyB0b2tlbnM6ICR7cmVzcG9uc2Uuc3RhdHVzfSAoJHtyZXNwb25zZS5zdGF0dXNUZXh0fSlcXG4ke3Jlc3BvbnNlVGV4dH1gKTtcbiAgICB9XG4gICAgY29uc3QgdG9rZW5zID0gdGhpcy50b2tlblJlc3BvbnNlUGFyc2VyKGF3YWl0IHJlc3BvbnNlLmpzb24oKSk7XG5cbiAgICAvLyBTb21lIGNsaWVudHMgc3VjaCBhcyBMaW5lYXIgY2FuIHJldHVybiBhIHNjb3BlIGFycmF5IGluc3RlYWQgb2YgYSBzdHJpbmdcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0b2tlbnMuc2NvcGUpID8geyAuLi50b2tlbnMsIHNjb3BlOiB0b2tlbnMuc2NvcGUuam9pbihcIiBcIikgfSA6IHRva2VucztcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcmVmcmVzaFRva2Vucyh7IHRva2VuIH06IHsgdG9rZW46IHN0cmluZyB9KSB7XG4gICAgbGV0IG9wdGlvbnM7XG4gICAgaWYgKHRoaXMuYm9keUVuY29kaW5nID09PSBcInVybC1lbmNvZGVkXCIpIHtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICAgIHBhcmFtcy5hcHBlbmQoXCJjbGllbnRfaWRcIiwgdGhpcy5jbGllbnRJZCk7XG4gICAgICBwYXJhbXMuYXBwZW5kKFwicmVmcmVzaF90b2tlblwiLCB0b2tlbik7XG4gICAgICBwYXJhbXMuYXBwZW5kKFwiZ3JhbnRfdHlwZVwiLCBcInJlZnJlc2hfdG9rZW5cIik7XG5cbiAgICAgIG9wdGlvbnMgPSB7IGJvZHk6IHBhcmFtcyB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgY2xpZW50X2lkOiB0aGlzLmNsaWVudElkLFxuICAgICAgICAgIHJlZnJlc2hfdG9rZW46IHRva2VuLFxuICAgICAgICAgIGdyYW50X3R5cGU6IFwicmVmcmVzaF90b2tlblwiLFxuICAgICAgICB9KSxcbiAgICAgICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHRoaXMucmVmcmVzaFRva2VuVXJsID8/IHRoaXMudG9rZW5VcmwsIHsgbWV0aG9kOiBcIlBPU1RcIiwgLi4ub3B0aW9ucyB9KTtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICBjb25zdCByZXNwb25zZVRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICBjb25zb2xlLmVycm9yKFwicmVmcmVzaCB0b2tlbnMgZXJyb3I6XCIsIHJlc3BvbnNlVGV4dCk7XG4gICAgICAvLyBJZiB0aGUgcmVmcmVzaCB0b2tlbiBpcyBpbnZhbGlkLCBzdG9wIHRoZSBmbG93IGhlcmUsIGxvZyBvdXQgdGhlIHVzZXIgYW5kIHByb21wdCB0aGVtIHRvIHJlLWF1dGhvcml6ZS5cbiAgICAgIHRoaXMuY2xpZW50LmRlc2NyaXB0aW9uID0gYCR7dGhpcy5jbGllbnQucHJvdmlkZXJOYW1lfSBuZWVkcyB5b3UgdG8gc2lnbi1pbiBhZ2Fpbi4gUHJlc3Mg4o+OIG9yIGNsaWNrIHRoZSBidXR0b24gYmVsb3cgdG8gY29udGludWUuYDtcbiAgICAgIGF3YWl0IHRoaXMuY2xpZW50LnJlbW92ZVRva2VucygpO1xuICAgICAgYXdhaXQgdGhpcy5hdXRob3JpemUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdG9rZW5SZXNwb25zZSA9IHRoaXMudG9rZW5SZWZyZXNoUmVzcG9uc2VQYXJzZXIoYXdhaXQgcmVzcG9uc2UuanNvbigpKTtcbiAgICAgIHRva2VuUmVzcG9uc2UucmVmcmVzaF90b2tlbiA9IHRva2VuUmVzcG9uc2UucmVmcmVzaF90b2tlbiA/PyB0b2tlbjtcbiAgICAgIHJldHVybiB0b2tlblJlc3BvbnNlO1xuICAgIH1cbiAgfVxufVxuIiwgImV4cG9ydCBjb25zdCBQUk9WSURFUl9DTElFTlRfSURTID0ge1xuICBhc2FuYTogXCIxMTkxMjAxNzQ1Njg0MzEyXCIsXG4gIGdpdGh1YjogXCI3MjM1ZmU4ZDQyMTU3ZjFmMzhjMFwiLFxuICBsaW5lYXI6IFwiYzhmZjM3YjkyMjVjM2M5YWVmZDdkNjZlYTBlNWI2ZjFcIixcbiAgc2xhY2s6IFwiODUxNzU2ODg0NjkyLjU1NDY5MjcyOTAyMTJcIixcbn07XG4iLCAiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgZW52aXJvbm1lbnQsIE9BdXRoIH0gZnJvbSBcIkByYXljYXN0L2FwaVwiO1xuaW1wb3J0IHR5cGUgeyBPQXV0aFR5cGUsIE9uQXV0aG9yaXplUGFyYW1zIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxubGV0IHRva2VuOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbmxldCB0eXBlOiBPQXV0aFR5cGUgfCBudWxsID0gbnVsbDtcbmxldCBhdXRob3JpemU6IFByb21pc2U8c3RyaW5nPiB8IG51bGwgPSBudWxsO1xubGV0IGdldElkVG9rZW46IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPiB8IG51bGwgPSBudWxsO1xubGV0IG9uQXV0aG9yaXplOiBQcm9taXNlPHZvaWQ+IHwgbnVsbCA9IG51bGw7XG5cbnR5cGUgV2l0aEFjY2Vzc1Rva2VuUGFyYW1ldGVycyA9IHtcbiAgLyoqXG4gICAqIEFuIG9wdGlvbmFsIGluc3RhbmNlIG9mIGEgUEtDRSBDbGllbnQgdGhhdCB5b3UgY2FuIGNyZWF0ZSB1c2luZyBSYXljYXN0IEFQSS5cbiAgICogVGhpcyBjbGllbnQgaXMgdXNlZCB0byByZXR1cm4gdGhlIGBpZFRva2VuYCBhcyBwYXJ0IG9mIHRoZSBgb25BdXRob3JpemVgIGNhbGxiYWNrLlxuICAgKi9cbiAgY2xpZW50PzogT0F1dGguUEtDRUNsaWVudDtcbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gdGhhdCBpbml0aWF0ZXMgdGhlIE9BdXRoIHRva2VuIHJldHJpZXZhbCBwcm9jZXNzXG4gICAqIEByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIGFjY2VzcyB0b2tlbi5cbiAgICovXG4gIGF1dGhvcml6ZTogKCkgPT4gUHJvbWlzZTxzdHJpbmc+O1xuICAvKipcbiAgICogQW4gb3B0aW9uYWwgc3RyaW5nIHRoYXQgcmVwcmVzZW50cyBhbiBhbHJlYWR5IG9idGFpbmVkIHBlcnNvbmFsIGFjY2VzcyB0b2tlblxuICAgKi9cbiAgcGVyc29uYWxBY2Nlc3NUb2tlbj86IHN0cmluZztcbiAgLyoqXG4gICAqIEFuIG9wdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIG9uY2UgdGhlIHVzZXIgaGFzIGJlZW4gcHJvcGVybHkgbG9nZ2VkIGluIHRocm91Z2ggT0F1dGguXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXMgLSBQYXJhbWV0ZXJzIG9mIHRoZSBjYWxsYmFja1xuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy50b2tlbiAtIFRoZSByZXRyaWV2ZWQgYWNjZXNzIHRva2VuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnR5cGUgLSBUaGUgYWNjZXNzIHRva2VuJ3MgdHlwZSAoZWl0aGVyIGBvYXV0aGAgb3IgYHBlcnNvbmFsYClcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuaWRUb2tlbiAtIFRoZSBvcHRpb25hbCBpZCB0b2tlbi4gVGhlIGBpZFRva2VuYCBpcyByZXR1cm5lZCBpZiBgb3B0aW9ucy5jbGllbnRgIGlzIHByb3ZpZGVkIGFuZCBpZiBpdCdzIHJldHVybmVkIGluIHRoZSBpbml0aWFsIHRva2VuIHNldC5cbiAgICovXG4gIG9uQXV0aG9yaXplPzogKHBhcmFtczogT25BdXRob3JpemVQYXJhbXMpID0+IHZvaWQ7XG59O1xuXG4vKipcbiAqIFRoZSBjb21wb25lbnQgKGZvciBhIHZpZXcvbWVudS1iYXIgY29tbWFuZHMpIG9yIGZ1bmN0aW9uIChmb3IgYSBuby12aWV3IGNvbW1hbmQpIHRoYXQgaXMgcGFzc2VkIHRvIHdpdGhBY2Nlc3NUb2tlbi5cbiAqL1xuZXhwb3J0IHR5cGUgV2l0aEFjY2Vzc1Rva2VuQ29tcG9uZW50T3JGbjxUID0gYW55LCBVID0gYW55PiA9ICgocGFyYW1zOiBUKSA9PiBQcm9taXNlPFU+IHwgVSkgfCBSZWFjdC5Db21wb25lbnRUeXBlPFQ+O1xuXG4vKipcbiAqIEhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gd3JhcCBhIGdpdmVuIGNvbXBvbmVudCBvciBmdW5jdGlvbiBhbmQgc2V0IGFuIGFjY2VzcyB0b2tlbiBpbiBhIHNoYXJlZCBnbG9iYWwgdmFyaWFibGUuXG4gKlxuICogVGhlIGZ1bmN0aW9uIGludGVyY2VwdHMgdGhlIGNvbXBvbmVudCByZW5kZXJpbmcgcHJvY2VzcyB0byBlaXRoZXIgZmV0Y2ggYW4gT0F1dGggdG9rZW4gYXN5bmNocm9ub3VzbHlcbiAqIG9yIHVzZSBhIHByb3ZpZGVkIHBlcnNvbmFsIGFjY2VzcyB0b2tlbi4gQSBnbG9iYWwgdmFyaWFibGUgd2lsbCBiZSB0aGVuIHNldCB3aXRoIHRoZSByZWNlaXZlZCB0b2tlblxuICogdGhhdCB5b3UgY2FuIGdldCB3aXRoIHRoZSBgZ2V0QWNjZXNzVG9rZW5gIGZ1bmN0aW9uLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBEZXRhaWwgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG4gKiBpbXBvcnQgeyBPQXV0aFNlcnZpY2UsIGdldEFjY2Vzc1Rva2VuLCB3aXRoQWNjZXNzVG9rZW4gfSBmcm9tIFwiQHJheWNhc3QvdXRpbHNcIjtcbiAqXG4gKiBjb25zdCBnaXRodWIgPSBPQXV0aFNlcnZpY2UuZ2l0aHViKHsgc2NvcGU6IFwibm90aWZpY2F0aW9ucyByZXBvIHJlYWQ6b3JnIHJlYWQ6dXNlciByZWFkOnByb2plY3RcIiB9KTtcbiAqXG4gKiBmdW5jdGlvbiBBdXRob3JpemVkQ29tcG9uZW50KCkge1xuICogIGNvbnN0IHsgdG9rZW4gfSA9IGdldEFjY2Vzc1Rva2VuKCk7XG4gKiAgLi4uXG4gKiB9XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgd2l0aEFjY2Vzc1Rva2VuKGdpdGh1YikoQXV0aG9yaXplZENvbXBvbmVudCk7XG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJucyB7UmVhY3QuQ29tcG9uZW50VHlwZTxUPn0gVGhlIHdyYXBwZWQgY29tcG9uZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aEFjY2Vzc1Rva2VuPFQgPSBhbnksIFUgPSBhbnk+KFxuICBvcHRpb25zOiBXaXRoQWNjZXNzVG9rZW5QYXJhbWV0ZXJzLFxuKTogPFYgZXh0ZW5kcyBXaXRoQWNjZXNzVG9rZW5Db21wb25lbnRPckZuPFQsIFU+PihcbiAgZm5PckNvbXBvbmVudDogVixcbikgPT4gViBleHRlbmRzIFJlYWN0LkNvbXBvbmVudFR5cGU8VD4gPyBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxUPiA6IChwcm9wczogVCkgPT4gUHJvbWlzZTxVPjtcbmV4cG9ydCBmdW5jdGlvbiB3aXRoQWNjZXNzVG9rZW48VD4ob3B0aW9uczogV2l0aEFjY2Vzc1Rva2VuUGFyYW1ldGVycykge1xuICBpZiAoZW52aXJvbm1lbnQuY29tbWFuZE1vZGUgPT09IFwibm8tdmlld1wiKSB7XG4gICAgcmV0dXJuIChmbjogKHByb3BzOiBUKSA9PiBQcm9taXNlPHZvaWQ+IHwgKCgpID0+IHZvaWQpKSA9PiB7XG4gICAgICBjb25zdCBub1ZpZXdGbiA9IGFzeW5jIChwcm9wczogVCkgPT4ge1xuICAgICAgICBpZiAoIXRva2VuKSB7XG4gICAgICAgICAgdG9rZW4gPSBvcHRpb25zLnBlcnNvbmFsQWNjZXNzVG9rZW4gPz8gKGF3YWl0IG9wdGlvbnMuYXV0aG9yaXplKCkpO1xuICAgICAgICAgIHR5cGUgPSBvcHRpb25zLnBlcnNvbmFsQWNjZXNzVG9rZW4gPyBcInBlcnNvbmFsXCIgOiBcIm9hdXRoXCI7XG4gICAgICAgICAgY29uc3QgaWRUb2tlbiA9IChhd2FpdCBvcHRpb25zLmNsaWVudD8uZ2V0VG9rZW5zKCkpPy5pZFRva2VuO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbnMub25BdXRob3JpemUpIHtcbiAgICAgICAgICAgIGF3YWl0IFByb21pc2UucmVzb2x2ZShvcHRpb25zLm9uQXV0aG9yaXplKHsgdG9rZW4sIHR5cGUsIGlkVG9rZW4gfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmbihwcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gbm9WaWV3Rm47XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiAoQ29tcG9uZW50OiBSZWFjdC5Db21wb25lbnRUeXBlPFQ+KSA9PiB7XG4gICAgY29uc3QgV3JhcHBlZENvbXBvbmVudDogUmVhY3QuQ29tcG9uZW50VHlwZTxUPiA9IChwcm9wcykgPT4ge1xuICAgICAgaWYgKG9wdGlvbnMucGVyc29uYWxBY2Nlc3NUb2tlbikge1xuICAgICAgICB0b2tlbiA9IG9wdGlvbnMucGVyc29uYWxBY2Nlc3NUb2tlbjtcbiAgICAgICAgdHlwZSA9IFwicGVyc29uYWxcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghYXV0aG9yaXplKSB7XG4gICAgICAgICAgYXV0aG9yaXplID0gb3B0aW9ucy5hdXRob3JpemUoKTtcbiAgICAgICAgfVxuICAgICAgICB0b2tlbiA9IFJlYWN0LnVzZShhdXRob3JpemUpO1xuICAgICAgICB0eXBlID0gXCJvYXV0aFwiO1xuICAgICAgfVxuXG4gICAgICBsZXQgaWRUb2tlbjogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgICAgaWYgKG9wdGlvbnMuY2xpZW50KSB7XG4gICAgICAgIGlmICghZ2V0SWRUb2tlbikge1xuICAgICAgICAgIGdldElkVG9rZW4gPSBvcHRpb25zLmNsaWVudD8uZ2V0VG9rZW5zKCkudGhlbigodG9rZW5zKSA9PiB0b2tlbnM/LmlkVG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIGlkVG9rZW4gPSBSZWFjdC51c2UoZ2V0SWRUb2tlbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLm9uQXV0aG9yaXplKSB7XG4gICAgICAgIGlmICghb25BdXRob3JpemUpIHtcbiAgICAgICAgICBvbkF1dGhvcml6ZSA9IFByb21pc2UucmVzb2x2ZShvcHRpb25zLm9uQXV0aG9yaXplKHsgdG9rZW46IHRva2VuISwgdHlwZSwgaWRUb2tlbiB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgUmVhY3QudXNlKG9uQXV0aG9yaXplKTtcbiAgICAgIH1cblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgICAgLy8gQHRzLWlnbm9yZSB0b28gY29tcGxpY2F0ZWQgZm9yIFRTXG4gICAgICByZXR1cm4gPENvbXBvbmVudCB7Li4ucHJvcHN9IC8+O1xuICAgIH07XG5cbiAgICBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gYHdpdGhBY2Nlc3NUb2tlbigke0NvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZX0pYDtcblxuICAgIHJldHVybiBXcmFwcGVkQ29tcG9uZW50O1xuICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGFjY2VzcyB0b2tlbiBhbmQgaXRzIHR5cGUuIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIG11c3QgYmUgY2FsbGVkIGluIGEgY29tcG9uZW50IHdyYXBwZWQgd2l0aCBgd2l0aEFjY2Vzc1Rva2VuYC5cbiAqXG4gKiBXaWxsIHRocm93IGFuIEVycm9yIGlmIGNhbGxlZCBvdXRzaWRlIG9mIGEgZnVuY3Rpb24gb3IgY29tcG9uZW50IHdyYXBwZWQgd2l0aCBgd2l0aEFjY2Vzc1Rva2VuYFxuICpcbiAqIEByZXR1cm5zIHt7IHRva2VuOiBzdHJpbmcsIHR5cGU6IFwib2F1dGhcIiB8IFwicGVyc29uYWxcIiB9fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgYHRva2VuYFxuICogYW5kIGl0cyBgdHlwZWAsIHdoZXJlIHR5cGUgY2FuIGJlIGVpdGhlciAnb2F1dGgnIGZvciBPQXV0aCB0b2tlbnMgb3IgJ3BlcnNvbmFsJyBmb3IgYVxuICogcGVyc29uYWwgYWNjZXNzIHRva2VuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWNjZXNzVG9rZW4oKToge1xuICB0b2tlbjogc3RyaW5nO1xuICAvKiogYG9hdXRoYCBmb3IgT0F1dGggdG9rZW5zIG9yIGBwZXJzb25hbGAgZm9yIHBlcnNvbmFsIGFjY2VzcyB0b2tlbiAqL1xuICB0eXBlOiBcIm9hdXRoXCIgfCBcInBlcnNvbmFsXCI7XG59IHtcbiAgaWYgKCF0b2tlbiB8fCAhdHlwZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImdldEFjY2Vzc1Rva2VuIG11c3QgYmUgdXNlZCB3aGVuIGF1dGhlbnRpY2F0ZWQgKGVnLiB1c2VkIGluc2lkZSBgd2l0aEFjY2Vzc1Rva2VuYClcIik7XG4gIH1cblxuICByZXR1cm4geyB0b2tlbiwgdHlwZSB9O1xufVxuIiwgImltcG9ydCB7IGVudmlyb25tZW50LCBMYXVuY2hQcm9wcywgTGF1bmNoVHlwZSB9IGZyb20gXCJAcmF5Y2FzdC9hcGlcIjtcbmltcG9ydCBmcyBmcm9tIFwibm9kZTpmc1wiO1xuaW1wb3J0IHBhdGggZnJvbSBcIm5vZGU6cGF0aFwiO1xuXG5leHBvcnQgZW51bSBEZWVwbGlua1R5cGUge1xuICAvKiogQSBzY3JpcHQgY29tbWFuZCAqL1xuICBTY3JpcHRDb21tYW5kID0gXCJzY3JpcHQtY29tbWFuZFwiLFxuICAvKiogQW4gZXh0ZW5zaW9uIGNvbW1hbmQgKi9cbiAgRXh0ZW5zaW9uID0gXCJleHRlbnNpb25cIixcbn1cblxuLyoqXG4gKiBPcHRpb25zIGZvciBjcmVhdGluZyBhIGRlZXBsaW5rIHRvIGEgc2NyaXB0IGNvbW1hbmQuXG4gKi9cbmV4cG9ydCB0eXBlIENyZWF0ZVNjcmlwdENvbW1hbmREZWVwbGlua09wdGlvbnMgPSB7XG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiBkZWVwbGluaywgd2hpY2ggc2hvdWxkIGJlIFwic2NyaXB0LWNvbW1hbmRcIi5cbiAgICovXG4gIHR5cGU6IERlZXBsaW5rVHlwZS5TY3JpcHRDb21tYW5kO1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGNvbW1hbmQuXG4gICAqL1xuICBjb21tYW5kOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBJZiB0aGUgY29tbWFuZCBhY2NlcHRzIGFyZ3VtZW50cywgdGhleSBjYW4gYmUgcGFzc2VkIHVzaW5nIHRoaXMgcXVlcnkgcGFyYW1ldGVyLlxuICAgKi9cbiAgYXJndW1lbnRzPzogc3RyaW5nW107XG59O1xuXG4vKipcbiAqIEJhc2Ugb3B0aW9ucyBmb3IgY3JlYXRpbmcgYSBkZWVwbGluayB0byBhbiBleHRlbnNpb24uXG4gKi9cbmV4cG9ydCB0eXBlIENyZWF0ZUV4dGVuc2lvbkRlZXBsaW5rQmFzZU9wdGlvbnMgPSB7XG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiBkZWVwbGluaywgd2hpY2ggc2hvdWxkIGJlIFwiZXh0ZW5zaW9uXCIuXG4gICAqL1xuICB0eXBlPzogRGVlcGxpbmtUeXBlLkV4dGVuc2lvbjtcbiAgLyoqXG4gICAqIFRoZSBjb21tYW5kIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXh0ZW5zaW9uLlxuICAgKi9cbiAgY29tbWFuZDogc3RyaW5nO1xuICAvKipcbiAgICogRWl0aGVyIFwidXNlckluaXRpYXRlZFwiLCB3aGljaCBydW5zIHRoZSBjb21tYW5kIGluIHRoZSBmb3JlZ3JvdW5kLCBvciBcImJhY2tncm91bmRcIiwgd2hpY2ggc2tpcHMgYnJpbmdpbmcgUmF5Y2FzdCB0byB0aGUgZnJvbnQuXG4gICAqL1xuICBsYXVuY2hUeXBlPzogTGF1bmNoVHlwZTtcbiAgLyoqXG4gICAqIElmIHRoZSBjb21tYW5kIGFjY2VwdHMgYXJndW1lbnRzLCB0aGV5IGNhbiBiZSBwYXNzZWQgdXNpbmcgdGhpcyBxdWVyeSBwYXJhbWV0ZXIuXG4gICAqL1xuICBhcmd1bWVudHM/OiBMYXVuY2hQcm9wc1tcImFyZ3VtZW50c1wiXTtcbiAgLyoqXG4gICAqIElmIHRoZSBjb21tYW5kIG1ha2UgdXNlIG9mIExhdW5jaENvbnRleHQsIGl0IGNhbiBiZSBwYXNzZWQgdXNpbmcgdGhpcyBxdWVyeSBwYXJhbWV0ZXIuXG4gICAqL1xuICBjb250ZXh0PzogTGF1bmNoUHJvcHNbXCJsYXVuY2hDb250ZXh0XCJdO1xuICAvKipcbiAgICogU29tZSB0ZXh0IHRvIHByZWZpbGwgdGhlIHNlYXJjaCBiYXIgb3IgZmlyc3QgdGV4dCBpbnB1dCBvZiB0aGUgY29tbWFuZFxuICAgKi9cbiAgZmFsbGJhY2tUZXh0Pzogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBPcHRpb25zIGZvciBjcmVhdGluZyBhIGRlZXBsaW5rIHRvIGFuIGV4dGVuc2lvbiBmcm9tIGFub3RoZXIgZXh0ZW5zaW9uLlxuICogUmVxdWlyZXMgYm90aCB0aGUgb3duZXJPckF1dGhvck5hbWUgYW5kIGV4dGVuc2lvbk5hbWUuXG4gKi9cbmV4cG9ydCB0eXBlIENyZWF0ZUludGVyRXh0ZW5zaW9uRGVlcGxpbmtPcHRpb25zID0gQ3JlYXRlRXh0ZW5zaW9uRGVlcGxpbmtCYXNlT3B0aW9ucyAmIHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBvd25lciBvciBhdXRob3Igb2YgdGhlIGV4dGVuc2lvbi5cbiAgICovXG4gIG93bmVyT3JBdXRob3JOYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZXh0ZW5zaW9uLlxuICAgKi9cbiAgZXh0ZW5zaW9uTmFtZTogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBPcHRpb25zIGZvciBjcmVhdGluZyBhIGRlZXBsaW5rIHRvIGFuIGV4dGVuc2lvbi5cbiAqL1xuZXhwb3J0IHR5cGUgQ3JlYXRlRXh0ZW5zaW9uRGVlcGxpbmtPcHRpb25zID0gQ3JlYXRlSW50ZXJFeHRlbnNpb25EZWVwbGlua09wdGlvbnMgfCBDcmVhdGVFeHRlbnNpb25EZWVwbGlua0Jhc2VPcHRpb25zO1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIGNyZWF0aW5nIGEgZGVlcGxpbmsuXG4gKi9cbmV4cG9ydCB0eXBlIENyZWF0ZURlZXBsaW5rT3B0aW9ucyA9IENyZWF0ZVNjcmlwdENvbW1hbmREZWVwbGlua09wdGlvbnMgfCBDcmVhdGVFeHRlbnNpb25EZWVwbGlua09wdGlvbnM7XG5cbmZ1bmN0aW9uIGdldFByb3RvY29sKCkge1xuICByZXR1cm4gZW52aXJvbm1lbnQucmF5Y2FzdFZlcnNpb24uaW5jbHVkZXMoXCJhbHBoYVwiKSA/IFwicmF5Y2FzdGludGVybmFsOi8vXCIgOiBcInJheWNhc3Q6Ly9cIjtcbn1cblxuZnVuY3Rpb24gZ2V0T3duZXJPckF1dGhvck5hbWUoKSB7XG4gIGNvbnN0IHBhY2thZ2VKU09OID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMocGF0aC5qb2luKGVudmlyb25tZW50LmFzc2V0c1BhdGgsIFwiLi5cIiwgXCJwYWNrYWdlLmpzb25cIiksIFwidXRmOFwiKSk7XG4gIHJldHVybiBwYWNrYWdlSlNPTi5vd25lciB8fCBwYWNrYWdlSlNPTi5hdXRob3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTY3JpcHRDb21tYW5kRGVlcGxpbmsob3B0aW9uczogQ3JlYXRlU2NyaXB0Q29tbWFuZERlZXBsaW5rT3B0aW9ucyk6IHN0cmluZyB7XG4gIGxldCB1cmwgPSBgJHtnZXRQcm90b2NvbCgpfXNjcmlwdC1jb21tYW5kcy8ke29wdGlvbnMuY29tbWFuZH1gO1xuXG4gIGlmIChvcHRpb25zLmFyZ3VtZW50cykge1xuICAgIGxldCBwYXJhbXMgPSBcIlwiO1xuICAgIGZvciAoY29uc3QgYXJnIG9mIG9wdGlvbnMuYXJndW1lbnRzKSB7XG4gICAgICBwYXJhbXMgKz0gXCImYXJndW1lbnRzPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZyk7XG4gICAgfVxuICAgIHVybCArPSBcIj9cIiArIHBhcmFtcy5zdWJzdHJpbmcoMSk7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXh0ZW5zaW9uRGVlcGxpbmsob3B0aW9uczogQ3JlYXRlRXh0ZW5zaW9uRGVlcGxpbmtPcHRpb25zKTogc3RyaW5nIHtcbiAgbGV0IG93bmVyT3JBdXRob3JOYW1lID0gZ2V0T3duZXJPckF1dGhvck5hbWUoKTtcbiAgbGV0IGV4dGVuc2lvbk5hbWUgPSBlbnZpcm9ubWVudC5leHRlbnNpb25OYW1lO1xuXG4gIGlmIChcIm93bmVyT3JBdXRob3JOYW1lXCIgaW4gb3B0aW9ucyAmJiBcImV4dGVuc2lvbk5hbWVcIiBpbiBvcHRpb25zKSB7XG4gICAgb3duZXJPckF1dGhvck5hbWUgPSBvcHRpb25zLm93bmVyT3JBdXRob3JOYW1lO1xuICAgIGV4dGVuc2lvbk5hbWUgPSBvcHRpb25zLmV4dGVuc2lvbk5hbWU7XG4gIH1cblxuICBsZXQgdXJsID0gYCR7Z2V0UHJvdG9jb2woKX1leHRlbnNpb25zLyR7b3duZXJPckF1dGhvck5hbWV9LyR7ZXh0ZW5zaW9uTmFtZX0vJHtvcHRpb25zLmNvbW1hbmR9YDtcblxuICBsZXQgcGFyYW1zID0gXCJcIjtcbiAgaWYgKG9wdGlvbnMubGF1bmNoVHlwZSkge1xuICAgIHBhcmFtcyArPSBcIiZsYXVuY2hUeXBlPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KG9wdGlvbnMubGF1bmNoVHlwZSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5hcmd1bWVudHMpIHtcbiAgICBwYXJhbXMgKz0gXCImYXJndW1lbnRzPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KG9wdGlvbnMuYXJndW1lbnRzKSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5jb250ZXh0KSB7XG4gICAgcGFyYW1zICs9IFwiJmNvbnRleHQ9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5jb250ZXh0KSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5mYWxsYmFja1RleHQpIHtcbiAgICBwYXJhbXMgKz0gXCImZmFsbGJhY2tUZXh0PVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KG9wdGlvbnMuZmFsbGJhY2tUZXh0KTtcbiAgfVxuXG4gIGlmIChwYXJhbXMpIHtcbiAgICB1cmwgKz0gXCI/XCIgKyBwYXJhbXMuc3Vic3RyaW5nKDEpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVlcGxpbmsgdG8gYSBzY3JpcHQgY29tbWFuZCBvciBleHRlbnNpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWVwbGluayhvcHRpb25zOiBDcmVhdGVEZWVwbGlua09wdGlvbnMpOiBzdHJpbmcge1xuICBpZiAob3B0aW9ucy50eXBlID09PSBEZWVwbGlua1R5cGUuU2NyaXB0Q29tbWFuZCkge1xuICAgIHJldHVybiBjcmVhdGVTY3JpcHRDb21tYW5kRGVlcGxpbmsob3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNyZWF0ZUV4dGVuc2lvbkRlZXBsaW5rKG9wdGlvbnMpO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgYmFzZUV4ZWN1dGVTUUwgfSBmcm9tIFwiLi9zcWwtdXRpbHNcIjtcblxuLyoqXG4gKiBFeGVjdXRlcyBhIFNRTCBxdWVyeSBvbiBhIGxvY2FsIFNRTGl0ZSBkYXRhYmFzZSBhbmQgcmV0dXJucyB0aGUgcXVlcnkgcmVzdWx0IGluIEpTT04gZm9ybWF0LlxuICpcbiAqIEBwYXJhbSBkYXRhYmFzZVBhdGggLSBUaGUgcGF0aCB0byB0aGUgU1FMaXRlIGRhdGFiYXNlIGZpbGUuXG4gKiBAcGFyYW0gcXVlcnkgLSBUaGUgU1FMIHF1ZXJ5IHRvIGV4ZWN1dGUuXG4gKiBAcmV0dXJucyBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBhcnJheSBvZiBvYmplY3RzIHJlcHJlc2VudGluZyB0aGUgcXVlcnkgcmVzdWx0cy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgY2xvc2VNYWluV2luZG93LCBDbGlwYm9hcmQgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG4gKiBpbXBvcnQgeyBleGVjdXRlU1FMIH0gZnJvbSBcIkByYXljYXN0L3V0aWxzXCI7XG4gKlxuICogdHlwZSBNZXNzYWdlID0geyBib2R5OiBzdHJpbmc7IGNvZGU6IHN0cmluZyB9O1xuICpcbiAqIGNvbnN0IERCX1BBVEggPSBcIi9wYXRoL3RvL2NoYXQuZGJcIjtcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBDb21tYW5kKCkge1xuICogICBjb25zdCBxdWVyeSA9IGBTRUxFQ1QgYm9keSwgY29kZSBGUk9NIC4uLmBcbiAqXG4gKiAgIGNvbnN0IG1lc3NhZ2VzID0gYXdhaXQgZXhlY3V0ZVNRTDxNZXNzYWdlPihEQl9QQVRILCBxdWVyeSk7XG4gKlxuICogICBpZiAobWVzc2FnZXMubGVuZ3RoID4gMCkge1xuICogICAgIGNvbnN0IGxhdGVzdENvZGUgPSBtZXNzYWdlc1swXS5jb2RlO1xuICogICAgIGF3YWl0IENsaXBib2FyZC5wYXN0ZShsYXRlc3RDb2RlKTtcbiAqICAgICBhd2FpdCBjbG9zZU1haW5XaW5kb3coKTtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlU1FMPFQgPSB1bmtub3duPihkYXRhYmFzZVBhdGg6IHN0cmluZywgcXVlcnk6IHN0cmluZykge1xuICByZXR1cm4gYmFzZUV4ZWN1dGVTUUw8VD4oZGF0YWJhc2VQYXRoLCBxdWVyeSk7XG59XG4iLCAiaW1wb3J0IGNoaWxkUHJvY2VzcyBmcm9tIFwibm9kZTpjaGlsZF9wcm9jZXNzXCI7XG5pbXBvcnQge1xuICBkZWZhdWx0UGFyc2luZyxcbiAgZ2V0U3Bhd25lZFByb21pc2UsXG4gIGdldFNwYXduZWRSZXN1bHQsXG4gIGhhbmRsZU91dHB1dCxcbiAgUGFyc2VFeGVjT3V0cHV0SGFuZGxlcixcbn0gZnJvbSBcIi4vZXhlYy11dGlsc1wiO1xuXG50eXBlIEFwcGxlU2NyaXB0T3B0aW9ucyA9IHtcbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQsIGBydW5BcHBsZVNjcmlwdGAgcmV0dXJucyBpdHMgcmVzdWx0cyBpbiBodW1hbi1yZWFkYWJsZSBmb3JtOiBzdHJpbmdzIGRvIG5vdCBoYXZlIHF1b3RlcyBhcm91bmQgdGhlbSwgY2hhcmFjdGVycyBhcmUgbm90IGVzY2FwZWQsIGJyYWNlcyBmb3IgbGlzdHMgYW5kIHJlY29yZHMgYXJlIG9taXR0ZWQsIGV0Yy4gVGhpcyBpcyBnZW5lcmFsbHkgbW9yZSB1c2VmdWwsIGJ1dCBjYW4gaW50cm9kdWNlIGFtYmlndWl0aWVzLiBGb3IgZXhhbXBsZSwgdGhlIGxpc3RzIGB7XCJmb29cIiwgXCJiYXJcIn1gIGFuZCBge3tcImZvb1wiLCB7XCJiYXJcIn19fWAgd291bGQgYm90aCBiZSBkaXNwbGF5ZWQgYXMg4oCYZm9vLCBiYXLigJkuIFRvIHNlZSB0aGUgcmVzdWx0cyBpbiBhbiB1bmFtYmlndW91cyBmb3JtIHRoYXQgY291bGQgYmUgcmVjb21waWxlZCBpbnRvIHRoZSBzYW1lIHZhbHVlLCBzZXQgYGh1bWFuUmVhZGFibGVPdXRwdXRgIHRvIGBmYWxzZWAuXG4gICAqXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGh1bWFuUmVhZGFibGVPdXRwdXQ/OiBib29sZWFuO1xuICAvKipcbiAgICogV2hldGhlciB0aGUgc2NyaXB0IGlzIHVzaW5nIFtgQXBwbGVTY3JpcHRgXShodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9hcmNoaXZlL2RvY3VtZW50YXRpb24vQXBwbGVTY3JpcHQvQ29uY2VwdHVhbC9BcHBsZVNjcmlwdExhbmdHdWlkZS9pbnRyb2R1Y3Rpb24vQVNMUl9pbnRyby5odG1sIy8vYXBwbGVfcmVmL2RvYy91aWQvVFA0MDAwMDk4Mykgb3IgW2BKYXZhU2NyaXB0YF0oaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS9yZWxlYXNlbm90ZXMvSW50ZXJhcHBsaWNhdGlvbkNvbW11bmljYXRpb24vUk4tSmF2YVNjcmlwdEZvckF1dG9tYXRpb24vQXJ0aWNsZXMvSW50cm9kdWN0aW9uLmh0bWwjLy9hcHBsZV9yZWYvZG9jL3VpZC9UUDQwMDE0NTA4LUNIMTExLVNXMSkuXG4gICAqXG4gICAqIEBkZWZhdWx0IFwiQXBwbGVTY3JpcHRcIlxuICAgKi9cbiAgbGFuZ3VhZ2U/OiBcIkFwcGxlU2NyaXB0XCIgfCBcIkphdmFTY3JpcHRcIjtcbiAgLyoqXG4gICAqIEEgU2lnbmFsIG9iamVjdCB0aGF0IGFsbG93cyB5b3UgdG8gYWJvcnQgdGhlIHJlcXVlc3QgaWYgcmVxdWlyZWQgdmlhIGFuIEFib3J0Q29udHJvbGxlciBvYmplY3QuXG4gICAqL1xuICBzaWduYWw/OiBBYm9ydFNpZ25hbDtcbiAgLyoqIElmIHRpbWVvdXQgaXMgZ3JlYXRlciB0aGFuIGAwYCwgdGhlIHBhcmVudCB3aWxsIHNlbmQgdGhlIHNpZ25hbCBgU0lHVEVSTWAgaWYgdGhlIGNoaWxkIHJ1bnMgbG9uZ2VyIHRoYW4gdGltZW91dCBtaWxsaXNlY29uZHMuXG4gICAqXG4gICAqIEBkZWZhdWx0IDEwMDAwXG4gICAqL1xuICB0aW1lb3V0PzogbnVtYmVyO1xufTtcblxuLyoqXG4gKiBFeGVjdXRlcyBhbiBBcHBsZVNjcmlwdCBzY3JpcHQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IHNob3dIVUQgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG4gKiBpbXBvcnQgeyBydW5BcHBsZVNjcmlwdCwgc2hvd0ZhaWx1cmVUb2FzdCB9IGZyb20gXCJAcmF5Y2FzdC91dGlsc1wiO1xuICpcbiAqIGV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAqICAgdHJ5IHtcbiAqICAgICBjb25zdCByZXMgPSBhd2FpdCBydW5BcHBsZVNjcmlwdChcbiAqICAgICAgIGBcbiAqICAgICAgIG9uIHJ1biBhcmd2XG4gKiAgICAgICAgIHJldHVybiBcImhlbGxvLCBcIiAmIGl0ZW0gMSBvZiBhcmd2ICYgXCIuXCJcbiAqICAgICAgIGVuZCBydW5cbiAqICAgICAgIGAsXG4gKiAgICAgICBbXCJ3b3JsZFwiXVxuICogICAgICk7XG4gKiAgICAgYXdhaXQgc2hvd0hVRChyZXMpO1xuICogICB9IGNhdGNoIChlcnJvcikge1xuICogICAgIHNob3dGYWlsdXJlVG9hc3QoZXJyb3IsIHsgdGl0bGU6IFwiQ291bGQgbm90IHJ1biBBcHBsZVNjcmlwdFwiIH0pO1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1bkFwcGxlU2NyaXB0PFQgPSBzdHJpbmc+KFxuICBzY3JpcHQ6IHN0cmluZyxcbiAgb3B0aW9ucz86IEFwcGxlU2NyaXB0T3B0aW9ucyAmIHtcbiAgICBwYXJzZU91dHB1dD86IFBhcnNlRXhlY091dHB1dEhhbmRsZXI8VCwgc3RyaW5nLCBBcHBsZVNjcmlwdE9wdGlvbnM+O1xuICB9LFxuKTogUHJvbWlzZTxzdHJpbmc+O1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1bkFwcGxlU2NyaXB0PFQgPSBzdHJpbmc+KFxuICBzY3JpcHQ6IHN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBhcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgc2NyaXB0LlxuICAgKi9cbiAgYXJnczogc3RyaW5nW10sXG4gIG9wdGlvbnM/OiBBcHBsZVNjcmlwdE9wdGlvbnMgJiB7XG4gICAgcGFyc2VPdXRwdXQ/OiBQYXJzZUV4ZWNPdXRwdXRIYW5kbGVyPFQsIHN0cmluZywgQXBwbGVTY3JpcHRPcHRpb25zPjtcbiAgfSxcbik6IFByb21pc2U8c3RyaW5nPjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBydW5BcHBsZVNjcmlwdDxUID0gc3RyaW5nPihcbiAgc2NyaXB0OiBzdHJpbmcsXG4gIG9wdGlvbnNPckFyZ3M/OlxuICAgIHwgc3RyaW5nW11cbiAgICB8IChBcHBsZVNjcmlwdE9wdGlvbnMgJiB7XG4gICAgICAgIHBhcnNlT3V0cHV0PzogUGFyc2VFeGVjT3V0cHV0SGFuZGxlcjxULCBzdHJpbmcsIEFwcGxlU2NyaXB0T3B0aW9ucz47XG4gICAgICB9KSxcbiAgb3B0aW9ucz86IEFwcGxlU2NyaXB0T3B0aW9ucyAmIHtcbiAgICBwYXJzZU91dHB1dD86IFBhcnNlRXhlY091dHB1dEhhbmRsZXI8VCwgc3RyaW5nLCBBcHBsZVNjcmlwdE9wdGlvbnM+O1xuICB9LFxuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgaWYgKHByb2Nlc3MucGxhdGZvcm0gIT09IFwiZGFyd2luXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBcHBsZVNjcmlwdCBpcyBvbmx5IHN1cHBvcnRlZCBvbiBtYWNPU1wiKTtcbiAgfVxuXG4gIGNvbnN0IHsgaHVtYW5SZWFkYWJsZU91dHB1dCwgbGFuZ3VhZ2UsIHRpbWVvdXQsIC4uLmV4ZWNPcHRpb25zIH0gPSBBcnJheS5pc0FycmF5KG9wdGlvbnNPckFyZ3MpXG4gICAgPyBvcHRpb25zIHx8IHt9XG4gICAgOiBvcHRpb25zT3JBcmdzIHx8IHt9O1xuXG4gIGNvbnN0IG91dHB1dEFyZ3VtZW50cyA9IGh1bWFuUmVhZGFibGVPdXRwdXQgIT09IGZhbHNlID8gW10gOiBbXCItc3NcIl07XG4gIGlmIChsYW5ndWFnZSA9PT0gXCJKYXZhU2NyaXB0XCIpIHtcbiAgICBvdXRwdXRBcmd1bWVudHMucHVzaChcIi1sXCIsIFwiSmF2YVNjcmlwdFwiKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zT3JBcmdzKSkge1xuICAgIG91dHB1dEFyZ3VtZW50cy5wdXNoKFwiLVwiLCAuLi5vcHRpb25zT3JBcmdzKTtcbiAgfVxuXG4gIGNvbnN0IHNwYXduZWQgPSBjaGlsZFByb2Nlc3Muc3Bhd24oXCJvc2FzY3JpcHRcIiwgb3V0cHV0QXJndW1lbnRzLCB7XG4gICAgLi4uZXhlY09wdGlvbnMsXG4gICAgZW52OiB7IFBBVEg6IFwiL3Vzci9sb2NhbC9iaW46L3Vzci9iaW46L2JpbjovdXNyL3NiaW46L3NiaW5cIiB9LFxuICB9KTtcbiAgY29uc3Qgc3Bhd25lZFByb21pc2UgPSBnZXRTcGF3bmVkUHJvbWlzZShzcGF3bmVkLCB7IHRpbWVvdXQ6IHRpbWVvdXQgPz8gMTAwMDAgfSk7XG5cbiAgc3Bhd25lZC5zdGRpbi5lbmQoc2NyaXB0KTtcblxuICBjb25zdCBbeyBlcnJvciwgZXhpdENvZGUsIHNpZ25hbCwgdGltZWRPdXQgfSwgc3Rkb3V0UmVzdWx0LCBzdGRlcnJSZXN1bHRdID0gYXdhaXQgZ2V0U3Bhd25lZFJlc3VsdDxzdHJpbmc+KFxuICAgIHNwYXduZWQsXG4gICAgeyBlbmNvZGluZzogXCJ1dGY4XCIgfSxcbiAgICBzcGF3bmVkUHJvbWlzZSxcbiAgKTtcbiAgY29uc3Qgc3Rkb3V0ID0gaGFuZGxlT3V0cHV0KHsgc3RyaXBGaW5hbE5ld2xpbmU6IHRydWUgfSwgc3Rkb3V0UmVzdWx0KTtcbiAgY29uc3Qgc3RkZXJyID0gaGFuZGxlT3V0cHV0KHsgc3RyaXBGaW5hbE5ld2xpbmU6IHRydWUgfSwgc3RkZXJyUmVzdWx0KTtcblxuICByZXR1cm4gZGVmYXVsdFBhcnNpbmcoe1xuICAgIHN0ZG91dCxcbiAgICBzdGRlcnIsXG4gICAgZXJyb3IsXG4gICAgZXhpdENvZGUsXG4gICAgc2lnbmFsLFxuICAgIHRpbWVkT3V0LFxuICAgIGNvbW1hbmQ6IFwib3Nhc2NyaXB0XCIsXG4gICAgb3B0aW9ucyxcbiAgICBwYXJlbnRFcnJvcjogbmV3IEVycm9yKCksXG4gIH0pO1xufVxuIiwgImltcG9ydCBjaGlsZFByb2Nlc3MgZnJvbSBcIm5vZGU6Y2hpbGRfcHJvY2Vzc1wiO1xuaW1wb3J0IHtcbiAgZGVmYXVsdFBhcnNpbmcsXG4gIGdldFNwYXduZWRQcm9taXNlLFxuICBnZXRTcGF3bmVkUmVzdWx0LFxuICBoYW5kbGVPdXRwdXQsXG4gIFBhcnNlRXhlY091dHB1dEhhbmRsZXIsXG59IGZyb20gXCIuL2V4ZWMtdXRpbHNcIjtcblxudHlwZSBQb3dlclNoZWxsU2NyaXB0T3B0aW9ucyA9IHtcbiAgLyoqXG4gICAqIEEgU2lnbmFsIG9iamVjdCB0aGF0IGFsbG93cyB5b3UgdG8gYWJvcnQgdGhlIHJlcXVlc3QgaWYgcmVxdWlyZWQgdmlhIGFuIEFib3J0Q29udHJvbGxlciBvYmplY3QuXG4gICAqL1xuICBzaWduYWw/OiBBYm9ydFNpZ25hbDtcbiAgLyoqIElmIHRpbWVvdXQgaXMgZ3JlYXRlciB0aGFuIGAwYCwgdGhlIHBhcmVudCB3aWxsIHNlbmQgdGhlIHNpZ25hbCBgU0lHVEVSTWAgaWYgdGhlIGNoaWxkIHJ1bnMgbG9uZ2VyIHRoYW4gdGltZW91dCBtaWxsaXNlY29uZHMuXG4gICAqXG4gICAqIEBkZWZhdWx0IDEwMDAwXG4gICAqL1xuICB0aW1lb3V0PzogbnVtYmVyO1xufTtcblxuLyoqXG4gKiBFeGVjdXRlcyBhIFBvd2VyU2hlbGwgc2NyaXB0LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBzaG93SFVEIH0gZnJvbSBcIkByYXljYXN0L2FwaVwiO1xuICogaW1wb3J0IHsgcnVuUG93ZXJTaGVsbFNjcmlwdCwgc2hvd0ZhaWx1cmVUb2FzdCB9IGZyb20gXCJAcmF5Y2FzdC91dGlsc1wiO1xuICpcbiAqIGV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAqICAgdHJ5IHtcbiAqICAgICBjb25zdCByZXMgPSBhd2FpdCBydW5Qb3dlclNoZWxsU2NyaXB0KFxuICogICAgICAgYFxuICogICAgICAgV3JpdGUtSG9zdCBcImhlbGxvLCB3b3JsZC5cIlxuICogICAgICAgYCxcbiAqICAgICApO1xuICogICAgIGF3YWl0IHNob3dIVUQocmVzKTtcbiAqICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAqICAgICBzaG93RmFpbHVyZVRvYXN0KGVycm9yLCB7IHRpdGxlOiBcIkNvdWxkIG5vdCBydW4gUG93ZXJTaGVsbFwiIH0pO1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1blBvd2VyU2hlbGxTY3JpcHQ8VCA9IHN0cmluZz4oXG4gIHNjcmlwdDogc3RyaW5nLFxuICBvcHRpb25zPzogUG93ZXJTaGVsbFNjcmlwdE9wdGlvbnMgJiB7XG4gICAgcGFyc2VPdXRwdXQ/OiBQYXJzZUV4ZWNPdXRwdXRIYW5kbGVyPFQsIHN0cmluZywgUG93ZXJTaGVsbFNjcmlwdE9wdGlvbnM+O1xuICB9LFxuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgaWYgKHByb2Nlc3MucGxhdGZvcm0gIT09IFwid2luMzJcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlBvd2VyU2hlbGwgaXMgb25seSBzdXBwb3J0ZWQgb24gV2luZG93c1wiKTtcbiAgfVxuXG4gIGNvbnN0IHsgdGltZW91dCwgLi4uZXhlY09wdGlvbnMgfSA9IG9wdGlvbnMgfHwge307XG5cbiAgY29uc3Qgb3V0cHV0QXJndW1lbnRzID0gW1wiLU5vTG9nb1wiLCBcIi1Ob1Byb2ZpbGVcIiwgXCItTm9uSW50ZXJhY3RpdmVcIiwgXCItQ29tbWFuZFwiLCBcIi1cIl07XG5cbiAgY29uc3Qgc3Bhd25lZCA9IGNoaWxkUHJvY2Vzcy5zcGF3bihcInBvd2Vyc2hlbGwuZXhlXCIsIG91dHB1dEFyZ3VtZW50cywge1xuICAgIC4uLmV4ZWNPcHRpb25zLFxuICB9KTtcbiAgY29uc3Qgc3Bhd25lZFByb21pc2UgPSBnZXRTcGF3bmVkUHJvbWlzZShzcGF3bmVkLCB7IHRpbWVvdXQ6IHRpbWVvdXQgPz8gMTAwMDAgfSk7XG5cbiAgc3Bhd25lZC5zdGRpbi5lbmQoc2NyaXB0KTtcblxuICBjb25zdCBbeyBlcnJvciwgZXhpdENvZGUsIHNpZ25hbCwgdGltZWRPdXQgfSwgc3Rkb3V0UmVzdWx0LCBzdGRlcnJSZXN1bHRdID0gYXdhaXQgZ2V0U3Bhd25lZFJlc3VsdDxzdHJpbmc+KFxuICAgIHNwYXduZWQsXG4gICAgeyBlbmNvZGluZzogXCJ1dGY4XCIgfSxcbiAgICBzcGF3bmVkUHJvbWlzZSxcbiAgKTtcbiAgY29uc3Qgc3Rkb3V0ID0gaGFuZGxlT3V0cHV0KHsgc3RyaXBGaW5hbE5ld2xpbmU6IHRydWUgfSwgc3Rkb3V0UmVzdWx0KTtcbiAgY29uc3Qgc3RkZXJyID0gaGFuZGxlT3V0cHV0KHsgc3RyaXBGaW5hbE5ld2xpbmU6IHRydWUgfSwgc3RkZXJyUmVzdWx0KTtcblxuICByZXR1cm4gZGVmYXVsdFBhcnNpbmcoe1xuICAgIHN0ZG91dCxcbiAgICBzdGRlcnIsXG4gICAgZXJyb3IsXG4gICAgZXhpdENvZGUsXG4gICAgc2lnbmFsLFxuICAgIHRpbWVkT3V0LFxuICAgIGNvbW1hbmQ6IFwicG93ZXJzaGVsbC5leGVcIixcbiAgICBvcHRpb25zLFxuICAgIHBhcmVudEVycm9yOiBuZXcgRXJyb3IoKSxcbiAgfSk7XG59XG4iLCAiaW1wb3J0IHsgQ2FjaGUgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG5pbXBvcnQgeyBoYXNoLCByZXBsYWNlciwgcmV2aXZlciB9IGZyb20gXCIuL2hlbHBlcnNcIjtcblxuLyoqXG4gKiBXcmFwcyBhIGZ1bmN0aW9uIHdpdGggY2FjaGluZyBmdW5jdGlvbmFsaXR5IHVzaW5nIFJheWNhc3QncyBDYWNoZSBBUEkuXG4gKiBBbGxvd3MgZm9yIGNhY2hpbmcgb2YgZXhwZW5zaXZlIGZ1bmN0aW9ucyBsaWtlIHBhZ2luYXRlZCBBUEkgY2FsbHMgdGhhdCByYXJlbHkgY2hhbmdlLlxuICpcbiAqIEBwYXJhbSBmbiAtIFRoZSBhc3luYyBmdW5jdGlvbiB0byBjYWNoZSByZXN1bHRzIGZyb21cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgY29uZmlndXJhdGlvbiBmb3IgdGhlIGNhY2hlIGJlaGF2aW9yXG4gKiBAcGFyYW0gb3B0aW9ucy52YWxpZGF0ZSAtIE9wdGlvbmFsIHZhbGlkYXRpb24gZnVuY3Rpb24gZm9yIGNhY2hlZCBkYXRhXG4gKiBAcGFyYW0gb3B0aW9ucy5tYXhBZ2UgLSBNYXhpbXVtIGFnZSBvZiBjYWNoZWQgZGF0YSBpbiBtaWxsaXNlY29uZHNcbiAqIEByZXR1cm5zIEFuIGFzeW5jIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBmdW5jdGlvbiwgZWl0aGVyIGZyb20gY2FjaGUgb3IgZnJlc2ggZXhlY3V0aW9uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBjb25zdCBjYWNoZWRGdW5jdGlvbiA9IHdpdGhDYWNoZShmZXRjaEV4cGVuc2l2ZURhdGEsIHtcbiAqICAgbWF4QWdlOiA1ICogNjAgKiAxMDAwIC8vIENhY2hlIGZvciA1IG1pbnV0ZXNcbiAqIH0pO1xuICpcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNhY2hlZEZ1bmN0aW9uKHF1ZXJ5KTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aENhY2hlPEZuIGV4dGVuZHMgKC4uLmFyZ3M6IGFueSkgPT4gUHJvbWlzZTxhbnk+PihcbiAgZm46IEZuLFxuICBvcHRpb25zPzoge1xuICAgIC8qKiBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIHRoZSBjYWNoZWQgZGF0YSBhbmQgcmV0dXJucyBhIGJvb2xlYW4gZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIGRhdGEgaXMgc3RpbGwgdmFsaWQgb3Igbm90LiAqL1xuICAgIHZhbGlkYXRlPzogKGRhdGE6IEF3YWl0ZWQ8UmV0dXJuVHlwZTxGbj4+KSA9PiBib29sZWFuO1xuICAgIC8qKiBNYXhpbXVtIGFnZSBvZiBjYWNoZWQgZGF0YSBpbiBtaWxsaXNlY29uZHMgYWZ0ZXIgd2hpY2ggdGhlIGRhdGEgd2lsbCBiZSBjb25zaWRlcmVkIGludmFsaWQgKi9cbiAgICBtYXhBZ2U/OiBudW1iZXI7XG4gIH0sXG4pOiBGbiAmIHsgY2xlYXJDYWNoZTogKCkgPT4gdm9pZCB9IHtcbiAgY29uc3QgY2FjaGUgPSBuZXcgQ2FjaGUoeyBuYW1lc3BhY2U6IGhhc2goZm4pIH0pO1xuXG4gIGNvbnN0IHdyYXBwZWRGbiA9IGFzeW5jICguLi5hcmdzOiBQYXJhbWV0ZXJzPEZuPikgPT4ge1xuICAgIGNvbnN0IGtleSA9XG4gICAgICBoYXNoKGFyZ3MgfHwgW10pICsgKG9wdGlvbnMgYXMgdW5rbm93biBhcyB7IGludGVybmFsX2NhY2hlS2V5U3VmZml4Pzogc3RyaW5nIH0pPy5pbnRlcm5hbF9jYWNoZUtleVN1ZmZpeDtcbiAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoa2V5KTtcbiAgICBpZiAoY2FjaGVkKSB7XG4gICAgICBjb25zdCB7IGRhdGEsIHRpbWVzdGFtcCB9ID0gSlNPTi5wYXJzZShjYWNoZWQsIHJldml2ZXIpO1xuICAgICAgY29uc3QgaXNFeHBpcmVkID0gb3B0aW9ucz8ubWF4QWdlICYmIERhdGUubm93KCkgLSB0aW1lc3RhbXAgPiBvcHRpb25zLm1heEFnZTtcbiAgICAgIGlmICghaXNFeHBpcmVkICYmICghb3B0aW9ucz8udmFsaWRhdGUgfHwgb3B0aW9ucy52YWxpZGF0ZShkYXRhKSkpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmbiguLi5hcmdzKTtcbiAgICBjYWNoZS5zZXQoXG4gICAgICBrZXksXG4gICAgICBKU09OLnN0cmluZ2lmeShcbiAgICAgICAge1xuICAgICAgICAgIGRhdGE6IHJlc3VsdCxcbiAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgIH0sXG4gICAgICAgIHJlcGxhY2VyLFxuICAgICAgKSxcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgd3JhcHBlZEZuLmNsZWFyQ2FjaGUgPSAoKSA9PiB7XG4gICAgY2FjaGUuY2xlYXIoKTtcbiAgfTtcblxuICAvLyBAdHMtZXhwZWN0LWVycm9yIHRvbyBjb21wbGV4IGZvciBUU1xuICByZXR1cm4gd3JhcHBlZEZuO1xufVxuIiwgImltcG9ydCB7IGdldEFwcGxpY2F0aW9ucywgZ2V0UHJlZmVyZW5jZVZhbHVlcywgTG9jYWxTdG9yYWdlIH0gZnJvbSAnQHJheWNhc3QvYXBpJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdG9yYWdlKCkge31cblxuc3RvcmFnZS5nZXRQcmVmZXJlbmNlcyA9IGFzeW5jICgpOiBQcm9taXNlPFByZWZlcmVuY2VzPiA9PiBnZXRQcmVmZXJlbmNlVmFsdWVzKClcblxuc3RvcmFnZS5nZXRCYWRnZXMgPSBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGFwcHMgPSBhd2FpdCBnZXRBcHBsaWNhdGlvbnMoKVxuICBjb25zdCBiYWRnZXMgPSBKU09OLnBhcnNlKChhd2FpdCBMb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYmFkZ2VzJykpIHx8ICd7fScpIGFzIEJhZGdlckxpc3RcblxuICBPYmplY3QuZW50cmllcyhiYWRnZXMpLmZvckVhY2goKFtidW5kbGVJZCwgYmFkZ2VdKSA9PiB7XG4gICAgY29uc3QgYXBwID0gYXBwcy5maWx0ZXIoYXBwID0+IGFwcC5idW5kbGVJZCA9PT0gYnVuZGxlSWQpLnBvcCgpXG4gICAgaWYgKCFhcHApIHtcbiAgICAgIC8vIFJheWNhc3QgaXMgbm90IGF3YXJlIG9mIHRoZSBhcHBsaWNhdGlvbi5cbiAgICAgIGRlbGV0ZSBiYWRnZXNbYnVuZGxlSWRdXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgYmFkZ2UuYXBwID0gYXBwXG4gICAgYmFkZ2Uuc3RhdHVzID0geyBjb3VudDogMCwgaW5kZXRlcm1pbmF0ZTogZmFsc2UgfVxuICB9KVxuXG4gIHJldHVybiBiYWRnZXNcbn1cblxuc3RvcmFnZS5zb3J0QmFkZ2VzID0gKGJhZGdlczogQmFkZ2VyTGlzdCkgPT4gT2JqZWN0LnZhbHVlcyhiYWRnZXMpXG4gIC5zb3J0KChhLCBiKSA9PiBhLmFwcC5uYW1lLmxvY2FsZUNvbXBhcmUoXG4gICAgYi5hcHAubmFtZSxcbiAgICBJbnRsLkRhdGVUaW1lRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkubG9jYWxlLFxuICAgIHsgc2Vuc2l0aXZpdHk6ICdiYXNlJyB9LFxuICApKVxuXG5zdG9yYWdlLnNhdmVCYWRnZSA9IGFzeW5jIChiYWRnZTogQmFkZ2VyKSA9PiB7XG4gIGNvbnN0IGJhZGdlcyA9IGF3YWl0IHN0b3JhZ2UuZ2V0QmFkZ2VzKClcbiAgYmFkZ2VzW2JhZGdlLmJ1bmRsZUlkXSA9IGJhZGdlXG4gIGF3YWl0IExvY2FsU3RvcmFnZS5zZXRJdGVtKCdiYWRnZXMnLCBKU09OLnN0cmluZ2lmeShiYWRnZXMpKVxufVxuXG5zdG9yYWdlLmRlbGV0ZUJhZGdlID0gYXN5bmMgKGJhZGdlOiBCYWRnZXIpID0+IHtcbiAgY29uc3QgYmFkZ2VzID0gYXdhaXQgc3RvcmFnZS5nZXRCYWRnZXMoKVxuICBpZiAoIWJhZGdlc1tiYWRnZS5idW5kbGVJZF0pXG4gICAgcmV0dXJuXG5cbiAgZGVsZXRlIGJhZGdlc1tiYWRnZS5idW5kbGVJZF1cbiAgYXdhaXQgTG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2JhZGdlcycsIEpTT04uc3RyaW5naWZ5KGJhZGdlcykpXG59XG5cbnN0b3JhZ2UuZGVsZXRlQWxsQmFkZ2VzID0gYXN5bmMgKCkgPT4gTG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2JhZGdlcycpXG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUEsY0FBcUU7QUFDckUsSUFBQUMsZ0JBQW9DOzs7QUNBcEMsSUFBQUMsY0FBMEU7QTs7Ozs7OztBSzRCbkUsU0FBUywwQ0FDZCxPQUNBLFNBQTZFO0FBRTdFLFFBQU0sVUFBVSxpQkFBaUIsUUFBUSxNQUFNLFVBQVUsT0FBTyxLQUFBO0FBQ2hFLFVBQU8sR0FBQSxXQUFBQyxXQUFVO0lBQ2YsUUFBTyxHQUFBLFdBQUFDLE9BQU0sTUFBTTtJQUNuQixPQUFPLFNBQVMsU0FBUztJQUN6QixTQUFTLFNBQVMsV0FBVztJQUM3QixlQUFlLFNBQVMsaUJBQWlCLDZDQUF1QixLQUFBO0lBQ2hFLGlCQUFpQixTQUFTLGdCQUFnQiw2Q0FBdUIsS0FBQSxJQUFTO0VBQzVFLENBQUE7QUFDRjtBQUVBLElBQU0sK0NBQXlCLENBQUMsVUFBQTtBQUM5QixNQUFJLG1CQUFtQjtBQUN2QixNQUFJLFFBQVE7QUFDWixNQUFJLGVBQWU7QUFDbkIsTUFBSTtBQUNGLFVBQU0sY0FBYyxLQUFLLFVBQU0sZUFBQUMsa0JBQWdCLGlCQUFBQyxPQUFVLEdBQUEsV0FBQUMsYUFBWSxZQUFZLE1BQU0sY0FBQSxHQUFpQixNQUFBLENBQUE7QUFDeEcsWUFBUSxJQUFJLFlBQVksS0FBSztBQUM3QixtQkFBZSx1QkFBdUIsWUFBWSxTQUFTLFlBQVksTUFBTSxJQUFJLFlBQVksSUFBSTtBQUNqRyxRQUFJLENBQUMsWUFBWSxTQUFTLFlBQVksV0FBVyxTQUMvQyxvQkFBbUI7RUFFdkIsU0FBUyxLQUFLO0VBRWQ7QUFJQSxRQUFNLFlBQVcsR0FBQSxXQUFBQSxhQUFZLGlCQUFpQjtBQUU5QyxRQUFNLFFBQVEsaUJBQWlCLFFBQVEsT0FBTyxTQUFTLE9BQU8sV0FBVyxLQUFLLE9BQU8sS0FBQTtBQUVyRixTQUFPO0lBQ0wsT0FBTyxXQUFXLGNBQWM7SUFDaEMsU0FBUyxPQUFLO0FBQ1osWUFBTSxLQUFJO0FBQ1YsVUFBSSxTQUNGLEVBQUEsR0FBQSxXQUFBQyxXQUFVLEtBQUssS0FBQTtVQUVmLEVBQUEsR0FBQSxXQUFBQyxNQUNFLG9IQUFvSCxtQkFDbEgsS0FBQSxDQUFBLGtCQUNpQixVQUFVLFlBQUEsQ0FBQSxnQkFBNkIsbUJBQ3hEOztFQUVWLEtBQUE7O0NBRUQsQ0FBQSxFQUNZO0lBR1Q7RUFDRjtBQUNGOzs7QUxsRkEsSUFBQUMsZ0JBQW9DOzs7QXNDSHBDLElBQUFDLGNBQW1FO0FBRXBELFNBQVIsVUFBMkI7QUFBQztBQUVuQyxRQUFRLGlCQUFpQixnQkFBa0MsaUNBQW9CO0FBRS9FLFFBQVEsWUFBWSxZQUFZO0FBQzlCLFFBQU0sT0FBTyxVQUFNLDZCQUFnQjtBQUNuQyxRQUFNLFNBQVMsS0FBSyxNQUFPLE1BQU0seUJBQWEsUUFBUSxRQUFRLEtBQU0sSUFBSTtBQUV4RSxTQUFPLFFBQVEsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLFVBQVUsS0FBSyxNQUFNO0FBQ3BELFVBQU0sTUFBTSxLQUFLLE9BQU8sQ0FBQUMsU0FBT0EsS0FBSSxhQUFhLFFBQVEsRUFBRSxJQUFJO0FBQzlELFFBQUksQ0FBQyxLQUFLO0FBRVIsYUFBTyxPQUFPLFFBQVE7QUFDdEI7QUFBQSxJQUNGO0FBQ0EsVUFBTSxNQUFNO0FBQ1osVUFBTSxTQUFTLEVBQUUsT0FBTyxHQUFHLGVBQWUsTUFBTTtBQUFBLEVBQ2xELENBQUM7QUFFRCxTQUFPO0FBQ1Q7QUFFQSxRQUFRLGFBQWEsQ0FBQyxXQUF1QixPQUFPLE9BQU8sTUFBTSxFQUM5RCxLQUFLLENBQUMsR0FBRyxNQUFNLEVBQUUsSUFBSSxLQUFLO0FBQUEsRUFDekIsRUFBRSxJQUFJO0FBQUEsRUFDTixLQUFLLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRTtBQUFBLEVBQ3hDLEVBQUUsYUFBYSxPQUFPO0FBQ3hCLENBQUM7QUFFSCxRQUFRLFlBQVksT0FBTyxVQUFrQjtBQUMzQyxRQUFNLFNBQVMsTUFBTSxRQUFRLFVBQVU7QUFDdkMsU0FBTyxNQUFNLFFBQVEsSUFBSTtBQUN6QixRQUFNLHlCQUFhLFFBQVEsVUFBVSxLQUFLLFVBQVUsTUFBTSxDQUFDO0FBQzdEO0FBRUEsUUFBUSxjQUFjLE9BQU8sVUFBa0I7QUFDN0MsUUFBTSxTQUFTLE1BQU0sUUFBUSxVQUFVO0FBQ3ZDLE1BQUksQ0FBQyxPQUFPLE1BQU0sUUFBUTtBQUN4QjtBQUVGLFNBQU8sT0FBTyxNQUFNLFFBQVE7QUFDNUIsUUFBTSx5QkFBYSxRQUFRLFVBQVUsS0FBSyxVQUFVLE1BQU0sQ0FBQztBQUM3RDtBQUVBLFFBQVEsa0JBQWtCLFlBQVkseUJBQWEsV0FBVyxRQUFROzs7QXRDbkJsRSxJQUFBQyxzQkFBQTtBQXJCVyxTQUFSLFVBQTJCLE9BQTJCO0FBQzNELFFBQU0sRUFBRSxNQUFNLElBQUk7QUFDbEIsUUFBTSxFQUFFLElBQUksUUFBSSwyQkFBYztBQUM5QixRQUFNLENBQUMsTUFBTSxPQUFPLFFBQUksd0JBQXdCLENBQUMsQ0FBQztBQUVsRCwrQkFBVSxNQUFNO0FBQ2QsS0FBQyxZQUFZLFFBQVEsVUFBTSw2QkFBZ0IsQ0FBQyxHQUFHO0FBQUEsRUFDakQsR0FBRyxDQUFDLENBQUM7QUFFTCxRQUFNLFdBQVcsT0FBTyxXQUFtQjtBQUN6QyxRQUFJO0FBQ0YsVUFBSTtBQUNGLGVBQU8sV0FBVyxNQUFNO0FBQzFCLGNBQVEsVUFBVSxNQUFNLEVBQUUsS0FBSyxHQUFHO0FBQUEsSUFDcEMsU0FDTyxPQUFPO0FBQ1osWUFBTSwwQ0FBa0IsTUFBZ0IsT0FBTztBQUFBLElBQ2pEO0FBQUEsRUFDRjtBQUVBLFNBQ0U7QUFBQSxJQUFDO0FBQUE7QUFBQSxNQUNDLFdBQVcsQ0FBQyxLQUFLO0FBQUEsTUFDakIsaUJBQWlCLENBQUMsUUFBUSxjQUFjO0FBQUEsTUFDeEMsU0FDRSw2Q0FBQywyQkFDQyx1REFBQyxtQkFBTyxZQUFQLEVBQWtCLE9BQU0sVUFBUyxVQUFvQixHQUN4RDtBQUFBLE1BR0Q7QUFBQSxpQkFBUyw2Q0FBQyxpQkFBSyxhQUFMLEVBQWlCLE1BQU0sTUFBTSxJQUFJLE1BQU07QUFBQSxRQUVqRCxDQUFDLFNBQ0E7QUFBQSxVQUFDLGlCQUFLO0FBQUEsVUFBTDtBQUFBLFlBQ0MsSUFBRztBQUFBLFlBQ0gsTUFBSztBQUFBLFlBRUosZUFBSyxJQUFJLFNBQ1I7QUFBQSxjQUFDLGlCQUFLLFNBQVM7QUFBQSxjQUFkO0FBQUEsZ0JBRUMsT0FBTyxJQUFJLFlBQVksSUFBSTtBQUFBLGdCQUMzQixPQUFPLElBQUk7QUFBQSxnQkFDWCxNQUFNLEVBQUUsVUFBVSxJQUFJLEtBQUs7QUFBQTtBQUFBLGNBSHRCLElBQUksWUFBWSxJQUFJO0FBQUEsWUFJM0IsQ0FDRDtBQUFBO0FBQUEsUUFDSDtBQUFBLFFBR0Y7QUFBQSxVQUFDLGlCQUFLO0FBQUEsVUFBTDtBQUFBLFlBQ0MsSUFBRztBQUFBLFlBQ0gsT0FBTTtBQUFBLFlBQ04sTUFBSztBQUFBLFlBQ0wsY0FBZSxDQUFDLFNBQVMsUUFBUyxNQUFNO0FBQUE7QUFBQSxRQUMxQztBQUFBLFFBQ0E7QUFBQSxVQUFDLGlCQUFLO0FBQUEsVUFBTDtBQUFBLFlBQ0MsSUFBRztBQUFBLFlBQ0gsT0FBTTtBQUFBLFlBQ04sTUFBSztBQUFBLFlBQ0wsY0FBZSxDQUFDLFNBQVMsUUFBUyxNQUFNO0FBQUE7QUFBQSxRQUMxQztBQUFBLFFBRUEsNkNBQUMsaUJBQUssYUFBTCxFQUFpQixNQUFLLElBQUc7QUFBQSxRQUMxQiw2Q0FBQyxpQkFBSyxXQUFMLEVBQWU7QUFBQSxRQUNoQiw2Q0FBQyxpQkFBSyxhQUFMLEVBQWlCLE1BQUssSUFBRztBQUFBLFFBRTFCLDZDQUFDLGlCQUFLLGFBQUwsRUFBaUIsTUFBSywyTUFBME07QUFBQTtBQUFBO0FBQUEsRUFDbk87QUFFSjs7O0FEL0RjLElBQUFDLHNCQUFBO0FBTmQsU0FBUyxTQUFTLE9BQWlDO0FBQ2pELFNBQ0U7QUFBQSxJQUFDLG1CQUFPO0FBQUEsSUFBUDtBQUFBLE1BQ0MsT0FBTTtBQUFBLE1BQ04sTUFBTSxpQkFBSztBQUFBLE1BQ1gsVUFBVSxFQUFFLFdBQVcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxJQUFJO0FBQUEsTUFDekMsUUFBUSw2Q0FBQyxhQUFVO0FBQUEsTUFDbkIsT0FBTyxNQUFNO0FBQUE7QUFBQSxFQUNmO0FBRUo7QUFFZSxTQUFSLFNBQTBCO0FBQy9CLFFBQU0sQ0FBQyxRQUFRLFNBQVMsUUFBSSx3QkFBNEIsSUFBSTtBQUU1RCwrQkFBVSxNQUFNO0FBQ2QsS0FBQyxZQUFZLFVBQVUsTUFBTSxRQUFRLFVBQVUsQ0FBQyxHQUFHO0FBQUEsRUFDckQsR0FBRyxDQUFDLENBQUM7QUFFTCxRQUFNLFdBQVcsT0FBTyxVQUE2QyxVQUFtQjtBQUN0RixRQUFJLFNBQVM7QUFDWCxZQUFNLFNBQVMsS0FBSztBQUN0QixjQUFVLE1BQU0sUUFBUSxVQUFVLENBQUM7QUFBQSxFQUNyQztBQUVBLE1BQUksZUFBeUIsQ0FBQztBQUM5QixNQUFJLFdBQVc7QUFDYixtQkFBZSxRQUFRLFdBQVcsTUFBTTtBQUUxQyxTQUNFLDhDQUFDLG9CQUFLLFdBQVcsV0FBVyxNQUN6QjtBQUFBLGlCQUFhLElBQUksV0FDaEI7QUFBQSxNQUFDLGlCQUFLO0FBQUEsTUFBTDtBQUFBLFFBRUMsT0FBTyxNQUFNLElBQUk7QUFBQSxRQUNqQixNQUFNLEVBQUUsVUFBVSxNQUFNLElBQUksS0FBSztBQUFBLFFBQ2pDLGFBQWEsQ0FBQyxFQUFFLE1BQU0sTUFBTSxlQUFlLGlCQUFpQixtQkFBbUIsQ0FBQztBQUFBLFFBQ2hGLFNBQ0UsNkNBQUMsMkJBQ0Msd0RBQUMsd0JBQVksU0FBWixFQUNDO0FBQUE7QUFBQSxZQUFDLG1CQUFPO0FBQUEsWUFBUDtBQUFBLGNBQ0MsT0FBTTtBQUFBLGNBQ04sTUFBTSxpQkFBSztBQUFBLGNBQ1gsVUFBVSxFQUFFLFdBQVcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxJQUFJO0FBQUEsY0FDekMsUUFBUSw2Q0FBQyxhQUFVLE9BQWM7QUFBQSxjQUNqQyxPQUFPO0FBQUE7QUFBQSxVQUNUO0FBQUEsVUFDQSw2Q0FBQyxZQUFTLFVBQW9CO0FBQUEsVUFDOUI7QUFBQSxZQUFDO0FBQUE7QUFBQSxjQUNDLE9BQU07QUFBQSxjQUNOLE1BQU0saUJBQUs7QUFBQSxjQUNYLE9BQU8sbUJBQU8sTUFBTTtBQUFBLGNBQ3BCLFVBQVUsRUFBRSxXQUFXLENBQUMsTUFBTSxHQUFHLEtBQUssSUFBSTtBQUFBLGNBQzFDLFVBQVUsVUFBTSwwQkFBYTtBQUFBLGdCQUMzQixPQUFPLE1BQU0sSUFBSTtBQUFBLGdCQUNqQixTQUFTO0FBQUEsZ0JBQ1QsZUFBZTtBQUFBLGtCQUNiLE9BQU87QUFBQSxrQkFDUCxPQUFPLGtCQUFNLFlBQVk7QUFBQSxrQkFDekIsVUFBVSxNQUFNLFNBQVMsUUFBUSxhQUFhLEtBQUs7QUFBQSxnQkFDckQ7QUFBQSxjQUNGLENBQUM7QUFBQTtBQUFBLFVBQ0g7QUFBQSxVQUNBO0FBQUEsWUFBQztBQUFBO0FBQUEsY0FDQyxPQUFNO0FBQUEsY0FDTixNQUFNLGlCQUFLO0FBQUEsY0FDWCxPQUFPLG1CQUFPLE1BQU07QUFBQSxjQUNwQixVQUFVLEVBQUUsV0FBVyxDQUFDLFFBQVEsT0FBTyxHQUFHLEtBQUssSUFBSTtBQUFBLGNBQ25ELFVBQVUsVUFBTSwwQkFBYTtBQUFBLGdCQUMzQixPQUFPO0FBQUEsZ0JBQ1AsU0FBUztBQUFBLGdCQUNULGVBQWU7QUFBQSxrQkFDYixPQUFPO0FBQUEsa0JBQ1AsT0FBTyxrQkFBTSxZQUFZO0FBQUEsa0JBQ3pCLFVBQVUsTUFBTSxTQUFTLFFBQVEsaUJBQWlCLEtBQUs7QUFBQSxnQkFDekQ7QUFBQSxjQUNGLENBQUM7QUFBQTtBQUFBLFVBQ0g7QUFBQSxXQUNGLEdBQ0Y7QUFBQTtBQUFBLE1BOUNHLE1BQU07QUFBQSxJQWdEYixDQUNEO0FBQUEsSUFFRDtBQUFBLE1BQUMsaUJBQUs7QUFBQSxNQUFMO0FBQUEsUUFDQyxNQUFNLGlCQUFLO0FBQUEsUUFDWCxTQUNFLDZDQUFDLDJCQUNDLHVEQUFDLFlBQVMsVUFBb0IsR0FDaEM7QUFBQTtBQUFBLElBRUo7QUFBQSxLQUNGO0FBRUo7IiwKICAibmFtZXMiOiBbImltcG9ydF9hcGkiLCAiaW1wb3J0X3JlYWN0IiwgImltcG9ydF9hcGkiLCAiJGhnVVcxJHNob3dUb2FzdCIsICIkaGdVVzEkVG9hc3QiLCAiJGhnVVcxJHJlYWRGaWxlU3luYyIsICIkaGdVVzEkam9pbiIsICIkaGdVVzEkZW52aXJvbm1lbnQiLCAiJGhnVVcxJENsaXBib2FyZCIsICIkaGdVVzEkb3BlbiIsICJpbXBvcnRfcmVhY3QiLCAiaW1wb3J0X2FwaSIsICJhcHAiLCAiaW1wb3J0X2pzeF9ydW50aW1lIiwgImltcG9ydF9qc3hfcnVudGltZSJdCn0K

"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/badges.tsx
var badges_exports = {};
__export(badges_exports, {
  default: () => Badges
});
module.exports = __toCommonJS(badges_exports);
var import_api4 = require("@raycast/api");

// node_modules/@raycast/utils/dist/module.js
var import_react = __toESM(require("react"));
var import_api = require("@raycast/api");
var import_node_child_process = __toESM(require("node:child_process"));
var import_node_buffer = require("node:buffer");
var import_node_stream = __toESM(require("node:stream"));
var import_node_util = require("node:util");
var import_jsx_runtime = require("react/jsx-runtime");
var $parcel$global = globalThis;
function $bfcf6ee368b3bd9f$export$d4b699e2c1148419(value) {
  const ref = (0, import_react.useRef)(value);
  ref.current = value;
  return ref;
}
function $e2e1ea6dd3b7d2e1$export$b644b65666fe0c18(key, _value) {
  const value = this[key];
  if (value instanceof Date) return `__raycast_cached_date__${value.toString()}`;
  if (Buffer.isBuffer(value)) return `__raycast_cached_buffer__${value.toString("base64")}`;
  return _value;
}
function $e2e1ea6dd3b7d2e1$export$63698c10df99509c(_key, value) {
  if (typeof value === "string" && value.startsWith("__raycast_cached_date__")) return new Date(value.replace("__raycast_cached_date__", ""));
  if (typeof value === "string" && value.startsWith("__raycast_cached_buffer__")) return Buffer.from(value.replace("__raycast_cached_buffer__", ""), "base64");
  return value;
}
var $c40d7eded38ca69c$var$rootCache = /* @__PURE__ */ Symbol("cache without namespace");
var $c40d7eded38ca69c$var$cacheMap = /* @__PURE__ */ new Map();
function $c40d7eded38ca69c$export$14afb9e4c16377d3(key, initialState, config) {
  const cacheKey = config?.cacheNamespace || $c40d7eded38ca69c$var$rootCache;
  const cache = $c40d7eded38ca69c$var$cacheMap.get(cacheKey) || $c40d7eded38ca69c$var$cacheMap.set(cacheKey, new (0, import_api.Cache)({
    namespace: config?.cacheNamespace
  })).get(cacheKey);
  if (!cache) throw new Error("Missing cache");
  const keyRef = (0, $bfcf6ee368b3bd9f$export$d4b699e2c1148419)(key);
  const initialValueRef = (0, $bfcf6ee368b3bd9f$export$d4b699e2c1148419)(initialState);
  const cachedState = (0, import_react.useSyncExternalStore)(cache.subscribe, () => {
    try {
      return cache.get(keyRef.current);
    } catch (error) {
      console.error("Could not get Cache data:", error);
      return void 0;
    }
  });
  const state = (0, import_react.useMemo)(() => {
    if (typeof cachedState !== "undefined") {
      if (cachedState === "undefined") return void 0;
      try {
        return JSON.parse(cachedState, (0, $e2e1ea6dd3b7d2e1$export$63698c10df99509c));
      } catch (err) {
        console.warn("The cached data is corrupted", err);
        return initialValueRef.current;
      }
    } else return initialValueRef.current;
  }, [
    cachedState,
    initialValueRef
  ]);
  const stateRef = (0, $bfcf6ee368b3bd9f$export$d4b699e2c1148419)(state);
  const setStateAndCache = (0, import_react.useCallback)((updater) => {
    const newValue = typeof updater === "function" ? updater(stateRef.current) : updater;
    if (typeof newValue === "undefined") cache.set(keyRef.current, "undefined");
    else {
      const stringifiedValue = JSON.stringify(newValue, (0, $e2e1ea6dd3b7d2e1$export$b644b65666fe0c18));
      cache.set(keyRef.current, stringifiedValue);
    }
    return newValue;
  }, [
    cache,
    keyRef,
    stateRef
  ]);
  return [
    state,
    setStateAndCache
  ];
}
var $e6272883088c6834$var$processOk = (process1) => !!process1 && typeof process1 === "object" && typeof process1.removeListener === "function" && typeof process1.emit === "function" && typeof process1.reallyExit === "function" && typeof process1.listeners === "function" && typeof process1.kill === "function" && typeof process1.pid === "number" && typeof process1.on === "function";
var $e6272883088c6834$var$kExitEmitter = /* @__PURE__ */ Symbol.for("signal-exit emitter");
var $e6272883088c6834$var$Emitter = class {
  constructor() {
    this.emitted = {
      afterExit: false,
      exit: false
    };
    this.listeners = {
      afterExit: [],
      exit: []
    };
    this.count = 0;
    this.id = Math.random();
    if ($parcel$global[$e6272883088c6834$var$kExitEmitter])
      return $parcel$global[$e6272883088c6834$var$kExitEmitter];
    Object.defineProperty($parcel$global, $e6272883088c6834$var$kExitEmitter, {
      value: this,
      writable: false,
      enumerable: false,
      configurable: false
    });
  }
  on(ev, fn) {
    this.listeners[ev].push(fn);
  }
  removeListener(ev, fn) {
    const list = this.listeners[ev];
    const i = list.indexOf(fn);
    if (i === -1) return;
    if (i === 0 && list.length === 1) list.length = 0;
    else list.splice(i, 1);
  }
  emit(ev, code, signal) {
    if (this.emitted[ev]) return false;
    this.emitted[ev] = true;
    let ret = false;
    for (const fn of this.listeners[ev]) ret = fn(code, signal) === true || ret;
    if (ev === "exit") ret = this.emit("afterExit", code, signal) || ret;
    return ret;
  }
};
var $e6272883088c6834$var$SignalExitFallback = class {
  onExit() {
    return () => {
    };
  }
  load() {
  }
  unload() {
  }
};
var $e6272883088c6834$var$SignalExit = class {
  // "SIGHUP" throws an `ENOSYS` error on Windows,
  // so use a supported signal instead
  /* c8 ignore start */
  // @ts-ignore
  #hupSig;
  /* c8 ignore stop */
  #emitter;
  #process;
  #originalProcessEmit;
  #originalProcessReallyExit;
  #sigListeners;
  #loaded;
  #signals;
  constructor(process1) {
    this.#hupSig = process.platform === "win32" ? "SIGINT" : "SIGHUP";
    this.#emitter = new $e6272883088c6834$var$Emitter();
    this.#sigListeners = {};
    this.#loaded = false;
    this.#signals = [];
    this.#signals.push("SIGHUP", "SIGINT", "SIGTERM");
    if (globalThis.process.platform !== "win32") this.#signals.push("SIGALRM", "SIGABRT", "SIGVTALRM", "SIGXCPU", "SIGXFSZ", "SIGUSR2", "SIGTRAP", "SIGSYS", "SIGQUIT", "SIGIOT");
    if (globalThis.process.platform === "linux") this.#signals.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT");
    this.#process = process1;
    this.#sigListeners = {};
    for (const sig of this.#signals)
      this.#sigListeners[sig] = () => {
        const listeners = this.#process.listeners(sig);
        let { count } = this.#emitter;
        const p = process1;
        if (typeof p.__signal_exit_emitter__ === "object" && typeof p.__signal_exit_emitter__.count === "number") count += p.__signal_exit_emitter__.count;
        if (listeners.length === count) {
          this.unload();
          const ret = this.#emitter.emit("exit", null, sig);
          const s = sig === "SIGHUP" ? this.#hupSig : sig;
          if (!ret) process1.kill(process1.pid, s);
        }
      };
    this.#originalProcessReallyExit = process1.reallyExit;
    this.#originalProcessEmit = process1.emit;
  }
  onExit(cb, opts) {
    if (!$e6272883088c6834$var$processOk(this.#process)) return () => {
    };
    if (this.#loaded === false) this.load();
    const ev = opts?.alwaysLast ? "afterExit" : "exit";
    this.#emitter.on(ev, cb);
    return () => {
      this.#emitter.removeListener(ev, cb);
      if (this.#emitter.listeners["exit"].length === 0 && this.#emitter.listeners["afterExit"].length === 0) this.unload();
    };
  }
  load() {
    if (this.#loaded) return;
    this.#loaded = true;
    this.#emitter.count += 1;
    for (const sig of this.#signals) try {
      const fn = this.#sigListeners[sig];
      if (fn) this.#process.on(sig, fn);
    } catch (_) {
    }
    this.#process.emit = (ev, ...a) => {
      return this.#processEmit(ev, ...a);
    };
    this.#process.reallyExit = (code) => {
      return this.#processReallyExit(code);
    };
  }
  unload() {
    if (!this.#loaded) return;
    this.#loaded = false;
    this.#signals.forEach((sig) => {
      const listener = this.#sigListeners[sig];
      if (!listener) throw new Error("Listener not defined for signal: " + sig);
      try {
        this.#process.removeListener(sig, listener);
      } catch (_) {
      }
    });
    this.#process.emit = this.#originalProcessEmit;
    this.#process.reallyExit = this.#originalProcessReallyExit;
    this.#emitter.count -= 1;
  }
  #processReallyExit(code) {
    if (!$e6272883088c6834$var$processOk(this.#process)) return 0;
    this.#process.exitCode = code || 0;
    this.#emitter.emit("exit", this.#process.exitCode, null);
    return this.#originalProcessReallyExit.call(this.#process, this.#process.exitCode);
  }
  #processEmit(ev, ...args) {
    const og = this.#originalProcessEmit;
    if (ev === "exit" && $e6272883088c6834$var$processOk(this.#process)) {
      if (typeof args[0] === "number") this.#process.exitCode = args[0];
      const ret = og.call(this.#process, ev, ...args);
      this.#emitter.emit("exit", this.#process.exitCode, null);
      return ret;
    } else return og.call(this.#process, ev, ...args);
  }
};
var $e6272883088c6834$var$signalExit = null;
var $e6272883088c6834$export$47a57ed64c292d4f = (cb, opts) => {
  if (!$e6272883088c6834$var$signalExit) $e6272883088c6834$var$signalExit = $e6272883088c6834$var$processOk(process) ? new $e6272883088c6834$var$SignalExit(process) : new $e6272883088c6834$var$SignalExitFallback();
  return $e6272883088c6834$var$signalExit.onExit(cb, opts);
};
function $c86e3701e284ece4$export$6e3a9b5342d42997(spawned, { timeout } = {}) {
  const spawnedPromise = new Promise((resolve, reject) => {
    spawned.on("exit", (exitCode, signal) => {
      resolve({
        exitCode,
        signal,
        timedOut: false
      });
    });
    spawned.on("error", (error) => {
      reject(error);
    });
    if (spawned.stdin) spawned.stdin.on("error", (error) => {
      reject(error);
    });
  });
  const removeExitHandler = (0, $e6272883088c6834$export$47a57ed64c292d4f)(() => {
    spawned.kill();
  });
  if (timeout === 0 || timeout === void 0) return spawnedPromise.finally(() => removeExitHandler());
  let timeoutId;
  const timeoutPromise = new Promise((_resolve, reject) => {
    timeoutId = setTimeout(() => {
      spawned.kill("SIGTERM");
      reject(Object.assign(new Error("Timed out"), {
        timedOut: true,
        signal: "SIGTERM"
      }));
    }, timeout);
  });
  const safeSpawnedPromise = spawnedPromise.finally(() => {
    clearTimeout(timeoutId);
  });
  return Promise.race([
    timeoutPromise,
    safeSpawnedPromise
  ]).finally(() => removeExitHandler());
}
var $c86e3701e284ece4$var$MaxBufferError = class extends Error {
  constructor() {
    super("The output is too big");
    this.name = "MaxBufferError";
  }
};
function $c86e3701e284ece4$var$bufferStream(options) {
  const { encoding } = options;
  const isBuffer = encoding === "buffer";
  const stream = new (0, import_node_stream.default).PassThrough({
    objectMode: false
  });
  if (encoding && encoding !== "buffer") stream.setEncoding(encoding);
  let length = 0;
  const chunks = [];
  stream.on("data", (chunk) => {
    chunks.push(chunk);
    length += chunk.length;
  });
  stream.getBufferedValue = () => {
    return isBuffer ? Buffer.concat(chunks, length) : chunks.join("");
  };
  stream.getBufferedLength = () => length;
  return stream;
}
async function $c86e3701e284ece4$var$getStream(inputStream, options) {
  const stream = $c86e3701e284ece4$var$bufferStream(options);
  await new Promise((resolve, reject) => {
    const rejectPromise = (error) => {
      if (error && stream.getBufferedLength() <= (0, import_node_buffer.constants).MAX_LENGTH) error.bufferedData = stream.getBufferedValue();
      reject(error);
    };
    (async () => {
      try {
        await (0, import_node_util.promisify)((0, import_node_stream.default).pipeline)(inputStream, stream);
        resolve();
      } catch (error) {
        rejectPromise(error);
      }
    })();
    stream.on("data", () => {
      if (stream.getBufferedLength() > 8e7) rejectPromise(new $c86e3701e284ece4$var$MaxBufferError());
    });
  });
  return stream.getBufferedValue();
}
async function $c86e3701e284ece4$var$getBufferedData(stream, streamPromise) {
  stream.destroy();
  try {
    return await streamPromise;
  } catch (error) {
    return error.bufferedData;
  }
}
async function $c86e3701e284ece4$export$67b768ac9e1c70fa({ stdout, stderr }, { encoding }, processDone) {
  const stdoutPromise = $c86e3701e284ece4$var$getStream(stdout, {
    encoding
  });
  const stderrPromise = $c86e3701e284ece4$var$getStream(stderr, {
    encoding
  });
  try {
    return await Promise.all([
      processDone,
      stdoutPromise,
      stderrPromise
    ]);
  } catch (error) {
    return Promise.all([
      {
        error,
        exitCode: null,
        signal: error.signal,
        timedOut: error.timedOut || false
      },
      $c86e3701e284ece4$var$getBufferedData(stdout, stdoutPromise),
      $c86e3701e284ece4$var$getBufferedData(stderr, stderrPromise)
    ]);
  }
}
function $c86e3701e284ece4$var$stripFinalNewline(input) {
  const LF = typeof input === "string" ? "\n" : "\n".charCodeAt(0);
  const CR = typeof input === "string" ? "\r" : "\r".charCodeAt(0);
  if (input[input.length - 1] === LF)
    input = input.slice(0, -1);
  if (input[input.length - 1] === CR)
    input = input.slice(0, -1);
  return input;
}
function $c86e3701e284ece4$export$200978bbc0b73ca(options, value) {
  if (options.stripFinalNewline) return $c86e3701e284ece4$var$stripFinalNewline(value);
  return value;
}
function $c86e3701e284ece4$var$getErrorPrefix({ timedOut, timeout, signal, exitCode }) {
  if (timedOut) return `timed out after ${timeout} milliseconds`;
  if (signal !== void 0 && signal !== null) return `was killed with ${signal}`;
  if (exitCode !== void 0 && exitCode !== null) return `failed with exit code ${exitCode}`;
  return "failed";
}
function $c86e3701e284ece4$var$makeError({ stdout, stderr, error, signal, exitCode, command, timedOut, options, parentError }) {
  const prefix = $c86e3701e284ece4$var$getErrorPrefix({
    timedOut,
    timeout: options?.timeout,
    signal,
    exitCode
  });
  const execaMessage = `Command ${prefix}: ${command}`;
  const shortMessage = error ? `${execaMessage}
${error.message}` : execaMessage;
  const message = [
    shortMessage,
    stderr,
    stdout
  ].filter(Boolean).join("\n");
  if (error)
    error.originalMessage = error.message;
  else error = parentError;
  error.message = message;
  error.shortMessage = shortMessage;
  error.command = command;
  error.exitCode = exitCode;
  error.signal = signal;
  error.stdout = stdout;
  error.stderr = stderr;
  if ("bufferedData" in error) delete error["bufferedData"];
  return error;
}
function $c86e3701e284ece4$export$a8f5efe603803b77({ stdout, stderr, error, exitCode, signal, timedOut, command, options, parentError }) {
  if (error || exitCode !== 0 || signal !== null) {
    const returnedError = $c86e3701e284ece4$var$makeError({
      error,
      exitCode,
      signal,
      stdout,
      stderr,
      command,
      timedOut,
      options,
      parentError
    });
    throw returnedError;
  }
  return stdout;
}
async function $179449bbef1d262b$export$8982d27dc997624f(script, optionsOrArgs, options) {
  if (process.platform !== "darwin") throw new Error("AppleScript is only supported on macOS");
  const { humanReadableOutput, language, timeout, ...execOptions } = Array.isArray(optionsOrArgs) ? options || {} : optionsOrArgs || {};
  const outputArguments = humanReadableOutput !== false ? [] : [
    "-ss"
  ];
  if (language === "JavaScript") outputArguments.push("-l", "JavaScript");
  if (Array.isArray(optionsOrArgs)) outputArguments.push("-", ...optionsOrArgs);
  const spawned = (0, import_node_child_process.default).spawn("osascript", outputArguments, {
    ...execOptions,
    env: {
      PATH: "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
    }
  });
  const spawnedPromise = (0, $c86e3701e284ece4$export$6e3a9b5342d42997)(spawned, {
    timeout: timeout ?? 1e4
  });
  spawned.stdin.end(script);
  const [{ error, exitCode, signal, timedOut }, stdoutResult, stderrResult] = await (0, $c86e3701e284ece4$export$67b768ac9e1c70fa)(spawned, {
    encoding: "utf8"
  }, spawnedPromise);
  const stdout = (0, $c86e3701e284ece4$export$200978bbc0b73ca)({
    stripFinalNewline: true
  }, stdoutResult);
  const stderr = (0, $c86e3701e284ece4$export$200978bbc0b73ca)({
    stripFinalNewline: true
  }, stderrResult);
  return (0, $c86e3701e284ece4$export$a8f5efe603803b77)({
    stdout,
    stderr,
    error,
    exitCode,
    signal,
    timedOut,
    command: "osascript",
    options,
    parentError: new Error()
  });
}

// src/badges.tsx
var import_react2 = require("react");

// src/utils/error.ts
async function catchError(error) {
  if (error.message.includes("-1743") || error.message.includes("-1719")) {
    throw new Error(
      "To access the Dock badges, Raycast must have Accessibility and Automation permissions.\n\nSystem Settings > Privacy & Security"
    );
  }
  throw new Error(error.message);
}

// src/utils/scripts.ts
var import_node_fs = require("node:fs");
var import_node_path = __toESM(require("node:path"));
var import_api2 = require("@raycast/api");
var assets = import_node_path.default.join(import_api2.environment.assetsPath, "scripts");
function scripts() {
}
scripts.isOpen = async (bundleId) => {
  const script = await import_node_fs.promises.readFile(import_node_path.default.join(assets, "app-status.applescript"));
  return await $179449bbef1d262b$export$8982d27dc997624f(script.toString(), [bundleId]) === "true";
};
scripts.getCount = async (appName) => {
  const script = await import_node_fs.promises.readFile(import_node_path.default.join(assets, "badge-count.applescript"));
  const result = await $179449bbef1d262b$export$8982d27dc997624f(script.toString(), [appName]);
  if (result === "\u2022")
    return true;
  const count = Number.parseInt(result, 10);
  return Number.isNaN(count) ? 0 : count;
};

// src/utils/storage.ts
var import_api3 = require("@raycast/api");
function storage() {
}
storage.getPreferences = async () => (0, import_api3.getPreferenceValues)();
storage.getBadges = async () => {
  const apps = await (0, import_api3.getApplications)();
  const badges = JSON.parse(await import_api3.LocalStorage.getItem("badges") || "{}");
  Object.entries(badges).forEach(([bundleId, badge]) => {
    const app = apps.filter((app2) => app2.bundleId === bundleId).pop();
    if (!app) {
      delete badges[bundleId];
      return;
    }
    badge.app = app;
    badge.status = { count: 0, indeterminate: false };
  });
  return badges;
};
storage.sortBadges = (badges) => Object.values(badges).sort((a, b) => a.app.name.localeCompare(
  b.app.name,
  Intl.DateTimeFormat().resolvedOptions().locale,
  { sensitivity: "base" }
));
storage.saveBadge = async (badge) => {
  const badges = await storage.getBadges();
  badges[badge.bundleId] = badge;
  await import_api3.LocalStorage.setItem("badges", JSON.stringify(badges));
};
storage.deleteBadge = async (badge) => {
  const badges = await storage.getBadges();
  if (!badges[badge.bundleId])
    return;
  delete badges[badge.bundleId];
  await import_api3.LocalStorage.setItem("badges", JSON.stringify(badges));
};
storage.deleteAllBadges = async () => import_api3.LocalStorage.removeItem("badges");

// src/badges.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
function Badges() {
  const [isLoading, setIsLoading] = (0, import_react2.useState)(true);
  const [cache, setCache] = $c40d7eded38ca69c$export$14afb9e4c16377d3("badges", null);
  (0, import_react2.useEffect)(() => {
    (async () => {
      const badges = await storage.getBadges();
      await Promise.all(
        Object.entries(badges).map(async ([bundleId, badge]) => {
          try {
            if (!badge.showInactive && !await scripts.isOpen(bundleId))
              delete badges[bundleId];
            const count = await scripts.getCount(badge.app.name);
            if (count === true)
              badge.status = { count: 1, indeterminate: true };
            else
              badge.status.count = count;
          } catch (error) {
            await catchError(error);
          }
        })
      );
      setCache({ badges, preferences: await storage.getPreferences() });
      setIsLoading(false);
    })();
  }, [setCache]);
  let sortedBadges = [];
  if (cache?.badges)
    sortedBadges = storage.sortBadges(cache.badges);
  const total = sortedBadges.reduce((total2, badge) => total2 + badge.status.count, 0);
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
    import_api4.MenuBarExtra,
    {
      isLoading,
      title: cache?.preferences.showTotal && total ? `${total}` : "",
      icon: {
        source: !total ? "bell.svg" : "bell-ring.svg",
        tintColor: !total ? cache?.preferences.defaultColor : cache?.preferences.activeColor
      },
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api4.MenuBarExtra.Section, { title: "Applications", children: sortedBadges.map((badge, key) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          import_api4.MenuBarExtra.Item,
          {
            title: badge.app.name,
            subtitle: badge.status.count ? `(${badge.status.count})` : "",
            shortcut: { modifiers: [], key: `${key + 1}` },
            icon: { fileIcon: badge.app.path },
            onAction: () => (0, import_api4.open)(badge.app.path)
          },
          badge.bundleId
        )) }),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(import_api4.MenuBarExtra.Section, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            import_api4.MenuBarExtra.Item,
            {
              title: "Configure Badges",
              shortcut: { modifiers: ["cmd"], key: "1" },
              onAction: () => (0, import_api4.launchCommand)({ name: "search", type: import_api4.LaunchType.UserInitiated })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            import_api4.MenuBarExtra.Item,
            {
              title: "Configure Extension",
              shortcut: { modifiers: ["cmd"], key: "2" },
              onAction: () => (0, import_api4.openExtensionPreferences)()
            }
          )
        ] })
      ]
    }
  );
}
//# sourceMappingURL=data:application/json;base64,

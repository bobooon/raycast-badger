"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/badges.tsx
var badges_exports = {};
__export(badges_exports, {
  default: () => Badges
});
module.exports = __toCommonJS(badges_exports);
var import_api4 = require("@raycast/api");

// node_modules/@raycast/utils/dist/module.js
var import_react = __toESM(require("react"));
var import_api = require("@raycast/api");
var import_node_child_process = __toESM(require("node:child_process"));
var import_node_buffer = require("node:buffer");
var import_node_stream = __toESM(require("node:stream"));
var import_node_util = require("node:util");
var import_jsx_runtime = require("react/jsx-runtime");
var $parcel$global = globalThis;
function $bfcf6ee368b3bd9f$export$d4b699e2c1148419(value) {
  const ref = (0, import_react.useRef)(value);
  ref.current = value;
  return ref;
}
function $e2e1ea6dd3b7d2e1$export$b644b65666fe0c18(key, _value) {
  const value = this[key];
  if (value instanceof Date) return `__raycast_cached_date__${value.toString()}`;
  if (Buffer.isBuffer(value)) return `__raycast_cached_buffer__${value.toString("base64")}`;
  return _value;
}
function $e2e1ea6dd3b7d2e1$export$63698c10df99509c(_key, value) {
  if (typeof value === "string" && value.startsWith("__raycast_cached_date__")) return new Date(value.replace("__raycast_cached_date__", ""));
  if (typeof value === "string" && value.startsWith("__raycast_cached_buffer__")) return Buffer.from(value.replace("__raycast_cached_buffer__", ""), "base64");
  return value;
}
var $c40d7eded38ca69c$var$rootCache = /* @__PURE__ */ Symbol("cache without namespace");
var $c40d7eded38ca69c$var$cacheMap = /* @__PURE__ */ new Map();
function $c40d7eded38ca69c$export$14afb9e4c16377d3(key, initialState, config) {
  const cacheKey = config?.cacheNamespace || $c40d7eded38ca69c$var$rootCache;
  const cache = $c40d7eded38ca69c$var$cacheMap.get(cacheKey) || $c40d7eded38ca69c$var$cacheMap.set(cacheKey, new (0, import_api.Cache)({
    namespace: config?.cacheNamespace
  })).get(cacheKey);
  if (!cache) throw new Error("Missing cache");
  const keyRef = (0, $bfcf6ee368b3bd9f$export$d4b699e2c1148419)(key);
  const initialValueRef = (0, $bfcf6ee368b3bd9f$export$d4b699e2c1148419)(initialState);
  const cachedState = (0, import_react.useSyncExternalStore)(cache.subscribe, () => {
    try {
      return cache.get(keyRef.current);
    } catch (error) {
      console.error("Could not get Cache data:", error);
      return void 0;
    }
  });
  const state = (0, import_react.useMemo)(() => {
    if (typeof cachedState !== "undefined") {
      if (cachedState === "undefined") return void 0;
      try {
        return JSON.parse(cachedState, (0, $e2e1ea6dd3b7d2e1$export$63698c10df99509c));
      } catch (err) {
        console.warn("The cached data is corrupted", err);
        return initialValueRef.current;
      }
    } else return initialValueRef.current;
  }, [
    cachedState,
    initialValueRef
  ]);
  const stateRef = (0, $bfcf6ee368b3bd9f$export$d4b699e2c1148419)(state);
  const setStateAndCache = (0, import_react.useCallback)((updater) => {
    const newValue = typeof updater === "function" ? updater(stateRef.current) : updater;
    if (typeof newValue === "undefined") cache.set(keyRef.current, "undefined");
    else {
      const stringifiedValue = JSON.stringify(newValue, (0, $e2e1ea6dd3b7d2e1$export$b644b65666fe0c18));
      cache.set(keyRef.current, stringifiedValue);
    }
    return newValue;
  }, [
    cache,
    keyRef,
    stateRef
  ]);
  return [
    state,
    setStateAndCache
  ];
}
var $e6272883088c6834$var$processOk = (process1) => !!process1 && typeof process1 === "object" && typeof process1.removeListener === "function" && typeof process1.emit === "function" && typeof process1.reallyExit === "function" && typeof process1.listeners === "function" && typeof process1.kill === "function" && typeof process1.pid === "number" && typeof process1.on === "function";
var $e6272883088c6834$var$kExitEmitter = /* @__PURE__ */ Symbol.for("signal-exit emitter");
var $e6272883088c6834$var$Emitter = class {
  constructor() {
    this.emitted = {
      afterExit: false,
      exit: false
    };
    this.listeners = {
      afterExit: [],
      exit: []
    };
    this.count = 0;
    this.id = Math.random();
    if ($parcel$global[$e6272883088c6834$var$kExitEmitter])
      return $parcel$global[$e6272883088c6834$var$kExitEmitter];
    Object.defineProperty($parcel$global, $e6272883088c6834$var$kExitEmitter, {
      value: this,
      writable: false,
      enumerable: false,
      configurable: false
    });
  }
  on(ev, fn) {
    this.listeners[ev].push(fn);
  }
  removeListener(ev, fn) {
    const list = this.listeners[ev];
    const i = list.indexOf(fn);
    if (i === -1) return;
    if (i === 0 && list.length === 1) list.length = 0;
    else list.splice(i, 1);
  }
  emit(ev, code, signal) {
    if (this.emitted[ev]) return false;
    this.emitted[ev] = true;
    let ret = false;
    for (const fn of this.listeners[ev]) ret = fn(code, signal) === true || ret;
    if (ev === "exit") ret = this.emit("afterExit", code, signal) || ret;
    return ret;
  }
};
var $e6272883088c6834$var$SignalExitFallback = class {
  onExit() {
    return () => {
    };
  }
  load() {
  }
  unload() {
  }
};
var $e6272883088c6834$var$SignalExit = class {
  // "SIGHUP" throws an `ENOSYS` error on Windows,
  // so use a supported signal instead
  /* c8 ignore start */
  // @ts-ignore
  #hupSig;
  /* c8 ignore stop */
  #emitter;
  #process;
  #originalProcessEmit;
  #originalProcessReallyExit;
  #sigListeners;
  #loaded;
  #signals;
  constructor(process1) {
    this.#hupSig = process.platform === "win32" ? "SIGINT" : "SIGHUP";
    this.#emitter = new $e6272883088c6834$var$Emitter();
    this.#sigListeners = {};
    this.#loaded = false;
    this.#signals = [];
    this.#signals.push("SIGHUP", "SIGINT", "SIGTERM");
    if (globalThis.process.platform !== "win32") this.#signals.push("SIGALRM", "SIGABRT", "SIGVTALRM", "SIGXCPU", "SIGXFSZ", "SIGUSR2", "SIGTRAP", "SIGSYS", "SIGQUIT", "SIGIOT");
    if (globalThis.process.platform === "linux") this.#signals.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT");
    this.#process = process1;
    this.#sigListeners = {};
    for (const sig of this.#signals)
      this.#sigListeners[sig] = () => {
        const listeners = this.#process.listeners(sig);
        let { count } = this.#emitter;
        const p = process1;
        if (typeof p.__signal_exit_emitter__ === "object" && typeof p.__signal_exit_emitter__.count === "number") count += p.__signal_exit_emitter__.count;
        if (listeners.length === count) {
          this.unload();
          const ret = this.#emitter.emit("exit", null, sig);
          const s = sig === "SIGHUP" ? this.#hupSig : sig;
          if (!ret) process1.kill(process1.pid, s);
        }
      };
    this.#originalProcessReallyExit = process1.reallyExit;
    this.#originalProcessEmit = process1.emit;
  }
  onExit(cb, opts) {
    if (!$e6272883088c6834$var$processOk(this.#process)) return () => {
    };
    if (this.#loaded === false) this.load();
    const ev = opts?.alwaysLast ? "afterExit" : "exit";
    this.#emitter.on(ev, cb);
    return () => {
      this.#emitter.removeListener(ev, cb);
      if (this.#emitter.listeners["exit"].length === 0 && this.#emitter.listeners["afterExit"].length === 0) this.unload();
    };
  }
  load() {
    if (this.#loaded) return;
    this.#loaded = true;
    this.#emitter.count += 1;
    for (const sig of this.#signals) try {
      const fn = this.#sigListeners[sig];
      if (fn) this.#process.on(sig, fn);
    } catch (_) {
    }
    this.#process.emit = (ev, ...a) => {
      return this.#processEmit(ev, ...a);
    };
    this.#process.reallyExit = (code) => {
      return this.#processReallyExit(code);
    };
  }
  unload() {
    if (!this.#loaded) return;
    this.#loaded = false;
    this.#signals.forEach((sig) => {
      const listener = this.#sigListeners[sig];
      if (!listener) throw new Error("Listener not defined for signal: " + sig);
      try {
        this.#process.removeListener(sig, listener);
      } catch (_) {
      }
    });
    this.#process.emit = this.#originalProcessEmit;
    this.#process.reallyExit = this.#originalProcessReallyExit;
    this.#emitter.count -= 1;
  }
  #processReallyExit(code) {
    if (!$e6272883088c6834$var$processOk(this.#process)) return 0;
    this.#process.exitCode = code || 0;
    this.#emitter.emit("exit", this.#process.exitCode, null);
    return this.#originalProcessReallyExit.call(this.#process, this.#process.exitCode);
  }
  #processEmit(ev, ...args) {
    const og = this.#originalProcessEmit;
    if (ev === "exit" && $e6272883088c6834$var$processOk(this.#process)) {
      if (typeof args[0] === "number") this.#process.exitCode = args[0];
      const ret = og.call(this.#process, ev, ...args);
      this.#emitter.emit("exit", this.#process.exitCode, null);
      return ret;
    } else return og.call(this.#process, ev, ...args);
  }
};
var $e6272883088c6834$var$signalExit = null;
var $e6272883088c6834$export$47a57ed64c292d4f = (cb, opts) => {
  if (!$e6272883088c6834$var$signalExit) $e6272883088c6834$var$signalExit = $e6272883088c6834$var$processOk(process) ? new $e6272883088c6834$var$SignalExit(process) : new $e6272883088c6834$var$SignalExitFallback();
  return $e6272883088c6834$var$signalExit.onExit(cb, opts);
};
function $c86e3701e284ece4$export$6e3a9b5342d42997(spawned, { timeout } = {}) {
  const spawnedPromise = new Promise((resolve, reject) => {
    spawned.on("exit", (exitCode, signal) => {
      resolve({
        exitCode,
        signal,
        timedOut: false
      });
    });
    spawned.on("error", (error) => {
      reject(error);
    });
    if (spawned.stdin) spawned.stdin.on("error", (error) => {
      reject(error);
    });
  });
  const removeExitHandler = (0, $e6272883088c6834$export$47a57ed64c292d4f)(() => {
    spawned.kill();
  });
  if (timeout === 0 || timeout === void 0) return spawnedPromise.finally(() => removeExitHandler());
  let timeoutId;
  const timeoutPromise = new Promise((_resolve, reject) => {
    timeoutId = setTimeout(() => {
      spawned.kill("SIGTERM");
      reject(Object.assign(new Error("Timed out"), {
        timedOut: true,
        signal: "SIGTERM"
      }));
    }, timeout);
  });
  const safeSpawnedPromise = spawnedPromise.finally(() => {
    clearTimeout(timeoutId);
  });
  return Promise.race([
    timeoutPromise,
    safeSpawnedPromise
  ]).finally(() => removeExitHandler());
}
var $c86e3701e284ece4$var$MaxBufferError = class extends Error {
  constructor() {
    super("The output is too big");
    this.name = "MaxBufferError";
  }
};
function $c86e3701e284ece4$var$bufferStream(options) {
  const { encoding } = options;
  const isBuffer = encoding === "buffer";
  const stream = new (0, import_node_stream.default).PassThrough({
    objectMode: false
  });
  if (encoding && encoding !== "buffer") stream.setEncoding(encoding);
  let length = 0;
  const chunks = [];
  stream.on("data", (chunk) => {
    chunks.push(chunk);
    length += chunk.length;
  });
  stream.getBufferedValue = () => {
    return isBuffer ? Buffer.concat(chunks, length) : chunks.join("");
  };
  stream.getBufferedLength = () => length;
  return stream;
}
async function $c86e3701e284ece4$var$getStream(inputStream, options) {
  const stream = $c86e3701e284ece4$var$bufferStream(options);
  await new Promise((resolve, reject) => {
    const rejectPromise = (error) => {
      if (error && stream.getBufferedLength() <= (0, import_node_buffer.constants).MAX_LENGTH) error.bufferedData = stream.getBufferedValue();
      reject(error);
    };
    (async () => {
      try {
        await (0, import_node_util.promisify)((0, import_node_stream.default).pipeline)(inputStream, stream);
        resolve();
      } catch (error) {
        rejectPromise(error);
      }
    })();
    stream.on("data", () => {
      if (stream.getBufferedLength() > 8e7) rejectPromise(new $c86e3701e284ece4$var$MaxBufferError());
    });
  });
  return stream.getBufferedValue();
}
async function $c86e3701e284ece4$var$getBufferedData(stream, streamPromise) {
  stream.destroy();
  try {
    return await streamPromise;
  } catch (error) {
    return error.bufferedData;
  }
}
async function $c86e3701e284ece4$export$67b768ac9e1c70fa({ stdout, stderr }, { encoding }, processDone) {
  const stdoutPromise = $c86e3701e284ece4$var$getStream(stdout, {
    encoding
  });
  const stderrPromise = $c86e3701e284ece4$var$getStream(stderr, {
    encoding
  });
  try {
    return await Promise.all([
      processDone,
      stdoutPromise,
      stderrPromise
    ]);
  } catch (error) {
    return Promise.all([
      {
        error,
        exitCode: null,
        signal: error.signal,
        timedOut: error.timedOut || false
      },
      $c86e3701e284ece4$var$getBufferedData(stdout, stdoutPromise),
      $c86e3701e284ece4$var$getBufferedData(stderr, stderrPromise)
    ]);
  }
}
function $c86e3701e284ece4$var$stripFinalNewline(input) {
  const LF = typeof input === "string" ? "\n" : "\n".charCodeAt(0);
  const CR = typeof input === "string" ? "\r" : "\r".charCodeAt(0);
  if (input[input.length - 1] === LF)
    input = input.slice(0, -1);
  if (input[input.length - 1] === CR)
    input = input.slice(0, -1);
  return input;
}
function $c86e3701e284ece4$export$200978bbc0b73ca(options, value) {
  if (options.stripFinalNewline) return $c86e3701e284ece4$var$stripFinalNewline(value);
  return value;
}
function $c86e3701e284ece4$var$getErrorPrefix({ timedOut, timeout, signal, exitCode }) {
  if (timedOut) return `timed out after ${timeout} milliseconds`;
  if (signal !== void 0 && signal !== null) return `was killed with ${signal}`;
  if (exitCode !== void 0 && exitCode !== null) return `failed with exit code ${exitCode}`;
  return "failed";
}
function $c86e3701e284ece4$var$makeError({ stdout, stderr, error, signal, exitCode, command, timedOut, options, parentError }) {
  const prefix = $c86e3701e284ece4$var$getErrorPrefix({
    timedOut,
    timeout: options?.timeout,
    signal,
    exitCode
  });
  const execaMessage = `Command ${prefix}: ${command}`;
  const shortMessage = error ? `${execaMessage}
${error.message}` : execaMessage;
  const message = [
    shortMessage,
    stderr,
    stdout
  ].filter(Boolean).join("\n");
  if (error)
    error.originalMessage = error.message;
  else error = parentError;
  error.message = message;
  error.shortMessage = shortMessage;
  error.command = command;
  error.exitCode = exitCode;
  error.signal = signal;
  error.stdout = stdout;
  error.stderr = stderr;
  if ("bufferedData" in error) delete error["bufferedData"];
  return error;
}
function $c86e3701e284ece4$export$a8f5efe603803b77({ stdout, stderr, error, exitCode, signal, timedOut, command, options, parentError }) {
  if (error || exitCode !== 0 || signal !== null) {
    const returnedError = $c86e3701e284ece4$var$makeError({
      error,
      exitCode,
      signal,
      stdout,
      stderr,
      command,
      timedOut,
      options,
      parentError
    });
    throw returnedError;
  }
  return stdout;
}
async function $179449bbef1d262b$export$8982d27dc997624f(script, optionsOrArgs, options) {
  if (process.platform !== "darwin") throw new Error("AppleScript is only supported on macOS");
  const { humanReadableOutput, language, timeout, ...execOptions } = Array.isArray(optionsOrArgs) ? options || {} : optionsOrArgs || {};
  const outputArguments = humanReadableOutput !== false ? [] : [
    "-ss"
  ];
  if (language === "JavaScript") outputArguments.push("-l", "JavaScript");
  if (Array.isArray(optionsOrArgs)) outputArguments.push("-", ...optionsOrArgs);
  const spawned = (0, import_node_child_process.default).spawn("osascript", outputArguments, {
    ...execOptions,
    env: {
      PATH: "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
    }
  });
  const spawnedPromise = (0, $c86e3701e284ece4$export$6e3a9b5342d42997)(spawned, {
    timeout: timeout ?? 1e4
  });
  spawned.stdin.end(script);
  const [{ error, exitCode, signal, timedOut }, stdoutResult, stderrResult] = await (0, $c86e3701e284ece4$export$67b768ac9e1c70fa)(spawned, {
    encoding: "utf8"
  }, spawnedPromise);
  const stdout = (0, $c86e3701e284ece4$export$200978bbc0b73ca)({
    stripFinalNewline: true
  }, stdoutResult);
  const stderr = (0, $c86e3701e284ece4$export$200978bbc0b73ca)({
    stripFinalNewline: true
  }, stderrResult);
  return (0, $c86e3701e284ece4$export$a8f5efe603803b77)({
    stdout,
    stderr,
    error,
    exitCode,
    signal,
    timedOut,
    command: "osascript",
    options,
    parentError: new Error()
  });
}

// src/badges.tsx
var import_react2 = require("react");

// src/utils/error.ts
async function catchError(error) {
  if (error.message.includes("-1743") || error.message.includes("-1719")) {
    throw new Error(
      "To access the Dock badges, Raycast must have Accessibility and Automation permissions.\n\nSystem Settings > Privacy & Security"
    );
  }
  throw new Error(error.message);
}

// src/utils/scripts.ts
var import_node_fs = require("node:fs");
var import_node_path = __toESM(require("node:path"), 1);
var import_api2 = require("@raycast/api");
var assets = import_node_path.default.join(import_api2.environment.assetsPath, "scripts");
function scripts() {
}
scripts.isOpen = async (bundleId) => {
  const script = await import_node_fs.promises.readFile(import_node_path.default.join(assets, "app-status.applescript"));
  return await $179449bbef1d262b$export$8982d27dc997624f(script.toString(), [bundleId]) === "true";
};
scripts.getCount = async (appName) => {
  const script = await import_node_fs.promises.readFile(import_node_path.default.join(assets, "badge-count.applescript"));
  const result = await $179449bbef1d262b$export$8982d27dc997624f(script.toString(), [appName]);
  if (result === "\u2022")
    return true;
  const count = Number.parseInt(result, 10);
  return Number.isNaN(count) ? 0 : count;
};

// src/utils/storage.ts
var import_api3 = require("@raycast/api");
function storage() {
}
storage.getPreferences = async () => (0, import_api3.getPreferenceValues)();
storage.getBadges = async () => {
  const apps = await (0, import_api3.getApplications)();
  const badges = JSON.parse(await import_api3.LocalStorage.getItem("badges") || "{}");
  Object.entries(badges).forEach(([bundleId, badge]) => {
    const app = apps.filter((app2) => app2.bundleId === bundleId).pop();
    if (!app) {
      delete badges[bundleId];
      return;
    }
    badge.app = app;
    badge.status = { count: 0, indeterminate: false };
  });
  return badges;
};
storage.sortBadges = (badges) => Object.values(badges).sort((a, b) => a.app.name.localeCompare(
  b.app.name,
  Intl.DateTimeFormat().resolvedOptions().locale,
  { sensitivity: "base" }
));
storage.saveBadge = async (badge) => {
  const badges = await storage.getBadges();
  badges[badge.bundleId] = badge;
  await import_api3.LocalStorage.setItem("badges", JSON.stringify(badges));
};
storage.deleteBadge = async (badge) => {
  const badges = await storage.getBadges();
  if (!badges[badge.bundleId])
    return;
  delete badges[badge.bundleId];
  await import_api3.LocalStorage.setItem("badges", JSON.stringify(badges));
};
storage.deleteAllBadges = async () => import_api3.LocalStorage.removeItem("badges");

// src/badges.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
function Badges() {
  const [isLoading, setIsLoading] = (0, import_react2.useState)(true);
  const [cache, setCache] = $c40d7eded38ca69c$export$14afb9e4c16377d3("badges", null);
  (0, import_react2.useEffect)(() => {
    (async () => {
      const badges = await storage.getBadges();
      await Promise.all(
        Object.entries(badges).map(async ([bundleId, badge]) => {
          try {
            if (!badge.showInactive && !await scripts.isOpen(bundleId))
              delete badges[bundleId];
            const count = await scripts.getCount(badge.app.name);
            if (count === true)
              badge.status = { count: 1, indeterminate: true };
            else
              badge.status.count = count;
          } catch (error) {
            await catchError(error);
          }
        })
      );
      setCache({ badges, preferences: await storage.getPreferences() });
      setIsLoading(false);
    })();
  }, [setCache]);
  let sortedBadges = [];
  if (cache?.badges)
    sortedBadges = storage.sortBadges(cache.badges);
  const total = sortedBadges.reduce((total2, badge) => total2 + badge.status.count, 0);
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
    import_api4.MenuBarExtra,
    {
      isLoading,
      title: cache?.preferences.showTotal && total ? `${total}` : "",
      icon: {
        source: !total ? "bell.svg" : "bell-ring.svg",
        tintColor: !total ? cache?.preferences.defaultColor : cache?.preferences.activeColor
      },
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_api4.MenuBarExtra.Section, { title: "Applications", children: sortedBadges.map((badge, key) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          import_api4.MenuBarExtra.Item,
          {
            title: badge.app.name,
            subtitle: badge.status.count ? `(${badge.status.count})` : "",
            shortcut: { modifiers: [], key: `${key + 1}` },
            icon: { fileIcon: badge.app.path },
            onAction: () => (0, import_api4.open)(badge.app.path)
          },
          badge.bundleId
        )) }),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(import_api4.MenuBarExtra.Section, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            import_api4.MenuBarExtra.Item,
            {
              title: "Configure Badges",
              shortcut: { modifiers: ["cmd"], key: "1" },
              onAction: () => (0, import_api4.launchCommand)({ name: "search", type: import_api4.LaunchType.UserInitiated })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            import_api4.MenuBarExtra.Item,
            {
              title: "Configure Extension",
              shortcut: { modifiers: ["cmd"], key: "2" },
              onAction: () => (0, import_api4.openExtensionPreferences)()
            }
          )
        ] })
      ]
    }
  );
}
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2NvbnRhaW5lcnMvbGFicy9wbHVnaW5zL2JhZGdlci9zcmMvYmFkZ2VzLnRzeCIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvY29udGFpbmVycy9sYWJzL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy9pbmRleC50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvY29udGFpbmVycy9sYWJzL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy91c2VQcm9taXNlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9jb250YWluZXJzL2xhYnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL3VzZURlZXBNZW1vLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9jb250YWluZXJzL2xhYnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL3VzZUxhdGVzdC50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvY29udGFpbmVycy9sYWJzL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy9zaG93RmFpbHVyZVRvYXN0LnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9jb250YWluZXJzL2xhYnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL3VzZUNhY2hlZFN0YXRlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9jb250YWluZXJzL2xhYnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL2hlbHBlcnMudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2NvbnRhaW5lcnMvbGFicy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvdmVuZG9ycy90eXBlLWhhc2hlci50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvY29udGFpbmVycy9sYWJzL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy91c2VDYWNoZWRQcm9taXNlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9jb250YWluZXJzL2xhYnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL3VzZUZldGNoLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9jb250YWluZXJzL2xhYnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL2ZldGNoLXV0aWxzLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9jb250YWluZXJzL2xhYnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL3VzZUV4ZWMudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2NvbnRhaW5lcnMvbGFicy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvZXhlYy11dGlscy50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvY29udGFpbmVycy9sYWJzL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy92ZW5kb3JzL3NpZ25hbC1leGl0LnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9jb250YWluZXJzL2xhYnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL3VzZVN0cmVhbUpTT04udHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2NvbnRhaW5lcnMvbGFicy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvdmVuZG9ycy9zdHJlYW0tY2hhaW4udHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2NvbnRhaW5lcnMvbGFicy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvdmVuZG9ycy9zdHJlYW0tanNvbi50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvY29udGFpbmVycy9sYWJzL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy91c2VTUUwudHN4IiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9jb250YWluZXJzL2xhYnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL3NxbC11dGlscy50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvY29udGFpbmVycy9sYWJzL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy91c2VGb3JtLnRzeCIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvY29udGFpbmVycy9sYWJzL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy91c2VBSS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvY29udGFpbmVycy9sYWJzL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy91c2VGcmVjZW5jeVNvcnRpbmcudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2NvbnRhaW5lcnMvbGFicy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvdXNlTG9jYWxTdG9yYWdlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9jb250YWluZXJzL2xhYnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL2ljb24vaW5kZXgudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2NvbnRhaW5lcnMvbGFicy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvaWNvbi9hdmF0YXIudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2NvbnRhaW5lcnMvbGFicy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvaWNvbi9jb2xvci50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvY29udGFpbmVycy9sYWJzL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy9pY29uL2Zhdmljb24udHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2NvbnRhaW5lcnMvbGFicy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvaWNvbi9wcm9ncmVzcy50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvY29udGFpbmVycy9sYWJzL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy9vYXV0aC9pbmRleC50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvY29udGFpbmVycy9sYWJzL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy9vYXV0aC9PQXV0aFNlcnZpY2UudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2NvbnRhaW5lcnMvbGFicy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvb2F1dGgvcHJvdmlkZXJzLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9jb250YWluZXJzL2xhYnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL29hdXRoL3dpdGhBY2Nlc3NUb2tlbi50c3giLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2NvbnRhaW5lcnMvbGFicy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvY3JlYXRlRGVlcGxpbmsudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2NvbnRhaW5lcnMvbGFicy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvZXhlY3V0ZVNRTC50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9Wb2x1bWVzL0RhdGEvY29udGFpbmVycy9sYWJzL3BsdWdpbnMvYmFkZ2VyL25vZGVfbW9kdWxlcy9AcmF5Y2FzdC91dGlscy9kaXN0L3NyYy9ydW4tYXBwbGVzY3JpcHQudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2NvbnRhaW5lcnMvbGFicy9wbHVnaW5zL2JhZGdlci9ub2RlX21vZHVsZXMvQHJheWNhc3QvdXRpbHMvZGlzdC9zcmMvcnVuLXBvd2Vyc2hlbGwtc2NyaXB0LnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9jb250YWluZXJzL2xhYnMvcGx1Z2lucy9iYWRnZXIvbm9kZV9tb2R1bGVzL0ByYXljYXN0L3V0aWxzL2Rpc3Qvc3JjL2NhY2hlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9jb250YWluZXJzL2xhYnMvcGx1Z2lucy9iYWRnZXIvc3JjL3V0aWxzL2Vycm9yLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL1ZvbHVtZXMvRGF0YS9jb250YWluZXJzL2xhYnMvcGx1Z2lucy9iYWRnZXIvc3JjL3V0aWxzL3NjcmlwdHMudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vVm9sdW1lcy9EYXRhL2NvbnRhaW5lcnMvbGFicy9wbHVnaW5zL2JhZGdlci9zcmMvdXRpbHMvc3RvcmFnZS50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHR5cGUgeyBLZXlib2FyZCB9IGZyb20gJ0ByYXljYXN0L2FwaSdcbmltcG9ydCB7IGxhdW5jaENvbW1hbmQsIExhdW5jaFR5cGUsIE1lbnVCYXJFeHRyYSwgb3Blbiwgb3BlbkV4dGVuc2lvblByZWZlcmVuY2VzIH0gZnJvbSAnQHJheWNhc3QvYXBpJ1xuaW1wb3J0IHsgdXNlQ2FjaGVkU3RhdGUgfSBmcm9tICdAcmF5Y2FzdC91dGlscydcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBjYXRjaEVycm9yIGZyb20gJy4vdXRpbHMvZXJyb3IudHMnXG5pbXBvcnQgc2NyaXB0cyBmcm9tICcuL3V0aWxzL3NjcmlwdHMudHMnXG5pbXBvcnQgc3RvcmFnZSBmcm9tICcuL3V0aWxzL3N0b3JhZ2UudHMnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJhZGdlcygpIHtcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpXG4gIGNvbnN0IFtjYWNoZSwgc2V0Q2FjaGVdID0gdXNlQ2FjaGVkU3RhdGU8QmFkZ2VyQ2FjaGUgfCBudWxsPignYmFkZ2VzJywgbnVsbClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIChhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBiYWRnZXMgPSBhd2FpdCBzdG9yYWdlLmdldEJhZGdlcygpXG5cbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICBPYmplY3QuZW50cmllcyhiYWRnZXMpLm1hcChhc3luYyAoW2J1bmRsZUlkLCBiYWRnZV0pID0+IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKCFiYWRnZS5zaG93SW5hY3RpdmUgJiYgIShhd2FpdCBzY3JpcHRzLmlzT3BlbihidW5kbGVJZCkpKVxuICAgICAgICAgICAgICBkZWxldGUgYmFkZ2VzW2J1bmRsZUlkXVxuXG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IGF3YWl0IHNjcmlwdHMuZ2V0Q291bnQoYmFkZ2UuYXBwLm5hbWUpXG4gICAgICAgICAgICBpZiAoY291bnQgPT09IHRydWUpXG4gICAgICAgICAgICAgIGJhZGdlLnN0YXR1cyA9IHsgY291bnQ6IDEsIGluZGV0ZXJtaW5hdGU6IHRydWUgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICBiYWRnZS5zdGF0dXMuY291bnQgPSBjb3VudFxuICAgICAgICAgIH1cbiAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGF3YWl0IGNhdGNoRXJyb3IoZXJyb3IgYXMgRXJyb3IpXG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgIClcblxuICAgICAgc2V0Q2FjaGUoeyBiYWRnZXMsIHByZWZlcmVuY2VzOiBhd2FpdCBzdG9yYWdlLmdldFByZWZlcmVuY2VzKCkgfSlcbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSlcbiAgICB9KSgpXG4gIH0sIFtzZXRDYWNoZV0pXG5cbiAgbGV0IHNvcnRlZEJhZGdlczogQmFkZ2VyW10gPSBbXVxuICBpZiAoY2FjaGU/LmJhZGdlcylcbiAgICBzb3J0ZWRCYWRnZXMgPSBzdG9yYWdlLnNvcnRCYWRnZXMoY2FjaGUuYmFkZ2VzKVxuXG4gIGNvbnN0IHRvdGFsID0gc29ydGVkQmFkZ2VzXG4gICAgLnJlZHVjZSgodG90YWwsIGJhZGdlKSA9PiB0b3RhbCArIGJhZGdlLnN0YXR1cy5jb3VudCwgMClcblxuICByZXR1cm4gKFxuICAgIDxNZW51QmFyRXh0cmFcbiAgICAgIGlzTG9hZGluZz17aXNMb2FkaW5nfVxuICAgICAgdGl0bGU9e2NhY2hlPy5wcmVmZXJlbmNlcy5zaG93VG90YWwgJiYgdG90YWwgPyBgJHt0b3RhbH1gIDogJyd9XG4gICAgICBpY29uPXt7XG4gICAgICAgIHNvdXJjZTogIXRvdGFsID8gJ2JlbGwuc3ZnJyA6ICdiZWxsLXJpbmcuc3ZnJyxcbiAgICAgICAgdGludENvbG9yOiAhdG90YWwgPyBjYWNoZT8ucHJlZmVyZW5jZXMuZGVmYXVsdENvbG9yIDogY2FjaGU/LnByZWZlcmVuY2VzLmFjdGl2ZUNvbG9yLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8TWVudUJhckV4dHJhLlNlY3Rpb24gdGl0bGU9XCJBcHBsaWNhdGlvbnNcIj5cbiAgICAgICAge3NvcnRlZEJhZGdlcy5tYXAoKGJhZGdlLCBrZXkpID0+IChcbiAgICAgICAgICA8TWVudUJhckV4dHJhLkl0ZW1cbiAgICAgICAgICAgIGtleT17YmFkZ2UuYnVuZGxlSWR9XG4gICAgICAgICAgICB0aXRsZT17YmFkZ2UuYXBwLm5hbWV9XG4gICAgICAgICAgICBzdWJ0aXRsZT17YmFkZ2Uuc3RhdHVzLmNvdW50ID8gYCgke2JhZGdlLnN0YXR1cy5jb3VudH0pYCA6ICcnfVxuICAgICAgICAgICAgc2hvcnRjdXQ9e3sgbW9kaWZpZXJzOiBbXSwga2V5OiBgJHtrZXkgKyAxfWAgYXMgS2V5Ym9hcmQuS2V5RXF1aXZhbGVudCB9fVxuICAgICAgICAgICAgaWNvbj17eyBmaWxlSWNvbjogYmFkZ2UuYXBwLnBhdGggfX1cbiAgICAgICAgICAgIG9uQWN0aW9uPXsoKSA9PiBvcGVuKGJhZGdlLmFwcC5wYXRoKX1cbiAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICAgIDwvTWVudUJhckV4dHJhLlNlY3Rpb24+XG5cbiAgICAgIDxNZW51QmFyRXh0cmEuU2VjdGlvbj5cbiAgICAgICAgPE1lbnVCYXJFeHRyYS5JdGVtXG4gICAgICAgICAgdGl0bGU9XCJDb25maWd1cmUgQmFkZ2VzXCJcbiAgICAgICAgICBzaG9ydGN1dD17eyBtb2RpZmllcnM6IFsnY21kJ10sIGtleTogJzEnIH19XG4gICAgICAgICAgb25BY3Rpb249eygpID0+IGxhdW5jaENvbW1hbmQoeyBuYW1lOiAnc2VhcmNoJywgdHlwZTogTGF1bmNoVHlwZS5Vc2VySW5pdGlhdGVkIH0pfVxuICAgICAgICAvPlxuICAgICAgICA8TWVudUJhckV4dHJhLkl0ZW1cbiAgICAgICAgICB0aXRsZT1cIkNvbmZpZ3VyZSBFeHRlbnNpb25cIlxuICAgICAgICAgIHNob3J0Y3V0PXt7IG1vZGlmaWVyczogWydjbWQnXSwga2V5OiAnMicgfX1cbiAgICAgICAgICBvbkFjdGlvbj17KCkgPT4gb3BlbkV4dGVuc2lvblByZWZlcmVuY2VzKCl9XG4gICAgICAgIC8+XG4gICAgICA8L01lbnVCYXJFeHRyYS5TZWN0aW9uPlxuICAgIDwvTWVudUJhckV4dHJhPlxuICApXG59XG4iLCAiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJub2RlXCIgLz5cblxuZXhwb3J0IHsgdXNlUHJvbWlzZSB9IGZyb20gXCIuL3VzZVByb21pc2VcIjtcbmV4cG9ydCB7IHVzZUNhY2hlZFN0YXRlIH0gZnJvbSBcIi4vdXNlQ2FjaGVkU3RhdGVcIjtcbmV4cG9ydCB7IHVzZUNhY2hlZFByb21pc2UgfSBmcm9tIFwiLi91c2VDYWNoZWRQcm9taXNlXCI7XG5leHBvcnQgeyB1c2VGZXRjaCB9IGZyb20gXCIuL3VzZUZldGNoXCI7XG5leHBvcnQgeyB1c2VFeGVjIH0gZnJvbSBcIi4vdXNlRXhlY1wiO1xuZXhwb3J0IHsgdXNlU3RyZWFtSlNPTiB9IGZyb20gXCIuL3VzZVN0cmVhbUpTT05cIjtcbmV4cG9ydCB7IHVzZVNRTCB9IGZyb20gXCIuL3VzZVNRTFwiO1xuZXhwb3J0IHsgdXNlRm9ybSwgRm9ybVZhbGlkYXRpb24gfSBmcm9tIFwiLi91c2VGb3JtXCI7XG5leHBvcnQgeyB1c2VBSSB9IGZyb20gXCIuL3VzZUFJXCI7XG5leHBvcnQgeyB1c2VGcmVjZW5jeVNvcnRpbmcgfSBmcm9tIFwiLi91c2VGcmVjZW5jeVNvcnRpbmdcIjtcbmV4cG9ydCB7IHVzZUxvY2FsU3RvcmFnZSB9IGZyb20gXCIuL3VzZUxvY2FsU3RvcmFnZVwiO1xuXG5leHBvcnQgeyBnZXRBdmF0YXJJY29uLCBnZXRGYXZpY29uLCBnZXRQcm9ncmVzc0ljb24gfSBmcm9tIFwiLi9pY29uXCI7XG5cbmV4cG9ydCB7IE9BdXRoU2VydmljZSwgd2l0aEFjY2Vzc1Rva2VuLCBnZXRBY2Nlc3NUb2tlbiB9IGZyb20gXCIuL29hdXRoXCI7XG5cbmV4cG9ydCB7IGNyZWF0ZURlZXBsaW5rLCBjcmVhdGVFeHRlbnNpb25EZWVwbGluaywgY3JlYXRlU2NyaXB0Q29tbWFuZERlZXBsaW5rLCBEZWVwbGlua1R5cGUgfSBmcm9tIFwiLi9jcmVhdGVEZWVwbGlua1wiO1xuZXhwb3J0IHsgZXhlY3V0ZVNRTCB9IGZyb20gXCIuL2V4ZWN1dGVTUUxcIjtcbmV4cG9ydCB7IHJ1bkFwcGxlU2NyaXB0IH0gZnJvbSBcIi4vcnVuLWFwcGxlc2NyaXB0XCI7XG5leHBvcnQgeyBydW5Qb3dlclNoZWxsU2NyaXB0IH0gZnJvbSBcIi4vcnVuLXBvd2Vyc2hlbGwtc2NyaXB0XCI7XG5leHBvcnQgeyBzaG93RmFpbHVyZVRvYXN0IH0gZnJvbSBcIi4vc2hvd0ZhaWx1cmVUb2FzdFwiO1xuZXhwb3J0IHsgd2l0aENhY2hlIH0gZnJvbSBcIi4vY2FjaGVcIjtcblxuZXhwb3J0IHR5cGUgeyBQcm9taXNlT3B0aW9ucyB9IGZyb20gXCIuL3VzZVByb21pc2VcIjtcbmV4cG9ydCB0eXBlIHsgQ2FjaGVkUHJvbWlzZU9wdGlvbnMgfSBmcm9tIFwiLi91c2VDYWNoZWRQcm9taXNlXCI7XG5leHBvcnQgdHlwZSB7XG4gIE9BdXRoU2VydmljZU9wdGlvbnMsXG4gIE9uQXV0aG9yaXplUGFyYW1zLFxuICBXaXRoQWNjZXNzVG9rZW5Db21wb25lbnRPckZuLFxuICBQcm92aWRlcldpdGhEZWZhdWx0Q2xpZW50T3B0aW9ucyxcbiAgUHJvdmlkZXJPcHRpb25zLFxufSBmcm9tIFwiLi9vYXV0aFwiO1xuZXhwb3J0IHR5cGUgeyBBc3luY1N0YXRlLCBNdXRhdGVQcm9taXNlIH0gZnJvbSBcIi4vdHlwZXNcIjtcbiIsICJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrLCBSZWZPYmplY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGVudmlyb25tZW50LCBMYXVuY2hUeXBlLCBUb2FzdCB9IGZyb20gXCJAcmF5Y2FzdC9hcGlcIjtcbmltcG9ydCB7IHVzZURlZXBNZW1vIH0gZnJvbSBcIi4vdXNlRGVlcE1lbW9cIjtcbmltcG9ydCB7XG4gIEZ1bmN0aW9uUmV0dXJuaW5nUHJvbWlzZSxcbiAgTXV0YXRlUHJvbWlzZSxcbiAgVXNlUHJvbWlzZVJldHVyblR5cGUsXG4gIEFzeW5jU3RhdGUsXG4gIEZ1bmN0aW9uUmV0dXJuaW5nUGFnaW5hdGVkUHJvbWlzZSxcbiAgVW53cmFwUmV0dXJuLFxuICBQYWdpbmF0aW9uT3B0aW9ucyxcbn0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IHVzZUxhdGVzdCB9IGZyb20gXCIuL3VzZUxhdGVzdFwiO1xuaW1wb3J0IHsgc2hvd0ZhaWx1cmVUb2FzdCB9IGZyb20gXCIuL3Nob3dGYWlsdXJlVG9hc3RcIjtcblxuZXhwb3J0IHR5cGUgUHJvbWlzZU9wdGlvbnM8VCBleHRlbmRzIEZ1bmN0aW9uUmV0dXJuaW5nUHJvbWlzZSB8IEZ1bmN0aW9uUmV0dXJuaW5nUGFnaW5hdGVkUHJvbWlzZT4gPSB7XG4gIC8qKlxuICAgKiBBIHJlZmVyZW5jZSB0byBhbiBgQWJvcnRDb250cm9sbGVyYCB0byBjYW5jZWwgYSBwcmV2aW91cyBjYWxsIHdoZW4gdHJpZ2dlcmluZyBhIG5ldyBvbmVcbiAgICovXG4gIGFib3J0YWJsZT86IFJlZk9iamVjdDxBYm9ydENvbnRyb2xsZXIgfCBudWxsIHwgdW5kZWZpbmVkPjtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gYWN0dWFsbHkgZXhlY3V0ZSB0aGUgZnVuY3Rpb24gb3Igbm90LlxuICAgKiBUaGlzIGlzIHVzZWZ1bCBmb3IgY2FzZXMgd2hlcmUgb25lIG9mIHRoZSBmdW5jdGlvbidzIGFyZ3VtZW50cyBkZXBlbmRzIG9uIHNvbWV0aGluZyB0aGF0XG4gICAqIG1pZ2h0IG5vdCBiZSBhdmFpbGFibGUgcmlnaHQgYXdheSAoZm9yIGV4YW1wbGUsIGRlcGVuZHMgb24gc29tZSB1c2VyIGlucHV0cykuIEJlY2F1c2UgUmVhY3QgcmVxdWlyZXNcbiAgICogZXZlcnkgaG9va3MgdG8gYmUgZGVmaW5lZCBvbiB0aGUgcmVuZGVyLCB0aGlzIGZsYWcgZW5hYmxlcyB5b3UgdG8gZGVmaW5lIHRoZSBob29rIHJpZ2h0IGF3YXkgYnV0XG4gICAqIHdhaXQgdXRpbCB5b3UgaGF2ZSBhbGwgdGhlIGFyZ3VtZW50cyByZWFkeSB0byBleGVjdXRlIHRoZSBmdW5jdGlvbi5cbiAgICovXG4gIGV4ZWN1dGU/OiBib29sZWFuO1xuICAvKipcbiAgICogT3B0aW9ucyBmb3IgdGhlIGdlbmVyaWMgZmFpbHVyZSB0b2FzdC5cbiAgICogSXQgYWxsb3dzIHlvdSB0byBjdXN0b21pemUgdGhlIHRpdGxlLCBtZXNzYWdlLCBhbmQgcHJpbWFyeSBhY3Rpb24gb2YgdGhlIGZhaWx1cmUgdG9hc3QuXG4gICAqL1xuICBmYWlsdXJlVG9hc3RPcHRpb25zPzogUGFydGlhbDxQaWNrPFRvYXN0Lk9wdGlvbnMsIFwidGl0bGVcIiB8IFwicHJpbWFyeUFjdGlvblwiIHwgXCJtZXNzYWdlXCI+PjtcbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGFuIGV4ZWN1dGlvbiBmYWlscy4gQnkgZGVmYXVsdCBpdCB3aWxsIGxvZyB0aGUgZXJyb3IgYW5kIHNob3dcbiAgICogYSBnZW5lcmljIGZhaWx1cmUgdG9hc3QuXG4gICAqL1xuICBvbkVycm9yPzogKGVycm9yOiBFcnJvcikgPT4gdm9pZCB8IFByb21pc2U8dm9pZD47XG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhbiBleGVjdXRpb24gc3VjY2VlZHMuXG4gICAqL1xuICBvbkRhdGE/OiAoZGF0YTogVW53cmFwUmV0dXJuPFQ+LCBwYWdpbmF0aW9uPzogUGFnaW5hdGlvbk9wdGlvbnM8VW53cmFwUmV0dXJuPFQ+PikgPT4gdm9pZCB8IFByb21pc2U8dm9pZD47XG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhbiBleGVjdXRpb24gd2lsbCBzdGFydFxuICAgKi9cbiAgb25XaWxsRXhlY3V0ZT86IChwYXJhbWV0ZXJzOiBQYXJhbWV0ZXJzPFQ+KSA9PiB2b2lkO1xufTtcblxuLyoqXG4gKiBXcmFwcyBhbiBhc3luY2hyb25vdXMgZnVuY3Rpb24gb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBQcm9taXNlIGluIGFub3RoZXIgZnVuY3Rpb24sIGFuZCByZXR1cm5zIHRoZSB7QGxpbmsgQXN5bmNTdGF0ZX0gY29ycmVzcG9uZGluZyB0byB0aGUgZXhlY3V0aW9uIG9mIHRoZSBmdW5jdGlvbi5cbiAqXG4gKiBAcmVtYXJrIFRoaXMgb3ZlcmxvYWQgc2hvdWxkIGJlIHVzZWQgd2hlbiB3b3JraW5nIHdpdGggcGFnaW5hdGVkIGRhdGEgc291cmNlcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiBpbXBvcnQgeyBzZXRUaW1lb3V0IH0gZnJvbSBcIm5vZGU6dGltZXJzL3Byb21pc2VzXCI7XG4gKiBpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuICogaW1wb3J0IHsgTGlzdCB9IGZyb20gXCJAcmF5Y2FzdC9hcGlcIjtcbiAqIGltcG9ydCB7IHVzZVByb21pc2UgfSBmcm9tIFwiQHJheWNhc3QvdXRpbHNcIjtcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb21tYW5kKCkge1xuICogICBjb25zdCBbc2VhcmNoVGV4dCwgc2V0U2VhcmNoVGV4dF0gPSB1c2VTdGF0ZShcIlwiKTtcbiAqXG4gKiAgIGNvbnN0IHsgaXNMb2FkaW5nLCBkYXRhLCBwYWdpbmF0aW9uIH0gPSB1c2VQcm9taXNlKFxuICogICAgIChzZWFyY2hUZXh0OiBzdHJpbmcpID0+IGFzeW5jIChvcHRpb25zOiB7IHBhZ2U6IG51bWJlciB9KSA9PiB7XG4gKiAgICAgICBhd2FpdCBzZXRUaW1lb3V0KDIwMCk7XG4gKiAgICAgICBjb25zdCBuZXdEYXRhID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogMjUgfSwgKF92LCBpbmRleCkgPT4gKHtcbiAqICAgICAgICAgaW5kZXgsXG4gKiAgICAgICAgIHBhZ2U6IG9wdGlvbnMucGFnZSxcbiAqICAgICAgICAgdGV4dDogc2VhcmNoVGV4dCxcbiAqICAgICAgIH0pKTtcbiAqICAgICAgIHJldHVybiB7IGRhdGE6IG5ld0RhdGEsIGhhc01vcmU6IG9wdGlvbnMucGFnZSA8IDEwIH07XG4gKiAgICAgfSxcbiAqICAgICBbc2VhcmNoVGV4dF1cbiAqICAgKTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPExpc3QgaXNMb2FkaW5nPXtpc0xvYWRpbmd9IG9uU2VhcmNoVGV4dENoYW5nZT17c2V0U2VhcmNoVGV4dH0gcGFnaW5hdGlvbj17cGFnaW5hdGlvbn0+XG4gKiAgICAgICB7ZGF0YT8ubWFwKChpdGVtKSA9PiAoXG4gKiAgICAgICAgIDxMaXN0Lkl0ZW1cbiAqICAgICAgICAgICBrZXk9e2Ake2l0ZW0ucGFnZX0gJHtpdGVtLmluZGV4fSAke2l0ZW0udGV4dH1gfVxuICogICAgICAgICAgIHRpdGxlPXtgUGFnZSAke2l0ZW0ucGFnZX0gSXRlbSAke2l0ZW0uaW5kZXh9YH1cbiAqICAgICAgICAgICBzdWJ0aXRsZT17aXRlbS50ZXh0fVxuICogICAgICAgICAvPlxuICogICAgICAgKSl9XG4gKiAgICAgPC9MaXN0PlxuICogICApO1xuICogfTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUHJvbWlzZTxUIGV4dGVuZHMgRnVuY3Rpb25SZXR1cm5pbmdQYWdpbmF0ZWRQcm9taXNlPFtdPj4oXG4gIGZuOiBULFxuKTogVXNlUHJvbWlzZVJldHVyblR5cGU8VW53cmFwUmV0dXJuPFQ+PjtcbmV4cG9ydCBmdW5jdGlvbiB1c2VQcm9taXNlPFQgZXh0ZW5kcyBGdW5jdGlvblJldHVybmluZ1BhZ2luYXRlZFByb21pc2U+KFxuICBmbjogVCxcbiAgYXJnczogUGFyYW1ldGVyczxUPixcbiAgb3B0aW9ucz86IFByb21pc2VPcHRpb25zPFQ+LFxuKTogVXNlUHJvbWlzZVJldHVyblR5cGU8VW53cmFwUmV0dXJuPFQ+PjtcblxuLyoqXG4gKiBXcmFwcyBhbiBhc3luY2hyb25vdXMgZnVuY3Rpb24gb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBQcm9taXNlIGFuZCByZXR1cm5zIHRoZSB7QGxpbmsgQXN5bmNTdGF0ZX0gY29ycmVzcG9uZGluZyB0byB0aGUgZXhlY3V0aW9uIG9mIHRoZSBmdW5jdGlvbi5cbiAqXG4gKiBAcmVtYXJrIFRoZSBmdW5jdGlvbiBpcyBhc3N1bWVkIHRvIGJlIGNvbnN0YW50IChlZy4gY2hhbmdpbmcgaXQgd29uJ3QgdHJpZ2dlciBhIHJldmFsaWRhdGlvbikuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogaW1wb3J0IHsgdXNlUHJvbWlzZSB9IGZyb20gJ0ByYXljYXN0L3V0aWxzJztcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb21tYW5kKCkge1xuICogICBjb25zdCBhYm9ydGFibGUgPSB1c2VSZWY8QWJvcnRDb250cm9sbGVyPigpO1xuICogICBjb25zdCB7IGlzTG9hZGluZywgZGF0YSwgcmV2YWxpZGF0ZSB9ID0gdXNlUHJvbWlzZShhc3luYyAodXJsOiBzdHJpbmcpID0+IHtcbiAqICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgeyBzaWduYWw6IGFib3J0YWJsZS5jdXJyZW50Py5zaWduYWwgfSk7XG4gKiAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICogICAgIHJldHVybiByZXN1bHRcbiAqICAgfSxcbiAqICAgWydodHRwczovL2FwaS5leGFtcGxlJ10sXG4gKiAgIHtcbiAqICAgICBhYm9ydGFibGVcbiAqICAgfSk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxEZXRhaWxcbiAqICAgICAgIGlzTG9hZGluZz17aXNMb2FkaW5nfVxuICogICAgICAgbWFya2Rvd249e2RhdGF9XG4gKiAgICAgICBhY3Rpb25zPXtcbiAqICAgICAgICAgPEFjdGlvblBhbmVsPlxuICogICAgICAgICAgIDxBY3Rpb24gdGl0bGU9XCJSZWxvYWRcIiBvbkFjdGlvbj17KCkgPT4gcmV2YWxpZGF0ZSgpfSAvPlxuICogICAgICAgICA8L0FjdGlvblBhbmVsPlxuICogICAgICAgfVxuICogICAgIC8+XG4gKiAgICk7XG4gKiB9O1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VQcm9taXNlPFQgZXh0ZW5kcyBGdW5jdGlvblJldHVybmluZ1Byb21pc2U8W10+PihmbjogVCk6IFVzZVByb21pc2VSZXR1cm5UeXBlPFVud3JhcFJldHVybjxUPj47XG5leHBvcnQgZnVuY3Rpb24gdXNlUHJvbWlzZTxUIGV4dGVuZHMgRnVuY3Rpb25SZXR1cm5pbmdQcm9taXNlPihcbiAgZm46IFQsXG4gIGFyZ3M6IFBhcmFtZXRlcnM8VD4sXG4gIG9wdGlvbnM/OiBQcm9taXNlT3B0aW9uczxUPixcbik6IFVzZVByb21pc2VSZXR1cm5UeXBlPFVud3JhcFJldHVybjxUPj47XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VQcm9taXNlPFQgZXh0ZW5kcyBGdW5jdGlvblJldHVybmluZ1Byb21pc2UgfCBGdW5jdGlvblJldHVybmluZ1BhZ2luYXRlZFByb21pc2U+KFxuICBmbjogVCxcbiAgYXJncz86IFBhcmFtZXRlcnM8VD4sXG4gIG9wdGlvbnM/OiBQcm9taXNlT3B0aW9uczxUPixcbik6IFVzZVByb21pc2VSZXR1cm5UeXBlPGFueT4ge1xuICBjb25zdCBsYXN0Q2FsbElkID0gdXNlUmVmKDApO1xuICBjb25zdCBbc3RhdGUsIHNldF0gPSB1c2VTdGF0ZTxBc3luY1N0YXRlPFVud3JhcFJldHVybjxUPj4+KHsgaXNMb2FkaW5nOiB0cnVlIH0pO1xuXG4gIGNvbnN0IGZuUmVmID0gdXNlTGF0ZXN0KGZuKTtcbiAgY29uc3QgbGF0ZXN0QWJvcnRhYmxlID0gdXNlTGF0ZXN0KG9wdGlvbnM/LmFib3J0YWJsZSk7XG4gIGNvbnN0IGxhdGVzdEFyZ3MgPSB1c2VMYXRlc3QoYXJncyB8fCBbXSk7XG4gIGNvbnN0IGxhdGVzdE9uRXJyb3IgPSB1c2VMYXRlc3Qob3B0aW9ucz8ub25FcnJvcik7XG4gIGNvbnN0IGxhdGVzdE9uRGF0YSA9IHVzZUxhdGVzdChvcHRpb25zPy5vbkRhdGEpO1xuICBjb25zdCBsYXRlc3RPbldpbGxFeGVjdXRlID0gdXNlTGF0ZXN0KG9wdGlvbnM/Lm9uV2lsbEV4ZWN1dGUpO1xuICBjb25zdCBsYXRlc3RGYWlsdXJlVG9hc3QgPSB1c2VMYXRlc3Qob3B0aW9ucz8uZmFpbHVyZVRvYXN0T3B0aW9ucyk7XG4gIGNvbnN0IGxhdGVzdFZhbHVlID0gdXNlTGF0ZXN0KHN0YXRlLmRhdGEpO1xuICBjb25zdCBsYXRlc3RDYWxsYmFjayA9IHVzZVJlZjwoLi4uYXJnczogUGFyYW1ldGVyczxUPikgPT4gUHJvbWlzZTxVbndyYXBSZXR1cm48VD4+PihudWxsKTtcblxuICBjb25zdCBwYWdpbmF0aW9uQXJnc1JlZiA9IHVzZVJlZjxQYWdpbmF0aW9uT3B0aW9ucz4oeyBwYWdlOiAwIH0pO1xuICBjb25zdCB1c2VQYWdpbmF0aW9uUmVmID0gdXNlUmVmKGZhbHNlKTtcbiAgY29uc3QgaGFzTW9yZVJlZiA9IHVzZVJlZih0cnVlKTtcbiAgY29uc3QgcGFnZVNpemVSZWYgPSB1c2VSZWYoNTApO1xuXG4gIGNvbnN0IGFib3J0ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChsYXRlc3RBYm9ydGFibGUuY3VycmVudCkge1xuICAgICAgbGF0ZXN0QWJvcnRhYmxlLmN1cnJlbnQuY3VycmVudD8uYWJvcnQoKTtcbiAgICAgIGxhdGVzdEFib3J0YWJsZS5jdXJyZW50LmN1cnJlbnQgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgfVxuICAgIHJldHVybiArK2xhc3RDYWxsSWQuY3VycmVudDtcbiAgfSwgW2xhdGVzdEFib3J0YWJsZV0pO1xuXG4gIGNvbnN0IGNhbGxiYWNrID0gdXNlQ2FsbGJhY2soXG4gICAgKC4uLmFyZ3M6IFBhcmFtZXRlcnM8VD4pOiBQcm9taXNlPFVud3JhcFJldHVybjxUPj4gPT4ge1xuICAgICAgY29uc3QgY2FsbElkID0gYWJvcnQoKTtcblxuICAgICAgbGF0ZXN0T25XaWxsRXhlY3V0ZS5jdXJyZW50Py4oYXJncyk7XG5cbiAgICAgIHNldCgocHJldlN0YXRlKSA9PiAoeyAuLi5wcmV2U3RhdGUsIGlzTG9hZGluZzogdHJ1ZSB9KSk7XG5cbiAgICAgIGNvbnN0IHByb21pc2VPclBhZ2luYXRlZFByb21pc2UgPSBiaW5kUHJvbWlzZUlmTmVlZGVkKGZuUmVmLmN1cnJlbnQpKC4uLmFyZ3MpO1xuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVFcnJvcihlcnJvcjogYW55KSB7XG4gICAgICAgIGlmIChlcnJvci5uYW1lID09IFwiQWJvcnRFcnJvclwiKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhbGxJZCA9PT0gbGFzdENhbGxJZC5jdXJyZW50KSB7XG4gICAgICAgICAgLy8gaGFuZGxlIGVycm9yc1xuICAgICAgICAgIGlmIChsYXRlc3RPbkVycm9yLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGxhdGVzdE9uRXJyb3IuY3VycmVudChlcnJvcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChlbnZpcm9ubWVudC5sYXVuY2hUeXBlICE9PSBMYXVuY2hUeXBlLkJhY2tncm91bmQpIHtcbiAgICAgICAgICAgICAgc2hvd0ZhaWx1cmVUb2FzdChlcnJvciwge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIkZhaWxlZCB0byBmZXRjaCBsYXRlc3QgZGF0YVwiLFxuICAgICAgICAgICAgICAgIHByaW1hcnlBY3Rpb246IHtcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIlJldHJ5XCIsXG4gICAgICAgICAgICAgICAgICBvbkFjdGlvbih0b2FzdCkge1xuICAgICAgICAgICAgICAgICAgICB0b2FzdC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIGxhdGVzdENhbGxiYWNrLmN1cnJlbnQ/LiguLi4oKGxhdGVzdEFyZ3MuY3VycmVudCB8fCBbXSkgYXMgUGFyYW1ldGVyczxUPikpO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC4uLmxhdGVzdEZhaWx1cmVUb2FzdC5jdXJyZW50LFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgc2V0KHsgZXJyb3IsIGlzTG9hZGluZzogZmFsc2UgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvbWlzZU9yUGFnaW5hdGVkUHJvbWlzZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHVzZVBhZ2luYXRpb25SZWYuY3VycmVudCA9IHRydWU7XG4gICAgICAgIHJldHVybiBwcm9taXNlT3JQYWdpbmF0ZWRQcm9taXNlKHBhZ2luYXRpb25BcmdzUmVmLmN1cnJlbnQpLnRoZW4oXG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciB0b28gY29tcGxpY2F0ZWQgZm9yIFRTXG4gICAgICAgICAgKHsgZGF0YSwgaGFzTW9yZSwgY3Vyc29yIH06IHsgZGF0YTogVW53cmFwUmV0dXJuPFQ+OyBoYXNNb3JlOiBib29sZWFuOyBjdXJzb3I/OiBhbnkgfSkgPT4ge1xuICAgICAgICAgICAgaWYgKGNhbGxJZCA9PT0gbGFzdENhbGxJZC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgIGlmIChwYWdpbmF0aW9uQXJnc1JlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgcGFnaW5hdGlvbkFyZ3NSZWYuY3VycmVudC5jdXJzb3IgPSBjdXJzb3I7XG4gICAgICAgICAgICAgICAgcGFnaW5hdGlvbkFyZ3NSZWYuY3VycmVudC5sYXN0SXRlbSA9IGRhdGE/LltkYXRhLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGxhdGVzdE9uRGF0YS5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgbGF0ZXN0T25EYXRhLmN1cnJlbnQoZGF0YSwgcGFnaW5hdGlvbkFyZ3NSZWYuY3VycmVudCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoaGFzTW9yZSkge1xuICAgICAgICAgICAgICAgIHBhZ2VTaXplUmVmLmN1cnJlbnQgPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBoYXNNb3JlUmVmLmN1cnJlbnQgPSBoYXNNb3JlO1xuXG4gICAgICAgICAgICAgIHNldCgocHJldmlvdXNEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHBhZ2luYXRpb25BcmdzUmVmLmN1cnJlbnQucGFnZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YSwgaXNMb2FkaW5nOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHdlIGtub3cgaXQncyBhbiBhcnJheSBoZXJlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogKHByZXZpb3VzRGF0YS5kYXRhIHx8IFtdKT8uY29uY2F0KGRhdGEpLCBpc0xvYWRpbmc6IGZhbHNlIH07XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIChlcnJvcjogdW5rbm93bikgPT4ge1xuICAgICAgICAgICAgaGFzTW9yZVJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICAgIH0sXG4gICAgICAgICkgYXMgUHJvbWlzZTxVbndyYXBSZXR1cm48VD4+O1xuICAgICAgfVxuXG4gICAgICB1c2VQYWdpbmF0aW9uUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHJldHVybiBwcm9taXNlT3JQYWdpbmF0ZWRQcm9taXNlLnRoZW4oKGRhdGE6IFVud3JhcFJldHVybjxUPikgPT4ge1xuICAgICAgICBpZiAoY2FsbElkID09PSBsYXN0Q2FsbElkLmN1cnJlbnQpIHtcbiAgICAgICAgICBpZiAobGF0ZXN0T25EYXRhLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGxhdGVzdE9uRGF0YS5jdXJyZW50KGRhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZXQoeyBkYXRhLCBpc0xvYWRpbmc6IGZhbHNlIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9LCBoYW5kbGVFcnJvcikgYXMgUHJvbWlzZTxVbndyYXBSZXR1cm48VD4+O1xuICAgIH0sXG4gICAgW1xuICAgICAgbGF0ZXN0T25EYXRhLFxuICAgICAgbGF0ZXN0T25FcnJvcixcbiAgICAgIGxhdGVzdEFyZ3MsXG4gICAgICBmblJlZixcbiAgICAgIHNldCxcbiAgICAgIGxhdGVzdENhbGxiYWNrLFxuICAgICAgbGF0ZXN0T25XaWxsRXhlY3V0ZSxcbiAgICAgIHBhZ2luYXRpb25BcmdzUmVmLFxuICAgICAgbGF0ZXN0RmFpbHVyZVRvYXN0LFxuICAgICAgYWJvcnQsXG4gICAgXSxcbiAgKTtcblxuICBsYXRlc3RDYWxsYmFjay5jdXJyZW50ID0gY2FsbGJhY2s7XG5cbiAgY29uc3QgcmV2YWxpZGF0ZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAvLyByZXNldCB0aGUgcGFnaW5hdGlvblxuICAgIHBhZ2luYXRpb25BcmdzUmVmLmN1cnJlbnQgPSB7IHBhZ2U6IDAgfTtcblxuICAgIGNvbnN0IGFyZ3MgPSAobGF0ZXN0QXJncy5jdXJyZW50IHx8IFtdKSBhcyBQYXJhbWV0ZXJzPFQ+O1xuICAgIHJldHVybiBjYWxsYmFjayguLi5hcmdzKTtcbiAgfSwgW2NhbGxiYWNrLCBsYXRlc3RBcmdzXSk7XG5cbiAgY29uc3QgbXV0YXRlID0gdXNlQ2FsbGJhY2s8TXV0YXRlUHJvbWlzZTxBd2FpdGVkPFJldHVyblR5cGU8VD4+LCB1bmRlZmluZWQ+PihcbiAgICBhc3luYyAoYXN5bmNVcGRhdGUsIG9wdGlvbnMpID0+IHtcbiAgICAgIGxldCBkYXRhQmVmb3JlT3B0aW1pc3RpY1VwZGF0ZTogQXdhaXRlZDxSZXR1cm5UeXBlPFQ+PiB8IHVuZGVmaW5lZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChvcHRpb25zPy5vcHRpbWlzdGljVXBkYXRlKSB7XG4gICAgICAgICAgLy8gY2FuY2VsIHRoZSBpbi1mbGlnaHQgcmVxdWVzdCB0byBtYWtlIHN1cmUgaXQgd29uJ3Qgb3ZlcndyaXRlIHRoZSBvcHRpbWlzdGljIHVwZGF0ZVxuICAgICAgICAgIGFib3J0KCk7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnM/LnJvbGxiYWNrT25FcnJvciAhPT0gXCJmdW5jdGlvblwiICYmIG9wdGlvbnM/LnJvbGxiYWNrT25FcnJvciAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIC8vIGtlZXAgdHJhY2sgb2YgdGhlIGRhdGEgYmVmb3JlIHRoZSBvcHRpbWlzdGljIHVwZGF0ZSxcbiAgICAgICAgICAgIC8vIGJ1dCBvbmx5IGlmIHdlIG5lZWQgaXQgKGVnLiBvbmx5IHdoZW4gd2Ugd2FudCB0byBhdXRvbWF0aWNhbGx5IHJvbGxiYWNrIGFmdGVyKVxuICAgICAgICAgICAgZGF0YUJlZm9yZU9wdGltaXN0aWNVcGRhdGUgPSBzdHJ1Y3R1cmVkQ2xvbmUobGF0ZXN0VmFsdWUuY3VycmVudD8udmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB1cGRhdGUgPSBvcHRpb25zLm9wdGltaXN0aWNVcGRhdGU7XG4gICAgICAgICAgc2V0KChwcmV2U3RhdGUpID0+ICh7IC4uLnByZXZTdGF0ZSwgZGF0YTogdXBkYXRlKHByZXZTdGF0ZS5kYXRhKSB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF3YWl0IGFzeW5jVXBkYXRlO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucz8ucm9sbGJhY2tPbkVycm9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjb25zdCB1cGRhdGUgPSBvcHRpb25zLnJvbGxiYWNrT25FcnJvcjtcbiAgICAgICAgICBzZXQoKHByZXZTdGF0ZSkgPT4gKHsgLi4ucHJldlN0YXRlLCBkYXRhOiB1cGRhdGUocHJldlN0YXRlLmRhdGEpIH0pKTtcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zPy5vcHRpbWlzdGljVXBkYXRlICYmIG9wdGlvbnM/LnJvbGxiYWNrT25FcnJvciAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBzZXQoKHByZXZTdGF0ZSkgPT4gKHsgLi4ucHJldlN0YXRlLCBkYXRhOiBkYXRhQmVmb3JlT3B0aW1pc3RpY1VwZGF0ZSB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKG9wdGlvbnM/LnNob3VsZFJldmFsaWRhdGVBZnRlciAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBpZiAoZW52aXJvbm1lbnQubGF1bmNoVHlwZSA9PT0gTGF1bmNoVHlwZS5CYWNrZ3JvdW5kIHx8IGVudmlyb25tZW50LmNvbW1hbmRNb2RlID09PSBcIm1lbnUtYmFyXCIpIHtcbiAgICAgICAgICAgIC8vIHdoZW4gaW4gdGhlIGJhY2tncm91bmQgb3IgaW4gYSBtZW51IGJhciwgd2UgYXJlIGdvaW5nIHRvIGF3YWl0IHRoZSByZXZhbGlkYXRpb25cbiAgICAgICAgICAgIC8vIHRvIG1ha2Ugc3VyZSB3ZSBnZXQgdGhlIHJpZ2h0IGRhdGEgYXQgdGhlIGVuZCBvZiB0aGUgbXV0YXRpb25cbiAgICAgICAgICAgIGF3YWl0IHJldmFsaWRhdGUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV2YWxpZGF0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgW3JldmFsaWRhdGUsIGxhdGVzdFZhbHVlLCBzZXQsIGFib3J0XSxcbiAgKTtcblxuICBjb25zdCBvbkxvYWRNb3JlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHBhZ2luYXRpb25BcmdzUmVmLmN1cnJlbnQucGFnZSArPSAxO1xuICAgIGNvbnN0IGFyZ3MgPSAobGF0ZXN0QXJncy5jdXJyZW50IHx8IFtdKSBhcyBQYXJhbWV0ZXJzPFQ+O1xuICAgIGNhbGxiYWNrKC4uLmFyZ3MpO1xuICB9LCBbcGFnaW5hdGlvbkFyZ3NSZWYsIGxhdGVzdEFyZ3MsIGNhbGxiYWNrXSk7XG5cbiAgLy8gcmV2YWxpZGF0ZSB3aGVuIHRoZSBhcmdzIGNoYW5nZVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIHJlc2V0IHRoZSBwYWdpbmF0aW9uXG4gICAgcGFnaW5hdGlvbkFyZ3NSZWYuY3VycmVudCA9IHsgcGFnZTogMCB9O1xuXG4gICAgaWYgKG9wdGlvbnM/LmV4ZWN1dGUgIT09IGZhbHNlKSB7XG4gICAgICBjYWxsYmFjayguLi4oKGFyZ3MgfHwgW10pIGFzIFBhcmFtZXRlcnM8VD4pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gY2FuY2VsIHRoZSBwcmV2aW91cyByZXF1ZXN0IGlmIHdlIGRvbid0IHdhbnQgdG8gZXhlY3V0ZSBhbnltb3JlXG4gICAgICBhYm9ydCgpO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFt1c2VEZWVwTWVtbyhbYXJncywgb3B0aW9ucz8uZXhlY3V0ZSwgY2FsbGJhY2tdKSwgbGF0ZXN0QWJvcnRhYmxlLCBwYWdpbmF0aW9uQXJnc1JlZl0pO1xuXG4gIC8vIGFib3J0IHJlcXVlc3Qgd2hlbiB1bm1vdW50aW5nXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGFib3J0KCk7XG4gICAgfTtcbiAgfSwgW2Fib3J0XSk7XG5cbiAgLy8gd2Ugb25seSB3YW50IHRvIHNob3cgdGhlIGxvYWRpbmcgaW5kaWNhdG9yIGlmIHRoZSBwcm9taXNlIGlzIGV4ZWN1dGluZ1xuICBjb25zdCBpc0xvYWRpbmcgPSBvcHRpb25zPy5leGVjdXRlICE9PSBmYWxzZSA/IHN0YXRlLmlzTG9hZGluZyA6IGZhbHNlO1xuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgbG9hZGluZyBpcyBoYXMgc29tZSBmaXhlZCB2YWx1ZSBpbiB0aGUgZW51bSB3aGljaFxuICBjb25zdCBzdGF0ZVdpdGhMb2FkaW5nRml4ZWQ6IEFzeW5jU3RhdGU8QXdhaXRlZDxSZXR1cm5UeXBlPFQ+Pj4gPSB7IC4uLnN0YXRlLCBpc0xvYWRpbmcgfTtcblxuICBjb25zdCBwYWdpbmF0aW9uID0gdXNlUGFnaW5hdGlvblJlZi5jdXJyZW50XG4gICAgPyB7XG4gICAgICAgIHBhZ2VTaXplOiBwYWdlU2l6ZVJlZi5jdXJyZW50LFxuICAgICAgICBoYXNNb3JlOiBoYXNNb3JlUmVmLmN1cnJlbnQsXG4gICAgICAgIG9uTG9hZE1vcmUsXG4gICAgICB9XG4gICAgOiB1bmRlZmluZWQ7XG5cbiAgcmV0dXJuIHsgLi4uc3RhdGVXaXRoTG9hZGluZ0ZpeGVkLCByZXZhbGlkYXRlLCBtdXRhdGUsIHBhZ2luYXRpb24gfTtcbn1cblxuLyoqIEJpbmQgdGhlIGZuIGlmIGl0J3MgYSBQcm9taXNlIG1ldGhvZCAqL1xuZnVuY3Rpb24gYmluZFByb21pc2VJZk5lZWRlZDxUPihmbjogVCk6IFQge1xuICBpZiAoZm4gPT09IChQcm9taXNlLmFsbCBhcyBhbnkpKSB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciB0aGlzIGlzIGZpbmVcbiAgICByZXR1cm4gZm4uYmluZChQcm9taXNlKTtcbiAgfVxuICBpZiAoZm4gPT09IChQcm9taXNlLnJhY2UgYXMgYW55KSkge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdGhpcyBpcyBmaW5lXG4gICAgcmV0dXJuIGZuLmJpbmQoUHJvbWlzZSk7XG4gIH1cbiAgaWYgKGZuID09PSAoUHJvbWlzZS5yZXNvbHZlIGFzIGFueSkpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRoaXMgaXMgZmluZVxuICAgIHJldHVybiBmbi5iaW5kKFByb21pc2UgYXMgYW55KTtcbiAgfVxuICBpZiAoZm4gPT09IChQcm9taXNlLnJlamVjdCBhcyBhbnkpKSB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciB0aGlzIGlzIGZpbmVcbiAgICByZXR1cm4gZm4uYmluZChQcm9taXNlKTtcbiAgfVxuICByZXR1cm4gZm47XG59XG4iLCAiaW1wb3J0IHsgdXNlUmVmLCB1c2VNZW1vIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBkZXF1YWwgfSBmcm9tIFwiZGVxdWFsL2xpdGVcIjtcblxuLyoqXG4gKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIHRvIGJlIG1lbW9pemVkICh1c3VhbGx5IGEgZGVwZW5kZW5jeSBsaXN0KVxuICogQHJldHVybnMgYSBtZW1vaXplZCB2ZXJzaW9uIG9mIHRoZSB2YWx1ZSBhcyBsb25nIGFzIGl0IHJlbWFpbnMgZGVlcGx5IGVxdWFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VEZWVwTWVtbzxUPih2YWx1ZTogVCkge1xuICBjb25zdCByZWYgPSB1c2VSZWY8VD4odmFsdWUpO1xuICBjb25zdCBzaWduYWxSZWYgPSB1c2VSZWY8bnVtYmVyPigwKTtcblxuICBpZiAoIWRlcXVhbCh2YWx1ZSwgcmVmLmN1cnJlbnQpKSB7XG4gICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICBzaWduYWxSZWYuY3VycmVudCArPSAxO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICByZXR1cm4gdXNlTWVtbygoKSA9PiByZWYuY3VycmVudCwgW3NpZ25hbFJlZi5jdXJyZW50XSk7XG59XG4iLCAiaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbGF0ZXN0IHN0YXRlLlxuICpcbiAqIFRoaXMgaXMgbW9zdGx5IHVzZWZ1bCB0byBnZXQgYWNjZXNzIHRvIHRoZSBsYXRlc3QgdmFsdWUgb2Ygc29tZSBwcm9wcyBvciBzdGF0ZSBpbnNpZGUgYW4gYXN5bmNocm9ub3VzIGNhbGxiYWNrLCBpbnN0ZWFkIG9mIHRoYXQgdmFsdWUgYXQgdGhlIHRpbWUgdGhlIGNhbGxiYWNrIHdhcyBjcmVhdGVkIGZyb20uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VMYXRlc3Q8VD4odmFsdWU6IFQpOiB7IHJlYWRvbmx5IGN1cnJlbnQ6IFQgfSB7XG4gIGNvbnN0IHJlZiA9IHVzZVJlZih2YWx1ZSk7XG4gIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIHJldHVybiByZWY7XG59XG4iLCAiaW1wb3J0ICogYXMgZnMgZnJvbSBcIm5vZGU6ZnNcIjtcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcIm5vZGU6cGF0aFwiO1xuaW1wb3J0IHsgQ2xpcGJvYXJkLCBlbnZpcm9ubWVudCwgb3BlbiwgVG9hc3QsIHNob3dUb2FzdCB9IGZyb20gXCJAcmF5Y2FzdC9hcGlcIjtcblxuLyoqXG4gKiBTaG93cyBhIGZhaWx1cmUgVG9hc3QgZm9yIGEgZ2l2ZW4gRXJyb3IuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IHNob3dIVUQgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG4gKiBpbXBvcnQgeyBydW5BcHBsZVNjcmlwdCwgc2hvd0ZhaWx1cmVUb2FzdCB9IGZyb20gXCJAcmF5Y2FzdC91dGlsc1wiO1xuICpcbiAqIGV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAqICAgdHJ5IHtcbiAqICAgICBjb25zdCByZXMgPSBhd2FpdCBydW5BcHBsZVNjcmlwdChcbiAqICAgICAgIGBcbiAqICAgICAgIG9uIHJ1biBhcmd2XG4gKiAgICAgICAgIHJldHVybiBcImhlbGxvLCBcIiAmIGl0ZW0gMSBvZiBhcmd2ICYgXCIuXCJcbiAqICAgICAgIGVuZCBydW5cbiAqICAgICAgIGAsXG4gKiAgICAgICBbXCJ3b3JsZFwiXVxuICogICAgICk7XG4gKiAgICAgYXdhaXQgc2hvd0hVRChyZXMpO1xuICogICB9IGNhdGNoIChlcnJvcikge1xuICogICAgIHNob3dGYWlsdXJlVG9hc3QoZXJyb3IsIHsgdGl0bGU6IFwiQ291bGQgbm90IHJ1biBBcHBsZVNjcmlwdFwiIH0pO1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNob3dGYWlsdXJlVG9hc3QoXG4gIGVycm9yOiB1bmtub3duLFxuICBvcHRpb25zPzogUGFydGlhbDxQaWNrPFRvYXN0Lk9wdGlvbnMsIFwidGl0bGVcIiB8IFwicHJpbWFyeUFjdGlvblwiIHwgXCJtZXNzYWdlXCI+Pixcbikge1xuICBjb25zdCBtZXNzYWdlID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpO1xuICByZXR1cm4gc2hvd1RvYXN0KHtcbiAgICBzdHlsZTogVG9hc3QuU3R5bGUuRmFpbHVyZSxcbiAgICB0aXRsZTogb3B0aW9ucz8udGl0bGUgPz8gXCJTb21ldGhpbmcgd2VudCB3cm9uZ1wiLFxuICAgIG1lc3NhZ2U6IG9wdGlvbnM/Lm1lc3NhZ2UgPz8gbWVzc2FnZSxcbiAgICBwcmltYXJ5QWN0aW9uOiBvcHRpb25zPy5wcmltYXJ5QWN0aW9uID8/IGhhbmRsZUVycm9yVG9hc3RBY3Rpb24oZXJyb3IpLFxuICAgIHNlY29uZGFyeUFjdGlvbjogb3B0aW9ucz8ucHJpbWFyeUFjdGlvbiA/IGhhbmRsZUVycm9yVG9hc3RBY3Rpb24oZXJyb3IpIDogdW5kZWZpbmVkLFxuICB9KTtcbn1cblxuY29uc3QgaGFuZGxlRXJyb3JUb2FzdEFjdGlvbiA9IChlcnJvcjogdW5rbm93bik6IFRvYXN0LkFjdGlvbk9wdGlvbnMgPT4ge1xuICBsZXQgcHJpdmF0ZUV4dGVuc2lvbiA9IHRydWU7XG4gIGxldCB0aXRsZSA9IFwiW0V4dGVuc2lvbiBOYW1lXS4uLlwiO1xuICBsZXQgZXh0ZW5zaW9uVVJMID0gXCJcIjtcbiAgdHJ5IHtcbiAgICBjb25zdCBwYWNrYWdlSlNPTiA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbihlbnZpcm9ubWVudC5hc3NldHNQYXRoLCBcIi4uXCIsIFwicGFja2FnZS5qc29uXCIpLCBcInV0ZjhcIikpO1xuICAgIHRpdGxlID0gYFske3BhY2thZ2VKU09OLnRpdGxlfV0uLi5gO1xuICAgIGV4dGVuc2lvblVSTCA9IGBodHRwczovL3JheWNhc3QuY29tLyR7cGFja2FnZUpTT04ub3duZXIgfHwgcGFja2FnZUpTT04uYXV0aG9yfS8ke3BhY2thZ2VKU09OLm5hbWV9YDtcbiAgICBpZiAoIXBhY2thZ2VKU09OLm93bmVyIHx8IHBhY2thZ2VKU09OLmFjY2VzcyA9PT0gXCJwdWJsaWNcIikge1xuICAgICAgcHJpdmF0ZUV4dGVuc2lvbiA9IGZhbHNlO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gbm8tb3BcbiAgfVxuXG4gIC8vIGlmIGl0J3MgYSBwcml2YXRlIGV4dGVuc2lvbiwgd2UgY2FuJ3QgY29uc3RydWN0IHRoZSBVUkwgdG8gcmVwb3J0IHRoZSBlcnJvclxuICAvLyBzbyB3ZSBmYWxsYmFjayB0byBjb3B5aW5nIHRoZSBlcnJvciB0byB0aGUgY2xpcGJvYXJkXG4gIGNvbnN0IGZhbGxiYWNrID0gZW52aXJvbm1lbnQuaXNEZXZlbG9wbWVudCB8fCBwcml2YXRlRXh0ZW5zaW9uO1xuXG4gIGNvbnN0IHN0YWNrID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yPy5zdGFjayB8fCBlcnJvcj8ubWVzc2FnZSB8fCBcIlwiIDogU3RyaW5nKGVycm9yKTtcblxuICByZXR1cm4ge1xuICAgIHRpdGxlOiBmYWxsYmFjayA/IFwiQ29weSBMb2dzXCIgOiBcIlJlcG9ydCBFcnJvclwiLFxuICAgIG9uQWN0aW9uKHRvYXN0KSB7XG4gICAgICB0b2FzdC5oaWRlKCk7XG4gICAgICBpZiAoZmFsbGJhY2spIHtcbiAgICAgICAgQ2xpcGJvYXJkLmNvcHkoc3RhY2spO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3BlbihcbiAgICAgICAgICBgaHR0cHM6Ly9naXRodWIuY29tL3JheWNhc3QvZXh0ZW5zaW9ucy9pc3N1ZXMvbmV3PyZsYWJlbHM9ZXh0ZW5zaW9uJTJDYnVnJnRlbXBsYXRlPWV4dGVuc2lvbl9idWdfcmVwb3J0LnltbCZ0aXRsZT0ke2VuY29kZVVSSUNvbXBvbmVudChcbiAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICl9JmV4dGVuc2lvbi11cmw9JHtlbmNvZGVVUkkoZXh0ZW5zaW9uVVJMKX0mZGVzY3JpcHRpb249JHtlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICAgICAgICBgIyMjIyBFcnJvcjpcblxcYFxcYFxcYFxuJHtzdGFja31cblxcYFxcYFxcYFxuYCxcbiAgICAgICAgICApfWAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn07XG4iLCAiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIERpc3BhdGNoLCBTZXRTdGF0ZUFjdGlvbiwgdXNlU3luY0V4dGVybmFsU3RvcmUsIHVzZU1lbW8gfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IENhY2hlIH0gZnJvbSBcIkByYXljYXN0L2FwaVwiO1xuaW1wb3J0IHsgdXNlTGF0ZXN0IH0gZnJvbSBcIi4vdXNlTGF0ZXN0XCI7XG5pbXBvcnQgeyByZXBsYWNlciwgcmV2aXZlciB9IGZyb20gXCIuL2hlbHBlcnNcIjtcblxuY29uc3Qgcm9vdENhY2hlID0gLyogI19fUFVSRV9fICovIFN5bWJvbChcImNhY2hlIHdpdGhvdXQgbmFtZXNwYWNlXCIpO1xuY29uc3QgY2FjaGVNYXAgPSAvKiAjX19QVVJFX18gKi8gbmV3IE1hcDxzdHJpbmcgfCBzeW1ib2wsIENhY2hlPigpO1xuXG4vKipcbiAqIFJldHVybnMgYSBzdGF0ZWZ1bCB2YWx1ZSwgYW5kIGEgZnVuY3Rpb24gdG8gdXBkYXRlIGl0LiBUaGUgdmFsdWUgd2lsbCBiZSBrZXB0IGJldHdlZW4gY29tbWFuZCBydW5zLlxuICpcbiAqIEByZW1hcmsgVGhlIHZhbHVlIG5lZWRzIHRvIGJlIEpTT04gc2VyaWFsaXphYmxlLlxuICpcbiAqIEBwYXJhbSBrZXkgLSBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIHN0YXRlLiBUaGlzIGNhbiBiZSB1c2VkIHRvIHNoYXJlIHRoZSBzdGF0ZSBhY3Jvc3MgY29tcG9uZW50cyBhbmQvb3IgY29tbWFuZHMuXG4gKiBAcGFyYW0gaW5pdGlhbFN0YXRlIC0gVGhlIGluaXRpYWwgdmFsdWUgb2YgdGhlIHN0YXRlIGlmIHRoZXJlIGFyZW4ndCBhbnkgaW4gdGhlIENhY2hlIHlldC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUNhY2hlZFN0YXRlPFQ+KFxuICBrZXk6IHN0cmluZyxcbiAgaW5pdGlhbFN0YXRlOiBULFxuICBjb25maWc/OiB7IGNhY2hlTmFtZXNwYWNlPzogc3RyaW5nIH0sXG4pOiBbVCwgRGlzcGF0Y2g8U2V0U3RhdGVBY3Rpb248VD4+XTtcbmV4cG9ydCBmdW5jdGlvbiB1c2VDYWNoZWRTdGF0ZTxUID0gdW5kZWZpbmVkPihrZXk6IHN0cmluZyk6IFtUIHwgdW5kZWZpbmVkLCBEaXNwYXRjaDxTZXRTdGF0ZUFjdGlvbjxUIHwgdW5kZWZpbmVkPj5dO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUNhY2hlZFN0YXRlPFQ+KFxuICBrZXk6IHN0cmluZyxcbiAgaW5pdGlhbFN0YXRlPzogVCxcbiAgY29uZmlnPzogeyBjYWNoZU5hbWVzcGFjZT86IHN0cmluZyB9LFxuKTogW1QsIERpc3BhdGNoPFNldFN0YXRlQWN0aW9uPFQ+Pl0ge1xuICBjb25zdCBjYWNoZUtleSA9IGNvbmZpZz8uY2FjaGVOYW1lc3BhY2UgfHwgcm9vdENhY2hlO1xuICBjb25zdCBjYWNoZSA9XG4gICAgY2FjaGVNYXAuZ2V0KGNhY2hlS2V5KSB8fCBjYWNoZU1hcC5zZXQoY2FjaGVLZXksIG5ldyBDYWNoZSh7IG5hbWVzcGFjZTogY29uZmlnPy5jYWNoZU5hbWVzcGFjZSB9KSkuZ2V0KGNhY2hlS2V5KTtcblxuICBpZiAoIWNhY2hlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBjYWNoZVwiKTtcbiAgfVxuXG4gIGNvbnN0IGtleVJlZiA9IHVzZUxhdGVzdChrZXkpO1xuICBjb25zdCBpbml0aWFsVmFsdWVSZWYgPSB1c2VMYXRlc3QoaW5pdGlhbFN0YXRlKTtcblxuICBjb25zdCBjYWNoZWRTdGF0ZSA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlKGNhY2hlLnN1YnNjcmliZSwgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleVJlZi5jdXJyZW50KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkNvdWxkIG5vdCBnZXQgQ2FjaGUgZGF0YTpcIiwgZXJyb3IpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IHN0YXRlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBjYWNoZWRTdGF0ZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgaWYgKGNhY2hlZFN0YXRlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShjYWNoZWRTdGF0ZSwgcmV2aXZlcik7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gdGhlIGRhdGEgZ290IGNvcnJ1cHRlZCBzb21laG93XG4gICAgICAgIGNvbnNvbGUud2FybihcIlRoZSBjYWNoZWQgZGF0YSBpcyBjb3JydXB0ZWRcIiwgZXJyKTtcbiAgICAgICAgcmV0dXJuIGluaXRpYWxWYWx1ZVJlZi5jdXJyZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaW5pdGlhbFZhbHVlUmVmLmN1cnJlbnQ7XG4gICAgfVxuICB9LCBbY2FjaGVkU3RhdGUsIGluaXRpYWxWYWx1ZVJlZl0pO1xuXG4gIGNvbnN0IHN0YXRlUmVmID0gdXNlTGF0ZXN0KHN0YXRlKTtcblxuICBjb25zdCBzZXRTdGF0ZUFuZENhY2hlID0gdXNlQ2FsbGJhY2soXG4gICAgKHVwZGF0ZXI6IFNldFN0YXRlQWN0aW9uPFQ+KSA9PiB7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRTIHN0cnVnZ2xlcyB0byBpbmZlciB0aGUgdHlwZXMgYXMgVCBjb3VsZCBwb3RlbnRpYWxseSBiZSBhIGZ1bmN0aW9uXG4gICAgICBjb25zdCBuZXdWYWx1ZSA9IHR5cGVvZiB1cGRhdGVyID09PSBcImZ1bmN0aW9uXCIgPyB1cGRhdGVyKHN0YXRlUmVmLmN1cnJlbnQpIDogdXBkYXRlcjtcbiAgICAgIGlmICh0eXBlb2YgbmV3VmFsdWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgY2FjaGUuc2V0KGtleVJlZi5jdXJyZW50LCBcInVuZGVmaW5lZFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHN0cmluZ2lmaWVkVmFsdWUgPSBKU09OLnN0cmluZ2lmeShuZXdWYWx1ZSwgcmVwbGFjZXIpO1xuICAgICAgICBjYWNoZS5zZXQoa2V5UmVmLmN1cnJlbnQsIHN0cmluZ2lmaWVkVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ld1ZhbHVlO1xuICAgIH0sXG4gICAgW2NhY2hlLCBrZXlSZWYsIHN0YXRlUmVmXSxcbiAgKTtcblxuICByZXR1cm4gW3N0YXRlLCBzZXRTdGF0ZUFuZENhY2hlXTtcbn1cbiIsICJpbXBvcnQgY3J5cHRvIGZyb20gXCJub2RlOmNyeXB0b1wiO1xuaW1wb3J0IHsgdHlwZUhhc2hlciB9IGZyb20gXCIuL3ZlbmRvcnMvdHlwZS1oYXNoZXJcIjtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlcih0aGlzOiBhbnksIGtleTogc3RyaW5nLCBfdmFsdWU6IHVua25vd24pIHtcbiAgY29uc3QgdmFsdWUgPSB0aGlzW2tleV07XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICByZXR1cm4gYF9fcmF5Y2FzdF9jYWNoZWRfZGF0ZV9fJHt2YWx1ZS50b1N0cmluZygpfWA7XG4gIH1cbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICByZXR1cm4gYF9fcmF5Y2FzdF9jYWNoZWRfYnVmZmVyX18ke3ZhbHVlLnRvU3RyaW5nKFwiYmFzZTY0XCIpfWA7XG4gIH1cbiAgcmV0dXJuIF92YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJldml2ZXIoX2tleTogc3RyaW5nLCB2YWx1ZTogdW5rbm93bikge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlLnN0YXJ0c1dpdGgoXCJfX3JheWNhc3RfY2FjaGVkX2RhdGVfX1wiKSkge1xuICAgIHJldHVybiBuZXcgRGF0ZSh2YWx1ZS5yZXBsYWNlKFwiX19yYXljYXN0X2NhY2hlZF9kYXRlX19cIiwgXCJcIikpO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUuc3RhcnRzV2l0aChcIl9fcmF5Y2FzdF9jYWNoZWRfYnVmZmVyX19cIikpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWUucmVwbGFjZShcIl9fcmF5Y2FzdF9jYWNoZWRfYnVmZmVyX19cIiwgXCJcIiksIFwiYmFzZTY0XCIpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc2gob2JqZWN0OiBhbnkpIHtcbiAgY29uc3QgaGFzaGluZ1N0cmVhbSA9IGNyeXB0by5jcmVhdGVIYXNoKFwic2hhMVwiKTtcbiAgY29uc3QgaGFzaGVyID0gdHlwZUhhc2hlcihoYXNoaW5nU3RyZWFtKTtcbiAgaGFzaGVyLmRpc3BhdGNoKG9iamVjdCk7XG5cbiAgcmV0dXJuIGhhc2hpbmdTdHJlYW0uZGlnZXN0KFwiaGV4XCIpO1xufVxuIiwgIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudCAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXMgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbmltcG9ydCBjcnlwdG8gZnJvbSBcIm5vZGU6Y3J5cHRvXCI7XG5cbi8qKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZnVuY3Rpb24gaXMgYSBuYXRpdmUgZnVuY3Rpb24gKi9cbmZ1bmN0aW9uIGlzTmF0aXZlRnVuY3Rpb24oZjogYW55KSB7XG4gIGlmICh0eXBlb2YgZiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGV4cCA9IC9eZnVuY3Rpb25cXHMrXFx3KlxccypcXChcXHMqXFwpXFxzKntcXHMrXFxbbmF0aXZlIGNvZGVcXF1cXHMrfSQvaTtcbiAgcmV0dXJuIGV4cC5leGVjKEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGYpKSAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaGFzaFJlcGxhY2VyKHZhbHVlOiBhbnkpOiBzdHJpbmcge1xuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMpIHtcbiAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0eXBlSGFzaGVyKFxuICB3cml0ZVRvOlxuICAgIHwgY3J5cHRvLkhhc2hcbiAgICB8IHtcbiAgICAgICAgYnVmOiBzdHJpbmc7XG4gICAgICAgIHdyaXRlOiAoYjogYW55KSA9PiB2b2lkO1xuICAgICAgICBlbmQ6IChiOiBhbnkpID0+IHZvaWQ7XG4gICAgICAgIHJlYWQ6ICgpID0+IHN0cmluZztcbiAgICAgIH0sXG4gIGNvbnRleHQ6IGFueVtdID0gW10sXG4pIHtcbiAgZnVuY3Rpb24gd3JpdGUoc3RyOiBzdHJpbmcpIHtcbiAgICBpZiAoXCJ1cGRhdGVcIiBpbiB3cml0ZVRvKSB7XG4gICAgICByZXR1cm4gd3JpdGVUby51cGRhdGUoc3RyLCBcInV0ZjhcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB3cml0ZVRvLndyaXRlKHN0cik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBkaXNwYXRjaDogZnVuY3Rpb24gKHZhbHVlOiBhbnkpIHtcbiAgICAgIHZhbHVlID0gaGFzaFJlcGxhY2VyKHZhbHVlKTtcblxuICAgICAgY29uc3QgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzW1wiX251bGxcIl0oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpc1tcIl9cIiArIHR5cGVdKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIF9vYmplY3Q6IGZ1bmN0aW9uIChvYmplY3Q6IGFueSkge1xuICAgICAgY29uc3QgcGF0dGVybiA9IC9cXFtvYmplY3QgKC4qKVxcXS9pO1xuICAgICAgY29uc3Qgb2JqU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCk7XG4gICAgICBsZXQgb2JqVHlwZSA9IHBhdHRlcm4uZXhlYyhvYmpTdHJpbmcpPy5bMV0gPz8gXCJ1bmtub3duOltcIiArIG9ialN0cmluZyArIFwiXVwiO1xuICAgICAgb2JqVHlwZSA9IG9ialR5cGUudG9Mb3dlckNhc2UoKTtcblxuICAgICAgbGV0IG9iamVjdE51bWJlciA9IG51bGwgYXMgYW55O1xuXG4gICAgICBpZiAoKG9iamVjdE51bWJlciA9IGNvbnRleHQuaW5kZXhPZihvYmplY3QpKSA+PSAwKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2goXCJbQ0lSQ1VMQVI6XCIgKyBvYmplY3ROdW1iZXIgKyBcIl1cIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRleHQucHVzaChvYmplY3QpO1xuICAgICAgfVxuXG4gICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICAgICAgd3JpdGUoXCJidWZmZXI6XCIpO1xuICAgICAgICByZXR1cm4gd3JpdGUob2JqZWN0LnRvU3RyaW5nKFwidXRmOFwiKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvYmpUeXBlICE9PSBcIm9iamVjdFwiICYmIG9ialR5cGUgIT09IFwiZnVuY3Rpb25cIiAmJiBvYmpUeXBlICE9PSBcImFzeW5jZnVuY3Rpb25cIikge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmICh0aGlzW1wiX1wiICsgb2JqVHlwZV0pIHtcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgdGhpc1tcIl9cIiArIG9ialR5cGVdKG9iamVjdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG9iamVjdCB0eXBlIFwiJyArIG9ialR5cGUgKyAnXCInKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICAgICAgICBrZXlzID0ga2V5cy5zb3J0KCk7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0byBpbmNvcnBvcmF0ZSBzcGVjaWFsIHByb3BlcnRpZXMsIHNvXG4gICAgICAgIC8vIFR5cGVzIHdpdGggZGlmZmVyZW50IHByb3RvdHlwZXMgd2lsbCBwcm9kdWNlXG4gICAgICAgIC8vIGEgZGlmZmVyZW50IGhhc2ggYW5kIG9iamVjdHMgZGVyaXZlZCBmcm9tXG4gICAgICAgIC8vIGRpZmZlcmVudCBmdW5jdGlvbnMgKGBuZXcgRm9vYCwgYG5ldyBCYXJgKSB3aWxsXG4gICAgICAgIC8vIHByb2R1Y2UgZGlmZmVyZW50IGhhc2hlcy5cbiAgICAgICAgLy8gV2UgbmV2ZXIgZG8gdGhpcyBmb3IgbmF0aXZlIGZ1bmN0aW9ucyBzaW5jZSBzb21lXG4gICAgICAgIC8vIHNlZW0gdG8gYnJlYWsgYmVjYXVzZSBvZiB0aGF0LlxuICAgICAgICBpZiAoIWlzTmF0aXZlRnVuY3Rpb24ob2JqZWN0KSkge1xuICAgICAgICAgIGtleXMuc3BsaWNlKDAsIDAsIFwicHJvdG90eXBlXCIsIFwiX19wcm90b19fXCIsIFwiY29uc3RydWN0b3JcIik7XG4gICAgICAgIH1cblxuICAgICAgICB3cml0ZShcIm9iamVjdDpcIiArIGtleXMubGVuZ3RoICsgXCI6XCIpO1xuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgc2VsZi5kaXNwYXRjaChrZXkpO1xuICAgICAgICAgIHdyaXRlKFwiOlwiKTtcbiAgICAgICAgICBzZWxmLmRpc3BhdGNoKG9iamVjdFtrZXldKTtcbiAgICAgICAgICB3cml0ZShcIixcIik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgX2FycmF5OiBmdW5jdGlvbiAoYXJyOiBhbnlbXSwgdW5vcmRlcmVkOiBib29sZWFuKSB7XG4gICAgICB1bm9yZGVyZWQgPSB0eXBlb2YgdW5vcmRlcmVkICE9PSBcInVuZGVmaW5lZFwiID8gdW5vcmRlcmVkIDogZmFsc2U7IC8vIGRlZmF1bHQgdG8gb3B0aW9ucy51bm9yZGVyZWRBcnJheXNcblxuICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICB3cml0ZShcImFycmF5OlwiICsgYXJyLmxlbmd0aCArIFwiOlwiKTtcbiAgICAgIGlmICghdW5vcmRlcmVkIHx8IGFyci5sZW5ndGggPD0gMSkge1xuICAgICAgICBhcnIuZm9yRWFjaChmdW5jdGlvbiAoZW50cnk6IGFueSkge1xuICAgICAgICAgIHNlbGYuZGlzcGF0Y2goZW50cnkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyB0aGUgdW5vcmRlcmVkIGNhc2UgaXMgYSBsaXR0bGUgbW9yZSBjb21wbGljYXRlZDpcbiAgICAgIC8vIHNpbmNlIHRoZXJlIGlzIG5vIGNhbm9uaWNhbCBvcmRlcmluZyBvbiBvYmplY3RzLFxuICAgICAgLy8gaS5lLiB7YToxfSA8IHthOjJ9IGFuZCB7YToxfSA+IHthOjJ9IGFyZSBib3RoIGZhbHNlLFxuICAgICAgLy8gd2UgZmlyc3Qgc2VyaWFsaXplIGVhY2ggZW50cnkgdXNpbmcgYSBQYXNzVGhyb3VnaCBzdHJlYW1cbiAgICAgIC8vIGJlZm9yZSBzb3J0aW5nLlxuICAgICAgLy8gYWxzbzogd2UgY2Fu4oCZdCB1c2UgdGhlIHNhbWUgY29udGV4dCBhcnJheSBmb3IgYWxsIGVudHJpZXNcbiAgICAgIC8vIHNpbmNlIHRoZSBvcmRlciBvZiBoYXNoaW5nIHNob3VsZCAqbm90KiBtYXR0ZXIuIGluc3RlYWQsXG4gICAgICAvLyB3ZSBrZWVwIHRyYWNrIG9mIHRoZSBhZGRpdGlvbnMgdG8gYSBjb3B5IG9mIHRoZSBjb250ZXh0IGFycmF5XG4gICAgICAvLyBhbmQgYWRkIGFsbCBvZiB0aGVtIHRvIHRoZSBnbG9iYWwgY29udGV4dCBhcnJheSB3aGVuIHdl4oCZcmUgZG9uZVxuICAgICAgbGV0IGNvbnRleHRBZGRpdGlvbnM6IGFueVtdID0gW107XG4gICAgICBjb25zdCBlbnRyaWVzID0gYXJyLm1hcChmdW5jdGlvbiAoZW50cnk6IGFueSkge1xuICAgICAgICBjb25zdCBzdHJtID0gUGFzc1Rocm91Z2goKTtcbiAgICAgICAgY29uc3QgbG9jYWxDb250ZXh0ID0gY29udGV4dC5zbGljZSgpOyAvLyBtYWtlIGNvcHlcbiAgICAgICAgY29uc3QgaGFzaGVyID0gdHlwZUhhc2hlcihzdHJtLCBsb2NhbENvbnRleHQpO1xuICAgICAgICBoYXNoZXIuZGlzcGF0Y2goZW50cnkpO1xuICAgICAgICAvLyB0YWtlIG9ubHkgd2hhdCB3YXMgYWRkZWQgdG8gbG9jYWxDb250ZXh0IGFuZCBhcHBlbmQgaXQgdG8gY29udGV4dEFkZGl0aW9uc1xuICAgICAgICBjb250ZXh0QWRkaXRpb25zID0gY29udGV4dEFkZGl0aW9ucy5jb25jYXQobG9jYWxDb250ZXh0LnNsaWNlKGNvbnRleHQubGVuZ3RoKSk7XG4gICAgICAgIHJldHVybiBzdHJtLnJlYWQoKS50b1N0cmluZygpO1xuICAgICAgfSk7XG4gICAgICBjb250ZXh0ID0gY29udGV4dC5jb25jYXQoY29udGV4dEFkZGl0aW9ucyk7XG4gICAgICBlbnRyaWVzLnNvcnQoKTtcbiAgICAgIHRoaXMuX2FycmF5KGVudHJpZXMsIGZhbHNlKTtcbiAgICB9LFxuICAgIF9kYXRlOiBmdW5jdGlvbiAoZGF0ZTogRGF0ZSkge1xuICAgICAgd3JpdGUoXCJkYXRlOlwiICsgZGF0ZS50b0pTT04oKSk7XG4gICAgfSxcbiAgICBfc3ltYm9sOiBmdW5jdGlvbiAoc3ltOiBzeW1ib2wpIHtcbiAgICAgIHdyaXRlKFwic3ltYm9sOlwiICsgc3ltLnRvU3RyaW5nKCkpO1xuICAgIH0sXG4gICAgX2Vycm9yOiBmdW5jdGlvbiAoZXJyOiBFcnJvcikge1xuICAgICAgd3JpdGUoXCJlcnJvcjpcIiArIGVyci50b1N0cmluZygpKTtcbiAgICB9LFxuICAgIF9ib29sZWFuOiBmdW5jdGlvbiAoYm9vbDogYm9vbGVhbikge1xuICAgICAgd3JpdGUoXCJib29sOlwiICsgYm9vbC50b1N0cmluZygpKTtcbiAgICB9LFxuICAgIF9zdHJpbmc6IGZ1bmN0aW9uIChzdHJpbmc6IHN0cmluZykge1xuICAgICAgd3JpdGUoXCJzdHJpbmc6XCIgKyBzdHJpbmcubGVuZ3RoICsgXCI6XCIpO1xuICAgICAgd3JpdGUoc3RyaW5nLnRvU3RyaW5nKCkpO1xuICAgIH0sXG4gICAgX2Z1bmN0aW9uOiBmdW5jdGlvbiAoZm46IGFueSkge1xuICAgICAgd3JpdGUoXCJmbjpcIik7XG4gICAgICBpZiAoaXNOYXRpdmVGdW5jdGlvbihmbikpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaChcIltuYXRpdmVdXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaChmbi50b1N0cmluZygpKTtcbiAgICAgIH1cblxuICAgICAgLy8gTWFrZSBzdXJlIHdlIGNhbiBzdGlsbCBkaXN0aW5ndWlzaCBuYXRpdmUgZnVuY3Rpb25zXG4gICAgICAvLyBieSB0aGVpciBuYW1lLCBvdGhlcndpc2UgU3RyaW5nIGFuZCBGdW5jdGlvbiB3aWxsXG4gICAgICAvLyBoYXZlIHRoZSBzYW1lIGhhc2hcbiAgICAgIHRoaXMuZGlzcGF0Y2goXCJmdW5jdGlvbi1uYW1lOlwiICsgU3RyaW5nKGZuLm5hbWUpKTtcblxuICAgICAgdGhpcy5fb2JqZWN0KGZuKTtcbiAgICB9LFxuICAgIF9udW1iZXI6IGZ1bmN0aW9uIChudW1iZXI6IG51bWJlcikge1xuICAgICAgd3JpdGUoXCJudW1iZXI6XCIgKyBudW1iZXIudG9TdHJpbmcoKSk7XG4gICAgfSxcbiAgICBfeG1sOiBmdW5jdGlvbiAoeG1sOiBhbnkpIHtcbiAgICAgIHdyaXRlKFwieG1sOlwiICsgeG1sLnRvU3RyaW5nKCkpO1xuICAgIH0sXG4gICAgX251bGw6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdyaXRlKFwiTnVsbFwiKTtcbiAgICB9LFxuICAgIF91bmRlZmluZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdyaXRlKFwiVW5kZWZpbmVkXCIpO1xuICAgIH0sXG4gICAgX3JlZ2V4cDogZnVuY3Rpb24gKHJlZ2V4OiBSZWdFeHApIHtcbiAgICAgIHdyaXRlKFwicmVnZXg6XCIgKyByZWdleC50b1N0cmluZygpKTtcbiAgICB9LFxuICAgIF91aW50OGFycmF5OiBmdW5jdGlvbiAoYXJyOiBVaW50OEFycmF5KSB7XG4gICAgICB3cml0ZShcInVpbnQ4YXJyYXk6XCIpO1xuICAgICAgdGhpcy5kaXNwYXRjaChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpKTtcbiAgICB9LFxuICAgIF91aW50OGNsYW1wZWRhcnJheTogZnVuY3Rpb24gKGFycjogVWludDhDbGFtcGVkQXJyYXkpIHtcbiAgICAgIHdyaXRlKFwidWludDhjbGFtcGVkYXJyYXk6XCIpO1xuICAgICAgdGhpcy5kaXNwYXRjaChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpKTtcbiAgICB9LFxuICAgIF9pbnQ4YXJyYXk6IGZ1bmN0aW9uIChhcnI6IEludDhBcnJheSkge1xuICAgICAgd3JpdGUoXCJpbnQ4YXJyYXk6XCIpO1xuICAgICAgdGhpcy5kaXNwYXRjaChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpKTtcbiAgICB9LFxuICAgIF91aW50MTZhcnJheTogZnVuY3Rpb24gKGFycjogVWludDE2QXJyYXkpIHtcbiAgICAgIHdyaXRlKFwidWludDE2YXJyYXk6XCIpO1xuICAgICAgdGhpcy5kaXNwYXRjaChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpKTtcbiAgICB9LFxuICAgIF9pbnQxNmFycmF5OiBmdW5jdGlvbiAoYXJyOiBJbnQxNkFycmF5KSB7XG4gICAgICB3cml0ZShcImludDE2YXJyYXk6XCIpO1xuICAgICAgdGhpcy5kaXNwYXRjaChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpKTtcbiAgICB9LFxuICAgIF91aW50MzJhcnJheTogZnVuY3Rpb24gKGFycjogVWludDMyQXJyYXkpIHtcbiAgICAgIHdyaXRlKFwidWludDMyYXJyYXk6XCIpO1xuICAgICAgdGhpcy5kaXNwYXRjaChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpKTtcbiAgICB9LFxuICAgIF9pbnQzMmFycmF5OiBmdW5jdGlvbiAoYXJyOiBJbnQzMkFycmF5KSB7XG4gICAgICB3cml0ZShcImludDMyYXJyYXk6XCIpO1xuICAgICAgdGhpcy5kaXNwYXRjaChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpKTtcbiAgICB9LFxuICAgIF9mbG9hdDMyYXJyYXk6IGZ1bmN0aW9uIChhcnI6IEZsb2F0MzJBcnJheSkge1xuICAgICAgd3JpdGUoXCJmbG9hdDMyYXJyYXk6XCIpO1xuICAgICAgdGhpcy5kaXNwYXRjaChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpKTtcbiAgICB9LFxuICAgIF9mbG9hdDY0YXJyYXk6IGZ1bmN0aW9uIChhcnI6IEZsb2F0NjRBcnJheSkge1xuICAgICAgd3JpdGUoXCJmbG9hdDY0YXJyYXk6XCIpO1xuICAgICAgdGhpcy5kaXNwYXRjaChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpKTtcbiAgICB9LFxuICAgIF9hcnJheWJ1ZmZlcjogZnVuY3Rpb24gKGFycjogQXJyYXlCdWZmZXIpIHtcbiAgICAgIHdyaXRlKFwiYXJyYXlidWZmZXI6XCIpO1xuICAgICAgdGhpcy5kaXNwYXRjaChuZXcgVWludDhBcnJheShhcnIpKTtcbiAgICB9LFxuICAgIF91cmw6IGZ1bmN0aW9uICh1cmw6IFVSTCkge1xuICAgICAgd3JpdGUoXCJ1cmw6XCIgKyB1cmwudG9TdHJpbmcoKSk7XG4gICAgfSxcbiAgICBfbWFwOiBmdW5jdGlvbiAobWFwOiBNYXA8YW55LCBhbnk+KSB7XG4gICAgICB3cml0ZShcIm1hcDpcIik7XG4gICAgICBjb25zdCBhcnIgPSBBcnJheS5mcm9tKG1hcCk7XG4gICAgICB0aGlzLl9hcnJheShhcnIsIHRydWUpO1xuICAgIH0sXG4gICAgX3NldDogZnVuY3Rpb24gKHNldDogU2V0PGFueT4pIHtcbiAgICAgIHdyaXRlKFwic2V0OlwiKTtcbiAgICAgIGNvbnN0IGFyciA9IEFycmF5LmZyb20oc2V0KTtcbiAgICAgIHRoaXMuX2FycmF5KGFyciwgdHJ1ZSk7XG4gICAgfSxcbiAgICBfZmlsZTogZnVuY3Rpb24gKGZpbGU6IGFueSkge1xuICAgICAgd3JpdGUoXCJmaWxlOlwiKTtcbiAgICAgIHRoaXMuZGlzcGF0Y2goW2ZpbGUubmFtZSwgZmlsZS5zaXplLCBmaWxlLnR5cGUsIGZpbGUubGFzdE1vZGlmaWVkXSk7XG4gICAgfSxcbiAgICBfYmxvYjogZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgIFwiSGFzaGluZyBCbG9iIG9iamVjdHMgaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWRcXG5cIiArXG4gICAgICAgICAgXCIoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9wdWxlb3Mvb2JqZWN0LWhhc2gvaXNzdWVzLzI2KVxcblwiICtcbiAgICAgICAgICAnVXNlIFwib3B0aW9ucy5yZXBsYWNlclwiIG9yIFwib3B0aW9ucy5pZ25vcmVVbmtub3duXCJcXG4nLFxuICAgICAgKTtcbiAgICB9LFxuICAgIF9kb213aW5kb3c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdyaXRlKFwiZG9td2luZG93XCIpO1xuICAgIH0sXG4gICAgX2JpZ2ludDogZnVuY3Rpb24gKG51bWJlcjogYmlnaW50KSB7XG4gICAgICB3cml0ZShcImJpZ2ludDpcIiArIG51bWJlci50b1N0cmluZygpKTtcbiAgICB9LFxuICAgIC8qIE5vZGUuanMgc3RhbmRhcmQgbmF0aXZlIG9iamVjdHMgKi9cbiAgICBfcHJvY2VzczogZnVuY3Rpb24gKCkge1xuICAgICAgd3JpdGUoXCJwcm9jZXNzXCIpO1xuICAgIH0sXG4gICAgX3RpbWVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICB3cml0ZShcInRpbWVyXCIpO1xuICAgIH0sXG4gICAgX3BpcGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdyaXRlKFwicGlwZVwiKTtcbiAgICB9LFxuICAgIF90Y3A6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdyaXRlKFwidGNwXCIpO1xuICAgIH0sXG4gICAgX3VkcDogZnVuY3Rpb24gKCkge1xuICAgICAgd3JpdGUoXCJ1ZHBcIik7XG4gICAgfSxcbiAgICBfdHR5OiBmdW5jdGlvbiAoKSB7XG4gICAgICB3cml0ZShcInR0eVwiKTtcbiAgICB9LFxuICAgIF9zdGF0d2F0Y2hlcjogZnVuY3Rpb24gKCkge1xuICAgICAgd3JpdGUoXCJzdGF0d2F0Y2hlclwiKTtcbiAgICB9LFxuICAgIF9zZWN1cmVjb250ZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB3cml0ZShcInNlY3VyZWNvbnRleHRcIik7XG4gICAgfSxcbiAgICBfY29ubmVjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgd3JpdGUoXCJjb25uZWN0aW9uXCIpO1xuICAgIH0sXG4gICAgX3psaWI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdyaXRlKFwiemxpYlwiKTtcbiAgICB9LFxuICAgIF9jb250ZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB3cml0ZShcImNvbnRleHRcIik7XG4gICAgfSxcbiAgICBfbm9kZXNjcmlwdDogZnVuY3Rpb24gKCkge1xuICAgICAgd3JpdGUoXCJub2Rlc2NyaXB0XCIpO1xuICAgIH0sXG4gICAgX2h0dHBwYXJzZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdyaXRlKFwiaHR0cHBhcnNlclwiKTtcbiAgICB9LFxuICAgIF9kYXRhdmlldzogZnVuY3Rpb24gKCkge1xuICAgICAgd3JpdGUoXCJkYXRhdmlld1wiKTtcbiAgICB9LFxuICAgIF9zaWduYWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdyaXRlKFwic2lnbmFsXCIpO1xuICAgIH0sXG4gICAgX2ZzZXZlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdyaXRlKFwiZnNldmVudFwiKTtcbiAgICB9LFxuICAgIF90bHN3cmFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICB3cml0ZShcInRsc3dyYXBcIik7XG4gICAgfSxcbiAgfTtcbn1cblxuLy8gTWluaS1pbXBsZW1lbnRhdGlvbiBvZiBzdHJlYW0uUGFzc1Rocm91Z2hcbi8vIFdlIGFyZSBmYXIgZnJvbSBoYXZpbmcgbmVlZCBmb3IgdGhlIGZ1bGwgaW1wbGVtZW50YXRpb24sIGFuZCB3ZSBjYW5cbi8vIG1ha2UgYXNzdW1wdGlvbnMgbGlrZSBcIm1hbnkgd3JpdGVzLCB0aGVuIG9ubHkgb25lIGZpbmFsIHJlYWRcIlxuLy8gYW5kIHdlIGNhbiBpZ25vcmUgZW5jb2Rpbmcgc3BlY2lmaWNzXG5mdW5jdGlvbiBQYXNzVGhyb3VnaCgpIHtcbiAgcmV0dXJuIHtcbiAgICBidWY6IFwiXCIsXG5cbiAgICB3cml0ZTogZnVuY3Rpb24gKGI6IHN0cmluZykge1xuICAgICAgdGhpcy5idWYgKz0gYjtcbiAgICB9LFxuXG4gICAgZW5kOiBmdW5jdGlvbiAoYjogc3RyaW5nKSB7XG4gICAgICB0aGlzLmJ1ZiArPSBiO1xuICAgIH0sXG5cbiAgICByZWFkOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5idWY7XG4gICAgfSxcbiAgfTtcbn1cbiIsICJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7XG4gIEZ1bmN0aW9uUmV0dXJuaW5nUHJvbWlzZSxcbiAgVXNlQ2FjaGVkUHJvbWlzZVJldHVyblR5cGUsXG4gIE11dGF0ZVByb21pc2UsXG4gIEZ1bmN0aW9uUmV0dXJuaW5nUGFnaW5hdGVkUHJvbWlzZSxcbiAgVW53cmFwUmV0dXJuLFxuICBQYWdpbmF0aW9uT3B0aW9ucyxcbn0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IHVzZUNhY2hlZFN0YXRlIH0gZnJvbSBcIi4vdXNlQ2FjaGVkU3RhdGVcIjtcbmltcG9ydCB7IHVzZVByb21pc2UsIFByb21pc2VPcHRpb25zIH0gZnJvbSBcIi4vdXNlUHJvbWlzZVwiO1xuaW1wb3J0IHsgdXNlTGF0ZXN0IH0gZnJvbSBcIi4vdXNlTGF0ZXN0XCI7XG5pbXBvcnQgeyBoYXNoIH0gZnJvbSBcIi4vaGVscGVyc1wiO1xuXG4vLyBTeW1ib2wgdG8gZGlmZmVyZW50aWF0ZSBhbiBlbXB0eSBjYWNoZSBmcm9tIGB1bmRlZmluZWRgXG5jb25zdCBlbXB0eUNhY2hlID0gLyogI19fUFVSRV9fICovIFN5bWJvbCgpO1xuXG5leHBvcnQgdHlwZSBDYWNoZWRQcm9taXNlT3B0aW9uczxcbiAgVCBleHRlbmRzIEZ1bmN0aW9uUmV0dXJuaW5nUHJvbWlzZSB8IEZ1bmN0aW9uUmV0dXJuaW5nUGFnaW5hdGVkUHJvbWlzZSxcbiAgVSxcbj4gPSBQcm9taXNlT3B0aW9uczxUPiAmIHtcbiAgLyoqXG4gICAqIFRoZSBpbml0aWFsIGRhdGEgaWYgdGhlcmUgYXJlbid0IGFueSBpbiB0aGUgQ2FjaGUgeWV0LlxuICAgKi9cbiAgaW5pdGlhbERhdGE/OiBVO1xuICAvKipcbiAgICogVGVsbHMgdGhlIGhvb2sgdG8ga2VlcCB0aGUgcHJldmlvdXMgcmVzdWx0cyBpbnN0ZWFkIG9mIHJldHVybmluZyB0aGUgaW5pdGlhbCB2YWx1ZVxuICAgKiBpZiB0aGVyZSBhcmVuJ3QgYW55IGluIHRoZSBjYWNoZSBmb3IgdGhlIG5ldyBhcmd1bWVudHMuXG4gICAqIFRoaXMgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCB3aGVuIHVzZWQgZm9yIGRhdGEgZm9yIGEgTGlzdCB0byBhdm9pZCBmbGlja2VyaW5nLlxuICAgKi9cbiAga2VlcFByZXZpb3VzRGF0YT86IGJvb2xlYW47XG59O1xuXG4vKipcbiAqIFdyYXBzIGFuIGFzeW5jaHJvbm91cyBmdW5jdGlvbiBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIFByb21pc2UgaW4gYW5vdGhlciBmdW5jdGlvbiwgYW5kIHJldHVybnMgdGhlIHtAbGluayBBc3luY1N0YXRlfSBjb3JyZXNwb25kaW5nIHRvIHRoZSBleGVjdXRpb24gb2YgdGhlIGZ1bmN0aW9uLiBUaGUgbGFzdCB2YWx1ZSB3aWxsIGJlIGtlcHQgYmV0d2VlbiBjb21tYW5kIHJ1bnMuXG4gKlxuICogQHJlbWFyayBUaGlzIG92ZXJsb2FkIHNob3VsZCBiZSB1c2VkIHdoZW4gd29ya2luZyB3aXRoIHBhZ2luYXRlZCBkYXRhIHNvdXJjZXMuXG4gKiBAcmVtYXJrIFdoZW4gcGFnaW5hdGluZywgb25seSB0aGUgZmlyc3QgcGFnZSB3aWxsIGJlIGNhY2hlZC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiBpbXBvcnQgeyBzZXRUaW1lb3V0IH0gZnJvbSBcIm5vZGU6dGltZXJzL3Byb21pc2VzXCI7XG4gKiBpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuICogaW1wb3J0IHsgTGlzdCB9IGZyb20gXCJAcmF5Y2FzdC9hcGlcIjtcbiAqIGltcG9ydCB7IHVzZUNhY2hlZFByb21pc2UgfSBmcm9tIFwiQHJheWNhc3QvdXRpbHNcIjtcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb21tYW5kKCkge1xuICogICBjb25zdCBbc2VhcmNoVGV4dCwgc2V0U2VhcmNoVGV4dF0gPSB1c2VTdGF0ZShcIlwiKTtcbiAqXG4gKiAgIGNvbnN0IHsgaXNMb2FkaW5nLCBkYXRhLCBwYWdpbmF0aW9uIH0gPSB1c2VDYWNoZWRQcm9taXNlKFxuICogICAgIChzZWFyY2hUZXh0OiBzdHJpbmcpID0+IGFzeW5jIChvcHRpb25zOiB7IHBhZ2U6IG51bWJlciB9KSA9PiB7XG4gKiAgICAgICBhd2FpdCBzZXRUaW1lb3V0KDIwMCk7XG4gKiAgICAgICBjb25zdCBuZXdEYXRhID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogMjUgfSwgKF92LCBpbmRleCkgPT4gKHtcbiAqICAgICAgICAgaW5kZXgsXG4gKiAgICAgICAgIHBhZ2U6IG9wdGlvbnMucGFnZSxcbiAqICAgICAgICAgdGV4dDogc2VhcmNoVGV4dCxcbiAqICAgICAgIH0pKTtcbiAqICAgICAgIHJldHVybiB7IGRhdGE6IG5ld0RhdGEsIGhhc01vcmU6IG9wdGlvbnMucGFnZSA8IDEwIH07XG4gKiAgICAgfSxcbiAqICAgICBbc2VhcmNoVGV4dF0sXG4gKiAgICk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxMaXN0IGlzTG9hZGluZz17aXNMb2FkaW5nfSBvblNlYXJjaFRleHRDaGFuZ2U9e3NldFNlYXJjaFRleHR9IHBhZ2luYXRpb249e3BhZ2luYXRpb259PlxuICogICAgICAge2RhdGE/Lm1hcCgoaXRlbSkgPT4gKFxuICogICAgICAgICA8TGlzdC5JdGVtXG4gKiAgICAgICAgICAga2V5PXtgJHtpdGVtLnBhZ2V9ICR7aXRlbS5pbmRleH0gJHtpdGVtLnRleHR9YH1cbiAqICAgICAgICAgICB0aXRsZT17YFBhZ2UgJHtpdGVtLnBhZ2V9IEl0ZW0gJHtpdGVtLmluZGV4fWB9XG4gKiAgICAgICAgICAgc3VidGl0bGU9e2l0ZW0udGV4dH1cbiAqICAgICAgICAgLz5cbiAqICAgICAgICkpfVxuICogICAgIDwvTGlzdD5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQ2FjaGVkUHJvbWlzZTxUIGV4dGVuZHMgRnVuY3Rpb25SZXR1cm5pbmdQYWdpbmF0ZWRQcm9taXNlPFtdPj4oXG4gIGZuOiBULFxuKTogVXNlQ2FjaGVkUHJvbWlzZVJldHVyblR5cGU8VW53cmFwUmV0dXJuPFQ+LCB1bmRlZmluZWQ+O1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUNhY2hlZFByb21pc2U8VCBleHRlbmRzIEZ1bmN0aW9uUmV0dXJuaW5nUGFnaW5hdGVkUHJvbWlzZSwgVSBleHRlbmRzIGFueVtdID0gYW55W10+KFxuICBmbjogVCxcbiAgYXJnczogUGFyYW1ldGVyczxUPixcbiAgb3B0aW9ucz86IENhY2hlZFByb21pc2VPcHRpb25zPFQsIFU+LFxuKTogVXNlQ2FjaGVkUHJvbWlzZVJldHVyblR5cGU8VW53cmFwUmV0dXJuPFQ+LCBVPjtcblxuLyoqXG4gKiBXcmFwcyBhbiBhc3luY2hyb25vdXMgZnVuY3Rpb24gb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBQcm9taXNlIGFuZCByZXR1cm5zIHRoZSB7QGxpbmsgQXN5bmNTdGF0ZX0gY29ycmVzcG9uZGluZyB0byB0aGUgZXhlY3V0aW9uIG9mIHRoZSBmdW5jdGlvbi4gVGhlIGxhc3QgdmFsdWUgd2lsbCBiZSBrZXB0IGJldHdlZW4gY29tbWFuZCBydW5zLlxuICpcbiAqIEByZW1hcmsgVGhlIHZhbHVlIG5lZWRzIHRvIGJlIEpTT04gc2VyaWFsaXphYmxlLlxuICogQHJlbWFyayBUaGUgZnVuY3Rpb24gaXMgYXNzdW1lZCB0byBiZSBjb25zdGFudCAoZWcuIGNoYW5naW5nIGl0IHdvbid0IHRyaWdnZXIgYSByZXZhbGlkYXRpb24pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqIGltcG9ydCB7IHVzZUNhY2hlZFByb21pc2UgfSBmcm9tICdAcmF5Y2FzdC91dGlscyc7XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29tbWFuZCgpIHtcbiAqICAgY29uc3QgYWJvcnRhYmxlID0gdXNlUmVmPEFib3J0Q29udHJvbGxlcj4oKTtcbiAqICAgY29uc3QgeyBpc0xvYWRpbmcsIGRhdGEsIHJldmFsaWRhdGUgfSA9IHVzZUNhY2hlZFByb21pc2UoYXN5bmMgKHVybDogc3RyaW5nKSA9PiB7XG4gKiAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHsgc2lnbmFsOiBhYm9ydGFibGUuY3VycmVudD8uc2lnbmFsIH0pO1xuICogICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAqICAgICByZXR1cm4gcmVzdWx0XG4gKiAgIH0sXG4gKiAgIFsnaHR0cHM6Ly9hcGkuZXhhbXBsZSddLFxuICogICB7XG4gKiAgICAgYWJvcnRhYmxlXG4gKiAgIH0pO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8RGV0YWlsXG4gKiAgICAgICBpc0xvYWRpbmc9e2lzTG9hZGluZ31cbiAqICAgICAgIG1hcmtkb3duPXtkYXRhfVxuICogICAgICAgYWN0aW9ucz17XG4gKiAgICAgICAgIDxBY3Rpb25QYW5lbD5cbiAqICAgICAgICAgICA8QWN0aW9uIHRpdGxlPVwiUmVsb2FkXCIgb25BY3Rpb249eygpID0+IHJldmFsaWRhdGUoKX0gLz5cbiAqICAgICAgICAgPC9BY3Rpb25QYW5lbD5cbiAqICAgICAgIH1cbiAqICAgICAvPlxuICogICApO1xuICogfTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQ2FjaGVkUHJvbWlzZTxUIGV4dGVuZHMgRnVuY3Rpb25SZXR1cm5pbmdQcm9taXNlPFtdPj4oXG4gIGZuOiBULFxuKTogVXNlQ2FjaGVkUHJvbWlzZVJldHVyblR5cGU8VW53cmFwUmV0dXJuPFQ+LCB1bmRlZmluZWQ+O1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUNhY2hlZFByb21pc2U8VCBleHRlbmRzIEZ1bmN0aW9uUmV0dXJuaW5nUHJvbWlzZSwgVSA9IHVuZGVmaW5lZD4oXG4gIGZuOiBULFxuICBhcmdzOiBQYXJhbWV0ZXJzPFQ+LFxuICBvcHRpb25zPzogQ2FjaGVkUHJvbWlzZU9wdGlvbnM8VCwgVT4sXG4pOiBVc2VDYWNoZWRQcm9taXNlUmV0dXJuVHlwZTxVbndyYXBSZXR1cm48VD4sIFU+O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlQ2FjaGVkUHJvbWlzZTxcbiAgVCBleHRlbmRzIEZ1bmN0aW9uUmV0dXJuaW5nUHJvbWlzZSB8IEZ1bmN0aW9uUmV0dXJuaW5nUGFnaW5hdGVkUHJvbWlzZSxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgVSBleHRlbmRzIGFueVtdIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkLFxuPihmbjogVCwgYXJncz86IFBhcmFtZXRlcnM8VD4sIG9wdGlvbnM/OiBDYWNoZWRQcm9taXNlT3B0aW9uczxULCBVPikge1xuICAvKipcbiAgICogVGhlIGhvb2sgZ2VuZXJhdGVzIGEgY2FjaGUga2V5IGZyb20gdGhlIHByb21pc2UgaXQgcmVjZWl2ZXMgJiBpdHMgYXJndW1lbnRzLlxuICAgKiBTb21ldGltZXMgdGhhdCdzIG5vdCBlbm91Z2ggdG8gZ3VhcmFudGVlIHVuaXF1ZW5lc3MsIHNvIGhvb2tzIHRoYXQgYnVpbGQgb24gdG9wIG9mIGB1c2VDYWNoZWRQcm9taXNlYCBjYW5cbiAgICogdXNlIGFuIGBpbnRlcm5hbF9jYWNoZUtleVN1ZmZpeGAgdG8gaGVscCBpdC5cbiAgICpcbiAgICogQHJlbWFyayBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gICAqL1xuICBjb25zdCB7XG4gICAgaW5pdGlhbERhdGEsXG4gICAga2VlcFByZXZpb3VzRGF0YSxcbiAgICBpbnRlcm5hbF9jYWNoZUtleVN1ZmZpeCxcbiAgICAuLi51c2VQcm9taXNlT3B0aW9uc1xuICB9OiBDYWNoZWRQcm9taXNlT3B0aW9uczxULCBVPiAmIHsgaW50ZXJuYWxfY2FjaGVLZXlTdWZmaXg/OiBzdHJpbmcgfSA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IGxhc3RVcGRhdGVGcm9tID0gdXNlUmVmPFwiY2FjaGVcIiB8IFwicHJvbWlzZVwiPihudWxsKTtcblxuICBjb25zdCBbY2FjaGVkRGF0YSwgbXV0YXRlQ2FjaGVdID0gdXNlQ2FjaGVkU3RhdGU8dHlwZW9mIGVtcHR5Q2FjaGUgfCAoVW53cmFwUmV0dXJuPFQ+IHwgVSk+KFxuICAgIGhhc2goYXJncyB8fCBbXSkgKyBpbnRlcm5hbF9jYWNoZUtleVN1ZmZpeCxcbiAgICBlbXB0eUNhY2hlLFxuICAgIHtcbiAgICAgIGNhY2hlTmFtZXNwYWNlOiBoYXNoKGZuKSxcbiAgICB9LFxuICApO1xuXG4gIC8vIFVzZSBhIHJlZiB0byBzdG9yZSBwcmV2aW91cyByZXR1cm5lZCBkYXRhLiBVc2UgdGhlIGluaXRhbCBkYXRhIGFzIGl0cyBpbml0YWwgdmFsdWUgZnJvbSB0aGUgY2FjaGUuXG4gIGNvbnN0IGxhZ2d5RGF0YVJlZiA9IHVzZVJlZjxBd2FpdGVkPFJldHVyblR5cGU8VD4+IHwgVT4oY2FjaGVkRGF0YSAhPT0gZW1wdHlDYWNoZSA/IGNhY2hlZERhdGEgOiAoaW5pdGlhbERhdGEgYXMgVSkpO1xuICBjb25zdCBwYWdpbmF0aW9uQXJnc1JlZiA9IHVzZVJlZjxQYWdpbmF0aW9uT3B0aW9uczxVbndyYXBSZXR1cm48VD4gfCBVPiB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcblxuICBjb25zdCB7XG4gICAgbXV0YXRlOiBfbXV0YXRlLFxuICAgIHJldmFsaWRhdGUsXG4gICAgLi4uc3RhdGVcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGZuIGhhcyB0aGUgc2FtZSBzaWduYXR1cmUgaW4gYm90aCB1c2VQcm9taXNlIGFuZCB1c2VDYWNoZWRQcm9taXNlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgfSA9IHVzZVByb21pc2UoZm4sIGFyZ3MgfHwgKFtdIGFzIGFueSBhcyBQYXJhbWV0ZXJzPFQ+KSwge1xuICAgIC4uLnVzZVByb21pc2VPcHRpb25zLFxuICAgIG9uRGF0YShkYXRhLCBwYWdpbmF0aW9uKSB7XG4gICAgICBwYWdpbmF0aW9uQXJnc1JlZi5jdXJyZW50ID0gcGFnaW5hdGlvbjtcbiAgICAgIGlmICh1c2VQcm9taXNlT3B0aW9ucy5vbkRhdGEpIHtcbiAgICAgICAgdXNlUHJvbWlzZU9wdGlvbnMub25EYXRhKGRhdGEsIHBhZ2luYXRpb24pO1xuICAgICAgfVxuICAgICAgaWYgKHBhZ2luYXRpb24gJiYgcGFnaW5hdGlvbi5wYWdlID4gMCkge1xuICAgICAgICAvLyBkb24ndCBjYWNoZSBiZXlvbmQgdGhlIGZpcnN0IHBhZ2VcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbGFzdFVwZGF0ZUZyb20uY3VycmVudCA9IFwicHJvbWlzZVwiO1xuICAgICAgbGFnZ3lEYXRhUmVmLmN1cnJlbnQgPSBkYXRhO1xuICAgICAgbXV0YXRlQ2FjaGUoZGF0YSk7XG4gICAgfSxcbiAgfSk7XG5cbiAgbGV0IHJldHVybmVkRGF0YTogVSB8IEF3YWl0ZWQ8UmV0dXJuVHlwZTxUPj4gfCBVbndyYXBSZXR1cm48VD47XG4gIGNvbnN0IHBhZ2luYXRpb24gPSBzdGF0ZS5wYWdpbmF0aW9uO1xuICAvLyB3aGVuIHBhZ2luYXRpbmcsIG9ubHkgdGhlIGZpcnN0IHBhZ2UgZ2V0cyBjYWNoZWQsIHNvIHdlIHJldHVybiB0aGUgZGF0YSB3ZSBnZXQgZnJvbSBgdXNlUHJvbWlzZWAsIGJlY2F1c2VcbiAgLy8gaXQgd2lsbCBiZSBhY2N1bXVsYXRlZC5cbiAgaWYgKHBhZ2luYXRpb25BcmdzUmVmLmN1cnJlbnQgJiYgcGFnaW5hdGlvbkFyZ3NSZWYuY3VycmVudC5wYWdlID4gMCAmJiBzdGF0ZS5kYXRhKSB7XG4gICAgcmV0dXJuZWREYXRhID0gc3RhdGUuZGF0YSBhcyBVbndyYXBSZXR1cm48VD47XG4gICAgLy8gaWYgdGhlIGxhdGVzdCB1cGRhdGUgaWYgZnJvbSB0aGUgUHJvbWlzZSwgd2Uga2VlcCBpdFxuICB9IGVsc2UgaWYgKGxhc3RVcGRhdGVGcm9tLmN1cnJlbnQgPT09IFwicHJvbWlzZVwiKSB7XG4gICAgcmV0dXJuZWREYXRhID0gbGFnZ3lEYXRhUmVmLmN1cnJlbnQ7XG4gIH0gZWxzZSBpZiAoa2VlcFByZXZpb3VzRGF0YSAmJiBjYWNoZWREYXRhICE9PSBlbXB0eUNhY2hlKSB7XG4gICAgLy8gaWYgd2Ugd2FudCB0byBrZWVwIHRoZSBsYXRlc3QgZGF0YSwgd2UgcGljayB0aGUgY2FjaGUgYnV0IG9ubHkgaWYgaXQncyBub3QgZW1wdHlcbiAgICByZXR1cm5lZERhdGEgPSBjYWNoZWREYXRhO1xuICAgIGlmIChwYWdpbmF0aW9uKSB7XG4gICAgICBwYWdpbmF0aW9uLmhhc01vcmUgPSB0cnVlO1xuICAgICAgcGFnaW5hdGlvbi5wYWdlU2l6ZSA9IGNhY2hlZERhdGEubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIGlmIChrZWVwUHJldmlvdXNEYXRhICYmIGNhY2hlZERhdGEgPT09IGVtcHR5Q2FjaGUpIHtcbiAgICAvLyBpZiB0aGUgY2FjaGUgaXMgZW1wdHksIHdlIHdpbGwgcmV0dXJuIHRoZSBwcmV2aW91cyBkYXRhXG4gICAgcmV0dXJuZWREYXRhID0gbGFnZ3lEYXRhUmVmLmN1cnJlbnQ7XG4gICAgLy8gdGhlcmUgYXJlIG5vIHNwZWNpYWwgY2FzZXMsIHNvIGVpdGhlciByZXR1cm4gdGhlIGNhY2hlIG9yIGluaXRpYWwgZGF0YVxuICB9IGVsc2UgaWYgKGNhY2hlZERhdGEgIT09IGVtcHR5Q2FjaGUpIHtcbiAgICByZXR1cm5lZERhdGEgPSBjYWNoZWREYXRhO1xuICAgIGlmIChwYWdpbmF0aW9uKSB7XG4gICAgICBwYWdpbmF0aW9uLmhhc01vcmUgPSB0cnVlO1xuICAgICAgcGFnaW5hdGlvbi5wYWdlU2l6ZSA9IGNhY2hlZERhdGEubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm5lZERhdGEgPSBpbml0aWFsRGF0YSBhcyBVO1xuICB9XG5cbiAgY29uc3QgbGF0ZXN0RGF0YSA9IHVzZUxhdGVzdChyZXR1cm5lZERhdGEpO1xuXG4gIC8vIHdlIHJld3JpdGUgdGhlIG11dGF0ZSBmdW5jdGlvbiB0byB1cGRhdGUgdGhlIGNhY2hlIGluc3RlYWRcbiAgY29uc3QgbXV0YXRlID0gdXNlQ2FsbGJhY2s8TXV0YXRlUHJvbWlzZTxBd2FpdGVkPFJldHVyblR5cGU8VD4+IHwgVT4+KFxuICAgIGFzeW5jIChhc3luY1VwZGF0ZSwgb3B0aW9ucykgPT4ge1xuICAgICAgbGV0IGRhdGFCZWZvcmVPcHRpbWlzdGljVXBkYXRlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKG9wdGlvbnM/Lm9wdGltaXN0aWNVcGRhdGUpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnM/LnJvbGxiYWNrT25FcnJvciAhPT0gXCJmdW5jdGlvblwiICYmIG9wdGlvbnM/LnJvbGxiYWNrT25FcnJvciAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIC8vIGtlZXAgdHJhY2sgb2YgdGhlIGRhdGEgYmVmb3JlIHRoZSBvcHRpbWlzdGljIHVwZGF0ZSxcbiAgICAgICAgICAgIC8vIGJ1dCBvbmx5IGlmIHdlIG5lZWQgaXQgKGVnLiBvbmx5IHdoZW4gd2Ugd2FudCB0byBhdXRvbWF0aWNhbGx5IHJvbGxiYWNrIGFmdGVyKVxuICAgICAgICAgICAgZGF0YUJlZm9yZU9wdGltaXN0aWNVcGRhdGUgPSBzdHJ1Y3R1cmVkQ2xvbmUobGF0ZXN0RGF0YS5jdXJyZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZGF0YSA9IG9wdGlvbnMub3B0aW1pc3RpY1VwZGF0ZShsYXRlc3REYXRhLmN1cnJlbnQpO1xuICAgICAgICAgIGxhc3RVcGRhdGVGcm9tLmN1cnJlbnQgPSBcImNhY2hlXCI7XG4gICAgICAgICAgbGFnZ3lEYXRhUmVmLmN1cnJlbnQgPSBkYXRhO1xuICAgICAgICAgIG11dGF0ZUNhY2hlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhd2FpdCBfbXV0YXRlKGFzeW5jVXBkYXRlLCB7IHNob3VsZFJldmFsaWRhdGVBZnRlcjogb3B0aW9ucz8uc2hvdWxkUmV2YWxpZGF0ZUFmdGVyIH0pO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucz8ucm9sbGJhY2tPbkVycm9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjb25zdCBkYXRhID0gb3B0aW9ucy5yb2xsYmFja09uRXJyb3IobGF0ZXN0RGF0YS5jdXJyZW50KTtcbiAgICAgICAgICBsYXN0VXBkYXRlRnJvbS5jdXJyZW50ID0gXCJjYWNoZVwiO1xuICAgICAgICAgIGxhZ2d5RGF0YVJlZi5jdXJyZW50ID0gZGF0YTtcbiAgICAgICAgICBtdXRhdGVDYWNoZShkYXRhKTtcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zPy5vcHRpbWlzdGljVXBkYXRlICYmIG9wdGlvbnM/LnJvbGxiYWNrT25FcnJvciAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBsYXN0VXBkYXRlRnJvbS5jdXJyZW50ID0gXCJjYWNoZVwiO1xuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3Igd2hlbiB1bmRlZmluZWQsIGl0J3MgZXhwZWN0ZWRcbiAgICAgICAgICBsYWdneURhdGFSZWYuY3VycmVudCA9IGRhdGFCZWZvcmVPcHRpbWlzdGljVXBkYXRlO1xuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3Igd2hlbiB1bmRlZmluZWQsIGl0J3MgZXhwZWN0ZWRcbiAgICAgICAgICBtdXRhdGVDYWNoZShkYXRhQmVmb3JlT3B0aW1pc3RpY1VwZGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH0sXG4gICAgW211dGF0ZUNhY2hlLCBfbXV0YXRlLCBsYXRlc3REYXRhLCBsYWdneURhdGFSZWYsIGxhc3RVcGRhdGVGcm9tXSxcbiAgKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChjYWNoZWREYXRhICE9PSBlbXB0eUNhY2hlKSB7XG4gICAgICBsYXN0VXBkYXRlRnJvbS5jdXJyZW50ID0gXCJjYWNoZVwiO1xuICAgICAgbGFnZ3lEYXRhUmVmLmN1cnJlbnQgPSBjYWNoZWREYXRhO1xuICAgIH1cbiAgfSwgW2NhY2hlZERhdGFdKTtcblxuICByZXR1cm4ge1xuICAgIGRhdGE6IHJldHVybmVkRGF0YSxcbiAgICBpc0xvYWRpbmc6IHN0YXRlLmlzTG9hZGluZyxcbiAgICBlcnJvcjogc3RhdGUuZXJyb3IsXG4gICAgbXV0YXRlOiBwYWdpbmF0aW9uQXJnc1JlZi5jdXJyZW50ICYmIHBhZ2luYXRpb25BcmdzUmVmLmN1cnJlbnQucGFnZSA+IDAgPyBfbXV0YXRlIDogbXV0YXRlLFxuICAgIHBhZ2luYXRpb24sXG4gICAgcmV2YWxpZGF0ZSxcbiAgfTtcbn1cbiIsICJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlTWVtbywgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VDYWNoZWRQcm9taXNlLCBDYWNoZWRQcm9taXNlT3B0aW9ucyB9IGZyb20gXCIuL3VzZUNhY2hlZFByb21pc2VcIjtcbmltcG9ydCB7IHVzZUxhdGVzdCB9IGZyb20gXCIuL3VzZUxhdGVzdFwiO1xuaW1wb3J0IHsgRnVuY3Rpb25SZXR1cm5pbmdQYWdpbmF0ZWRQcm9taXNlLCBGdW5jdGlvblJldHVybmluZ1Byb21pc2UsIFVzZUNhY2hlZFByb21pc2VSZXR1cm5UeXBlIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IGlzSlNPTiB9IGZyb20gXCIuL2ZldGNoLXV0aWxzXCI7XG5pbXBvcnQgeyBoYXNoIH0gZnJvbSBcIi4vaGVscGVyc1wiO1xuXG5hc3luYyBmdW5jdGlvbiBkZWZhdWx0UGFyc2luZyhyZXNwb25zZTogUmVzcG9uc2UpIHtcbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgfVxuXG4gIGNvbnN0IGNvbnRlbnRUeXBlSGVhZGVyID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoXCJjb250ZW50LXR5cGVcIik7XG5cbiAgaWYgKGNvbnRlbnRUeXBlSGVhZGVyICYmIGlzSlNPTihjb250ZW50VHlwZUhlYWRlcikpIHtcbiAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICB9XG4gIHJldHVybiBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRNYXBwaW5nPFYsIFQgZXh0ZW5kcyB1bmtub3duW10+KHJlc3VsdDogVik6IHsgZGF0YTogVDsgaGFzTW9yZT86IGJvb2xlYW47IGN1cnNvcj86IGFueSB9IHtcbiAgcmV0dXJuIHsgZGF0YTogcmVzdWx0IGFzIHVua25vd24gYXMgVCwgaGFzTW9yZTogZmFsc2UgfTtcbn1cblxudHlwZSBSZXF1ZXN0SW5mbyA9IHN0cmluZyB8IFVSTCB8IGdsb2JhbFRoaXMuUmVxdWVzdDtcbnR5cGUgUGFnaW5hdGVkUmVxdWVzdEluZm8gPSAocGFnaW5hdGlvbjogeyBwYWdlOiBudW1iZXI7IGxhc3RJdGVtPzogYW55OyBjdXJzb3I/OiBhbnkgfSkgPT4gUmVxdWVzdEluZm87XG5cbi8qKlxuICogRmV0Y2hlcyB0aGUgcGFnaW5hdGVkVVJMIGFuZCByZXR1cm5zIHRoZSB7QGxpbmsgQXN5bmNTdGF0ZX0gY29ycmVzcG9uZGluZyB0byB0aGUgZXhlY3V0aW9uIG9mIHRoZSBmZXRjaC4gVGhlIGxhc3QgdmFsdWUgd2lsbCBiZSBrZXB0IGJldHdlZW4gY29tbWFuZCBydW5zLlxuICpcbiAqIEByZW1hcmsgVGhpcyBvdmVybG9hZCBzaG91bGQgYmUgdXNlZCB3aGVuIHdvcmtpbmcgd2l0aCBwYWdpbmF0ZWQgZGF0YSBzb3VyY2VzLlxuICogQHJlbWFyayBXaGVuIHBhZ2luYXRpbmcsIG9ubHkgdGhlIGZpcnN0IHBhZ2Ugd2lsbCBiZSBjYWNoZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogaW1wb3J0IHsgSWNvbiwgSW1hZ2UsIExpc3QgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG4gKiBpbXBvcnQgeyB1c2VGZXRjaCB9IGZyb20gXCJAcmF5Y2FzdC91dGlsc1wiO1xuICogaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbiAqXG4gKiB0eXBlIFNlYXJjaFJlc3VsdCA9IHsgY29tcGFuaWVzOiBDb21wYW55W107IHBhZ2U6IG51bWJlcjsgdG90YWxQYWdlczogbnVtYmVyIH07XG4gKiB0eXBlIENvbXBhbnkgPSB7IGlkOiBudW1iZXI7IG5hbWU6IHN0cmluZzsgc21hbGxMb2dvVXJsPzogc3RyaW5nIH07XG4gKiBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb21tYW5kKCkge1xuICogICBjb25zdCBbc2VhcmNoVGV4dCwgc2V0U2VhcmNoVGV4dF0gPSB1c2VTdGF0ZShcIlwiKTtcbiAqICAgY29uc3QgeyBpc0xvYWRpbmcsIGRhdGEsIHBhZ2luYXRpb24gfSA9IHVzZUZldGNoKFxuICogICAgIChvcHRpb25zKSA9PlxuICogICAgICAgXCJodHRwczovL2FwaS55Y29tYmluYXRvci5jb20vdjAuMS9jb21wYW5pZXM/XCIgK1xuICogICAgICAgbmV3IFVSTFNlYXJjaFBhcmFtcyh7IHBhZ2U6IFN0cmluZyhvcHRpb25zLnBhZ2UgKyAxKSwgcTogc2VhcmNoVGV4dCB9KS50b1N0cmluZygpLFxuICogICAgIHtcbiAqICAgICAgIG1hcFJlc3VsdChyZXN1bHQ6IFNlYXJjaFJlc3VsdCkge1xuICogICAgICAgICByZXR1cm4ge1xuICogICAgICAgICAgIGRhdGE6IHJlc3VsdC5jb21wYW5pZXMsXG4gKiAgICAgICAgICAgaGFzTW9yZTogcmVzdWx0LnBhZ2UgPCByZXN1bHQudG90YWxQYWdlcyxcbiAqICAgICAgICAgfTtcbiAqICAgICAgIH0sXG4gKiAgICAgICBrZWVwUHJldmlvdXNEYXRhOiB0cnVlLFxuICogICAgICAgaW5pdGlhbERhdGE6IFtdLFxuICogICAgIH0sXG4gKiAgICk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxMaXN0IGlzTG9hZGluZz17aXNMb2FkaW5nfSBwYWdpbmF0aW9uPXtwYWdpbmF0aW9ufSBvblNlYXJjaFRleHRDaGFuZ2U9e3NldFNlYXJjaFRleHR9PlxuICogICAgICAge2RhdGEubWFwKChjb21wYW55KSA9PiAoXG4gKiAgICAgICAgIDxMaXN0Lkl0ZW1cbiAqICAgICAgICAgICBrZXk9e2NvbXBhbnkuaWR9XG4gKiAgICAgICAgICAgaWNvbj17eyBzb3VyY2U6IGNvbXBhbnkuc21hbGxMb2dvVXJsID8/IEljb24uTWludXNDaXJjbGUsIG1hc2s6IEltYWdlLk1hc2suUm91bmRlZFJlY3RhbmdsZSB9fVxuICogICAgICAgICAgIHRpdGxlPXtjb21wYW55Lm5hbWV9XG4gKiAgICAgICAgIC8+XG4gKiAgICAgICApKX1cbiAqICAgICA8L0xpc3Q+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUZldGNoPFYgPSB1bmtub3duLCBVID0gdW5kZWZpbmVkLCBUIGV4dGVuZHMgdW5rbm93bltdID0gdW5rbm93bltdPihcbiAgdXJsOiBQYWdpbmF0ZWRSZXF1ZXN0SW5mbyxcbiAgb3B0aW9uczogUmVxdWVzdEluaXQgJiB7XG4gICAgbWFwUmVzdWx0OiAocmVzdWx0OiBWKSA9PiB7IGRhdGE6IFQ7IGhhc01vcmU/OiBib29sZWFuOyBjdXJzb3I/OiBhbnkgfTtcbiAgICBwYXJzZVJlc3BvbnNlPzogKHJlc3BvbnNlOiBSZXNwb25zZSkgPT4gUHJvbWlzZTxWPjtcbiAgfSAmIE9taXQ8Q2FjaGVkUHJvbWlzZU9wdGlvbnM8KHVybDogUmVxdWVzdEluZm8sIG9wdGlvbnM/OiBSZXF1ZXN0SW5pdCkgPT4gUHJvbWlzZTxUPiwgVT4sIFwiYWJvcnRhYmxlXCI+LFxuKTogVXNlQ2FjaGVkUHJvbWlzZVJldHVyblR5cGU8VCwgVT47XG4vKipcbiAqIEZldGNoIHRoZSBVUkwgYW5kIHJldHVybnMgdGhlIHtAbGluayBBc3luY1N0YXRlfSBjb3JyZXNwb25kaW5nIHRvIHRoZSBleGVjdXRpb24gb2YgdGhlIGZldGNoLiBUaGUgbGFzdCB2YWx1ZSB3aWxsIGJlIGtlcHQgYmV0d2VlbiBjb21tYW5kIHJ1bnMuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogaW1wb3J0IHsgdXNlRmV0Y2ggfSBmcm9tICdAcmF5Y2FzdC91dGlscyc7XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29tbWFuZCgpIHtcbiAqICAgY29uc3QgeyBpc0xvYWRpbmcsIGRhdGEsIHJldmFsaWRhdGUgfSA9IHVzZUZldGNoKCdodHRwczovL2FwaS5leGFtcGxlJyk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxEZXRhaWxcbiAqICAgICAgIGlzTG9hZGluZz17aXNMb2FkaW5nfVxuICogICAgICAgbWFya2Rvd249e2RhdGF9XG4gKiAgICAgICBhY3Rpb25zPXtcbiAqICAgICAgICAgPEFjdGlvblBhbmVsPlxuICogICAgICAgICAgIDxBY3Rpb24gdGl0bGU9XCJSZWxvYWRcIiBvbkFjdGlvbj17KCkgPT4gcmV2YWxpZGF0ZSgpfSAvPlxuICogICAgICAgICA8L0FjdGlvblBhbmVsPlxuICogICAgICAgfVxuICogICAgIC8+XG4gKiAgICk7XG4gKiB9O1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VGZXRjaDxWID0gdW5rbm93biwgVSA9IHVuZGVmaW5lZCwgVCA9IFY+KFxuICB1cmw6IFJlcXVlc3RJbmZvLFxuICBvcHRpb25zPzogUmVxdWVzdEluaXQgJiB7XG4gICAgbWFwUmVzdWx0PzogKHJlc3VsdDogVikgPT4geyBkYXRhOiBUOyBoYXNNb3JlPzogYm9vbGVhbjsgY3Vyc29yPzogYW55IH07XG4gICAgcGFyc2VSZXNwb25zZT86IChyZXNwb25zZTogUmVzcG9uc2UpID0+IFByb21pc2U8Vj47XG4gIH0gJiBPbWl0PENhY2hlZFByb21pc2VPcHRpb25zPCh1cmw6IFJlcXVlc3RJbmZvLCBvcHRpb25zPzogUmVxdWVzdEluaXQpID0+IFByb21pc2U8VD4sIFU+LCBcImFib3J0YWJsZVwiPixcbik6IFVzZUNhY2hlZFByb21pc2VSZXR1cm5UeXBlPFQsIFU+ICYgeyBwYWdpbmF0aW9uOiB1bmRlZmluZWQgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUZldGNoPFYgPSB1bmtub3duLCBVID0gdW5kZWZpbmVkLCBUIGV4dGVuZHMgdW5rbm93bltdID0gdW5rbm93bltdPihcbiAgdXJsOiBSZXF1ZXN0SW5mbyB8IFBhZ2luYXRlZFJlcXVlc3RJbmZvLFxuICBvcHRpb25zPzogUmVxdWVzdEluaXQgJiB7XG4gICAgbWFwUmVzdWx0PzogKHJlc3VsdDogVikgPT4geyBkYXRhOiBUOyBoYXNNb3JlPzogYm9vbGVhbjsgY3Vyc29yPzogYW55IH07XG4gICAgcGFyc2VSZXNwb25zZT86IChyZXNwb25zZTogUmVzcG9uc2UpID0+IFByb21pc2U8Vj47XG4gIH0gJiBPbWl0PENhY2hlZFByb21pc2VPcHRpb25zPCh1cmw6IFJlcXVlc3RJbmZvLCBvcHRpb25zPzogUmVxdWVzdEluaXQpID0+IFByb21pc2U8VD4sIFU+LCBcImFib3J0YWJsZVwiPixcbik6IFVzZUNhY2hlZFByb21pc2VSZXR1cm5UeXBlPFQsIFU+IHtcbiAgY29uc3Qge1xuICAgIHBhcnNlUmVzcG9uc2UsXG4gICAgbWFwUmVzdWx0LFxuICAgIGluaXRpYWxEYXRhLFxuICAgIGV4ZWN1dGUsXG4gICAga2VlcFByZXZpb3VzRGF0YSxcbiAgICBvbkVycm9yLFxuICAgIG9uRGF0YSxcbiAgICBvbldpbGxFeGVjdXRlLFxuICAgIGZhaWx1cmVUb2FzdE9wdGlvbnMsXG4gICAgLi4uZmV0Y2hPcHRpb25zXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuXG4gIGNvbnN0IHVzZUNhY2hlZFByb21pc2VPcHRpb25zOiBDYWNoZWRQcm9taXNlT3B0aW9uczwodXJsOiBSZXF1ZXN0SW5mbywgb3B0aW9ucz86IFJlcXVlc3RJbml0KSA9PiBQcm9taXNlPFQ+LCBVPiA9IHtcbiAgICBpbml0aWFsRGF0YSxcbiAgICBleGVjdXRlLFxuICAgIGtlZXBQcmV2aW91c0RhdGEsXG4gICAgb25FcnJvcixcbiAgICBvbkRhdGEsXG4gICAgb25XaWxsRXhlY3V0ZSxcbiAgICBmYWlsdXJlVG9hc3RPcHRpb25zLFxuICB9O1xuXG4gIGNvbnN0IHBhcnNlUmVzcG9uc2VSZWYgPSB1c2VMYXRlc3QocGFyc2VSZXNwb25zZSB8fCBkZWZhdWx0UGFyc2luZyk7XG4gIGNvbnN0IG1hcFJlc3VsdFJlZiA9IHVzZUxhdGVzdChtYXBSZXN1bHQgfHwgZGVmYXVsdE1hcHBpbmcpO1xuICBjb25zdCB1cmxSZWYgPSB1c2VSZWY8UmVxdWVzdEluZm8gfCBQYWdpbmF0ZWRSZXF1ZXN0SW5mbz4obnVsbCk7XG4gIGNvbnN0IGZpcnN0UGFnZVVybFJlZiA9IHVzZVJlZjxSZXF1ZXN0SW5mbyB8IHVuZGVmaW5lZD4obnVsbCk7XG4gIGNvbnN0IGZpcnN0UGFnZVVybCA9IHR5cGVvZiB1cmwgPT09IFwiZnVuY3Rpb25cIiA/IHVybCh7IHBhZ2U6IDAgfSkgOiB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBXaGVuIHBhZ2luYXRpbmcsIGB1cmxgIGlzIGEgYFBhZ2luYXRlZFJlcXVlc3RJbmZvYCwgc28gd2Ugb25seSB3YW50IHRvIHVwZGF0ZSB0aGUgcmVmIHdoZW4gdGhlIGBmaXJzdFBhZ2VVcmxgIGNoYW5nZXMuXG4gICAqIFdoZW4gbm90IHBhZ2luYXRpbmcsIGB1cmxgIGlzIGEgYFJlcXVlc3RJbmZvYCwgc28gd2Ugd2FudCB0byB1cGRhdGUgdGhlIHJlZiB3aGVuZXZlciBgdXJsYCBjaGFuZ2VzLlxuICAgKi9cbiAgaWYgKCF1cmxSZWYuY3VycmVudCB8fCB0eXBlb2YgZmlyc3RQYWdlVXJsUmVmLmN1cnJlbnQgPT09IFwidW5kZWZpbmVkXCIgfHwgZmlyc3RQYWdlVXJsUmVmLmN1cnJlbnQgIT09IGZpcnN0UGFnZVVybCkge1xuICAgIHVybFJlZi5jdXJyZW50ID0gdXJsO1xuICB9XG4gIGZpcnN0UGFnZVVybFJlZi5jdXJyZW50ID0gZmlyc3RQYWdlVXJsO1xuICBjb25zdCBhYm9ydGFibGUgPSB1c2VSZWY8QWJvcnRDb250cm9sbGVyPihudWxsKTtcblxuICBjb25zdCBwYWdpbmF0ZWRGbjogRnVuY3Rpb25SZXR1cm5pbmdQYWdpbmF0ZWRQcm9taXNlPFtQYWdpbmF0ZWRSZXF1ZXN0SW5mbywgdHlwZW9mIGZldGNoT3B0aW9uc10sIFQ+ID0gdXNlQ2FsbGJhY2soXG4gICAgKHVybDogUGFnaW5hdGVkUmVxdWVzdEluZm8sIG9wdGlvbnM/OiBSZXF1ZXN0SW5pdCkgPT4gYXN5bmMgKHBhZ2luYXRpb246IHsgcGFnZTogbnVtYmVyIH0pID0+IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybChwYWdpbmF0aW9uKSwgeyBzaWduYWw6IGFib3J0YWJsZS5jdXJyZW50Py5zaWduYWwsIC4uLm9wdGlvbnMgfSk7XG4gICAgICBjb25zdCBwYXJzZWQgPSAoYXdhaXQgcGFyc2VSZXNwb25zZVJlZi5jdXJyZW50KHJlcykpIGFzIFY7XG4gICAgICByZXR1cm4gbWFwUmVzdWx0UmVmLmN1cnJlbnQ/LihwYXJzZWQpO1xuICAgIH0sXG4gICAgW3BhcnNlUmVzcG9uc2VSZWYsIG1hcFJlc3VsdFJlZl0sXG4gICk7XG4gIGNvbnN0IGZuOiBGdW5jdGlvblJldHVybmluZ1Byb21pc2U8W1JlcXVlc3RJbmZvLCBSZXF1ZXN0SW5pdD9dLCBUPiA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jICh1cmw6IFJlcXVlc3RJbmZvLCBvcHRpb25zPzogUmVxdWVzdEluaXQpID0+IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybCwgeyBzaWduYWw6IGFib3J0YWJsZS5jdXJyZW50Py5zaWduYWwsIC4uLm9wdGlvbnMgfSk7XG4gICAgICBjb25zdCBwYXJzZWQgPSAoYXdhaXQgcGFyc2VSZXNwb25zZVJlZi5jdXJyZW50KHJlcykpIGFzIFY7XG4gICAgICBjb25zdCBtYXBwZWQgPSBtYXBSZXN1bHRSZWYuY3VycmVudChwYXJzZWQpO1xuICAgICAgcmV0dXJuIG1hcHBlZD8uZGF0YSBhcyB1bmtub3duIGFzIFQ7XG4gICAgfSxcbiAgICBbcGFyc2VSZXNwb25zZVJlZiwgbWFwUmVzdWx0UmVmXSxcbiAgKTtcblxuICBjb25zdCBwcm9taXNlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKGZpcnN0UGFnZVVybFJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm4gcGFnaW5hdGVkRm47XG4gICAgfVxuICAgIHJldHVybiBmbjtcbiAgfSwgW2ZpcnN0UGFnZVVybFJlZiwgZm4sIHBhZ2luYXRlZEZuXSk7XG5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBsYXN0SXRlbSBjYW4ndCBiZSBpbmZlcnJlZCBwcm9wZXJseVxuICByZXR1cm4gdXNlQ2FjaGVkUHJvbWlzZShwcm9taXNlLCBbdXJsUmVmLmN1cnJlbnQgYXMgUGFnaW5hdGVkUmVxdWVzdEluZm8sIGZldGNoT3B0aW9uc10sIHtcbiAgICAuLi51c2VDYWNoZWRQcm9taXNlT3B0aW9ucyxcbiAgICBpbnRlcm5hbF9jYWNoZUtleVN1ZmZpeDogZmlyc3RQYWdlVXJsUmVmLmN1cnJlbnQgKyBoYXNoKG1hcFJlc3VsdFJlZi5jdXJyZW50KSArIGhhc2gocGFyc2VSZXNwb25zZVJlZi5jdXJyZW50KSxcbiAgICBhYm9ydGFibGUsXG4gIH0pO1xufVxuIiwgImV4cG9ydCBmdW5jdGlvbiBpc0pTT04oY29udGVudFR5cGVIZWFkZXI6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgaWYgKGNvbnRlbnRUeXBlSGVhZGVyKSB7XG4gICAgY29uc3QgbWVkaWFUeXBlID0gcGFyc2VDb250ZW50VHlwZShjb250ZW50VHlwZUhlYWRlcik7XG5cbiAgICBpZiAoIW1lZGlhVHlwZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChtZWRpYVR5cGUuc3VidHlwZSA9PT0gXCJqc29uXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChtZWRpYVR5cGUuc3VmZml4ID09PSBcImpzb25cIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKG1lZGlhVHlwZS5zdWZmaXggJiYgL1xcYmpzb25cXGIvaS50ZXN0KG1lZGlhVHlwZS5zdWZmaXgpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAobWVkaWFUeXBlLnN1YnR5cGUgJiYgL1xcYmpzb25cXGIvaS50ZXN0KG1lZGlhVHlwZS5zdWJ0eXBlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZWdFeHAgdG8gbWF0Y2ggdHlwZSBpbiBSRkMgNjgzOCB3aXRoIGFuIG9wdGlvbmFsIHRyYWlsaW5nIGA7YCBiZWNhdXNlIHNvbWUgQXBwbGUgQVBJcyByZXR1cm5zIG9uZS4uLlxuICpcbiAqIHR5cGUtbmFtZSA9IHJlc3RyaWN0ZWQtbmFtZVxuICogc3VidHlwZS1uYW1lID0gcmVzdHJpY3RlZC1uYW1lXG4gKiByZXN0cmljdGVkLW5hbWUgPSByZXN0cmljdGVkLW5hbWUtZmlyc3QgKjEyNnJlc3RyaWN0ZWQtbmFtZS1jaGFyc1xuICogcmVzdHJpY3RlZC1uYW1lLWZpcnN0ICA9IEFMUEhBIC8gRElHSVRcbiAqIHJlc3RyaWN0ZWQtbmFtZS1jaGFycyAgPSBBTFBIQSAvIERJR0lUIC8gXCIhXCIgLyBcIiNcIiAvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgXCIkXCIgLyBcIiZcIiAvIFwiLVwiIC8gXCJeXCIgLyBcIl9cIlxuICogcmVzdHJpY3RlZC1uYW1lLWNoYXJzID0vIFwiLlwiIDsgQ2hhcmFjdGVycyBiZWZvcmUgZmlyc3QgZG90IGFsd2F5c1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7IHNwZWNpZnkgYSBmYWNldCBuYW1lXG4gKiByZXN0cmljdGVkLW5hbWUtY2hhcnMgPS8gXCIrXCIgOyBDaGFyYWN0ZXJzIGFmdGVyIGxhc3QgcGx1cyBhbHdheXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOyBzcGVjaWZ5IGEgc3RydWN0dXJlZCBzeW50YXggc3VmZml4XG4gKiBBTFBIQSA9ICAleDQxLTVBIC8gJXg2MS03QSAgIDsgQS1aIC8gYS16XG4gKiBESUdJVCA9ICAleDMwLTM5ICAgICAgICAgICAgIDsgMC05XG4gKi9cbmNvbnN0IE1FRElBX1RZUEVfUkVHRVhQID0gL14oW0EtWmEtejAtOV1bQS1aYS16MC05ISMkJl5fLV17MCwxMjZ9KVxcLyhbQS1aYS16MC05XVtBLVphLXowLTkhIyQmXl8uKy1dezAsMTI2fSk7PyQvO1xuXG5mdW5jdGlvbiBwYXJzZUNvbnRlbnRUeXBlKGhlYWRlcjogc3RyaW5nKSB7XG4gIGNvbnN0IGhlYWRlckRlbGltaXRhdGlvbmluZGV4ID0gaGVhZGVyLmluZGV4T2YoXCI7XCIpO1xuICBjb25zdCBjb250ZW50VHlwZSA9IGhlYWRlckRlbGltaXRhdGlvbmluZGV4ICE9PSAtMSA/IGhlYWRlci5zbGljZSgwLCBoZWFkZXJEZWxpbWl0YXRpb25pbmRleCkudHJpbSgpIDogaGVhZGVyLnRyaW0oKTtcblxuICBjb25zdCBtYXRjaCA9IE1FRElBX1RZUEVfUkVHRVhQLmV4ZWMoY29udGVudFR5cGUudG9Mb3dlckNhc2UoKS50b0xvd2VyQ2FzZSgpKTtcblxuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgdHlwZSA9IG1hdGNoWzFdO1xuICBsZXQgc3VidHlwZSA9IG1hdGNoWzJdO1xuICBsZXQgc3VmZml4O1xuXG4gIC8vIHN1ZmZpeCBhZnRlciBsYXN0ICtcbiAgY29uc3QgaW5kZXggPSBzdWJ0eXBlLmxhc3RJbmRleE9mKFwiK1wiKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIHN1ZmZpeCA9IHN1YnR5cGUuc3Vic3RyaW5nKGluZGV4ICsgMSk7XG4gICAgc3VidHlwZSA9IHN1YnR5cGUuc3Vic3RyaW5nKDAsIGluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7IHR5cGUsIHN1YnR5cGUsIHN1ZmZpeCB9O1xufVxuIiwgIi8qXG4gKiBJbnNwaXJlZCBieSBFeGVjYVxuICovXG5cbmltcG9ydCBjaGlsZFByb2Nlc3MgZnJvbSBcIm5vZGU6Y2hpbGRfcHJvY2Vzc1wiO1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyB1c2VDYWNoZWRQcm9taXNlLCBDYWNoZWRQcm9taXNlT3B0aW9ucyB9IGZyb20gXCIuL3VzZUNhY2hlZFByb21pc2VcIjtcbmltcG9ydCB7IHVzZUxhdGVzdCB9IGZyb20gXCIuL3VzZUxhdGVzdFwiO1xuaW1wb3J0IHsgVXNlQ2FjaGVkUHJvbWlzZVJldHVyblR5cGUgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHtcbiAgZ2V0U3Bhd25lZFByb21pc2UsXG4gIGdldFNwYXduZWRSZXN1bHQsXG4gIGhhbmRsZU91dHB1dCxcbiAgZGVmYXVsdFBhcnNpbmcsXG4gIFBhcnNlRXhlY091dHB1dEhhbmRsZXIsXG59IGZyb20gXCIuL2V4ZWMtdXRpbHNcIjtcblxudHlwZSBFeGVjT3B0aW9ucyA9IHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcnVucyB0aGUgY29tbWFuZCBpbnNpZGUgb2YgYSBzaGVsbC4gVXNlcyBgL2Jpbi9zaGAuIEEgZGlmZmVyZW50IHNoZWxsIGNhbiBiZSBzcGVjaWZpZWQgYXMgYSBzdHJpbmcuIFRoZSBzaGVsbCBzaG91bGQgdW5kZXJzdGFuZCB0aGUgYC1jYCBzd2l0Y2guXG4gICAqXG4gICAqIFdlIHJlY29tbWVuZCBhZ2FpbnN0IHVzaW5nIHRoaXMgb3B0aW9uIHNpbmNlIGl0IGlzOlxuICAgKiAtIG5vdCBjcm9zcy1wbGF0Zm9ybSwgZW5jb3VyYWdpbmcgc2hlbGwtc3BlY2lmaWMgc3ludGF4LlxuICAgKiAtIHNsb3dlciwgYmVjYXVzZSBvZiB0aGUgYWRkaXRpb25hbCBzaGVsbCBpbnRlcnByZXRhdGlvbi5cbiAgICogLSB1bnNhZmUsIHBvdGVudGlhbGx5IGFsbG93aW5nIGNvbW1hbmQgaW5qZWN0aW9uLlxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc2hlbGw/OiBib29sZWFuIHwgc3RyaW5nO1xuICAvKipcbiAgICogU3RyaXAgdGhlIGZpbmFsIG5ld2xpbmUgY2hhcmFjdGVyIGZyb20gdGhlIG91dHB1dC5cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgc3RyaXBGaW5hbE5ld2xpbmU/OiBib29sZWFuO1xuICAvKipcbiAgICogQ3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSBvZiB0aGUgY2hpbGQgcHJvY2Vzcy5cbiAgICogQGRlZmF1bHQgcHJvY2Vzcy5jd2QoKVxuICAgKi9cbiAgY3dkPzogc3RyaW5nO1xuICAvKipcbiAgICogRW52aXJvbm1lbnQga2V5LXZhbHVlIHBhaXJzLiBFeHRlbmRzIGF1dG9tYXRpY2FsbHkgZnJvbSBgcHJvY2Vzcy5lbnZgLlxuICAgKiBAZGVmYXVsdCBwcm9jZXNzLmVudlxuICAgKi9cbiAgZW52PzogTm9kZUpTLlByb2Nlc3NFbnY7XG4gIC8qKlxuICAgKiBTcGVjaWZ5IHRoZSBjaGFyYWN0ZXIgZW5jb2RpbmcgdXNlZCB0byBkZWNvZGUgdGhlIHN0ZG91dCBhbmQgc3RkZXJyIG91dHB1dC4gSWYgc2V0IHRvIGBcImJ1ZmZlclwiYCwgdGhlbiBzdGRvdXQgYW5kIHN0ZGVyciB3aWxsIGJlIGEgQnVmZmVyIGluc3RlYWQgb2YgYSBzdHJpbmcuXG4gICAqXG4gICAqIEBkZWZhdWx0IFwidXRmOFwiXG4gICAqL1xuICBlbmNvZGluZz86IEJ1ZmZlckVuY29kaW5nIHwgXCJidWZmZXJcIjtcbiAgLyoqXG4gICAqIFdyaXRlIHNvbWUgaW5wdXQgdG8gdGhlIGBzdGRpbmAgb2YgeW91ciBiaW5hcnkuXG4gICAqL1xuICBpbnB1dD86IHN0cmluZyB8IEJ1ZmZlcjtcbiAgLyoqIElmIHRpbWVvdXQgaXMgZ3JlYXRlciB0aGFuIGAwYCwgdGhlIHBhcmVudCB3aWxsIHNlbmQgdGhlIHNpZ25hbCBgU0lHVEVSTWAgaWYgdGhlIGNoaWxkIHJ1bnMgbG9uZ2VyIHRoYW4gdGltZW91dCBtaWxsaXNlY29uZHMuXG4gICAqXG4gICAqIEBkZWZhdWx0IDEwMDAwXG4gICAqL1xuICB0aW1lb3V0PzogbnVtYmVyO1xufTtcblxuY29uc3QgU1BBQ0VTX1JFR0VYUCA9IC8gKy9nO1xuZnVuY3Rpb24gcGFyc2VDb21tYW5kKGNvbW1hbmQ6IHN0cmluZywgYXJncz86IHN0cmluZ1tdKSB7XG4gIGlmIChhcmdzKSB7XG4gICAgcmV0dXJuIFtjb21tYW5kLCAuLi5hcmdzXTtcbiAgfVxuICBjb25zdCB0b2tlbnM6IHN0cmluZ1tdID0gW107XG4gIGZvciAoY29uc3QgdG9rZW4gb2YgY29tbWFuZC50cmltKCkuc3BsaXQoU1BBQ0VTX1JFR0VYUCkpIHtcbiAgICAvLyBBbGxvdyBzcGFjZXMgdG8gYmUgZXNjYXBlZCBieSBhIGJhY2tzbGFzaCBpZiBub3QgbWVhbnQgYXMgYSBkZWxpbWl0ZXJcbiAgICBjb25zdCBwcmV2aW91c1Rva2VuID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXTtcbiAgICBpZiAocHJldmlvdXNUb2tlbiAmJiBwcmV2aW91c1Rva2VuLmVuZHNXaXRoKFwiXFxcXFwiKSkge1xuICAgICAgLy8gTWVyZ2UgcHJldmlvdXMgdG9rZW4gd2l0aCBjdXJyZW50IG9uZVxuICAgICAgdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXSA9IGAke3ByZXZpb3VzVG9rZW4uc2xpY2UoMCwgLTEpfSAke3Rva2VufWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG50eXBlIEV4ZWNDYWNoZWRQcm9taXNlT3B0aW9uczxULCBVPiA9IE9taXQ8XG4gIENhY2hlZFByb21pc2VPcHRpb25zPFxuICAgIChfY29tbWFuZDogc3RyaW5nLCBfYXJnczogc3RyaW5nW10sIF9vcHRpb25zPzogRXhlY09wdGlvbnMsIGlucHV0Pzogc3RyaW5nIHwgQnVmZmVyKSA9PiBQcm9taXNlPFQ+LFxuICAgIFVcbiAgPixcbiAgXCJhYm9ydGFibGVcIlxuPjtcblxuLyoqXG4gKiBFeGVjdXRlcyBhIGNvbW1hbmQgYW5kIHJldHVybnMgdGhlIHtAbGluayBBc3luY1N0YXRlfSBjb3JyZXNwb25kaW5nIHRvIHRoZSBleGVjdXRpb24gb2YgdGhlIGNvbW1hbmQuIFRoZSBsYXN0IHZhbHVlIHdpbGwgYmUga2VwdCBiZXR3ZWVuIGNvbW1hbmQgcnVucy5cbiAqXG4gKiBAcmVtYXJrIFdoZW4gc3BlY2lmeWluZyB0aGUgYXJndW1lbnRzIHZpYSB0aGUgYGNvbW1hbmRgIHN0cmluZywgaWYgdGhlIGZpbGUgb3IgYW4gYXJndW1lbnQgb2YgdGhlIGNvbW1hbmQgY29udGFpbnMgc3BhY2VzLCB0aGV5IG11c3QgYmUgZXNjYXBlZCB3aXRoIGJhY2tzbGFzaGVzLiBUaGlzIG1hdHRlcnMgZXNwZWNpYWxseSBpZiBgY29tbWFuZGAgaXMgbm90IGEgY29uc3RhbnQgYnV0IGEgdmFyaWFibGUsIGZvciBleGFtcGxlIHdpdGggYF9fZGlybmFtZWAgb3IgYHByb2Nlc3MuY3dkKClgLiBFeGNlcHQgZm9yIHNwYWNlcywgbm8gZXNjYXBpbmcvcXVvdGluZyBpcyBuZWVkZWQuXG4gKlxuICogVGhlIGBzaGVsbGAgb3B0aW9uIG11c3QgYmUgdXNlZCBpZiB0aGUgY29tbWFuZCB1c2VzIHNoZWxsLXNwZWNpZmljIGZlYXR1cmVzIChmb3IgZXhhbXBsZSwgYCYmYCBvciBgfHxgKSwgYXMgb3Bwb3NlZCB0byBiZWluZyBhIHNpbXBsZSBmaWxlIGZvbGxvd2VkIGJ5IGl0cyBhcmd1bWVudHMuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogaW1wb3J0IHsgdXNlRXhlYyB9IGZyb20gJ0ByYXljYXN0L3V0aWxzJztcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb21tYW5kKCkge1xuICogICBjb25zdCB7IGlzTG9hZGluZywgZGF0YSwgcmV2YWxpZGF0ZSB9ID0gdXNlRXhlYyhcImJyZXdcIiwgW1wiaW5mb1wiLCBcIi0tanNvbj12MlwiLCBcIi0taW5zdGFsbGVkXCJdKTtcbiAqICAgY29uc3QgcmVzdWx0cyA9IHVzZU1lbW88e31bXT4oKCkgPT4gSlNPTi5wYXJzZShkYXRhIHx8IFwiW11cIiksIFtkYXRhXSk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxMaXN0IGlzTG9hZGluZz17aXNMb2FkaW5nfT5cbiAqICAgICAgeyhkYXRhIHx8IFtdKS5tYXAoKGl0ZW0pID0+IChcbiAqICAgICAgICA8TGlzdC5JdGVtIGtleT17aXRlbS5pZH0gdGl0bGU9e2l0ZW0ubmFtZX0gLz5cbiAqICAgICAgKSl9XG4gKiAgICA8L0xpc3Q+XG4gKiAgICk7XG4gKiB9O1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VFeGVjPFQgPSBCdWZmZXIsIFUgPSB1bmRlZmluZWQ+KFxuICBjb21tYW5kOiBzdHJpbmcsXG4gIG9wdGlvbnM6IHtcbiAgICBwYXJzZU91dHB1dD86IFBhcnNlRXhlY091dHB1dEhhbmRsZXI8VCwgQnVmZmVyLCBFeGVjT3B0aW9ucz47XG4gIH0gJiBFeGVjT3B0aW9ucyAmIHtcbiAgICAgIGVuY29kaW5nOiBcImJ1ZmZlclwiO1xuICAgIH0gJiBFeGVjQ2FjaGVkUHJvbWlzZU9wdGlvbnM8VCwgVT4sXG4pOiBVc2VDYWNoZWRQcm9taXNlUmV0dXJuVHlwZTxULCBVPjtcbmV4cG9ydCBmdW5jdGlvbiB1c2VFeGVjPFQgPSBzdHJpbmcsIFUgPSB1bmRlZmluZWQ+KFxuICBjb21tYW5kOiBzdHJpbmcsXG4gIG9wdGlvbnM/OiB7XG4gICAgcGFyc2VPdXRwdXQ/OiBQYXJzZUV4ZWNPdXRwdXRIYW5kbGVyPFQsIHN0cmluZywgRXhlY09wdGlvbnM+O1xuICB9ICYgRXhlY09wdGlvbnMgJiB7XG4gICAgICBlbmNvZGluZz86IEJ1ZmZlckVuY29kaW5nO1xuICAgIH0gJiBFeGVjQ2FjaGVkUHJvbWlzZU9wdGlvbnM8VCwgVT4sXG4pOiBVc2VDYWNoZWRQcm9taXNlUmV0dXJuVHlwZTxULCBVPjtcbmV4cG9ydCBmdW5jdGlvbiB1c2VFeGVjPFQgPSBCdWZmZXIsIFUgPSB1bmRlZmluZWQ+KFxuICBmaWxlOiBzdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgYXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIGZpbGUuIE5vIGVzY2FwaW5nL3F1b3RpbmcgaXMgbmVlZGVkLlxuICAgKlxuICAgKiBJZiBkZWZpbmVkLCB0aGUgY29tbWFuZHMgbmVlZHMgdG8gYmUgYSBmaWxlIHRvIGV4ZWN1dGUuIElmIHVuZGVmaW5lZCwgdGhlIGFyZ3VtZW50cyB3aWxsIGJlIHBhcnNlZCBmcm9tIHRoZSBjb21tYW5kLlxuICAgKi9cbiAgYXJnczogc3RyaW5nW10sXG4gIG9wdGlvbnM6IHtcbiAgICBwYXJzZU91dHB1dD86IFBhcnNlRXhlY091dHB1dEhhbmRsZXI8VCwgQnVmZmVyLCBFeGVjT3B0aW9ucz47XG4gIH0gJiBFeGVjT3B0aW9ucyAmIHtcbiAgICAgIGVuY29kaW5nOiBcImJ1ZmZlclwiO1xuICAgIH0gJiBFeGVjQ2FjaGVkUHJvbWlzZU9wdGlvbnM8VCwgVT4sXG4pOiBVc2VDYWNoZWRQcm9taXNlUmV0dXJuVHlwZTxULCBVPjtcbmV4cG9ydCBmdW5jdGlvbiB1c2VFeGVjPFQgPSBzdHJpbmcsIFUgPSB1bmRlZmluZWQ+KFxuICBmaWxlOiBzdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgYXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIGZpbGUuIE5vIGVzY2FwaW5nL3F1b3RpbmcgaXMgbmVlZGVkLlxuICAgKlxuICAgKiBJZiBkZWZpbmVkLCB0aGUgY29tbWFuZHMgbmVlZHMgdG8gYmUgYSBmaWxlIHRvIGV4ZWN1dGUuIElmIHVuZGVmaW5lZCwgdGhlIGFyZ3VtZW50cyB3aWxsIGJlIHBhcnNlZCBmcm9tIHRoZSBjb21tYW5kLlxuICAgKi9cbiAgYXJnczogc3RyaW5nW10sXG4gIG9wdGlvbnM/OiB7XG4gICAgcGFyc2VPdXRwdXQ/OiBQYXJzZUV4ZWNPdXRwdXRIYW5kbGVyPFQsIHN0cmluZywgRXhlY09wdGlvbnM+O1xuICB9ICYgRXhlY09wdGlvbnMgJiB7XG4gICAgICBlbmNvZGluZz86IEJ1ZmZlckVuY29kaW5nO1xuICAgIH0gJiBFeGVjQ2FjaGVkUHJvbWlzZU9wdGlvbnM8VCwgVT4sXG4pOiBVc2VDYWNoZWRQcm9taXNlUmV0dXJuVHlwZTxULCBVPjtcbmV4cG9ydCBmdW5jdGlvbiB1c2VFeGVjPFQsIFUgPSB1bmRlZmluZWQ+KFxuICBjb21tYW5kOiBzdHJpbmcsXG4gIG9wdGlvbnNPckFyZ3M/OlxuICAgIHwgc3RyaW5nW11cbiAgICB8ICh7XG4gICAgICAgIHBhcnNlT3V0cHV0PzogUGFyc2VFeGVjT3V0cHV0SGFuZGxlcjxULCBCdWZmZXIsIEV4ZWNPcHRpb25zPiB8IFBhcnNlRXhlY091dHB1dEhhbmRsZXI8VCwgc3RyaW5nLCBFeGVjT3B0aW9ucz47XG4gICAgICB9ICYgRXhlY09wdGlvbnMgJlxuICAgICAgICBFeGVjQ2FjaGVkUHJvbWlzZU9wdGlvbnM8VCwgVT4pLFxuICBvcHRpb25zPzoge1xuICAgIHBhcnNlT3V0cHV0PzogUGFyc2VFeGVjT3V0cHV0SGFuZGxlcjxULCBCdWZmZXIsIEV4ZWNPcHRpb25zPiB8IFBhcnNlRXhlY091dHB1dEhhbmRsZXI8VCwgc3RyaW5nLCBFeGVjT3B0aW9ucz47XG4gIH0gJiBFeGVjT3B0aW9ucyAmXG4gICAgRXhlY0NhY2hlZFByb21pc2VPcHRpb25zPFQsIFU+LFxuKTogVXNlQ2FjaGVkUHJvbWlzZVJldHVyblR5cGU8VCwgVT4ge1xuICBjb25zdCB7XG4gICAgcGFyc2VPdXRwdXQsXG4gICAgaW5wdXQsXG4gICAgb25EYXRhLFxuICAgIG9uV2lsbEV4ZWN1dGUsXG4gICAgaW5pdGlhbERhdGEsXG4gICAgZXhlY3V0ZSxcbiAgICBrZWVwUHJldmlvdXNEYXRhLFxuICAgIG9uRXJyb3IsXG4gICAgZmFpbHVyZVRvYXN0T3B0aW9ucyxcbiAgICAuLi5leGVjT3B0aW9uc1xuICB9ID0gQXJyYXkuaXNBcnJheShvcHRpb25zT3JBcmdzKSA/IG9wdGlvbnMgfHwge30gOiBvcHRpb25zT3JBcmdzIHx8IHt9O1xuXG4gIGNvbnN0IHVzZUNhY2hlZFByb21pc2VPcHRpb25zOiBFeGVjQ2FjaGVkUHJvbWlzZU9wdGlvbnM8VCwgVT4gPSB7XG4gICAgaW5pdGlhbERhdGEsXG4gICAgZXhlY3V0ZSxcbiAgICBrZWVwUHJldmlvdXNEYXRhLFxuICAgIG9uRXJyb3IsXG4gICAgb25EYXRhLFxuICAgIG9uV2lsbEV4ZWN1dGUsXG4gICAgZmFpbHVyZVRvYXN0T3B0aW9ucyxcbiAgfTtcblxuICBjb25zdCBhYm9ydGFibGUgPSB1c2VSZWY8QWJvcnRDb250cm9sbGVyPihudWxsKTtcbiAgY29uc3QgcGFyc2VPdXRwdXRSZWYgPSB1c2VMYXRlc3QocGFyc2VPdXRwdXQgfHwgZGVmYXVsdFBhcnNpbmcpO1xuXG4gIGNvbnN0IGZuID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKF9jb21tYW5kOiBzdHJpbmcsIF9hcmdzOiBzdHJpbmdbXSwgX29wdGlvbnM/OiBFeGVjT3B0aW9ucywgaW5wdXQ/OiBzdHJpbmcgfCBCdWZmZXIpID0+IHtcbiAgICAgIGNvbnN0IFtmaWxlLCAuLi5hcmdzXSA9IHBhcnNlQ29tbWFuZChfY29tbWFuZCwgX2FyZ3MpO1xuICAgICAgY29uc3QgY29tbWFuZCA9IFtmaWxlLCAuLi5hcmdzXS5qb2luKFwiIFwiKTtcblxuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgc3RyaXBGaW5hbE5ld2xpbmU6IHRydWUsXG4gICAgICAgIC4uLl9vcHRpb25zLFxuICAgICAgICB0aW1lb3V0OiBfb3B0aW9ucz8udGltZW91dCB8fCAxMDAwMCxcbiAgICAgICAgc2lnbmFsOiBhYm9ydGFibGUuY3VycmVudD8uc2lnbmFsLFxuICAgICAgICBlbmNvZGluZzogX29wdGlvbnM/LmVuY29kaW5nID09PSBudWxsID8gXCJidWZmZXJcIiA6IF9vcHRpb25zPy5lbmNvZGluZyB8fCBcInV0ZjhcIixcbiAgICAgICAgZW52OiB7IFBBVEg6IFwiL3Vzci9sb2NhbC9iaW46L3Vzci9iaW46L2JpbjovdXNyL3NiaW46L3NiaW5cIiwgLi4ucHJvY2Vzcy5lbnYsIC4uLl9vcHRpb25zPy5lbnYgfSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHNwYXduZWQgPSBjaGlsZFByb2Nlc3Muc3Bhd24oZmlsZSwgYXJncywgb3B0aW9ucyk7XG4gICAgICBjb25zdCBzcGF3bmVkUHJvbWlzZSA9IGdldFNwYXduZWRQcm9taXNlKHNwYXduZWQsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAoaW5wdXQpIHtcbiAgICAgICAgc3Bhd25lZC5zdGRpbi5lbmQoaW5wdXQpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBbeyBlcnJvciwgZXhpdENvZGUsIHNpZ25hbCwgdGltZWRPdXQgfSwgc3Rkb3V0UmVzdWx0LCBzdGRlcnJSZXN1bHRdID0gYXdhaXQgZ2V0U3Bhd25lZFJlc3VsdChcbiAgICAgICAgc3Bhd25lZCxcbiAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgc3Bhd25lZFByb21pc2UsXG4gICAgICApO1xuICAgICAgY29uc3Qgc3Rkb3V0ID0gaGFuZGxlT3V0cHV0KG9wdGlvbnMsIHN0ZG91dFJlc3VsdCk7XG4gICAgICBjb25zdCBzdGRlcnIgPSBoYW5kbGVPdXRwdXQob3B0aW9ucywgc3RkZXJyUmVzdWx0KTtcblxuICAgICAgcmV0dXJuIHBhcnNlT3V0cHV0UmVmLmN1cnJlbnQoe1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRvbyBtYW55IGdlbmVyaWNzLCBJIGdpdmUgdXBcbiAgICAgICAgc3Rkb3V0LFxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRvbyBtYW55IGdlbmVyaWNzLCBJIGdpdmUgdXBcbiAgICAgICAgc3RkZXJyLFxuICAgICAgICBlcnJvcixcbiAgICAgICAgZXhpdENvZGUsXG4gICAgICAgIHNpZ25hbCxcbiAgICAgICAgdGltZWRPdXQsXG4gICAgICAgIGNvbW1hbmQsXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIHBhcmVudEVycm9yOiBuZXcgRXJyb3IoKSxcbiAgICAgIH0pIGFzIFQ7XG4gICAgfSxcbiAgICBbcGFyc2VPdXRwdXRSZWZdLFxuICApO1xuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgVCBjYW4ndCBiZSBhIFByb21pc2Ugc28gaXQncyBhY3R1YWxseSB0aGUgc2FtZVxuICByZXR1cm4gdXNlQ2FjaGVkUHJvbWlzZShmbiwgW2NvbW1hbmQsIEFycmF5LmlzQXJyYXkob3B0aW9uc09yQXJncykgPyBvcHRpb25zT3JBcmdzIDogW10sIGV4ZWNPcHRpb25zLCBpbnB1dF0sIHtcbiAgICAuLi51c2VDYWNoZWRQcm9taXNlT3B0aW9ucyxcbiAgICBhYm9ydGFibGUsXG4gIH0pO1xufVxuIiwgImltcG9ydCBjaGlsZFByb2Nlc3MgZnJvbSBcIm5vZGU6Y2hpbGRfcHJvY2Vzc1wiO1xuaW1wb3J0IHsgY29uc3RhbnRzIGFzIEJ1ZmZlckNvbnN0YW50cyB9IGZyb20gXCJub2RlOmJ1ZmZlclwiO1xuaW1wb3J0IFN0cmVhbSBmcm9tIFwibm9kZTpzdHJlYW1cIjtcbmltcG9ydCB7IHByb21pc2lmeSB9IGZyb20gXCJub2RlOnV0aWxcIjtcbmltcG9ydCB7IG9uRXhpdCB9IGZyb20gXCIuL3ZlbmRvcnMvc2lnbmFsLWV4aXRcIjtcblxuZXhwb3J0IHR5cGUgU3Bhd25lZFByb21pc2UgPSBQcm9taXNlPHtcbiAgZXhpdENvZGU6IG51bWJlciB8IG51bGw7XG4gIGVycm9yPzogRXJyb3I7XG4gIHNpZ25hbDogTm9kZUpTLlNpZ25hbHMgfCBudWxsO1xuICB0aW1lZE91dDogYm9vbGVhbjtcbn0+O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3Bhd25lZFByb21pc2UoXG4gIHNwYXduZWQ6IGNoaWxkUHJvY2Vzcy5DaGlsZFByb2Nlc3NXaXRob3V0TnVsbFN0cmVhbXMsXG4gIHsgdGltZW91dCB9OiB7IHRpbWVvdXQ/OiBudW1iZXIgfSA9IHt9LFxuKTogU3Bhd25lZFByb21pc2Uge1xuICBjb25zdCBzcGF3bmVkUHJvbWlzZTogU3Bhd25lZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgc3Bhd25lZC5vbihcImV4aXRcIiwgKGV4aXRDb2RlLCBzaWduYWwpID0+IHtcbiAgICAgIHJlc29sdmUoeyBleGl0Q29kZSwgc2lnbmFsLCB0aW1lZE91dDogZmFsc2UgfSk7XG4gICAgfSk7XG5cbiAgICBzcGF3bmVkLm9uKFwiZXJyb3JcIiwgKGVycm9yKSA9PiB7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH0pO1xuXG4gICAgaWYgKHNwYXduZWQuc3RkaW4pIHtcbiAgICAgIHNwYXduZWQuc3RkaW4ub24oXCJlcnJvclwiLCAoZXJyb3IpID0+IHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgcmVtb3ZlRXhpdEhhbmRsZXIgPSBvbkV4aXQoKCkgPT4ge1xuICAgIHNwYXduZWQua2lsbCgpO1xuICB9KTtcblxuICBpZiAodGltZW91dCA9PT0gMCB8fCB0aW1lb3V0ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gc3Bhd25lZFByb21pc2UuZmluYWxseSgoKSA9PiByZW1vdmVFeGl0SGFuZGxlcigpKTtcbiAgfVxuXG4gIGxldCB0aW1lb3V0SWQ6IE5vZGVKUy5UaW1lb3V0O1xuICBjb25zdCB0aW1lb3V0UHJvbWlzZTogU3Bhd25lZFByb21pc2UgPSBuZXcgUHJvbWlzZSgoX3Jlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc3Bhd25lZC5raWxsKFwiU0lHVEVSTVwiKTtcbiAgICAgIHJlamVjdChPYmplY3QuYXNzaWduKG5ldyBFcnJvcihcIlRpbWVkIG91dFwiKSwgeyB0aW1lZE91dDogdHJ1ZSwgc2lnbmFsOiBcIlNJR1RFUk1cIiB9KSk7XG4gICAgfSwgdGltZW91dCk7XG4gIH0pO1xuXG4gIGNvbnN0IHNhZmVTcGF3bmVkUHJvbWlzZSA9IHNwYXduZWRQcm9taXNlLmZpbmFsbHkoKCkgPT4ge1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICB9KTtcblxuICByZXR1cm4gUHJvbWlzZS5yYWNlKFt0aW1lb3V0UHJvbWlzZSwgc2FmZVNwYXduZWRQcm9taXNlXSkuZmluYWxseSgoKSA9PiByZW1vdmVFeGl0SGFuZGxlcigpKTtcbn1cblxuY2xhc3MgTWF4QnVmZmVyRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiVGhlIG91dHB1dCBpcyB0b28gYmlnXCIpO1xuICAgIHRoaXMubmFtZSA9IFwiTWF4QnVmZmVyRXJyb3JcIjtcbiAgfVxufVxuXG5mdW5jdGlvbiBidWZmZXJTdHJlYW08VCBleHRlbmRzIHN0cmluZyB8IEJ1ZmZlcj4ob3B0aW9uczogeyBlbmNvZGluZzogQnVmZmVyRW5jb2RpbmcgfCBcImJ1ZmZlclwiIH0pIHtcbiAgY29uc3QgeyBlbmNvZGluZyB9ID0gb3B0aW9ucztcbiAgY29uc3QgaXNCdWZmZXIgPSBlbmNvZGluZyA9PT0gXCJidWZmZXJcIjtcblxuICAvLyBAdHMtZXhwZWN0LWVycm9yIG1pc3NpbmcgdGhlIG1ldGhvZHMgd2UgYXJlIGFkZGluZyBiZWxvd1xuICBjb25zdCBzdHJlYW06IFN0cmVhbS5QYXNzVGhyb3VnaCAmIHsgZ2V0QnVmZmVyZWRWYWx1ZTogKCkgPT4gVDsgZ2V0QnVmZmVyZWRMZW5ndGg6ICgpID0+IG51bWJlciB9ID1cbiAgICBuZXcgU3RyZWFtLlBhc3NUaHJvdWdoKHsgb2JqZWN0TW9kZTogZmFsc2UgfSk7XG5cbiAgaWYgKGVuY29kaW5nICYmIGVuY29kaW5nICE9PSBcImJ1ZmZlclwiKSB7XG4gICAgc3RyZWFtLnNldEVuY29kaW5nKGVuY29kaW5nKTtcbiAgfVxuXG4gIGxldCBsZW5ndGggPSAwO1xuICBjb25zdCBjaHVua3M6IGFueVtdID0gW107XG5cbiAgc3RyZWFtLm9uKFwiZGF0YVwiLCAoY2h1bmspID0+IHtcbiAgICBjaHVua3MucHVzaChjaHVuayk7XG5cbiAgICBsZW5ndGggKz0gY2h1bmsubGVuZ3RoO1xuICB9KTtcblxuICBzdHJlYW0uZ2V0QnVmZmVyZWRWYWx1ZSA9ICgpID0+IHtcbiAgICByZXR1cm4gKGlzQnVmZmVyID8gQnVmZmVyLmNvbmNhdChjaHVua3MsIGxlbmd0aCkgOiBjaHVua3Muam9pbihcIlwiKSkgYXMgVDtcbiAgfTtcblxuICBzdHJlYW0uZ2V0QnVmZmVyZWRMZW5ndGggPSAoKSA9PiBsZW5ndGg7XG5cbiAgcmV0dXJuIHN0cmVhbTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0U3RyZWFtPFQgZXh0ZW5kcyBzdHJpbmcgfCBCdWZmZXI+KFxuICBpbnB1dFN0cmVhbTogU3RyZWFtLlJlYWRhYmxlLFxuICBvcHRpb25zOiB7IGVuY29kaW5nOiBCdWZmZXJFbmNvZGluZyB8IFwiYnVmZmVyXCIgfSxcbikge1xuICBjb25zdCBzdHJlYW0gPSBidWZmZXJTdHJlYW08VD4ob3B0aW9ucyk7XG5cbiAgYXdhaXQgbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHJlamVjdFByb21pc2UgPSAoZXJyb3I6IEVycm9yICYgeyBidWZmZXJlZERhdGE/OiBUIH0pID0+IHtcbiAgICAgIC8vIERvbid0IHJldHJpZXZlIGFuIG92ZXJzaXplZCBidWZmZXIuXG4gICAgICBpZiAoZXJyb3IgJiYgc3RyZWFtLmdldEJ1ZmZlcmVkTGVuZ3RoKCkgPD0gQnVmZmVyQ29uc3RhbnRzLk1BWF9MRU5HVEgpIHtcbiAgICAgICAgZXJyb3IuYnVmZmVyZWREYXRhID0gc3RyZWFtLmdldEJ1ZmZlcmVkVmFsdWUoKTtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9O1xuXG4gICAgKGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHByb21pc2lmeShTdHJlYW0ucGlwZWxpbmUpKGlucHV0U3RyZWFtLCBzdHJlYW0pO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZWplY3RQcm9taXNlKGVycm9yIGFzIGFueSk7XG4gICAgICB9XG4gICAgfSkoKTtcblxuICAgIHN0cmVhbS5vbihcImRhdGFcIiwgKCkgPT4ge1xuICAgICAgLy8gODBtYlxuICAgICAgaWYgKHN0cmVhbS5nZXRCdWZmZXJlZExlbmd0aCgpID4gMTAwMCAqIDEwMDAgKiA4MCkge1xuICAgICAgICByZWplY3RQcm9taXNlKG5ldyBNYXhCdWZmZXJFcnJvcigpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHN0cmVhbS5nZXRCdWZmZXJlZFZhbHVlKCk7XG59XG5cbi8vIE9uIGZhaWx1cmUsIGByZXN1bHQuc3Rkb3V0fHN0ZGVycmAgc2hvdWxkIGNvbnRhaW4gdGhlIGN1cnJlbnRseSBidWZmZXJlZCBzdHJlYW1cbmFzeW5jIGZ1bmN0aW9uIGdldEJ1ZmZlcmVkRGF0YTxUIGV4dGVuZHMgc3RyaW5nIHwgQnVmZmVyPihzdHJlYW06IFN0cmVhbS5SZWFkYWJsZSwgc3RyZWFtUHJvbWlzZTogUHJvbWlzZTxUPikge1xuICBzdHJlYW0uZGVzdHJveSgpO1xuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IHN0cmVhbVByb21pc2U7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIChlcnJvciBhcyBhbnkgYXMgeyBidWZmZXJlZERhdGE6IFQgfSkuYnVmZmVyZWREYXRhO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTcGF3bmVkUmVzdWx0PFQgZXh0ZW5kcyBzdHJpbmcgfCBCdWZmZXI+KFxuICB7IHN0ZG91dCwgc3RkZXJyIH06IGNoaWxkUHJvY2Vzcy5DaGlsZFByb2Nlc3NXaXRob3V0TnVsbFN0cmVhbXMsXG4gIHsgZW5jb2RpbmcgfTogeyBlbmNvZGluZzogQnVmZmVyRW5jb2RpbmcgfCBcImJ1ZmZlclwiIH0sXG4gIHByb2Nlc3NEb25lOiBTcGF3bmVkUHJvbWlzZSxcbikge1xuICBjb25zdCBzdGRvdXRQcm9taXNlID0gZ2V0U3RyZWFtPFQ+KHN0ZG91dCwgeyBlbmNvZGluZyB9KTtcbiAgY29uc3Qgc3RkZXJyUHJvbWlzZSA9IGdldFN0cmVhbTxUPihzdGRlcnIsIHsgZW5jb2RpbmcgfSk7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5hbGwoW3Byb2Nlc3NEb25lLCBzdGRvdXRQcm9taXNlLCBzdGRlcnJQcm9taXNlXSk7XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgICAge1xuICAgICAgICBlcnJvcjogZXJyb3IgYXMgRXJyb3IsXG4gICAgICAgIGV4aXRDb2RlOiBudWxsLFxuICAgICAgICBzaWduYWw6IGVycm9yLnNpZ25hbCBhcyBOb2RlSlMuU2lnbmFscyB8IG51bGwsXG4gICAgICAgIHRpbWVkT3V0OiAoZXJyb3IudGltZWRPdXQgYXMgYm9vbGVhbikgfHwgZmFsc2UsXG4gICAgICB9LFxuICAgICAgZ2V0QnVmZmVyZWREYXRhKHN0ZG91dCwgc3Rkb3V0UHJvbWlzZSksXG4gICAgICBnZXRCdWZmZXJlZERhdGEoc3RkZXJyLCBzdGRlcnJQcm9taXNlKSxcbiAgICBdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdHJpcEZpbmFsTmV3bGluZTxUIGV4dGVuZHMgc3RyaW5nIHwgQnVmZmVyPihpbnB1dDogVCkge1xuICBjb25zdCBMRiA9IHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIiA/IFwiXFxuXCIgOiBcIlxcblwiLmNoYXJDb2RlQXQoMCk7XG4gIGNvbnN0IENSID0gdHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiID8gXCJcXHJcIiA6IFwiXFxyXCIuY2hhckNvZGVBdCgwKTtcblxuICBpZiAoaW5wdXRbaW5wdXQubGVuZ3RoIC0gMV0gPT09IExGKSB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciB3ZSBhcmUgZG9pbmcgc29tZSBuYXN0eSBzdHVmZiBoZXJlXG4gICAgaW5wdXQgPSBpbnB1dC5zbGljZSgwLCAtMSk7XG4gIH1cblxuICBpZiAoaW5wdXRbaW5wdXQubGVuZ3RoIC0gMV0gPT09IENSKSB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciB3ZSBhcmUgZG9pbmcgc29tZSBuYXN0eSBzdHVmZiBoZXJlXG4gICAgaW5wdXQgPSBpbnB1dC5zbGljZSgwLCAtMSk7XG4gIH1cblxuICByZXR1cm4gaW5wdXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVPdXRwdXQ8VCBleHRlbmRzIHN0cmluZyB8IEJ1ZmZlcj4ob3B0aW9uczogeyBzdHJpcEZpbmFsTmV3bGluZT86IGJvb2xlYW4gfSwgdmFsdWU6IFQpIHtcbiAgaWYgKG9wdGlvbnMuc3RyaXBGaW5hbE5ld2xpbmUpIHtcbiAgICByZXR1cm4gc3RyaXBGaW5hbE5ld2xpbmUodmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBnZXRFcnJvclByZWZpeCh7XG4gIHRpbWVkT3V0LFxuICB0aW1lb3V0LFxuICBzaWduYWwsXG4gIGV4aXRDb2RlLFxufToge1xuICBleGl0Q29kZTogbnVtYmVyIHwgbnVsbDtcbiAgc2lnbmFsOiBOb2RlSlMuU2lnbmFscyB8IG51bGw7XG4gIHRpbWVkT3V0OiBib29sZWFuO1xuICB0aW1lb3V0PzogbnVtYmVyO1xufSkge1xuICBpZiAodGltZWRPdXQpIHtcbiAgICByZXR1cm4gYHRpbWVkIG91dCBhZnRlciAke3RpbWVvdXR9IG1pbGxpc2Vjb25kc2A7XG4gIH1cblxuICBpZiAoc2lnbmFsICE9PSB1bmRlZmluZWQgJiYgc2lnbmFsICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGB3YXMga2lsbGVkIHdpdGggJHtzaWduYWx9YDtcbiAgfVxuXG4gIGlmIChleGl0Q29kZSAhPT0gdW5kZWZpbmVkICYmIGV4aXRDb2RlICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGBmYWlsZWQgd2l0aCBleGl0IGNvZGUgJHtleGl0Q29kZX1gO1xuICB9XG5cbiAgcmV0dXJuIFwiZmFpbGVkXCI7XG59XG5cbmZ1bmN0aW9uIG1ha2VFcnJvcih7XG4gIHN0ZG91dCxcbiAgc3RkZXJyLFxuICBlcnJvcixcbiAgc2lnbmFsLFxuICBleGl0Q29kZSxcbiAgY29tbWFuZCxcbiAgdGltZWRPdXQsXG4gIG9wdGlvbnMsXG4gIHBhcmVudEVycm9yLFxufToge1xuICBzdGRvdXQ6IHN0cmluZyB8IEJ1ZmZlcjtcbiAgc3RkZXJyOiBzdHJpbmcgfCBCdWZmZXI7XG4gIGVycm9yPzogRXJyb3I7XG4gIGV4aXRDb2RlOiBudW1iZXIgfCBudWxsO1xuICBzaWduYWw6IE5vZGVKUy5TaWduYWxzIHwgbnVsbDtcbiAgdGltZWRPdXQ6IGJvb2xlYW47XG4gIGNvbW1hbmQ6IHN0cmluZztcbiAgb3B0aW9ucz86IHsgdGltZW91dD86IG51bWJlciB9O1xuICBwYXJlbnRFcnJvcjogRXJyb3I7XG59KSB7XG4gIGNvbnN0IHByZWZpeCA9IGdldEVycm9yUHJlZml4KHsgdGltZWRPdXQsIHRpbWVvdXQ6IG9wdGlvbnM/LnRpbWVvdXQsIHNpZ25hbCwgZXhpdENvZGUgfSk7XG4gIGNvbnN0IGV4ZWNhTWVzc2FnZSA9IGBDb21tYW5kICR7cHJlZml4fTogJHtjb21tYW5kfWA7XG4gIGNvbnN0IHNob3J0TWVzc2FnZSA9IGVycm9yID8gYCR7ZXhlY2FNZXNzYWdlfVxcbiR7ZXJyb3IubWVzc2FnZX1gIDogZXhlY2FNZXNzYWdlO1xuICBjb25zdCBtZXNzYWdlID0gW3Nob3J0TWVzc2FnZSwgc3RkZXJyLCBzdGRvdXRdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiXFxuXCIpO1xuXG4gIGlmIChlcnJvcikge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3Igbm90IG9uIEVycm9yXG4gICAgZXJyb3Iub3JpZ2luYWxNZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcbiAgfSBlbHNlIHtcbiAgICBlcnJvciA9IHBhcmVudEVycm9yO1xuICB9XG5cbiAgZXJyb3IubWVzc2FnZSA9IG1lc3NhZ2U7XG5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBub3Qgb24gRXJyb3JcbiAgZXJyb3Iuc2hvcnRNZXNzYWdlID0gc2hvcnRNZXNzYWdlO1xuICAvLyBAdHMtZXhwZWN0LWVycm9yIG5vdCBvbiBFcnJvclxuICBlcnJvci5jb21tYW5kID0gY29tbWFuZDtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBub3Qgb24gRXJyb3JcbiAgZXJyb3IuZXhpdENvZGUgPSBleGl0Q29kZTtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBub3Qgb24gRXJyb3JcbiAgZXJyb3Iuc2lnbmFsID0gc2lnbmFsO1xuICAvLyBAdHMtZXhwZWN0LWVycm9yIG5vdCBvbiBFcnJvclxuICBlcnJvci5zdGRvdXQgPSBzdGRvdXQ7XG4gIC8vIEB0cy1leHBlY3QtZXJyb3Igbm90IG9uIEVycm9yXG4gIGVycm9yLnN0ZGVyciA9IHN0ZGVycjtcblxuICBpZiAoXCJidWZmZXJlZERhdGFcIiBpbiBlcnJvcikge1xuICAgIGRlbGV0ZSBlcnJvcltcImJ1ZmZlcmVkRGF0YVwiXTtcbiAgfVxuXG4gIHJldHVybiBlcnJvcjtcbn1cblxuZXhwb3J0IHR5cGUgUGFyc2VFeGVjT3V0cHV0SGFuZGxlcjxcbiAgVCxcbiAgRGVjb2RlZE91dHB1dCBleHRlbmRzIHN0cmluZyB8IEJ1ZmZlciA9IHN0cmluZyB8IEJ1ZmZlcixcbiAgT3B0aW9ucyA9IHVua25vd24sXG4+ID0gKGFyZ3M6IHtcbiAgLyoqIFRoZSBvdXRwdXQgb2YgdGhlIHByb2Nlc3Mgb24gc3Rkb3V0LiAqL1xuICBzdGRvdXQ6IERlY29kZWRPdXRwdXQ7XG4gIC8qKiBUaGUgb3V0cHV0IG9mIHRoZSBwcm9jZXNzIG9uIHN0ZGVyci4gKi9cbiAgc3RkZXJyOiBEZWNvZGVkT3V0cHV0O1xuICBlcnJvcj86IEVycm9yO1xuICAvKiogVGhlIG51bWVyaWMgZXhpdCBjb2RlIG9mIHRoZSBwcm9jZXNzIHRoYXQgd2FzIHJ1bi4gKi9cbiAgZXhpdENvZGU6IG51bWJlciB8IG51bGw7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgc2lnbmFsIHRoYXQgd2FzIHVzZWQgdG8gdGVybWluYXRlIHRoZSBwcm9jZXNzLiBGb3IgZXhhbXBsZSwgU0lHRlBFLlxuICAgKlxuICAgKiBJZiBhIHNpZ25hbCB0ZXJtaW5hdGVkIHRoZSBwcm9jZXNzLCB0aGlzIHByb3BlcnR5IGlzIGRlZmluZWQuIE90aGVyd2lzZSBpdCBpcyBudWxsLlxuICAgKi9cbiAgc2lnbmFsOiBOb2RlSlMuU2lnbmFscyB8IG51bGw7XG4gIC8qKiBXaGV0aGVyIHRoZSBwcm9jZXNzIHRpbWVkIG91dC4gKi9cbiAgdGltZWRPdXQ6IGJvb2xlYW47XG4gIC8qKiBUaGUgY29tbWFuZCB0aGF0IHdhcyBydW4sIGZvciBsb2dnaW5nIHB1cnBvc2VzLiAqL1xuICBjb21tYW5kOiBzdHJpbmc7XG4gIG9wdGlvbnM/OiBPcHRpb25zO1xufSkgPT4gVDtcblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRQYXJzaW5nPFQgZXh0ZW5kcyBzdHJpbmcgfCBCdWZmZXI+KHtcbiAgc3Rkb3V0LFxuICBzdGRlcnIsXG4gIGVycm9yLFxuICBleGl0Q29kZSxcbiAgc2lnbmFsLFxuICB0aW1lZE91dCxcbiAgY29tbWFuZCxcbiAgb3B0aW9ucyxcbiAgcGFyZW50RXJyb3IsXG59OiB7XG4gIHN0ZG91dDogVDtcbiAgc3RkZXJyOiBUO1xuICBlcnJvcj86IEVycm9yO1xuICBleGl0Q29kZTogbnVtYmVyIHwgbnVsbDtcbiAgc2lnbmFsOiBOb2RlSlMuU2lnbmFscyB8IG51bGw7XG4gIHRpbWVkT3V0OiBib29sZWFuO1xuICBjb21tYW5kOiBzdHJpbmc7XG4gIG9wdGlvbnM/OiB7IHRpbWVvdXQ/OiBudW1iZXIgfTtcbiAgcGFyZW50RXJyb3I6IEVycm9yO1xufSkge1xuICBpZiAoZXJyb3IgfHwgZXhpdENvZGUgIT09IDAgfHwgc2lnbmFsICE9PSBudWxsKSB7XG4gICAgY29uc3QgcmV0dXJuZWRFcnJvciA9IG1ha2VFcnJvcih7XG4gICAgICBlcnJvcixcbiAgICAgIGV4aXRDb2RlLFxuICAgICAgc2lnbmFsLFxuICAgICAgc3Rkb3V0LFxuICAgICAgc3RkZXJyLFxuICAgICAgY29tbWFuZCxcbiAgICAgIHRpbWVkT3V0LFxuICAgICAgb3B0aW9ucyxcbiAgICAgIHBhcmVudEVycm9yLFxuICAgIH0pO1xuXG4gICAgdGhyb3cgcmV0dXJuZWRFcnJvcjtcbiAgfVxuXG4gIHJldHVybiBzdGRvdXQ7XG59XG4iLCAiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4vLyBOb3RlOiBzaW5jZSBueWMgdXNlcyB0aGlzIG1vZHVsZSB0byBvdXRwdXQgY292ZXJhZ2UsIGFueSBsaW5lc1xuLy8gdGhhdCBhcmUgaW4gdGhlIGRpcmVjdCBzeW5jIGZsb3cgb2YgbnljJ3Mgb3V0cHV0Q292ZXJhZ2UgYXJlXG4vLyBpZ25vcmVkLCBzaW5jZSB3ZSBjYW4gbmV2ZXIgZ2V0IGNvdmVyYWdlIGZvciB0aGVtLlxuLy8gZ3JhYiBhIHJlZmVyZW5jZSB0byBub2RlJ3MgcmVhbCBwcm9jZXNzIG9iamVjdCByaWdodCBhd2F5XG5cbmNvbnN0IHByb2Nlc3NPayA9IChwcm9jZXNzOiBhbnkpID0+XG4gICEhcHJvY2VzcyAmJlxuICB0eXBlb2YgcHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJlxuICB0eXBlb2YgcHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9PT0gXCJmdW5jdGlvblwiICYmXG4gIHR5cGVvZiBwcm9jZXNzLmVtaXQgPT09IFwiZnVuY3Rpb25cIiAmJlxuICB0eXBlb2YgcHJvY2Vzcy5yZWFsbHlFeGl0ID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgdHlwZW9mIHByb2Nlc3MubGlzdGVuZXJzID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgdHlwZW9mIHByb2Nlc3Mua2lsbCA9PT0gXCJmdW5jdGlvblwiICYmXG4gIHR5cGVvZiBwcm9jZXNzLnBpZCA9PT0gXCJudW1iZXJcIiAmJlxuICB0eXBlb2YgcHJvY2Vzcy5vbiA9PT0gXCJmdW5jdGlvblwiO1xuY29uc3Qga0V4aXRFbWl0dGVyID0gLyogI19fUFVSRV9fICovIFN5bWJvbC5mb3IoXCJzaWduYWwtZXhpdCBlbWl0dGVyXCIpO1xuLy8gdGVlbnkgc3BlY2lhbCBwdXJwb3NlIGVlXG5jbGFzcyBFbWl0dGVyIHtcbiAgZW1pdHRlZCA9IHtcbiAgICBhZnRlckV4aXQ6IGZhbHNlLFxuICAgIGV4aXQ6IGZhbHNlLFxuICB9O1xuICBsaXN0ZW5lcnMgPSB7XG4gICAgYWZ0ZXJFeGl0OiBbXSxcbiAgICBleGl0OiBbXSxcbiAgfTtcbiAgY291bnQgPSAwO1xuICBpZCA9IE1hdGgucmFuZG9tKCk7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAoZ2xvYmFsW2tFeGl0RW1pdHRlcl0pIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHJldHVybiBnbG9iYWxba0V4aXRFbWl0dGVyXTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdsb2JhbCwga0V4aXRFbWl0dGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcyxcbiAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICB9KTtcbiAgfVxuICBvbihldjogYW55LCBmbjogYW55KSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHRoaXMubGlzdGVuZXJzW2V2XS5wdXNoKGZuKTtcbiAgfVxuICByZW1vdmVMaXN0ZW5lcihldjogYW55LCBmbjogYW55KSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IGxpc3QgPSB0aGlzLmxpc3RlbmVyc1tldl07XG4gICAgY29uc3QgaSA9IGxpc3QuaW5kZXhPZihmbik7XG4gICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgaWYgKGkgPT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXG4gICAgaWYgKGkgPT09IDAgJiYgbGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGxpc3QubGVuZ3RoID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlzdC5zcGxpY2UoaSwgMSk7XG4gICAgfVxuICB9XG4gIGVtaXQoZXY6IGFueSwgY29kZTogYW55LCBzaWduYWw6IGFueSk6IGFueSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmICh0aGlzLmVtaXR0ZWRbZXZdKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB0aGlzLmVtaXR0ZWRbZXZdID0gdHJ1ZTtcbiAgICBsZXQgcmV0ID0gZmFsc2U7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGZvciAoY29uc3QgZm4gb2YgdGhpcy5saXN0ZW5lcnNbZXZdKSB7XG4gICAgICByZXQgPSBmbihjb2RlLCBzaWduYWwpID09PSB0cnVlIHx8IHJldDtcbiAgICB9XG4gICAgaWYgKGV2ID09PSBcImV4aXRcIikge1xuICAgICAgcmV0ID0gdGhpcy5lbWl0KFwiYWZ0ZXJFeGl0XCIsIGNvZGUsIHNpZ25hbCkgfHwgcmV0O1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG59XG5cbmNsYXNzIFNpZ25hbEV4aXRGYWxsYmFjayB7XG4gIG9uRXhpdCgpIHtcbiAgICByZXR1cm4gKCkgPT4ge307XG4gIH1cbiAgbG9hZCgpIHt9XG4gIHVubG9hZCgpIHt9XG59XG5jbGFzcyBTaWduYWxFeGl0IHtcbiAgLy8gXCJTSUdIVVBcIiB0aHJvd3MgYW4gYEVOT1NZU2AgZXJyb3Igb24gV2luZG93cyxcbiAgLy8gc28gdXNlIGEgc3VwcG9ydGVkIHNpZ25hbCBpbnN0ZWFkXG4gIC8qIGM4IGlnbm9yZSBzdGFydCAqL1xuICAvLyBAdHMtaWdub3JlXG4gICNodXBTaWcgPSBwcm9jZXNzLnBsYXRmb3JtID09PSBcIndpbjMyXCIgPyBcIlNJR0lOVFwiIDogXCJTSUdIVVBcIjtcbiAgLyogYzggaWdub3JlIHN0b3AgKi9cbiAgI2VtaXR0ZXIgPSBuZXcgRW1pdHRlcigpO1xuICAjcHJvY2VzczogYW55O1xuICAjb3JpZ2luYWxQcm9jZXNzRW1pdDogYW55O1xuICAjb3JpZ2luYWxQcm9jZXNzUmVhbGx5RXhpdDogYW55O1xuICAjc2lnTGlzdGVuZXJzID0ge307XG4gICNsb2FkZWQgPSBmYWxzZTtcbiAgI3NpZ25hbHM6IHN0cmluZ1tdID0gW107XG4gIGNvbnN0cnVjdG9yKHByb2Nlc3M6IGFueSkge1xuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgbm90IHRoZSBzZXQgb2YgYWxsIHBvc3NpYmxlIHNpZ25hbHMuXG4gICAgICpcbiAgICAgKiBJdCBJUywgaG93ZXZlciwgdGhlIHNldCBvZiBhbGwgc2lnbmFscyB0aGF0IHRyaWdnZXJcbiAgICAgKiBhbiBleGl0IG9uIGVpdGhlciBMaW51eCBvciBCU0Qgc3lzdGVtcy4gIExpbnV4IGlzIGFcbiAgICAgKiBzdXBlcnNldCBvZiB0aGUgc2lnbmFsIG5hbWVzIHN1cHBvcnRlZCBvbiBCU0QsIGFuZFxuICAgICAqIHRoZSB1bmtub3duIHNpZ25hbHMganVzdCBmYWlsIHRvIHJlZ2lzdGVyLCBzbyB3ZSBjYW5cbiAgICAgKiBjYXRjaCB0aGF0IGVhc2lseSBlbm91Z2guXG4gICAgICpcbiAgICAgKiBXaW5kb3dzIHNpZ25hbHMgYXJlIGEgZGlmZmVyZW50IHNldCwgc2luY2UgdGhlcmUgYXJlXG4gICAgICogc2lnbmFscyB0aGF0IHRlcm1pbmF0ZSBXaW5kb3dzIHByb2Nlc3NlcywgYnV0IGRvbid0XG4gICAgICogdGVybWluYXRlIChvciBkb24ndCBldmVuIGV4aXN0KSBvbiBQb3NpeCBzeXN0ZW1zLlxuICAgICAqXG4gICAgICogRG9uJ3QgYm90aGVyIHdpdGggU0lHS0lMTC4gIEl0J3MgdW5jYXRjaGFibGUsIHdoaWNoXG4gICAgICogbWVhbnMgdGhhdCB3ZSBjYW4ndCBmaXJlIGFueSBjYWxsYmFja3MgYW55d2F5LlxuICAgICAqXG4gICAgICogSWYgYSB1c2VyIGRvZXMgaGFwcGVuIHRvIHJlZ2lzdGVyIGEgaGFuZGxlciBvbiBhIG5vbi1cbiAgICAgKiBmYXRhbCBzaWduYWwgbGlrZSBTSUdXSU5DSCBvciBzb21ldGhpbmcsIGFuZCB0aGVuXG4gICAgICogZXhpdCwgaXQnbGwgZW5kIHVwIGZpcmluZyBgcHJvY2Vzcy5lbWl0KCdleGl0JylgLCBzb1xuICAgICAqIHRoZSBoYW5kbGVyIHdpbGwgYmUgZmlyZWQgYW55d2F5LlxuICAgICAqXG4gICAgICogU0lHQlVTLCBTSUdGUEUsIFNJR1NFR1YgYW5kIFNJR0lMTCwgd2hlbiBub3QgcmFpc2VkXG4gICAgICogYXJ0aWZpY2lhbGx5LCBpbmhlcmVudGx5IGxlYXZlIHRoZSBwcm9jZXNzIGluIGFcbiAgICAgKiBzdGF0ZSBmcm9tIHdoaWNoIGl0IGlzIG5vdCBzYWZlIHRvIHRyeSBhbmQgZW50ZXIgSlNcbiAgICAgKiBsaXN0ZW5lcnMuXG4gICAgICovXG4gICAgdGhpcy4jc2lnbmFscy5wdXNoKFwiU0lHSFVQXCIsIFwiU0lHSU5UXCIsIFwiU0lHVEVSTVwiKTtcbiAgICBpZiAoZ2xvYmFsVGhpcy5wcm9jZXNzLnBsYXRmb3JtICE9PSBcIndpbjMyXCIpIHtcbiAgICAgIHRoaXMuI3NpZ25hbHMucHVzaChcbiAgICAgICAgXCJTSUdBTFJNXCIsXG4gICAgICAgIFwiU0lHQUJSVFwiLFxuICAgICAgICBcIlNJR1ZUQUxSTVwiLFxuICAgICAgICBcIlNJR1hDUFVcIixcbiAgICAgICAgXCJTSUdYRlNaXCIsXG4gICAgICAgIFwiU0lHVVNSMlwiLFxuICAgICAgICBcIlNJR1RSQVBcIixcbiAgICAgICAgXCJTSUdTWVNcIixcbiAgICAgICAgXCJTSUdRVUlUXCIsXG4gICAgICAgIFwiU0lHSU9UXCIsXG4gICAgICAgIC8vIHNob3VsZCBkZXRlY3QgcHJvZmlsZXIgYW5kIGVuYWJsZS9kaXNhYmxlIGFjY29yZGluZ2x5LlxuICAgICAgICAvLyBzZWUgIzIxXG4gICAgICAgIC8vICdTSUdQUk9GJ1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGdsb2JhbFRoaXMucHJvY2Vzcy5wbGF0Zm9ybSA9PT0gXCJsaW51eFwiKSB7XG4gICAgICB0aGlzLiNzaWduYWxzLnB1c2goXCJTSUdJT1wiLCBcIlNJR1BPTExcIiwgXCJTSUdQV1JcIiwgXCJTSUdTVEtGTFRcIik7XG4gICAgfVxuICAgIHRoaXMuI3Byb2Nlc3MgPSBwcm9jZXNzO1xuICAgIC8vIHsgPHNpZ25hbD46IDxsaXN0ZW5lciBmbj4sIC4uLiB9XG4gICAgdGhpcy4jc2lnTGlzdGVuZXJzID0ge307XG4gICAgZm9yIChjb25zdCBzaWcgb2YgdGhpcy4jc2lnbmFscykge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy4jc2lnTGlzdGVuZXJzW3NpZ10gPSAoKSA9PiB7XG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBvdGhlciBsaXN0ZW5lcnMsIGFuIGV4aXQgaXMgY29taW5nIVxuICAgICAgICAvLyBTaW1wbGVzdCB3YXk6IHJlbW92ZSB1cyBhbmQgdGhlbiByZS1zZW5kIHRoZSBzaWduYWwuXG4gICAgICAgIC8vIFdlIGtub3cgdGhhdCB0aGlzIHdpbGwga2lsbCB0aGUgcHJvY2Vzcywgc28gd2UgY2FuXG4gICAgICAgIC8vIHNhZmVseSBlbWl0IG5vdy5cbiAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy4jcHJvY2Vzcy5saXN0ZW5lcnMoc2lnKTtcbiAgICAgICAgbGV0IHsgY291bnQgfSA9IHRoaXMuI2VtaXR0ZXI7XG4gICAgICAgIC8vIFRoaXMgaXMgYSB3b3JrYXJvdW5kIGZvciB0aGUgZmFjdCB0aGF0IHNpZ25hbC1leGl0IHYzIGFuZCBzaWduYWxcbiAgICAgICAgLy8gZXhpdCB2NCBhcmUgbm90IGF3YXJlIG9mIGVhY2ggb3RoZXIsIGFuZCBlYWNoIHdpbGwgYXR0ZW1wdCB0byBsZXRcbiAgICAgICAgLy8gdGhlIG90aGVyIGhhbmRsZSBpdCwgc28gbmVpdGhlciBvZiB0aGVtIGRvLiBUbyBjb3JyZWN0IHRoaXMsIHdlXG4gICAgICAgIC8vIGRldGVjdCBpZiB3ZSdyZSB0aGUgb25seSBoYW5kbGVyICpleGNlcHQqIGZvciBwcmV2aW91cyB2ZXJzaW9uc1xuICAgICAgICAvLyBvZiBzaWduYWwtZXhpdCwgYW5kIGluY3JlbWVudCBieSB0aGUgY291bnQgb2YgbGlzdGVuZXJzIGl0IGhhc1xuICAgICAgICAvLyBjcmVhdGVkLlxuICAgICAgICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgICAgICAgY29uc3QgcCA9IHByb2Nlc3M7XG4gICAgICAgIGlmICh0eXBlb2YgcC5fX3NpZ25hbF9leGl0X2VtaXR0ZXJfXyA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcC5fX3NpZ25hbF9leGl0X2VtaXR0ZXJfXy5jb3VudCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgIGNvdW50ICs9IHAuX19zaWduYWxfZXhpdF9lbWl0dGVyX18uY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgLyogYzggaWdub3JlIHN0b3AgKi9cbiAgICAgICAgaWYgKGxpc3RlbmVycy5sZW5ndGggPT09IGNvdW50KSB7XG4gICAgICAgICAgdGhpcy51bmxvYWQoKTtcbiAgICAgICAgICBjb25zdCByZXQgPSB0aGlzLiNlbWl0dGVyLmVtaXQoXCJleGl0XCIsIG51bGwsIHNpZyk7XG4gICAgICAgICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgICAgICAgY29uc3QgcyA9IHNpZyA9PT0gXCJTSUdIVVBcIiA/IHRoaXMuI2h1cFNpZyA6IHNpZztcbiAgICAgICAgICBpZiAoIXJldCkgcHJvY2Vzcy5raWxsKHByb2Nlc3MucGlkLCBzKTtcbiAgICAgICAgICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICB0aGlzLiNvcmlnaW5hbFByb2Nlc3NSZWFsbHlFeGl0ID0gcHJvY2Vzcy5yZWFsbHlFeGl0O1xuICAgIHRoaXMuI29yaWdpbmFsUHJvY2Vzc0VtaXQgPSBwcm9jZXNzLmVtaXQ7XG4gIH1cbiAgb25FeGl0KGNiOiBhbnksIG9wdHM6IGFueSkge1xuICAgIC8qIGM4IGlnbm9yZSBzdGFydCAqL1xuICAgIGlmICghcHJvY2Vzc09rKHRoaXMuI3Byb2Nlc3MpKSB7XG4gICAgICByZXR1cm4gKCkgPT4ge307XG4gICAgfVxuICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXG4gICAgaWYgKHRoaXMuI2xvYWRlZCA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMubG9hZCgpO1xuICAgIH1cbiAgICBjb25zdCBldiA9IG9wdHM/LmFsd2F5c0xhc3QgPyBcImFmdGVyRXhpdFwiIDogXCJleGl0XCI7XG4gICAgdGhpcy4jZW1pdHRlci5vbihldiwgY2IpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB0aGlzLiNlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKGV2LCBjYik7XG4gICAgICBpZiAodGhpcy4jZW1pdHRlci5saXN0ZW5lcnNbXCJleGl0XCJdLmxlbmd0aCA9PT0gMCAmJiB0aGlzLiNlbWl0dGVyLmxpc3RlbmVyc1tcImFmdGVyRXhpdFwiXS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy51bmxvYWQoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGxvYWQoKSB7XG4gICAgaWYgKHRoaXMuI2xvYWRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLiNsb2FkZWQgPSB0cnVlO1xuICAgIC8vIFRoaXMgaXMgdGhlIG51bWJlciBvZiBvblNpZ25hbEV4aXQncyB0aGF0IGFyZSBpbiBwbGF5LlxuICAgIC8vIEl0J3MgaW1wb3J0YW50IHNvIHRoYXQgd2UgY2FuIGNvdW50IHRoZSBjb3JyZWN0IG51bWJlciBvZlxuICAgIC8vIGxpc3RlbmVycyBvbiBzaWduYWxzLCBhbmQgZG9uJ3Qgd2FpdCBmb3IgdGhlIG90aGVyIG9uZSB0b1xuICAgIC8vIGhhbmRsZSBpdCBpbnN0ZWFkIG9mIHVzLlxuICAgIHRoaXMuI2VtaXR0ZXIuY291bnQgKz0gMTtcbiAgICBmb3IgKGNvbnN0IHNpZyBvZiB0aGlzLiNzaWduYWxzKSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IGZuID0gdGhpcy4jc2lnTGlzdGVuZXJzW3NpZ107XG4gICAgICAgIGlmIChmbikgdGhpcy4jcHJvY2Vzcy5vbihzaWcsIGZuKTtcbiAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgLy8gbm8tb3BcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy4jcHJvY2Vzcy5lbWl0ID0gKGV2OiBhbnksIC4uLmE6IGFueSkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuI3Byb2Nlc3NFbWl0KGV2LCAuLi5hKTtcbiAgICB9O1xuICAgIHRoaXMuI3Byb2Nlc3MucmVhbGx5RXhpdCA9IChjb2RlOiBhbnkpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLiNwcm9jZXNzUmVhbGx5RXhpdChjb2RlKTtcbiAgICB9O1xuICB9XG4gIHVubG9hZCgpIHtcbiAgICBpZiAoIXRoaXMuI2xvYWRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLiNsb2FkZWQgPSBmYWxzZTtcbiAgICB0aGlzLiNzaWduYWxzLmZvckVhY2goKHNpZykgPT4ge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgY29uc3QgbGlzdGVuZXIgPSB0aGlzLiNzaWdMaXN0ZW5lcnNbc2lnXTtcbiAgICAgIC8qIGM4IGlnbm9yZSBzdGFydCAqL1xuICAgICAgaWYgKCFsaXN0ZW5lcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMaXN0ZW5lciBub3QgZGVmaW5lZCBmb3Igc2lnbmFsOiBcIiArIHNpZyk7XG4gICAgICB9XG4gICAgICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy4jcHJvY2Vzcy5yZW1vdmVMaXN0ZW5lcihzaWcsIGxpc3RlbmVyKTtcbiAgICAgICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgIC8vIG5vLW9wXG4gICAgICB9XG4gICAgICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xuICAgIH0pO1xuICAgIHRoaXMuI3Byb2Nlc3MuZW1pdCA9IHRoaXMuI29yaWdpbmFsUHJvY2Vzc0VtaXQ7XG4gICAgdGhpcy4jcHJvY2Vzcy5yZWFsbHlFeGl0ID0gdGhpcy4jb3JpZ2luYWxQcm9jZXNzUmVhbGx5RXhpdDtcbiAgICB0aGlzLiNlbWl0dGVyLmNvdW50IC09IDE7XG4gIH1cbiAgI3Byb2Nlc3NSZWFsbHlFeGl0KGNvZGU6IGFueSkge1xuICAgIC8qIGM4IGlnbm9yZSBzdGFydCAqL1xuICAgIGlmICghcHJvY2Vzc09rKHRoaXMuI3Byb2Nlc3MpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgdGhpcy4jcHJvY2Vzcy5leGl0Q29kZSA9IGNvZGUgfHwgMDtcbiAgICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xuICAgIHRoaXMuI2VtaXR0ZXIuZW1pdChcImV4aXRcIiwgdGhpcy4jcHJvY2Vzcy5leGl0Q29kZSwgbnVsbCk7XG4gICAgcmV0dXJuIHRoaXMuI29yaWdpbmFsUHJvY2Vzc1JlYWxseUV4aXQuY2FsbCh0aGlzLiNwcm9jZXNzLCB0aGlzLiNwcm9jZXNzLmV4aXRDb2RlKTtcbiAgfVxuICAjcHJvY2Vzc0VtaXQoZXY6IGFueSwgLi4uYXJnczogYW55KSB7XG4gICAgY29uc3Qgb2cgPSB0aGlzLiNvcmlnaW5hbFByb2Nlc3NFbWl0O1xuICAgIGlmIChldiA9PT0gXCJleGl0XCIgJiYgcHJvY2Vzc09rKHRoaXMuI3Byb2Nlc3MpKSB7XG4gICAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdGhpcy4jcHJvY2Vzcy5leGl0Q29kZSA9IGFyZ3NbMF07XG4gICAgICAgIC8qIGM4IGlnbm9yZSBzdGFydCAqL1xuICAgICAgfVxuICAgICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgICBjb25zdCByZXQgPSBvZy5jYWxsKHRoaXMuI3Byb2Nlc3MsIGV2LCAuLi5hcmdzKTtcbiAgICAgIC8qIGM4IGlnbm9yZSBzdGFydCAqL1xuICAgICAgdGhpcy4jZW1pdHRlci5lbWl0KFwiZXhpdFwiLCB0aGlzLiNwcm9jZXNzLmV4aXRDb2RlLCBudWxsKTtcbiAgICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb2cuY2FsbCh0aGlzLiNwcm9jZXNzLCBldiwgLi4uYXJncyk7XG4gICAgfVxuICB9XG59XG5cbmxldCBzaWduYWxFeGl0OiBTaWduYWxFeGl0IHwgU2lnbmFsRXhpdEZhbGxiYWNrIHwgbnVsbCA9IG51bGw7XG5cbmV4cG9ydCBjb25zdCBvbkV4aXQgPSAoXG4gIGNiOiBhbnksXG4gIG9wdHM/OiB7XG4gICAgYWx3YXlzTGFzdD86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG4gIH0sXG4pID0+IHtcbiAgaWYgKCFzaWduYWxFeGl0KSB7XG4gICAgc2lnbmFsRXhpdCA9IHByb2Nlc3NPayhwcm9jZXNzKSA/IG5ldyBTaWduYWxFeGl0KHByb2Nlc3MpIDogbmV3IFNpZ25hbEV4aXRGYWxsYmFjaygpO1xuICB9XG4gIHJldHVybiBzaWduYWxFeGl0Lm9uRXhpdChjYiwgb3B0cyk7XG59O1xuIiwgImltcG9ydCB7IGVudmlyb25tZW50IH0gZnJvbSBcIkByYXljYXN0L2FwaVwiO1xuaW1wb3J0IHsgY3JlYXRlUmVhZFN0cmVhbSwgY3JlYXRlV3JpdGVTdHJlYW0sIG1rZGlyU3luYywgU3RhdHMgfSBmcm9tIFwibm9kZTpmc1wiO1xuaW1wb3J0IHsgc3RhdCB9IGZyb20gXCJub2RlOmZzL3Byb21pc2VzXCI7XG5pbXBvcnQgeyBqb2luLCBub3JtYWxpemUgfSBmcm9tIFwibm9kZTpwYXRoXCI7XG5pbXBvcnQgeyBwaXBlbGluZSB9IGZyb20gXCJub2RlOnN0cmVhbS9wcm9taXNlc1wiO1xuaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgQ2hhaW4gZnJvbSBcIi4vdmVuZG9ycy9zdHJlYW0tY2hhaW5cIjtcbmltcG9ydCB7IHBhcnNlciwgUGlja1BhcnNlciwgU3RyZWFtQXJyYXkgfSBmcm9tIFwiLi92ZW5kb3JzL3N0cmVhbS1qc29uXCI7XG5pbXBvcnQgeyBpc0pTT04gfSBmcm9tIFwiLi9mZXRjaC11dGlsc1wiO1xuaW1wb3J0IHsgRmxhdHRlbiwgRnVuY3Rpb25SZXR1cm5pbmdQYWdpbmF0ZWRQcm9taXNlLCBVc2VDYWNoZWRQcm9taXNlUmV0dXJuVHlwZSB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgeyBDYWNoZWRQcm9taXNlT3B0aW9ucywgdXNlQ2FjaGVkUHJvbWlzZSB9IGZyb20gXCIuL3VzZUNhY2hlZFByb21pc2VcIjtcbmltcG9ydCB7IGhhc2ggfSBmcm9tIFwiLi9oZWxwZXJzXCI7XG5cbnR5cGUgUmVxdWVzdEluZm8gPSBzdHJpbmcgfCBVUkwgfCBnbG9iYWxUaGlzLlJlcXVlc3Q7XG5cbmFzeW5jIGZ1bmN0aW9uIGNhY2hlKHVybDogUmVxdWVzdEluZm8sIGRlc3RpbmF0aW9uOiBzdHJpbmcsIGZldGNoT3B0aW9ucz86IFJlcXVlc3RJbml0KSB7XG4gIGlmICh0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiIHx8IHVybC5zdGFydHNXaXRoKFwiaHR0cDovL1wiKSB8fCB1cmwuc3RhcnRzV2l0aChcImh0dHBzOi8vXCIpKSB7XG4gICAgcmV0dXJuIGF3YWl0IGNhY2hlVVJMKHVybCwgZGVzdGluYXRpb24sIGZldGNoT3B0aW9ucyk7XG4gIH0gZWxzZSBpZiAodXJsLnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpKSB7XG4gICAgcmV0dXJuIGF3YWl0IGNhY2hlRmlsZShcbiAgICAgIG5vcm1hbGl6ZShkZWNvZGVVUklDb21wb25lbnQobmV3IFVSTCh1cmwpLnBhdGhuYW1lKSksXG4gICAgICBkZXN0aW5hdGlvbixcbiAgICAgIGZldGNoT3B0aW9ucz8uc2lnbmFsID8gZmV0Y2hPcHRpb25zLnNpZ25hbCA6IHVuZGVmaW5lZCxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk9ubHkgSFRUUChTKSBvciBmaWxlIFVSTHMgYXJlIHN1cHBvcnRlZFwiKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBjYWNoZVVSTCh1cmw6IFJlcXVlc3RJbmZvLCBkZXN0aW5hdGlvbjogc3RyaW5nLCBmZXRjaE9wdGlvbnM/OiBSZXF1ZXN0SW5pdCkge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgZmV0Y2hPcHRpb25zKTtcblxuICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIFVSTFwiKTtcbiAgfVxuXG4gIGlmICghaXNKU09OKHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiY29udGVudC10eXBlXCIpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlVSTCBkb2VzIG5vdCByZXR1cm4gSlNPTlwiKTtcbiAgfVxuICBpZiAoIXJlc3BvbnNlLmJvZHkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcmV0cmlldmUgZXhwZWN0ZWQgSlNPTiBjb250ZW50OiBSZXNwb25zZSBib2R5IGlzIG1pc3Npbmcgb3IgaW5hY2Nlc3NpYmxlLlwiKTtcbiAgfVxuICBhd2FpdCBwaXBlbGluZShcbiAgICByZXNwb25zZS5ib2R5IGFzIHVua25vd24gYXMgTm9kZUpTLlJlYWRhYmxlU3RyZWFtLFxuICAgIGNyZWF0ZVdyaXRlU3RyZWFtKGRlc3RpbmF0aW9uKSxcbiAgICBmZXRjaE9wdGlvbnM/LnNpZ25hbCA/IHsgc2lnbmFsOiBmZXRjaE9wdGlvbnMuc2lnbmFsIH0gOiB1bmRlZmluZWQsXG4gICk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNhY2hlRmlsZShzb3VyY2U6IHN0cmluZywgZGVzdGluYXRpb246IHN0cmluZywgYWJvcnRTaWduYWw/OiBBYm9ydFNpZ25hbCkge1xuICBhd2FpdCBwaXBlbGluZShcbiAgICBjcmVhdGVSZWFkU3RyZWFtKHNvdXJjZSksXG4gICAgY3JlYXRlV3JpdGVTdHJlYW0oZGVzdGluYXRpb24pLFxuICAgIGFib3J0U2lnbmFsID8geyBzaWduYWw6IGFib3J0U2lnbmFsIH0gOiB1bmRlZmluZWQsXG4gICk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNhY2hlVVJMSWZOZWNlc3NhcnkoXG4gIHVybDogUmVxdWVzdEluZm8sXG4gIGZvbGRlcjogc3RyaW5nLFxuICBmaWxlTmFtZTogc3RyaW5nLFxuICBmb3JjZVVwZGF0ZTogYm9vbGVhbixcbiAgZmV0Y2hPcHRpb25zPzogUmVxdWVzdEluaXQsXG4pIHtcbiAgY29uc3QgZGVzdGluYXRpb24gPSBqb2luKGZvbGRlciwgZmlsZU5hbWUpO1xuXG4gIHRyeSB7XG4gICAgYXdhaXQgc3RhdChmb2xkZXIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbWtkaXJTeW5jKGZvbGRlciwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgYXdhaXQgY2FjaGUodXJsLCBkZXN0aW5hdGlvbiwgZmV0Y2hPcHRpb25zKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGZvcmNlVXBkYXRlKSB7XG4gICAgYXdhaXQgY2FjaGUodXJsLCBkZXN0aW5hdGlvbiwgZmV0Y2hPcHRpb25zKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgc3RhdHM6IFN0YXRzIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICB0cnkge1xuICAgIHN0YXRzID0gYXdhaXQgc3RhdChkZXN0aW5hdGlvbik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBhd2FpdCBjYWNoZSh1cmwsIGRlc3RpbmF0aW9uLCBmZXRjaE9wdGlvbnMpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiIHx8IHVybC5zdGFydHNXaXRoKFwiaHR0cDovL1wiKSB8fCB1cmwuc3RhcnRzV2l0aChcImh0dHBzOi8vXCIpKSB7XG4gICAgY29uc3QgaGVhZFJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7IC4uLmZldGNoT3B0aW9ucywgbWV0aG9kOiBcIkhFQURcIiB9KTtcbiAgICBpZiAoIWhlYWRSZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZldGNoIFVSTFwiKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzSlNPTihoZWFkUmVzcG9uc2UuaGVhZGVycy5nZXQoXCJjb250ZW50LXR5cGVcIikpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVUkwgZG9lcyBub3QgcmV0dXJuIEpTT05cIik7XG4gICAgfVxuXG4gICAgY29uc3QgbGFzdE1vZGlmaWVkID0gRGF0ZS5wYXJzZShoZWFkUmVzcG9uc2UuaGVhZGVycy5nZXQoXCJsYXN0LW1vZGlmaWVkXCIpID8/IFwiXCIpO1xuICAgIGlmIChzdGF0cy5zaXplID09PSAwIHx8IE51bWJlci5pc05hTihsYXN0TW9kaWZpZWQpIHx8IGxhc3RNb2RpZmllZCA+IHN0YXRzLm10aW1lTXMpIHtcbiAgICAgIGF3YWl0IGNhY2hlKHVybCwgZGVzdGluYXRpb24sIGZldGNoT3B0aW9ucyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9IGVsc2UgaWYgKHVybC5zdGFydHNXaXRoKFwiZmlsZTovL1wiKSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzb3VyY2VTdGF0cyA9IGF3YWl0IHN0YXQobm9ybWFsaXplKGRlY29kZVVSSUNvbXBvbmVudChuZXcgVVJMKHVybCkucGF0aG5hbWUpKSk7XG4gICAgICBpZiAoc291cmNlU3RhdHMubXRpbWVNcyA+IHN0YXRzLm10aW1lTXMpIHtcbiAgICAgICAgYXdhaXQgY2FjaGUodXJsLCBkZXN0aW5hdGlvbiwgZmV0Y2hPcHRpb25zKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTb3VyY2UgZmlsZSBjb3VsZCBub3QgYmUgcmVhZFwiKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiT25seSBIVFRQKFMpIG9yIGZpbGUgVVJMcyBhcmUgc3VwcG9ydGVkXCIpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uKiBzdHJlYW1Kc29uRmlsZTxUPihcbiAgZmlsZVBhdGg6IHN0cmluZyxcbiAgcGFnZVNpemU6IG51bWJlcixcbiAgYWJvcnRTaWduYWw/OiBBYm9ydFNpZ25hbCxcbiAgZGF0YVBhdGg/OiBzdHJpbmcgfCBSZWdFeHAsXG4gIGZpbHRlckZuPzogKGl0ZW06IEZsYXR0ZW48VD4pID0+IGJvb2xlYW4sXG4gIHRyYW5zZm9ybUZuPzogKGl0ZW06IGFueSkgPT4gVCxcbik6IEFzeW5jR2VuZXJhdG9yPFQgZXh0ZW5kcyB1bmtub3duW10gPyBUIDogVFtdPiB7XG4gIGxldCBwYWdlOiBUIGV4dGVuZHMgdW5rbm93bltdID8gVCA6IFRbXSA9IFtdIGFzIFQgZXh0ZW5kcyB1bmtub3duW10gPyBUIDogVFtdO1xuXG4gIGNvbnN0IHBpcGVsaW5lID0gQ2hhaW4oW1xuICAgIGNyZWF0ZVJlYWRTdHJlYW0oZmlsZVBhdGgpLFxuICAgIGRhdGFQYXRoID8gUGlja1BhcnNlcih7IGZpbHRlcjogZGF0YVBhdGggfSkgOiBwYXJzZXIoKSxcbiAgICBTdHJlYW1BcnJheSgpLFxuICAgIChkYXRhOiBhbnkpID0+IHRyYW5zZm9ybUZuPy4oZGF0YS52YWx1ZSkgPz8gZGF0YS52YWx1ZSxcbiAgXSk7XG5cbiAgYWJvcnRTaWduYWw/LmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCAoKSA9PiB7XG4gICAgcGlwZWxpbmUuZGVzdHJveSgpO1xuICB9KTtcblxuICB0cnkge1xuICAgIGZvciBhd2FpdCAoY29uc3QgZGF0YSBvZiBwaXBlbGluZSkge1xuICAgICAgaWYgKGFib3J0U2lnbmFsPy5hYm9ydGVkKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmICghZmlsdGVyRm4gfHwgZmlsdGVyRm4oZGF0YSkpIHtcbiAgICAgICAgcGFnZS5wdXNoKGRhdGEpO1xuICAgICAgfVxuICAgICAgaWYgKHBhZ2UubGVuZ3RoID49IHBhZ2VTaXplKSB7XG4gICAgICAgIHlpZWxkIHBhZ2U7XG4gICAgICAgIHBhZ2UgPSBbXSBhcyBUIGV4dGVuZHMgdW5rbm93bltdID8gVCA6IFRbXTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBwaXBlbGluZS5kZXN0cm95KCk7XG4gICAgdGhyb3cgZTtcbiAgfVxuXG4gIGlmIChwYWdlLmxlbmd0aCA+IDApIHtcbiAgICB5aWVsZCBwYWdlO1xuICB9XG5cbiAgcmV0dXJuIFtdO1xufVxuXG50eXBlIE9wdGlvbnM8VD4gPSB7XG4gIC8qKlxuICAgKiBUaGUgaG9vayBleHBlY3RzIHRvIGl0ZXJhdGUgdGhyb3VnaCBhbiBhcnJheSBvZiBkYXRhLCBzbyBieSBkZWZhdWx0LCBpdCBhc3N1bWVzIHRoZSBKU09OIGl0IHJlY2VpdmVzIGl0c2VsZiByZXByZXNlbnRzIGFuIGFycmF5LiBIb3dldmVyLCBzb21ldGltZXMgdGhlIGFycmF5IG9mIGRhdGEgaXMgd3JhcHBlZCBpbiBhbiBvYmplY3QsXG4gICAqIGkuZS4gYHsgXCJzdWNjZXNzXCI6IHRydWUsIFwiZGF0YVwiOiBb4oCmXSB9YCwgb3IgZXZlbiBgeyBcInN1Y2Nlc3NcIjogdHJ1ZSwgXCJyZXN1bHRzXCI6IHsgXCJkYXRhXCI6IFvigKZdIH0gfWAuIEluIHRob3NlIGNhc2VzLCB5b3UgY2FuIHVzZSBgZGF0YVBhdGhgIHRvIHNwZWNpZnkgd2hlcmUgdGhlIGRhdGEgYXJyYXkgY2FuIGJlIGZvdW5kLlxuICAgKlxuICAgKiBAcmVtYXJrIElmIHlvdXIgSlNPTiBvYmplY3QgaGFzIG11bHRpcGxlIGFycmF5cyB0aGF0IHlvdSB3YW50IHRvIHN0cmVhbSBkYXRhIGZyb20sIHlvdSBjYW4gcGFzcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBzdHJlYW0gdGhyb3VnaCBhbGwgb2YgdGhlbS5cbiAgICpcbiAgICogQGV4YW1wbGUgRm9yIGB7IFwic3VjY2Vzc1wiOiB0cnVlLCBcImRhdGFcIjogW+KApl0gfWAsIGRhdGFQYXRoIHdvdWxkIGJlIGBkYXRhYFxuICAgKiBAZXhhbXBsZSBGb3IgYHsgXCJzdWNjZXNzXCI6IHRydWUsIFwicmVzdWx0c1wiOiB7IFwiZGF0YVwiOiBb4oCmXSB9IH1gLCBkYXRhUGF0aCB3b3VsZCBiZSBgcmVzdWx0cy5kYXRhYFxuICAgKiBAZXhhbXBsZSBGb3IgYHsgXCJzdWNjZXNzXCI6IHRydWUsIFwicmVzdWx0c1wiOiB7IFwiZmlyc3RfbGlzdFwiOiBb4oCmXSwgXCJzZWNvbmRfbGlzdFwiOiBb4oCmXSwgXCJ0aGlyZF9saXN0XCI6IFvigKZdIH0gfWAsIGRhdGFQYXRoIHdvdWxkIGJlIGAvXnJlc3VsdHNcXC4oZmlyc3RfbGlzdHxzZWNvbmRfbGlzdHx0aGlyZF9saXN0KSRcbi9gLlxuICAgKi9cbiAgZGF0YVBhdGg/OiBzdHJpbmcgfCBSZWdFeHA7XG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRvIGRlY2lkZSB3aGV0aGVyIGEgcGFydGljdWxhciBpdGVtIHNob3VsZCBiZSBrZXB0IG9yIG5vdC5cbiAgICogRGVmYXVsdHMgdG8gYHVuZGVmaW5lZGAsIGtlZXBpbmcgYW55IGVuY291bnRlcmVkIGl0ZW0uXG4gICAqXG4gICAqIEByZW1hcmsgVGhlIGhvb2sgd2lsbCByZXZhbGlkYXRlIGV2ZXJ5IHRpbWUgdGhlIGZpbHRlciBmdW5jdGlvbiBjaGFuZ2VzLCBzbyB5b3UgbmVlZCB0byB1c2UgW3VzZUNhbGxiYWNrXShodHRwczovL3JlYWN0LmRldi9yZWZlcmVuY2UvcmVhY3QvdXNlQ2FsbGJhY2spIHRvIG1ha2Ugc3VyZSBpdCBvbmx5IGNoYW5nZXMgd2hlbiBpdCBuZWVkcyB0by5cbiAgICovXG4gIGZpbHRlcj86IChpdGVtOiBGbGF0dGVuPFQ+KSA9PiBib29sZWFuO1xuICAvKipcbiAgICogQSBmdW5jdGlvbiB0byBhcHBseSB0byBlYWNoIGl0ZW0gYXMgaXQgaXMgZW5jb3VudGVyZWQuIFVzZWZ1bCBmb3IgYSBjb3VwbGUgb2YgdGhpbmdzOlxuICAgKiAxLiBlbnN1cmluZyB0aGF0IGFsbCBpdGVtcyBoYXZlIHRoZSBleHBlY3RlZCBwcm9wZXJ0aWVzLCBhbmQsIGFzIG9uIG9wdGltaXphdGlvbiwgZm9yIGdldHRpbmcgcmlkIG9mIHRoZSBwcm9wZXJ0aWVzIHRoYXQgeW91IGRvbid0IGNhcmUgYWJvdXQuXG4gICAqIDIuIHdoZW4gdG9wLWxldmVsIG9iamVjdHMgYWN0dWFsbHkgcmVwcmVzZW50IG5lc3RlZCBkYXRhLCB3aGljaCBzaG91bGQgYmUgZmxhdHRlbmVkLiBJbiB0aGlzIGNhc2UsIGB0cmFuc2Zvcm1gIGNhbiByZXR1cm4gYW4gYXJyYXkgb2YgaXRlbXMsIGFuZCB0aGUgaG9vayB3aWxsIHN0cmVhbSB0aHJvdWdoIGVhY2ggb25lIG9mIHRob3NlIGl0ZW1zLFxuICAgKiBwYXNzaW5nIHRoZW0gdG8gYGZpbHRlcmAgZXRjLlxuICAgKlxuICAgKiBEZWZhdWx0cyB0byBhIHBhc3N0aHJvdWdoIGZ1bmN0aW9uIGlmIG5vdCBwcm92aWRlZC5cbiAgICpcbiAgICogQHJlbWFyayBUaGUgaG9vayB3aWxsIHJldmFsaWRhdGUgZXZlcnkgdGltZSB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIGNoYW5nZXMsIHNvIGl0IGlzIGltcG9ydGFudCB0byB1c2UgW3VzZUNhbGxiYWNrXShodHRwczovL3JlYWN0LmRldi9yZWZlcmVuY2UvcmVhY3QvdXNlQ2FsbGJhY2spIHRvIGVuc3VyZSBpdCBvbmx5IGNoYW5nZXMgd2hlbiBuZWNlc3NhcnkgdG8gcHJldmVudCB1bm5lY2Vzc2FyeSByZS1yZW5kZXJzIG9yIGNvbXB1dGF0aW9ucy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgXG4gICAqIC8vIEZvciBkYXRhOiBgeyBcImRhdGFcIjogWyB7IFwidHlwZVwiOiBcImZvbGRlclwiLCBcIm5hbWVcIjogXCJpdGVtIDFcIiwgXCJjaGlsZHJlblwiOiBbIHsgXCJ0eXBlXCI6IFwiaXRlbVwiLCBcIm5hbWVcIjogXCJpdGVtIDJcIiB9LCB7IFwidHlwZVwiOiBcIml0ZW1cIiwgXCJuYW1lXCI6IFwiaXRlbSAzXCIgfSBdIH0sIHsgXCJ0eXBlXCI6IFwiZm9sZGVyXCIsIFwibmFtZVwiOiBcIml0ZW0gNFwiLCBjaGlsZHJlbjogW10gfSBdIH1gXG4gICAqXG4gICAqIHR5cGUgSXRlbSA9IHtcbiAgICogIHR5cGU6IFwiaXRlbVwiO1xuICAgKiAgbmFtZTogc3RyaW5nO1xuICAgKiB9O1xuICAgKlxuICAgKiB0eXBlIEZvbGRlciA9IHtcbiAgICogICB0eXBlOiBcImZvbGRlclwiO1xuICAgKiAgIG5hbWU6IHN0cmluZztcbiAgICogICBjaGlsZHJlbjogKEl0ZW0gfCBGb2xkZXIpW107XG4gICAqIH07XG4gICAqXG4gICAqIGZ1bmN0aW9uIGZsYXR0ZW4oaXRlbTogSXRlbSB8IEZvbGRlcik6IHsgbmFtZTogc3RyaW5nIH1bXSB7XG4gICAqICAgY29uc3QgZmxhdHRlbmVkOiB7IG5hbWU6IHN0cmluZyB9W10gPSBbXTtcbiAgICogICBpZiAoaXRlbS50eXBlID09PSBcImZvbGRlclwiKSB7XG4gICAqICAgICBmbGF0dGVuZWQucHVzaCguLi5pdGVtLmNoaWxkcmVuLm1hcChmbGF0dGVuKS5mbGF0KCkpO1xuICAgKiAgIH1cbiAgICogICBpZiAoaXRlbS50eXBlID09PSBcIml0ZW1cIikge1xuICAgKiAgICAgZmxhdHRlbmVkLnB1c2goeyBuYW1lOiBpdGVtLm5hbWUgfSk7XG4gICAqICAgfVxuICAgKiAgIHJldHVybiBmbGF0dGVuZWQ7XG4gICAqIH1cbiAgICpcbiAgICogY29uc3QgdHJhbnNmb3JtID0gdXNlQ2FsbGJhY2soZmxhdHRlbiwgW10pO1xuICAgKiBjb25zdCBmaWx0ZXIgPSB1c2VDYWxsYmFjaygoaXRlbTogeyBuYW1lOiBzdHJpbmcgfSkgPT4ge1xuICAgKiAgIOKAplxuICAgKiB9KVxuICAgKiBgYGBcbiAgICovXG4gIHRyYW5zZm9ybT86IChpdGVtOiBhbnkpID0+IFQ7XG4gIC8qKlxuICAgKiBUaGUgYW1vdW50IG9mIGl0ZW1zIHRvIHJldHVybiBmb3IgZWFjaCBwYWdlLlxuICAgKiBEZWZhdWx0cyB0byBgMjBgLlxuICAgKi9cbiAgcGFnZVNpemU/OiBudW1iZXI7XG59O1xuXG4vKipcbiAqIFRha2VzIGEgYGh0dHA6Ly9gLCBgaHR0cHM6Ly9gIG9yIGBmaWxlOi8vL2AgVVJMIHBvaW50aW5nIHRvIGEgSlNPTiByZXNvdXJjZSwgY2FjaGVzIGl0IHRvIHRoZSBjb21tYW5kJ3Mgc3VwcG9ydFxuICogZm9sZGVyLCBhbmQgc3RyZWFtcyB0aHJvdWdoIGl0cyBjb250ZW50LiBVc2VmdWwgd2hlbiBkZWFsaW5nIHdpdGggbGFyZ2UgSlNPTiBhcnJheXMgd2hpY2ggd291bGQgYmUgdG9vIGJpZyB0byBmaXRcbiAqIGluIHRoZSBjb21tYW5kJ3MgbWVtb3J5LlxuICpcbiAqIEByZW1hcmsgVGhlIEpTT04gcmVzb3VyY2UgbmVlZHMgdG8gY29uc2lzdCBvZiBhbiBhcnJheSBvZiBvYmplY3RzXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogaW1wb3J0IHsgTGlzdCB9IGZyb20gXCJAcmF5Y2FzdC9hcGlcIjtcbiAqIGltcG9ydCB7IHVzZVN0cmVhbUpTT04gfSBmcm9tIFwiQHJheWNhc3QvdXRpbHNcIjtcbiAqXG4gKiB0eXBlIEZvcm11bGEgPSB7IG5hbWU6IHN0cmluZzsgZGVzYz86IHN0cmluZyB9O1xuICpcbiAqIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1haW4oKTogUmVhY3QuSlNYLkVsZW1lbnQge1xuICogICBjb25zdCB7IGRhdGEsIGlzTG9hZGluZywgcGFnaW5hdGlvbiB9ID0gdXNlU3RyZWFtSlNPTjxGb3JtdWxhPihcImh0dHBzOi8vZm9ybXVsYWUuYnJldy5zaC9hcGkvZm9ybXVsYS5qc29uXCIpO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8TGlzdCBpc0xvYWRpbmc9e2lzTG9hZGluZ30gcGFnaW5hdGlvbj17cGFnaW5hdGlvbn0+XG4gKiAgICAgICA8TGlzdC5TZWN0aW9uIHRpdGxlPVwiRm9ybXVsYWVcIj5cbiAqICAgICAgICAge2RhdGE/Lm1hcCgoZCkgPT4gPExpc3QuSXRlbSBrZXk9e2QubmFtZX0gdGl0bGU9e2QubmFtZX0gc3VidGl0bGU9e2QuZGVzY30gLz4pfVxuICogICAgICAgPC9MaXN0LlNlY3Rpb24+XG4gKiAgICAgPC9MaXN0PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogaW1wb3J0IHsgTGlzdCB9IGZyb20gXCJAcmF5Y2FzdC9hcGlcIjtcbiAqIGltcG9ydCB7IHVzZVN0cmVhbUpTT04gfSBmcm9tIFwiQHJheWNhc3QvdXRpbHNcIjtcbiAqIGltcG9ydCB7IGhvbWVkaXIgfSBmcm9tIFwib3NcIjtcbiAqIGltcG9ydCB7IGpvaW4gfSBmcm9tIFwicGF0aFwiO1xuICpcbiAqIHR5cGUgRm9ybXVsYSA9IHsgbmFtZTogc3RyaW5nOyBkZXNjPzogc3RyaW5nIH07XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTWFpbigpOiBSZWFjdC5KU1guRWxlbWVudCB7XG4gKiAgIGNvbnN0IHsgZGF0YSwgaXNMb2FkaW5nLCBwYWdpbmF0aW9uIH0gPSB1c2VTdHJlYW1KU09OPEZvcm11bGE+KGBmaWxlOi8vLyR7am9pbihob21lZGlyKCksIFwiRG93bmxvYWRzXCIsIFwiZm9ybXVsYWUuanNvblwiKX1gKTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPExpc3QgaXNMb2FkaW5nPXtpc0xvYWRpbmd9IHBhZ2luYXRpb249e3BhZ2luYXRpb259PlxuICogICAgICAgPExpc3QuU2VjdGlvbiB0aXRsZT1cIkZvcm11bGFlXCI+XG4gKiAgICAgICAgIHtkYXRhPy5tYXAoKGQpID0+IDxMaXN0Lkl0ZW0ga2V5PXtkLm5hbWV9IHRpdGxlPXtkLm5hbWV9IHN1YnRpdGxlPXtkLmRlc2N9IC8+KX1cbiAqICAgICAgIDwvTGlzdC5TZWN0aW9uPlxuICogICAgIDwvTGlzdD5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU3RyZWFtSlNPTjxULCBVID0gdW5rbm93bj4odXJsOiBSZXF1ZXN0SW5mbyk6IFVzZUNhY2hlZFByb21pc2VSZXR1cm5UeXBlPFQsIFU+O1xuXG4vKipcbiAqIFRha2VzIGEgYGh0dHA6Ly9gLCBgaHR0cHM6Ly9gIG9yIGBmaWxlOi8vL2AgVVJMIHBvaW50aW5nIHRvIGEgSlNPTiByZXNvdXJjZSwgY2FjaGVzIGl0IHRvIHRoZSBjb21tYW5kJ3Mgc3VwcG9ydFxuICogZm9sZGVyLCBhbmQgc3RyZWFtcyB0aHJvdWdoIGl0cyBjb250ZW50LiBVc2VmdWwgd2hlbiBkZWFsaW5nIHdpdGggbGFyZ2UgSlNPTiBhcnJheXMgd2hpY2ggd291bGQgYmUgdG9vIGJpZyB0byBmaXRcbiAqIGluIHRoZSBjb21tYW5kJ3MgbWVtb3J5LlxuICpcbiAqIEByZW1hcmsgVGhlIEpTT04gcmVzb3VyY2UgbmVlZHMgdG8gY29uc2lzdCBvZiBhbiBhcnJheSBvZiBvYmplY3RzXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogaW1wb3J0IHsgTGlzdCwgZW52aXJvbm1lbnQgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG4gKiBpbXBvcnQgeyB1c2VTdHJlYW1KU09OIH0gZnJvbSBcIkByYXljYXN0L3V0aWxzXCI7XG4gKiBpbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XG4gKiBpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbiAqXG4gKiB0eXBlIEZvcm11bGEgPSB7IG5hbWU6IHN0cmluZzsgZGVzYz86IHN0cmluZyB9O1xuICpcbiAqIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1haW4oKTogUmVhY3QuSlNYLkVsZW1lbnQge1xuICogICBjb25zdCBbc2VhcmNoVGV4dCwgc2V0U2VhcmNoVGV4dF0gPSB1c2VTdGF0ZShcIlwiKTtcbiAqXG4gKiAgIGNvbnN0IGZvcm11bGFGaWx0ZXIgPSB1c2VDYWxsYmFjayhcbiAqICAgICAoaXRlbTogRm9ybXVsYSkgPT4ge1xuICogICAgICAgaWYgKCFzZWFyY2hUZXh0KSByZXR1cm4gdHJ1ZTtcbiAqICAgICAgIHJldHVybiBpdGVtLm5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2hUZXh0KTtcbiAqICAgICB9LFxuICogICAgIFtzZWFyY2hUZXh0XSxcbiAqICAgKTtcbiAqXG4gKiAgIGNvbnN0IGZvcm11bGFUcmFuc2Zvcm0gPSB1c2VDYWxsYmFjaygoaXRlbTogYW55KTogRm9ybXVsYSA9PiB7XG4gKiAgICAgcmV0dXJuIHsgbmFtZTogaXRlbS5uYW1lLCBkZXNjOiBpdGVtLmRlc2MgfTtcbiAqICAgfSwgW10pO1xuICpcbiAqICAgY29uc3QgeyBkYXRhLCBpc0xvYWRpbmcsIHBhZ2luYXRpb24gfSA9IHVzZVN0cmVhbUpTT04oXCJodHRwczovL2Zvcm11bGFlLmJyZXcuc2gvYXBpL2Zvcm11bGEuanNvblwiLCB7XG4gKiAgICAgaW5pdGlhbERhdGE6IFtdIGFzIEZvcm11bGFbXSxcbiAqICAgICBwYWdlU2l6ZTogMjAsXG4gKiAgICAgZmlsdGVyOiBmb3JtdWxhRmlsdGVyLFxuICogICAgIHRyYW5zZm9ybTogZm9ybXVsYVRyYW5zZm9ybSxcbiAqICAgfSk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxMaXN0IGlzTG9hZGluZz17aXNMb2FkaW5nfSBwYWdpbmF0aW9uPXtwYWdpbmF0aW9ufSBvblNlYXJjaFRleHRDaGFuZ2U9e3NldFNlYXJjaFRleHR9PlxuICogICAgICAgPExpc3QuU2VjdGlvbiB0aXRsZT1cIkZvcm11bGFlXCI+XG4gKiAgICAgICAgIHtkYXRhLm1hcCgoZCkgPT4gKFxuICogICAgICAgICAgIDxMaXN0Lkl0ZW0ga2V5PXtkLm5hbWV9IHRpdGxlPXtkLm5hbWV9IHN1YnRpdGxlPXtkLmRlc2N9IC8+XG4gKiAgICAgICAgICkpfVxuICogICAgICAgPC9MaXN0LlNlY3Rpb24+XG4gKiAgICAgPC9MaXN0PlxuICogICApO1xuICogfVxuICogYGBgIHN1cHBvcnQgZm9sZGVyLCBhbmQgc3RyZWFtcyB0aHJvdWdoIGl0cyBjb250ZW50LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqIGltcG9ydCB7IExpc3QsIGVudmlyb25tZW50IH0gZnJvbSBcIkByYXljYXN0L2FwaVwiO1xuICogaW1wb3J0IHsgdXNlU3RyZWFtSlNPTiB9IGZyb20gXCJAcmF5Y2FzdC91dGlsc1wiO1xuICogaW1wb3J0IHsgam9pbiB9IGZyb20gXCJwYXRoXCI7XG4gKiBpbXBvcnQgeyBob21lZGlyIH0gZnJvbSBcIm9zXCI7XG4gKiBpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbiAqXG4gKiB0eXBlIEZvcm11bGEgPSB7IG5hbWU6IHN0cmluZzsgZGVzYz86IHN0cmluZyB9O1xuICpcbiAqIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1haW4oKTogUmVhY3QuSlNYLkVsZW1lbnQge1xuICogICBjb25zdCBbc2VhcmNoVGV4dCwgc2V0U2VhcmNoVGV4dF0gPSB1c2VTdGF0ZShcIlwiKTtcbiAqXG4gKiAgIGNvbnN0IGZvcm11bGFGaWx0ZXIgPSB1c2VDYWxsYmFjayhcbiAqICAgICAoaXRlbTogRm9ybXVsYSkgPT4ge1xuICogICAgICAgaWYgKCFzZWFyY2hUZXh0KSByZXR1cm4gdHJ1ZTtcbiAqICAgICAgIHJldHVybiBpdGVtLm5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2hUZXh0KTtcbiAqICAgICB9LFxuICogICAgIFtzZWFyY2hUZXh0XSxcbiAqICAgKTtcbiAqXG4gKiAgIGNvbnN0IGZvcm11bGFUcmFuc2Zvcm0gPSB1c2VDYWxsYmFjaygoaXRlbTogYW55KTogRm9ybXVsYSA9PiB7XG4gKiAgICAgcmV0dXJuIHsgbmFtZTogaXRlbS5uYW1lLCBkZXNjOiBpdGVtLmRlc2MgfTtcbiAqICAgfSwgW10pO1xuICpcbiAqICAgY29uc3QgeyBkYXRhLCBpc0xvYWRpbmcsIHBhZ2luYXRpb24gfSA9IHVzZVN0cmVhbUpTT04oYGZpbGU6Ly8vJHtqb2luKGhvbWVkaXIoKSwgXCJEb3dubG9hZHNcIiwgXCJmb3JtdWxhZS5qc29uXCIpfWAsIHtcbiAqICAgICBpbml0aWFsRGF0YTogW10gYXMgRm9ybXVsYVtdLFxuICogICAgIHBhZ2VTaXplOiAyMCxcbiAqICAgICBmaWx0ZXI6IGZvcm11bGFGaWx0ZXIsXG4gKiAgICAgdHJhbnNmb3JtOiBmb3JtdWxhVHJhbnNmb3JtLFxuICogICB9KTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPExpc3QgaXNMb2FkaW5nPXtpc0xvYWRpbmd9IHBhZ2luYXRpb249e3BhZ2luYXRpb259IG9uU2VhcmNoVGV4dENoYW5nZT17c2V0U2VhcmNoVGV4dH0+XG4gKiAgICAgICA8TGlzdC5TZWN0aW9uIHRpdGxlPVwiRm9ybXVsYWVcIj5cbiAqICAgICAgICAge2RhdGEubWFwKChkKSA9PiAoXG4gKiAgICAgICAgICAgPExpc3QuSXRlbSBrZXk9e2QubmFtZX0gdGl0bGU9e2QubmFtZX0gc3VidGl0bGU9e2QuZGVzY30gLz5cbiAqICAgICAgICAgKSl9XG4gKiAgICAgICA8L0xpc3QuU2VjdGlvbj5cbiAqICAgICA8L0xpc3Q+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVN0cmVhbUpTT048VCwgVSBleHRlbmRzIGFueVtdID0gYW55W10+KFxuICB1cmw6IFJlcXVlc3RJbmZvLFxuICBvcHRpb25zOiBPcHRpb25zPFQ+ICYgUmVxdWVzdEluaXQgJiBPbWl0PENhY2hlZFByb21pc2VPcHRpb25zPEZ1bmN0aW9uUmV0dXJuaW5nUGFnaW5hdGVkUHJvbWlzZSwgVT4sIFwiYWJvcnRhYmxlXCI+LFxuKTogVXNlQ2FjaGVkUHJvbWlzZVJldHVyblR5cGU8VCBleHRlbmRzIHVua25vd25bXSA/IFQgOiBUW10sIFU+O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlU3RyZWFtSlNPTjxULCBVIGV4dGVuZHMgYW55W10gPSBhbnlbXT4oXG4gIHVybDogUmVxdWVzdEluZm8sXG4gIG9wdGlvbnM/OiBPcHRpb25zPFQ+ICYgUmVxdWVzdEluaXQgJiBPbWl0PENhY2hlZFByb21pc2VPcHRpb25zPEZ1bmN0aW9uUmV0dXJuaW5nUGFnaW5hdGVkUHJvbWlzZSwgVT4sIFwiYWJvcnRhYmxlXCI+LFxuKTogVXNlQ2FjaGVkUHJvbWlzZVJldHVyblR5cGU8VCBleHRlbmRzIHVua25vd25bXSA/IFQgOiBUW10sIFU+IHtcbiAgY29uc3Qge1xuICAgIGluaXRpYWxEYXRhLFxuICAgIGV4ZWN1dGUsXG4gICAga2VlcFByZXZpb3VzRGF0YSxcbiAgICBvbkVycm9yLFxuICAgIG9uRGF0YSxcbiAgICBvbldpbGxFeGVjdXRlLFxuICAgIGZhaWx1cmVUb2FzdE9wdGlvbnMsXG4gICAgZGF0YVBhdGgsXG4gICAgZmlsdGVyLFxuICAgIHRyYW5zZm9ybSxcbiAgICBwYWdlU2l6ZSA9IDIwLFxuICAgIC4uLmZldGNoT3B0aW9uc1xuICB9ID0gb3B0aW9ucyA/PyB7fTtcbiAgY29uc3QgcHJldmlvdXNVcmwgPSB1c2VSZWY8UmVxdWVzdEluZm8+KG51bGwpO1xuICBjb25zdCBwcmV2aW91c0Rlc3RpbmF0aW9uID0gdXNlUmVmPHN0cmluZz4obnVsbCk7XG5cbiAgY29uc3QgdXNlQ2FjaGVkUHJvbWlzZU9wdGlvbnM6IENhY2hlZFByb21pc2VPcHRpb25zPEZ1bmN0aW9uUmV0dXJuaW5nUGFnaW5hdGVkUHJvbWlzZSwgVT4gPSB7XG4gICAgaW5pdGlhbERhdGEsXG4gICAgZXhlY3V0ZSxcbiAgICBrZWVwUHJldmlvdXNEYXRhLFxuICAgIG9uRXJyb3IsXG4gICAgb25EYXRhLFxuICAgIG9uV2lsbEV4ZWN1dGUsXG4gICAgZmFpbHVyZVRvYXN0T3B0aW9ucyxcbiAgfTtcblxuICBjb25zdCBnZW5lcmF0b3JSZWYgPSB1c2VSZWY8QXN5bmNHZW5lcmF0b3I8VCBleHRlbmRzIHVua25vd25bXSA/IFQgOiBUW10+IHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IGNvbnRyb2xsZXJSZWYgPSB1c2VSZWY8QWJvcnRDb250cm9sbGVyIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IGhhc01vcmVSZWYgPSB1c2VSZWYoZmFsc2UpO1xuXG4gIHJldHVybiB1c2VDYWNoZWRQcm9taXNlKFxuICAgIChcbiAgICAgIHVybDogUmVxdWVzdEluZm8sXG4gICAgICBwYWdlU2l6ZTogbnVtYmVyLFxuICAgICAgZmV0Y2hPcHRpb25zOiBSZXF1ZXN0SW5pdCB8IHVuZGVmaW5lZCxcbiAgICAgIGRhdGFQYXRoOiBzdHJpbmcgfCBSZWdFeHAgfCB1bmRlZmluZWQsXG4gICAgICBmaWx0ZXI6ICgoaXRlbTogRmxhdHRlbjxUPikgPT4gYm9vbGVhbikgfCB1bmRlZmluZWQsXG4gICAgICB0cmFuc2Zvcm06ICgoaXRlbTogdW5rbm93bikgPT4gVCkgfCB1bmRlZmluZWQsXG4gICAgKSA9PlxuICAgICAgYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICAgIGNvbnN0IGZpbGVOYW1lID0gaGFzaCh1cmwpICsgXCIuanNvblwiO1xuICAgICAgICBjb25zdCBmb2xkZXIgPSBlbnZpcm9ubWVudC5zdXBwb3J0UGF0aDtcbiAgICAgICAgaWYgKHBhZ2UgPT09IDApIHtcbiAgICAgICAgICBjb250cm9sbGVyUmVmLmN1cnJlbnQ/LmFib3J0KCk7XG4gICAgICAgICAgY29udHJvbGxlclJlZi5jdXJyZW50ID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uID0gam9pbihmb2xkZXIsIGZpbGVOYW1lKTtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBGb3JjZSB1cGRhdGUgdGhlIGNhY2hlIHdoZW4gdGhlIFVSTCBjaGFuZ2VzIGJ1dCB0aGUgY2FjaGUgZGVzdGluYXRpb24gZG9lcyBub3QuXG4gICAgICAgICAgICovXG4gICAgICAgICAgY29uc3QgZm9yY2VDYWNoZVVwZGF0ZSA9IEJvb2xlYW4oXG4gICAgICAgICAgICBwcmV2aW91c1VybC5jdXJyZW50ICYmXG4gICAgICAgICAgICAgIHByZXZpb3VzVXJsLmN1cnJlbnQgIT09IHVybCAmJlxuICAgICAgICAgICAgICBwcmV2aW91c0Rlc3RpbmF0aW9uLmN1cnJlbnQgJiZcbiAgICAgICAgICAgICAgcHJldmlvdXNEZXN0aW5hdGlvbi5jdXJyZW50ID09PSBkZXN0aW5hdGlvbixcbiAgICAgICAgICApO1xuICAgICAgICAgIHByZXZpb3VzVXJsLmN1cnJlbnQgPSB1cmw7XG4gICAgICAgICAgcHJldmlvdXNEZXN0aW5hdGlvbi5jdXJyZW50ID0gZGVzdGluYXRpb247XG4gICAgICAgICAgYXdhaXQgY2FjaGVVUkxJZk5lY2Vzc2FyeSh1cmwsIGZvbGRlciwgZmlsZU5hbWUsIGZvcmNlQ2FjaGVVcGRhdGUsIHtcbiAgICAgICAgICAgIC4uLmZldGNoT3B0aW9ucyxcbiAgICAgICAgICAgIHNpZ25hbDogY29udHJvbGxlclJlZi5jdXJyZW50Py5zaWduYWwsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZ2VuZXJhdG9yUmVmLmN1cnJlbnQgPSBzdHJlYW1Kc29uRmlsZShcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLFxuICAgICAgICAgICAgcGFnZVNpemUsXG4gICAgICAgICAgICBjb250cm9sbGVyUmVmLmN1cnJlbnQ/LnNpZ25hbCxcbiAgICAgICAgICAgIGRhdGFQYXRoLFxuICAgICAgICAgICAgZmlsdGVyLFxuICAgICAgICAgICAgdHJhbnNmb3JtLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFnZW5lcmF0b3JSZWYuY3VycmVudCkge1xuICAgICAgICAgIHJldHVybiB7IGhhc01vcmU6IGhhc01vcmVSZWYuY3VycmVudCwgZGF0YTogW10gYXMgVCBleHRlbmRzIHVua25vd25bXSA/IFQgOiBUW10gfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHZhbHVlOiBuZXdEYXRhLCBkb25lIH0gPSBhd2FpdCBnZW5lcmF0b3JSZWYuY3VycmVudC5uZXh0KCk7XG4gICAgICAgIGhhc01vcmVSZWYuY3VycmVudCA9ICFkb25lO1xuICAgICAgICByZXR1cm4geyBoYXNNb3JlOiBoYXNNb3JlUmVmLmN1cnJlbnQsIGRhdGE6IChuZXdEYXRhID8/IFtdKSBhcyBUIGV4dGVuZHMgdW5rbm93bltdID8gVCA6IFRbXSB9O1xuICAgICAgfSxcbiAgICBbdXJsLCBwYWdlU2l6ZSwgZmV0Y2hPcHRpb25zLCBkYXRhUGF0aCwgZmlsdGVyLCB0cmFuc2Zvcm1dLFxuICAgIHVzZUNhY2hlZFByb21pc2VPcHRpb25zLFxuICApO1xufVxuIiwgIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudCAqL1xuaW1wb3J0IHsgUmVhZGFibGUsIFdyaXRhYmxlLCBEdXBsZXggfSBmcm9tIFwibm9kZTpzdHJlYW1cIjtcblxuZXhwb3J0IGNvbnN0IG5vbmUgPSAvKiAjX19QVVJFX18gKi8gU3ltYm9sLmZvcihcIm9iamVjdC1zdHJlYW0ubm9uZVwiKTtcbmNvbnN0IHN0b3AgPSAvKiAjX19QVVJFX18gKi8gU3ltYm9sLmZvcihcIm9iamVjdC1zdHJlYW0uc3RvcFwiKTtcblxuY29uc3QgZmluYWxTeW1ib2wgPSAvKiAjX19QVVJFX18gKi8gU3ltYm9sLmZvcihcIm9iamVjdC1zdHJlYW0uZmluYWxcIik7XG5jb25zdCBtYW55U3ltYm9sID0gLyogI19fUFVSRV9fICovIFN5bWJvbC5mb3IoXCJvYmplY3Qtc3RyZWFtLm1hbnlcIik7XG5jb25zdCBmbHVzaFN5bWJvbCA9IC8qICNfX1BVUkVfXyAqLyBTeW1ib2wuZm9yKFwib2JqZWN0LXN0cmVhbS5mbHVzaFwiKTtcbmNvbnN0IGZMaXN0U3ltYm9sID0gLyogI19fUFVSRV9fICovIFN5bWJvbC5mb3IoXCJvYmplY3Qtc3RyZWFtLmZMaXN0XCIpO1xuXG5jb25zdCBmaW5hbFZhbHVlID0gKHZhbHVlOiBhbnkpID0+ICh7IFtmaW5hbFN5bWJvbF06IDEsIHZhbHVlIH0pO1xuZXhwb3J0IGNvbnN0IG1hbnkgPSAodmFsdWVzOiBhbnkpID0+ICh7IFttYW55U3ltYm9sXTogMSwgdmFsdWVzIH0pO1xuXG5jb25zdCBpc0ZpbmFsVmFsdWUgPSAobzogYW55KSA9PiBvICYmIG9bZmluYWxTeW1ib2xdID09PSAxO1xuY29uc3QgaXNNYW55ID0gKG86IGFueSkgPT4gbyAmJiBvW21hbnlTeW1ib2xdID09PSAxO1xuY29uc3QgaXNGbHVzaGFibGUgPSAobzogYW55KSA9PiBvICYmIG9bZmx1c2hTeW1ib2xdID09PSAxO1xuY29uc3QgaXNGdW5jdGlvbkxpc3QgPSAobzogYW55KSA9PiBvICYmIG9bZkxpc3RTeW1ib2xdID09PSAxO1xuXG5jb25zdCBnZXRGaW5hbFZhbHVlID0gKG86IGFueSkgPT4gby52YWx1ZTtcbmNvbnN0IGdldE1hbnlWYWx1ZXMgPSAobzogYW55KSA9PiBvLnZhbHVlcztcbmNvbnN0IGdldEZ1bmN0aW9uTGlzdCA9IChvOiBhbnkpID0+IG8uZkxpc3Q7XG5cbmV4cG9ydCBjb25zdCBjb21iaW5lTWFueU11dCA9IChhOiBhbnksIGI6IGFueSkgPT4ge1xuICBjb25zdCB2YWx1ZXMgPSBhID09PSBub25lID8gW10gOiBhPy5bbWFueVN5bWJvbF0gPT09IDEgPyBhLnZhbHVlcyA6IFthXTtcbiAgaWYgKGIgPT09IG5vbmUpIHtcbiAgICAvLyBkbyBub3RoaW5nXG4gIH0gZWxzZSBpZiAoYj8uW21hbnlTeW1ib2xdID09PSAxKSB7XG4gICAgdmFsdWVzLnB1c2goLi4uYi52YWx1ZXMpO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlcy5wdXNoKGIpO1xuICB9XG4gIHJldHVybiBtYW55KHZhbHVlcyk7XG59O1xuXG5leHBvcnQgY29uc3QgZmx1c2hhYmxlID0gKHdyaXRlOiAodmFsdWU6IGFueSkgPT4gYW55LCBmaW5hbCA9IG51bGwpID0+IHtcbiAgY29uc3QgZm4gPSBmaW5hbCA/ICh2YWx1ZTogYW55KSA9PiAodmFsdWUgPT09IG5vbmUgPyBmaW5hbFZhbHVlKHVuZGVmaW5lZCkgOiB3cml0ZSh2YWx1ZSkpIDogd3JpdGU7XG4gIC8vIEB0cy1pZ25vcmVcbiAgZm5bZmx1c2hTeW1ib2xdID0gMTtcbiAgcmV0dXJuIGZuO1xufTtcblxuY29uc3Qgc2V0RnVuY3Rpb25MaXN0ID0gKG86IGFueSwgZm5zOiBhbnkpID0+IHtcbiAgby5mTGlzdCA9IGZucztcbiAgb1tmTGlzdFN5bWJvbF0gPSAxO1xuICByZXR1cm4gbztcbn07XG5cbi8vIGlzKk5vZGVTdHJlYW0gZnVuY3Rpb25zIHRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvbWFzdGVyL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3V0aWxzLmpzXG5jb25zdCBpc1JlYWRhYmxlTm9kZVN0cmVhbSA9IChvYmo6IGFueSkgPT5cbiAgb2JqICYmXG4gIHR5cGVvZiBvYmoucGlwZSA9PT0gXCJmdW5jdGlvblwiICYmXG4gIHR5cGVvZiBvYmoub24gPT09IFwiZnVuY3Rpb25cIiAmJlxuICAoIW9iai5fd3JpdGFibGVTdGF0ZSB8fCAodHlwZW9mIG9iai5fcmVhZGFibGVTdGF0ZSA9PT0gXCJvYmplY3RcIiA/IG9iai5fcmVhZGFibGVTdGF0ZS5yZWFkYWJsZSA6IG51bGwpICE9PSBmYWxzZSkgJiYgLy8gRHVwbGV4XG4gICghb2JqLl93cml0YWJsZVN0YXRlIHx8IG9iai5fcmVhZGFibGVTdGF0ZSk7IC8vIFdyaXRhYmxlIGhhcyAucGlwZS5cblxuY29uc3QgaXNXcml0YWJsZU5vZGVTdHJlYW0gPSAob2JqOiBhbnkpID0+XG4gIG9iaiAmJlxuICB0eXBlb2Ygb2JqLndyaXRlID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgdHlwZW9mIG9iai5vbiA9PT0gXCJmdW5jdGlvblwiICYmXG4gICghb2JqLl9yZWFkYWJsZVN0YXRlIHx8ICh0eXBlb2Ygb2JqLl93cml0YWJsZVN0YXRlID09PSBcIm9iamVjdFwiID8gb2JqLl93cml0YWJsZVN0YXRlLndyaXRhYmxlIDogbnVsbCkgIT09IGZhbHNlKTsgLy8gRHVwbGV4XG5cbmNvbnN0IGlzRHVwbGV4Tm9kZVN0cmVhbSA9IChvYmo6IGFueSkgPT5cbiAgb2JqICYmXG4gIHR5cGVvZiBvYmoucGlwZSA9PT0gXCJmdW5jdGlvblwiICYmXG4gIG9iai5fcmVhZGFibGVTdGF0ZSAmJlxuICB0eXBlb2Ygb2JqLm9uID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgdHlwZW9mIG9iai53cml0ZSA9PT0gXCJmdW5jdGlvblwiO1xuXG5jb25zdCBpc1JlYWRhYmxlV2ViU3RyZWFtID0gKG9iajogYW55KSA9PiBvYmogJiYgZ2xvYmFsVGhpcy5SZWFkYWJsZVN0cmVhbSAmJiBvYmogaW5zdGFuY2VvZiBnbG9iYWxUaGlzLlJlYWRhYmxlU3RyZWFtO1xuXG5jb25zdCBpc1dyaXRhYmxlV2ViU3RyZWFtID0gKG9iajogYW55KSA9PiBvYmogJiYgZ2xvYmFsVGhpcy5Xcml0YWJsZVN0cmVhbSAmJiBvYmogaW5zdGFuY2VvZiBnbG9iYWxUaGlzLldyaXRhYmxlU3RyZWFtO1xuXG5jb25zdCBpc0R1cGxleFdlYlN0cmVhbSA9IChvYmo6IGFueSkgPT5cbiAgb2JqICYmXG4gIGdsb2JhbFRoaXMuUmVhZGFibGVTdHJlYW0gJiZcbiAgb2JqLnJlYWRhYmxlIGluc3RhbmNlb2YgZ2xvYmFsVGhpcy5SZWFkYWJsZVN0cmVhbSAmJlxuICBnbG9iYWxUaGlzLldyaXRhYmxlU3RyZWFtICYmXG4gIG9iai53cml0YWJsZSBpbnN0YW5jZW9mIGdsb2JhbFRoaXMuV3JpdGFibGVTdHJlYW07XG5cbmNvbnN0IGdyb3VwRnVuY3Rpb25zID0gKG91dHB1dDogYW55LCBmbjogYW55LCBpbmRleDogYW55LCBmbnM6IGFueSkgPT4ge1xuICBpZiAoXG4gICAgaXNEdXBsZXhOb2RlU3RyZWFtKGZuKSB8fFxuICAgICghaW5kZXggJiYgaXNSZWFkYWJsZU5vZGVTdHJlYW0oZm4pKSB8fFxuICAgIChpbmRleCA9PT0gZm5zLmxlbmd0aCAtIDEgJiYgaXNXcml0YWJsZU5vZGVTdHJlYW0oZm4pKVxuICApIHtcbiAgICBvdXRwdXQucHVzaChmbik7XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfVxuICBpZiAoaXNEdXBsZXhXZWJTdHJlYW0oZm4pKSB7XG4gICAgb3V0cHV0LnB1c2goRHVwbGV4LmZyb21XZWIoZm4sIHsgb2JqZWN0TW9kZTogdHJ1ZSB9KSk7XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfVxuICBpZiAoIWluZGV4ICYmIGlzUmVhZGFibGVXZWJTdHJlYW0oZm4pKSB7XG4gICAgb3V0cHV0LnB1c2goUmVhZGFibGUuZnJvbVdlYihmbiwgeyBvYmplY3RNb2RlOiB0cnVlIH0pKTtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG4gIGlmIChpbmRleCA9PT0gZm5zLmxlbmd0aCAtIDEgJiYgaXNXcml0YWJsZVdlYlN0cmVhbShmbikpIHtcbiAgICBvdXRwdXQucHVzaChXcml0YWJsZS5mcm9tV2ViKGZuLCB7IG9iamVjdE1vZGU6IHRydWUgfSkpO1xuICAgIHJldHVybiBvdXRwdXQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBmbiAhPSBcImZ1bmN0aW9uXCIpIHRocm93IFR5cGVFcnJvcihcIkl0ZW0gI1wiICsgaW5kZXggKyBcIiBpcyBub3QgYSBwcm9wZXIgc3RyZWFtLCBub3IgYSBmdW5jdGlvbi5cIik7XG4gIGlmICghb3V0cHV0Lmxlbmd0aCkgb3V0cHV0LnB1c2goW10pO1xuICBjb25zdCBsYXN0ID0gb3V0cHV0W291dHB1dC5sZW5ndGggLSAxXTtcbiAgaWYgKEFycmF5LmlzQXJyYXkobGFzdCkpIHtcbiAgICBsYXN0LnB1c2goZm4pO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dC5wdXNoKFtmbl0pO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59O1xuXG5jbGFzcyBTdG9wIGV4dGVuZHMgRXJyb3Ige31cblxuZXhwb3J0IGNvbnN0IGFzU3RyZWFtID0gKGZuOiBhbnkpID0+IHtcbiAgaWYgKHR5cGVvZiBmbiAhPSBcImZ1bmN0aW9uXCIpIHRocm93IFR5cGVFcnJvcihcIk9ubHkgYSBmdW5jdGlvbiBpcyBhY2NlcHRlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnRcIik7XG5cbiAgLy8gcHVtcCB2YXJpYWJsZXNcbiAgbGV0IHBhdXNlZCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICBsZXQgcmVzb2x2ZVBhdXNlZDogKCh2YWx1ZTogdm9pZCB8IFByb21pc2VMaWtlPHZvaWQ+KSA9PiB2b2lkKSB8IG51bGwgPSBudWxsO1xuICBjb25zdCBxdWV1ZTogYW55W10gPSBbXTtcblxuICAvLyBwYXVzZS9yZXN1bWVcbiAgY29uc3QgcmVzdW1lOiBhbnkgPSAoKSA9PiB7XG4gICAgaWYgKCFyZXNvbHZlUGF1c2VkKSByZXR1cm47XG4gICAgcmVzb2x2ZVBhdXNlZCgpO1xuICAgIHJlc29sdmVQYXVzZWQgPSBudWxsO1xuICAgIHBhdXNlZCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICB9O1xuICBjb25zdCBwYXVzZTogYW55ID0gKCkgPT4ge1xuICAgIGlmIChyZXNvbHZlUGF1c2VkKSByZXR1cm47XG4gICAgcGF1c2VkID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IChyZXNvbHZlUGF1c2VkID0gcmVzb2x2ZSkpO1xuICB9O1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItY29uc3RcbiAgbGV0IHN0cmVhbTogRHVwbGV4OyAvLyB3aWxsIGJlIGFzc2lnbmVkIGxhdGVyXG5cbiAgLy8gZGF0YSBwcm9jZXNzaW5nXG4gIGNvbnN0IHB1c2hSZXN1bHRzOiBhbnkgPSAodmFsdWVzOiBhbnkpID0+IHtcbiAgICBpZiAodmFsdWVzICYmIHR5cGVvZiB2YWx1ZXMubmV4dCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIC8vIGdlbmVyYXRvclxuICAgICAgcXVldWUucHVzaCh2YWx1ZXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBhcnJheVxuICAgIHF1ZXVlLnB1c2godmFsdWVzW1N5bWJvbC5pdGVyYXRvcl0oKSk7XG4gIH07XG4gIGNvbnN0IHB1bXA6IGFueSA9IGFzeW5jICgpID0+IHtcbiAgICB3aGlsZSAocXVldWUubGVuZ3RoKSB7XG4gICAgICBhd2FpdCBwYXVzZWQ7XG4gICAgICBjb25zdCBnZW4gPSBxdWV1ZVtxdWV1ZS5sZW5ndGggLSAxXTtcbiAgICAgIGxldCByZXN1bHQgPSBnZW4ubmV4dCgpO1xuICAgICAgaWYgKHJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0LnRoZW4gPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJlc3VsdCA9IGF3YWl0IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICBxdWV1ZS5wb3AoKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBsZXQgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHZhbHVlID0gYXdhaXQgdmFsdWU7XG4gICAgICB9XG4gICAgICBhd2FpdCBzYW5pdGl6ZSh2YWx1ZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBzYW5pdGl6ZTogYW55ID0gYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gbm9uZSkgcmV0dXJuO1xuICAgIGlmICh2YWx1ZSA9PT0gc3RvcCkgdGhyb3cgbmV3IFN0b3AoKTtcblxuICAgIGlmIChpc01hbnkodmFsdWUpKSB7XG4gICAgICBwdXNoUmVzdWx0cyhnZXRNYW55VmFsdWVzKHZhbHVlKSk7XG4gICAgICByZXR1cm4gcHVtcCgpO1xuICAgIH1cblxuICAgIGlmIChpc0ZpbmFsVmFsdWUodmFsdWUpKSB7XG4gICAgICAvLyBhIGZpbmFsIHZhbHVlIGlzIG5vdCBzdXBwb3J0ZWQsIGl0IGlzIHRyZWF0ZWQgYXMgYSByZWd1bGFyIHZhbHVlXG4gICAgICB2YWx1ZSA9IGdldEZpbmFsVmFsdWUodmFsdWUpO1xuICAgICAgcmV0dXJuIHByb2Nlc3NWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKCFzdHJlYW0ucHVzaCh2YWx1ZSkpIHtcbiAgICAgIHBhdXNlKCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBwcm9jZXNzQ2h1bms6IGFueSA9IGFzeW5jIChjaHVuazogYW55LCBlbmNvZGluZzogYW55KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gZm4oY2h1bmssIGVuY29kaW5nKTtcbiAgICAgIGF3YWl0IHByb2Nlc3NWYWx1ZSh2YWx1ZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFN0b3ApIHtcbiAgICAgICAgc3RyZWFtLnB1c2gobnVsbCk7XG4gICAgICAgIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcHJvY2Vzc1ZhbHVlOiBhbnkgPSBhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIC8vIHRoZW5hYmxlXG4gICAgICByZXR1cm4gdmFsdWUudGhlbigodmFsdWU6IGFueSkgPT4gcHJvY2Vzc1ZhbHVlKHZhbHVlKSk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUubmV4dCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIC8vIGdlbmVyYXRvclxuICAgICAgcHVzaFJlc3VsdHModmFsdWUpO1xuICAgICAgcmV0dXJuIHB1bXAoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNhbml0aXplKHZhbHVlKTtcbiAgfTtcblxuICBzdHJlYW0gPSBuZXcgRHVwbGV4KFxuICAgIE9iamVjdC5hc3NpZ24oeyB3cml0YWJsZU9iamVjdE1vZGU6IHRydWUsIHJlYWRhYmxlT2JqZWN0TW9kZTogdHJ1ZSB9LCB1bmRlZmluZWQsIHtcbiAgICAgIHdyaXRlKGNodW5rOiBhbnksIGVuY29kaW5nOiBhbnksIGNhbGxiYWNrOiBhbnkpIHtcbiAgICAgICAgcHJvY2Vzc0NodW5rKGNodW5rLCBlbmNvZGluZykudGhlbihcbiAgICAgICAgICAoKSA9PiBjYWxsYmFjayhudWxsKSxcbiAgICAgICAgICAoZXJyb3I6IGFueSkgPT4gY2FsbGJhY2soZXJyb3IpLFxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIGZpbmFsKGNhbGxiYWNrOiBhbnkpIHtcbiAgICAgICAgaWYgKCFpc0ZsdXNoYWJsZShmbikpIHtcbiAgICAgICAgICBzdHJlYW0ucHVzaChudWxsKTtcbiAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcHJvY2Vzc0NodW5rKG5vbmUsIG51bGwpLnRoZW4oXG4gICAgICAgICAgKCkgPT4gKHN0cmVhbS5wdXNoKG51bGwpLCBjYWxsYmFjayhudWxsKSksXG4gICAgICAgICAgKGVycm9yOiBhbnkpID0+IGNhbGxiYWNrKGVycm9yKSxcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICByZWFkKCkge1xuICAgICAgICByZXN1bWUoKTtcbiAgICAgIH0sXG4gICAgfSksXG4gICk7XG5cbiAgcmV0dXJuIHN0cmVhbTtcbn07XG5cbmNvbnN0IHByb2R1Y2VTdHJlYW1zID0gKGl0ZW06IGFueSkgPT4ge1xuICBpZiAoQXJyYXkuaXNBcnJheShpdGVtKSkge1xuICAgIGlmICghaXRlbS5sZW5ndGgpIHJldHVybiBudWxsO1xuICAgIGlmIChpdGVtLmxlbmd0aCA9PSAxKSByZXR1cm4gaXRlbVswXSAmJiBhc1N0cmVhbShpdGVtWzBdKTtcbiAgICByZXR1cm4gYXNTdHJlYW0oZ2VuKC4uLml0ZW0pKTtcbiAgfVxuICByZXR1cm4gaXRlbTtcbn07XG5cbmNvbnN0IG5leHQ6IGFueSA9IGFzeW5jIGZ1bmN0aW9uKiAodmFsdWU6IGFueSwgZm5zOiBhbnksIGluZGV4OiBhbnkpIHtcbiAgZm9yIChsZXQgaSA9IGluZGV4OyBpIDw9IGZucy5sZW5ndGg7ICsraSkge1xuICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIC8vIHRoZW5hYmxlXG4gICAgICB2YWx1ZSA9IGF3YWl0IHZhbHVlO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IG5vbmUpIGJyZWFrO1xuICAgIGlmICh2YWx1ZSA9PT0gc3RvcCkgdGhyb3cgbmV3IFN0b3AoKTtcbiAgICBpZiAoaXNGaW5hbFZhbHVlKHZhbHVlKSkge1xuICAgICAgeWllbGQgZ2V0RmluYWxWYWx1ZSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKGlzTWFueSh2YWx1ZSkpIHtcbiAgICAgIGNvbnN0IHZhbHVlcyA9IGdldE1hbnlWYWx1ZXModmFsdWUpO1xuICAgICAgaWYgKGkgPT0gZm5zLmxlbmd0aCkge1xuICAgICAgICB5aWVsZCogdmFsdWVzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB2YWx1ZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICB5aWVsZCogbmV4dCh2YWx1ZXNbal0sIGZucywgaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlLm5leHQgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAvLyBnZW5lcmF0b3JcbiAgICAgIGZvciAoOzspIHtcbiAgICAgICAgbGV0IGRhdGEgPSB2YWx1ZS5uZXh0KCk7XG4gICAgICAgIGlmIChkYXRhICYmIHR5cGVvZiBkYXRhLnRoZW4gPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgZGF0YSA9IGF3YWl0IGRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZG9uZSkgYnJlYWs7XG4gICAgICAgIGlmIChpID09IGZucy5sZW5ndGgpIHtcbiAgICAgICAgICB5aWVsZCBkYXRhLnZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHlpZWxkKiBuZXh0KGRhdGEudmFsdWUsIGZucywgaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoaSA9PSBmbnMubGVuZ3RoKSB7XG4gICAgICB5aWVsZCB2YWx1ZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjb25zdCBmID0gZm5zW2ldO1xuICAgIHZhbHVlID0gZih2YWx1ZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBnZW4gPSAoLi4uZm5zOiBhbnkpID0+IHtcbiAgZm5zID0gZm5zXG4gICAgLmZpbHRlcigoZm46IGFueSkgPT4gZm4pXG4gICAgLmZsYXQoSW5maW5pdHkpXG4gICAgLm1hcCgoZm46IGFueSkgPT4gKGlzRnVuY3Rpb25MaXN0KGZuKSA/IGdldEZ1bmN0aW9uTGlzdChmbikgOiBmbikpXG4gICAgLmZsYXQoSW5maW5pdHkpO1xuICBpZiAoIWZucy5sZW5ndGgpIHtcbiAgICBmbnMgPSBbKHg6IGFueSkgPT4geF07XG4gIH1cbiAgbGV0IGZsdXNoZWQgPSBmYWxzZTtcbiAgbGV0IGcgPSBhc3luYyBmdW5jdGlvbiogKHZhbHVlOiBhbnkpIHtcbiAgICBpZiAoZmx1c2hlZCkgdGhyb3cgRXJyb3IoXCJDYWxsIHRvIGEgZmx1c2hlZCBwaXBlLlwiKTtcbiAgICBpZiAodmFsdWUgIT09IG5vbmUpIHtcbiAgICAgIHlpZWxkKiBuZXh0KHZhbHVlLCBmbnMsIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBmbHVzaGVkID0gdHJ1ZTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGYgPSBmbnNbaV07XG4gICAgICAgIGlmIChpc0ZsdXNoYWJsZShmKSkge1xuICAgICAgICAgIHlpZWxkKiBuZXh0KGYobm9uZSksIGZucywgaSArIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBuZWVkVG9GbHVzaCA9IGZucy5zb21lKChmbjogYW55KSA9PiBpc0ZsdXNoYWJsZShmbikpO1xuICBpZiAobmVlZFRvRmx1c2gpIGcgPSBmbHVzaGFibGUoZyk7XG4gIHJldHVybiBzZXRGdW5jdGlvbkxpc3QoZywgZm5zKTtcbn07XG5cbmNvbnN0IHdyaXRlID0gKGlucHV0OiBhbnksIGNodW5rOiBhbnksIGVuY29kaW5nOiBhbnksIGNhbGxiYWNrOiBhbnkpID0+IHtcbiAgbGV0IGVycm9yOiBhbnkgPSBudWxsO1xuICB0cnkge1xuICAgIGlucHV0LndyaXRlKGNodW5rLCBlbmNvZGluZywgKGU6IGFueSkgPT4gY2FsbGJhY2soZSB8fCBlcnJvcikpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyb3IgPSBlO1xuICB9XG59O1xuXG5jb25zdCBmaW5hbCA9IChpbnB1dDogYW55LCBjYWxsYmFjazogYW55KSA9PiB7XG4gIGxldCBlcnJvcjogYW55ID0gbnVsbDtcbiAgdHJ5IHtcbiAgICBpbnB1dC5lbmQobnVsbCwgbnVsbCwgKGU6IGFueSkgPT4gY2FsbGJhY2soZSB8fCBlcnJvcikpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyb3IgPSBlO1xuICB9XG59O1xuXG5jb25zdCByZWFkID0gKG91dHB1dDogYW55KSA9PiB7XG4gIG91dHB1dC5yZXN1bWUoKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNoYWluKGZuczogYW55KSB7XG4gIGZucyA9IGZucy5mbGF0KEluZmluaXR5KS5maWx0ZXIoKGZuOiBhbnkpID0+IGZuKTtcblxuICBjb25zdCBzdHJlYW1zID0gZm5zXG4gICAgICAubWFwKChmbjogYW55KSA9PiAoaXNGdW5jdGlvbkxpc3QoZm4pID8gZ2V0RnVuY3Rpb25MaXN0KGZuKSA6IGZuKSlcbiAgICAgIC5mbGF0KEluZmluaXR5KVxuICAgICAgLnJlZHVjZShncm91cEZ1bmN0aW9ucywgW10pXG4gICAgICAubWFwKHByb2R1Y2VTdHJlYW1zKVxuICAgICAgLmZpbHRlcigoczogYW55KSA9PiBzKSxcbiAgICBpbnB1dCA9IHN0cmVhbXNbMF0sXG4gICAgb3V0cHV0ID0gc3RyZWFtcy5yZWR1Y2UoKG91dHB1dDogYW55LCBpdGVtOiBhbnkpID0+IChvdXRwdXQgJiYgb3V0cHV0LnBpcGUoaXRlbSkpIHx8IGl0ZW0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItY29uc3RcbiAgbGV0IHN0cmVhbTogRHVwbGV4OyAvLyB3aWxsIGJlIGFzc2lnbmVkIGxhdGVyXG5cbiAgbGV0IHdyaXRlTWV0aG9kID0gKGNodW5rOiBhbnksIGVuY29kaW5nOiBhbnksIGNhbGxiYWNrOiBhbnkpID0+IHdyaXRlKGlucHV0LCBjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSxcbiAgICBmaW5hbE1ldGhvZCA9IChjYWxsYmFjazogYW55KSA9PiBmaW5hbChpbnB1dCwgY2FsbGJhY2spLFxuICAgIHJlYWRNZXRob2QgPSAoKSA9PiByZWFkKG91dHB1dCk7XG5cbiAgaWYgKCFpc1dyaXRhYmxlTm9kZVN0cmVhbShpbnB1dCkpIHtcbiAgICB3cml0ZU1ldGhvZCA9IChfMSwgXzIsIGNhbGxiYWNrKSA9PiBjYWxsYmFjayhudWxsKTtcbiAgICBmaW5hbE1ldGhvZCA9IChjYWxsYmFjaykgPT4gY2FsbGJhY2sobnVsbCk7XG4gICAgaW5wdXQub24oXCJlbmRcIiwgKCkgPT4gc3RyZWFtLmVuZCgpKTtcbiAgfVxuXG4gIGlmIChpc1JlYWRhYmxlTm9kZVN0cmVhbShvdXRwdXQpKSB7XG4gICAgb3V0cHV0Lm9uKFwiZGF0YVwiLCAoY2h1bms6IGFueSkgPT4gIXN0cmVhbS5wdXNoKGNodW5rKSAmJiBvdXRwdXQucGF1c2UoKSk7XG4gICAgb3V0cHV0Lm9uKFwiZW5kXCIsICgpID0+IHN0cmVhbS5wdXNoKG51bGwpKTtcbiAgfSBlbHNlIHtcbiAgICByZWFkTWV0aG9kID0gKCkgPT4ge307IC8vIG5vcFxuICAgIG91dHB1dC5vbihcImZpbmlzaFwiLCAoKSA9PiBzdHJlYW0ucHVzaChudWxsKSk7XG4gIH1cblxuICBzdHJlYW0gPSBuZXcgRHVwbGV4KFxuICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICB7IHdyaXRhYmxlT2JqZWN0TW9kZTogdHJ1ZSwgcmVhZGFibGVPYmplY3RNb2RlOiB0cnVlIH0sXG4gICAgICB7XG4gICAgICAgIHJlYWRhYmxlOiBpc1JlYWRhYmxlTm9kZVN0cmVhbShvdXRwdXQpLFxuICAgICAgICB3cml0YWJsZTogaXNXcml0YWJsZU5vZGVTdHJlYW0oaW5wdXQpLFxuICAgICAgICB3cml0ZTogd3JpdGVNZXRob2QsXG4gICAgICAgIGZpbmFsOiBmaW5hbE1ldGhvZCxcbiAgICAgICAgcmVhZDogcmVhZE1ldGhvZCxcbiAgICAgIH0sXG4gICAgKSxcbiAgKTtcbiAgLy8gQHRzLWlnbm9yZVxuICBzdHJlYW0uc3RyZWFtcyA9IHN0cmVhbXM7XG4gIC8vIEB0cy1pZ25vcmVcbiAgc3RyZWFtLmlucHV0ID0gaW5wdXQ7XG4gIC8vIEB0cy1pZ25vcmVcbiAgc3RyZWFtLm91dHB1dCA9IG91dHB1dDtcblxuICBpZiAoIWlzUmVhZGFibGVOb2RlU3RyZWFtKG91dHB1dCkpIHtcbiAgICBzdHJlYW0ucmVzdW1lKCk7XG4gIH1cblxuICAvLyBjb25uZWN0IGV2ZW50c1xuICBzdHJlYW1zLmZvckVhY2goKGl0ZW06IGFueSkgPT4gaXRlbS5vbihcImVycm9yXCIsIChlcnJvcjogYW55KSA9PiBzdHJlYW0uZW1pdChcImVycm9yXCIsIGVycm9yKSkpO1xuXG4gIHJldHVybiBzdHJlYW07XG59XG4iLCAiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb250cm9sLXJlZ2V4ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11c2VsZXNzLWVzY2FwZSAqL1xuaW1wb3J0IHsgZmx1c2hhYmxlLCBnZW4sIG1hbnksIG5vbmUsIGNvbWJpbmVNYW55TXV0IH0gZnJvbSBcIi4vc3RyZWFtLWNoYWluXCI7XG5pbXBvcnQgeyBTdHJpbmdEZWNvZGVyIH0gZnJvbSBcIm5vZGU6c3RyaW5nX2RlY29kZXJcIjtcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSBcIm5vZGU6ZXZlbnRzXCI7XG5cbmNvbnN0IGZpeFV0ZjhTdHJlYW0gPSAoKSA9PiB7XG4gIGNvbnN0IHN0cmluZ0RlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcigpO1xuICBsZXQgaW5wdXQgPSBcIlwiO1xuICByZXR1cm4gZmx1c2hhYmxlKChjaHVuazogYW55KSA9PiB7XG4gICAgaWYgKGNodW5rID09PSBub25lKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBpbnB1dCArIHN0cmluZ0RlY29kZXIuZW5kKCk7XG4gICAgICBpbnB1dCA9IFwiXCI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNodW5rID09IFwic3RyaW5nXCIpIHtcbiAgICAgIGlmICghaW5wdXQpIHJldHVybiBjaHVuaztcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGlucHV0ICsgY2h1bms7XG4gICAgICBpbnB1dCA9IFwiXCI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBpZiAoY2h1bmsgaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGlucHV0ICsgc3RyaW5nRGVjb2Rlci53cml0ZShjaHVuayk7XG4gICAgICBpbnB1dCA9IFwiXCI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYSBzdHJpbmcgb3IgYSBCdWZmZXJcIik7XG4gIH0pO1xufTtcblxuY29uc3QgcGF0dGVybnMgPSB7XG4gIHZhbHVlMTogL1tcXFwiXFx7XFxbXFxdXFwtXFxkXXx0cnVlXFxifGZhbHNlXFxifG51bGxcXGJ8XFxzezEsMjU2fS95LFxuICBzdHJpbmc6IC9bXlxceDAwLVxceDFmXFxcIlxcXFxdezEsMjU2fXxcXFxcW2JmbnJ0XFxcIlxcXFxcXC9dfFxcXFx1W1xcZGEtZkEtRl17NH18XFxcIi95LFxuICBrZXkxOiAvW1xcXCJcXH1dfFxcc3sxLDI1Nn0veSxcbiAgY29sb246IC9cXDp8XFxzezEsMjU2fS95LFxuICBjb21tYTogL1tcXCxcXF1cXH1dfFxcc3sxLDI1Nn0veSxcbiAgd3M6IC9cXHN7MSwyNTZ9L3ksXG4gIG51bWJlclN0YXJ0OiAvXFxkL3ksXG4gIG51bWJlckRpZ2l0OiAvXFxkezAsMjU2fS95LFxuICBudW1iZXJGcmFjdGlvbjogL1tcXC5lRV0veSxcbiAgbnVtYmVyRXhwb25lbnQ6IC9bZUVdL3ksXG4gIG51bWJlckV4cFNpZ246IC9bLStdL3ksXG59O1xuY29uc3QgTUFYX1BBVFRFUk5fU0laRSA9IDE2O1xuXG5jb25zdCB2YWx1ZXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPSB7IHRydWU6IHRydWUsIGZhbHNlOiBmYWxzZSwgbnVsbDogbnVsbCB9LFxuICBleHBlY3RlZDogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHsgb2JqZWN0OiBcIm9iamVjdFN0b3BcIiwgYXJyYXk6IFwiYXJyYXlTdG9wXCIsIFwiXCI6IFwiZG9uZVwiIH07XG5cbi8vIGxvbmcgaGV4YWRlY2ltYWwgY29kZXM6IFxcdVhYWFhcbmNvbnN0IGZyb21IZXggPSAoczogc3RyaW5nKSA9PiBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KHMuc2xpY2UoMiksIDE2KSk7XG5cbi8vIHNob3J0IGNvZGVzOiBcXGIgXFxmIFxcbiBcXHIgXFx0IFxcXCIgXFxcXCBcXC9cbmNvbnN0IGNvZGVzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICBiOiBcIlxcYlwiLFxuICBmOiBcIlxcZlwiLFxuICBuOiBcIlxcblwiLFxuICByOiBcIlxcclwiLFxuICB0OiBcIlxcdFwiLFxuICAnXCInOiAnXCInLFxuICBcIlxcXFxcIjogXCJcXFxcXCIsXG4gIFwiL1wiOiBcIi9cIixcbn07XG5cbmNvbnN0IGpzb25QYXJzZXIgPSAob3B0aW9ucz86IGFueSkgPT4ge1xuICBsZXQgcGFja0tleXMgPSB0cnVlLFxuICAgIHBhY2tTdHJpbmdzID0gdHJ1ZSxcbiAgICBwYWNrTnVtYmVycyA9IHRydWUsXG4gICAgc3RyZWFtS2V5cyA9IHRydWUsXG4gICAgc3RyZWFtU3RyaW5ncyA9IHRydWUsXG4gICAgc3RyZWFtTnVtYmVycyA9IHRydWUsXG4gICAganNvblN0cmVhbWluZyA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgXCJwYWNrVmFsdWVzXCIgaW4gb3B0aW9ucyAmJiAocGFja0tleXMgPSBwYWNrU3RyaW5ncyA9IHBhY2tOdW1iZXJzID0gb3B0aW9ucy5wYWNrVmFsdWVzKTtcbiAgICBcInBhY2tLZXlzXCIgaW4gb3B0aW9ucyAmJiAocGFja0tleXMgPSBvcHRpb25zLnBhY2tLZXlzKTtcbiAgICBcInBhY2tTdHJpbmdzXCIgaW4gb3B0aW9ucyAmJiAocGFja1N0cmluZ3MgPSBvcHRpb25zLnBhY2tTdHJpbmdzKTtcbiAgICBcInBhY2tOdW1iZXJzXCIgaW4gb3B0aW9ucyAmJiAocGFja051bWJlcnMgPSBvcHRpb25zLnBhY2tOdW1iZXJzKTtcbiAgICBcInN0cmVhbVZhbHVlc1wiIGluIG9wdGlvbnMgJiYgKHN0cmVhbUtleXMgPSBzdHJlYW1TdHJpbmdzID0gc3RyZWFtTnVtYmVycyA9IG9wdGlvbnMuc3RyZWFtVmFsdWVzKTtcbiAgICBcInN0cmVhbUtleXNcIiBpbiBvcHRpb25zICYmIChzdHJlYW1LZXlzID0gb3B0aW9ucy5zdHJlYW1LZXlzKTtcbiAgICBcInN0cmVhbVN0cmluZ3NcIiBpbiBvcHRpb25zICYmIChzdHJlYW1TdHJpbmdzID0gb3B0aW9ucy5zdHJlYW1TdHJpbmdzKTtcbiAgICBcInN0cmVhbU51bWJlcnNcIiBpbiBvcHRpb25zICYmIChzdHJlYW1OdW1iZXJzID0gb3B0aW9ucy5zdHJlYW1OdW1iZXJzKTtcbiAgICBqc29uU3RyZWFtaW5nID0gb3B0aW9ucy5qc29uU3RyZWFtaW5nO1xuICB9XG5cbiAgIXBhY2tLZXlzICYmIChzdHJlYW1LZXlzID0gdHJ1ZSk7XG4gICFwYWNrU3RyaW5ncyAmJiAoc3RyZWFtU3RyaW5ncyA9IHRydWUpO1xuICAhcGFja051bWJlcnMgJiYgKHN0cmVhbU51bWJlcnMgPSB0cnVlKTtcblxuICBsZXQgZG9uZSA9IGZhbHNlLFxuICAgIGV4cGVjdCA9IGpzb25TdHJlYW1pbmcgPyBcImRvbmVcIiA6IFwidmFsdWVcIixcbiAgICBwYXJlbnQgPSBcIlwiLFxuICAgIG9wZW5OdW1iZXIgPSBmYWxzZSxcbiAgICBhY2N1bXVsYXRvciA9IFwiXCIsXG4gICAgYnVmZmVyID0gXCJcIjtcblxuICBjb25zdCBzdGFjazogYW55W10gPSBbXTtcblxuICByZXR1cm4gZmx1c2hhYmxlKChidWY6IGFueSkgPT4ge1xuICAgIGNvbnN0IHRva2VuczogYW55W10gPSBbXTtcblxuICAgIGlmIChidWYgPT09IG5vbmUpIHtcbiAgICAgIGRvbmUgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBidWZmZXIgKz0gYnVmO1xuICAgIH1cblxuICAgIGxldCBtYXRjaDogYW55O1xuICAgIGxldCB2YWx1ZTogYW55O1xuICAgIGxldCBpbmRleCA9IDA7XG5cbiAgICBtYWluOiBmb3IgKDs7KSB7XG4gICAgICBzd2l0Y2ggKGV4cGVjdCkge1xuICAgICAgICBjYXNlIFwidmFsdWUxXCI6XG4gICAgICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgICAgIHBhdHRlcm5zLnZhbHVlMS5sYXN0SW5kZXggPSBpbmRleDtcbiAgICAgICAgICBtYXRjaCA9IHBhdHRlcm5zLnZhbHVlMS5leGVjKGJ1ZmZlcik7XG4gICAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgaWYgKGRvbmUgfHwgaW5kZXggKyBNQVhfUEFUVEVSTl9TSVpFIDwgYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgICBpZiAoaW5kZXggPCBidWZmZXIubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoXCJQYXJzZXIgY2Fubm90IHBhcnNlIGlucHV0OiBleHBlY3RlZCBhIHZhbHVlXCIpO1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYXJzZXIgaGFzIGV4cGVjdGVkIGEgdmFsdWVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhayBtYWluOyAvLyB3YWl0IGZvciBtb3JlIGlucHV0XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbHVlID0gbWF0Y2hbMF07XG4gICAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSAnXCInOlxuICAgICAgICAgICAgICBpZiAoc3RyZWFtU3RyaW5ncykgdG9rZW5zLnB1c2goeyBuYW1lOiBcInN0YXJ0U3RyaW5nXCIgfSk7XG4gICAgICAgICAgICAgIGV4cGVjdCA9IFwic3RyaW5nXCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIntcIjpcbiAgICAgICAgICAgICAgdG9rZW5zLnB1c2goeyBuYW1lOiBcInN0YXJ0T2JqZWN0XCIgfSk7XG4gICAgICAgICAgICAgIHN0YWNrLnB1c2gocGFyZW50KTtcbiAgICAgICAgICAgICAgcGFyZW50ID0gXCJvYmplY3RcIjtcbiAgICAgICAgICAgICAgZXhwZWN0ID0gXCJrZXkxXCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIltcIjpcbiAgICAgICAgICAgICAgdG9rZW5zLnB1c2goeyBuYW1lOiBcInN0YXJ0QXJyYXlcIiB9KTtcbiAgICAgICAgICAgICAgc3RhY2sucHVzaChwYXJlbnQpO1xuICAgICAgICAgICAgICBwYXJlbnQgPSBcImFycmF5XCI7XG4gICAgICAgICAgICAgIGV4cGVjdCA9IFwidmFsdWUxXCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIl1cIjpcbiAgICAgICAgICAgICAgaWYgKGV4cGVjdCAhPT0gXCJ2YWx1ZTFcIikgdGhyb3cgbmV3IEVycm9yKFwiUGFyc2VyIGNhbm5vdCBwYXJzZSBpbnB1dDogdW5leHBlY3RlZCB0b2tlbiAnXSdcIik7XG4gICAgICAgICAgICAgIGlmIChvcGVuTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0cmVhbU51bWJlcnMpIHRva2Vucy5wdXNoKHsgbmFtZTogXCJlbmROdW1iZXJcIiB9KTtcbiAgICAgICAgICAgICAgICBvcGVuTnVtYmVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKHBhY2tOdW1iZXJzKSB7XG4gICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7IG5hbWU6IFwibnVtYmVyVmFsdWVcIiwgdmFsdWU6IGFjY3VtdWxhdG9yIH0pO1xuICAgICAgICAgICAgICAgICAgYWNjdW11bGF0b3IgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7IG5hbWU6IFwiZW5kQXJyYXlcIiB9KTtcbiAgICAgICAgICAgICAgcGFyZW50ID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgIGV4cGVjdCA9IGV4cGVjdGVkW3BhcmVudF07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIi1cIjpcbiAgICAgICAgICAgICAgb3Blbk51bWJlciA9IHRydWU7XG4gICAgICAgICAgICAgIGlmIChzdHJlYW1OdW1iZXJzKSB7XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2goeyBuYW1lOiBcInN0YXJ0TnVtYmVyXCIgfSwgeyBuYW1lOiBcIm51bWJlckNodW5rXCIsIHZhbHVlOiBcIi1cIiB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwYWNrTnVtYmVycyAmJiAoYWNjdW11bGF0b3IgPSBcIi1cIik7XG4gICAgICAgICAgICAgIGV4cGVjdCA9IFwibnVtYmVyU3RhcnRcIjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiMFwiOlxuICAgICAgICAgICAgICBvcGVuTnVtYmVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgaWYgKHN0cmVhbU51bWJlcnMpIHtcbiAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7IG5hbWU6IFwic3RhcnROdW1iZXJcIiB9LCB7IG5hbWU6IFwibnVtYmVyQ2h1bmtcIiwgdmFsdWU6IFwiMFwiIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHBhY2tOdW1iZXJzICYmIChhY2N1bXVsYXRvciA9IFwiMFwiKTtcbiAgICAgICAgICAgICAgZXhwZWN0ID0gXCJudW1iZXJGcmFjdGlvblwiO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCIxXCI6XG4gICAgICAgICAgICBjYXNlIFwiMlwiOlxuICAgICAgICAgICAgY2FzZSBcIjNcIjpcbiAgICAgICAgICAgIGNhc2UgXCI0XCI6XG4gICAgICAgICAgICBjYXNlIFwiNVwiOlxuICAgICAgICAgICAgY2FzZSBcIjZcIjpcbiAgICAgICAgICAgIGNhc2UgXCI3XCI6XG4gICAgICAgICAgICBjYXNlIFwiOFwiOlxuICAgICAgICAgICAgY2FzZSBcIjlcIjpcbiAgICAgICAgICAgICAgb3Blbk51bWJlciA9IHRydWU7XG4gICAgICAgICAgICAgIGlmIChzdHJlYW1OdW1iZXJzKSB7XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2goeyBuYW1lOiBcInN0YXJ0TnVtYmVyXCIgfSwgeyBuYW1lOiBcIm51bWJlckNodW5rXCIsIHZhbHVlOiB2YWx1ZSB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwYWNrTnVtYmVycyAmJiAoYWNjdW11bGF0b3IgPSB2YWx1ZSk7XG4gICAgICAgICAgICAgIGV4cGVjdCA9IFwibnVtYmVyRGlnaXRcIjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidHJ1ZVwiOlxuICAgICAgICAgICAgY2FzZSBcImZhbHNlXCI6XG4gICAgICAgICAgICBjYXNlIFwibnVsbFwiOlxuICAgICAgICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCAtIGluZGV4ID09PSB2YWx1ZS5sZW5ndGggJiYgIWRvbmUpIGJyZWFrIG1haW47IC8vIHdhaXQgZm9yIG1vcmUgaW5wdXRcbiAgICAgICAgICAgICAgdG9rZW5zLnB1c2goeyBuYW1lOiB2YWx1ZSArIFwiVmFsdWVcIiwgdmFsdWU6IHZhbHVlc1t2YWx1ZV0gfSk7XG4gICAgICAgICAgICAgIGV4cGVjdCA9IGV4cGVjdGVkW3BhcmVudF07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLy8gZGVmYXVsdDogLy8gd3NcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5kZXggKz0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwia2V5VmFsXCI6XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICBwYXR0ZXJucy5zdHJpbmcubGFzdEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgbWF0Y2ggPSBwYXR0ZXJucy5zdHJpbmcuZXhlYyhidWZmZXIpO1xuICAgICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA8IGJ1ZmZlci5sZW5ndGggJiYgKGRvbmUgfHwgYnVmZmVyLmxlbmd0aCAtIGluZGV4ID49IDYpKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYXJzZXIgY2Fubm90IHBhcnNlIGlucHV0OiBlc2NhcGVkIGNoYXJhY3RlcnNcIik7XG4gICAgICAgICAgICBpZiAoZG9uZSkgdGhyb3cgbmV3IEVycm9yKFwiUGFyc2VyIGhhcyBleHBlY3RlZCBhIHN0cmluZyB2YWx1ZVwiKTtcbiAgICAgICAgICAgIGJyZWFrIG1haW47IC8vIHdhaXQgZm9yIG1vcmUgaW5wdXRcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWUgPSBtYXRjaFswXTtcbiAgICAgICAgICBpZiAodmFsdWUgPT09ICdcIicpIHtcbiAgICAgICAgICAgIGlmIChleHBlY3QgPT09IFwia2V5VmFsXCIpIHtcbiAgICAgICAgICAgICAgaWYgKHN0cmVhbUtleXMpIHRva2Vucy5wdXNoKHsgbmFtZTogXCJlbmRLZXlcIiB9KTtcbiAgICAgICAgICAgICAgaWYgKHBhY2tLZXlzKSB7XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2goeyBuYW1lOiBcImtleVZhbHVlXCIsIHZhbHVlOiBhY2N1bXVsYXRvciB9KTtcbiAgICAgICAgICAgICAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZXhwZWN0ID0gXCJjb2xvblwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHN0cmVhbVN0cmluZ3MpIHRva2Vucy5wdXNoKHsgbmFtZTogXCJlbmRTdHJpbmdcIiB9KTtcbiAgICAgICAgICAgICAgaWYgKHBhY2tTdHJpbmdzKSB7XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2goeyBuYW1lOiBcInN0cmluZ1ZhbHVlXCIsIHZhbHVlOiBhY2N1bXVsYXRvciB9KTtcbiAgICAgICAgICAgICAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZXhwZWN0ID0gZXhwZWN0ZWRbcGFyZW50XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLmxlbmd0aCA+IDEgJiYgdmFsdWUuY2hhckF0KDApID09PSBcIlxcXFxcIikge1xuICAgICAgICAgICAgY29uc3QgdCA9IHZhbHVlLmxlbmd0aCA9PSAyID8gY29kZXNbdmFsdWUuY2hhckF0KDEpXSA6IGZyb21IZXgodmFsdWUpO1xuICAgICAgICAgICAgaWYgKGV4cGVjdCA9PT0gXCJrZXlWYWxcIiA/IHN0cmVhbUtleXMgOiBzdHJlYW1TdHJpbmdzKSB7XG4gICAgICAgICAgICAgIHRva2Vucy5wdXNoKHsgbmFtZTogXCJzdHJpbmdDaHVua1wiLCB2YWx1ZTogdCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChleHBlY3QgPT09IFwia2V5VmFsXCIgPyBwYWNrS2V5cyA6IHBhY2tTdHJpbmdzKSB7XG4gICAgICAgICAgICAgIGFjY3VtdWxhdG9yICs9IHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChleHBlY3QgPT09IFwia2V5VmFsXCIgPyBzdHJlYW1LZXlzIDogc3RyZWFtU3RyaW5ncykge1xuICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7IG5hbWU6IFwic3RyaW5nQ2h1bmtcIiwgdmFsdWU6IHZhbHVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV4cGVjdCA9PT0gXCJrZXlWYWxcIiA/IHBhY2tLZXlzIDogcGFja1N0cmluZ3MpIHtcbiAgICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGluZGV4ICs9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImtleTFcIjpcbiAgICAgICAgY2FzZSBcImtleVwiOlxuICAgICAgICAgIHBhdHRlcm5zLmtleTEubGFzdEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgbWF0Y2ggPSBwYXR0ZXJucy5rZXkxLmV4ZWMoYnVmZmVyKTtcbiAgICAgICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCBidWZmZXIubGVuZ3RoIHx8IGRvbmUpIHRocm93IG5ldyBFcnJvcihcIlBhcnNlciBjYW5ub3QgcGFyc2UgaW5wdXQ6IGV4cGVjdGVkIGFuIG9iamVjdCBrZXlcIik7XG4gICAgICAgICAgICBicmVhayBtYWluOyAvLyB3YWl0IGZvciBtb3JlIGlucHV0XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbHVlID0gbWF0Y2hbMF07XG4gICAgICAgICAgaWYgKHZhbHVlID09PSAnXCInKSB7XG4gICAgICAgICAgICBpZiAoc3RyZWFtS2V5cykgdG9rZW5zLnB1c2goeyBuYW1lOiBcInN0YXJ0S2V5XCIgfSk7XG4gICAgICAgICAgICBleHBlY3QgPSBcImtleVZhbFwiO1xuICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IFwifVwiKSB7XG4gICAgICAgICAgICBpZiAoZXhwZWN0ICE9PSBcImtleTFcIikgdGhyb3cgbmV3IEVycm9yKFwiUGFyc2VyIGNhbm5vdCBwYXJzZSBpbnB1dDogdW5leHBlY3RlZCB0b2tlbiAnfSdcIik7XG4gICAgICAgICAgICB0b2tlbnMucHVzaCh7IG5hbWU6IFwiZW5kT2JqZWN0XCIgfSk7XG4gICAgICAgICAgICBwYXJlbnQgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgIGV4cGVjdCA9IGV4cGVjdGVkW3BhcmVudF07XG4gICAgICAgICAgfVxuICAgICAgICAgIGluZGV4ICs9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImNvbG9uXCI6XG4gICAgICAgICAgcGF0dGVybnMuY29sb24ubGFzdEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgbWF0Y2ggPSBwYXR0ZXJucy5jb2xvbi5leGVjKGJ1ZmZlcik7XG4gICAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgYnVmZmVyLmxlbmd0aCB8fCBkb25lKSB0aHJvdyBuZXcgRXJyb3IoXCJQYXJzZXIgY2Fubm90IHBhcnNlIGlucHV0OiBleHBlY3RlZCAnOidcIik7XG4gICAgICAgICAgICBicmVhayBtYWluOyAvLyB3YWl0IGZvciBtb3JlIGlucHV0XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbHVlID0gbWF0Y2hbMF07XG4gICAgICAgICAgdmFsdWUgPT09IFwiOlwiICYmIChleHBlY3QgPSBcInZhbHVlXCIpO1xuICAgICAgICAgIGluZGV4ICs9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImFycmF5U3RvcFwiOlxuICAgICAgICBjYXNlIFwib2JqZWN0U3RvcFwiOlxuICAgICAgICAgIHBhdHRlcm5zLmNvbW1hLmxhc3RJbmRleCA9IGluZGV4O1xuICAgICAgICAgIG1hdGNoID0gcGF0dGVybnMuY29tbWEuZXhlYyhidWZmZXIpO1xuICAgICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA8IGJ1ZmZlci5sZW5ndGggfHwgZG9uZSkgdGhyb3cgbmV3IEVycm9yKFwiUGFyc2VyIGNhbm5vdCBwYXJzZSBpbnB1dDogZXhwZWN0ZWQgJywnXCIpO1xuICAgICAgICAgICAgYnJlYWsgbWFpbjsgLy8gd2FpdCBmb3IgbW9yZSBpbnB1dFxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3Blbk51bWJlcikge1xuICAgICAgICAgICAgaWYgKHN0cmVhbU51bWJlcnMpIHRva2Vucy5wdXNoKHsgbmFtZTogXCJlbmROdW1iZXJcIiB9KTtcbiAgICAgICAgICAgIG9wZW5OdW1iZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChwYWNrTnVtYmVycykge1xuICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7IG5hbWU6IFwibnVtYmVyVmFsdWVcIiwgdmFsdWU6IGFjY3VtdWxhdG9yIH0pO1xuICAgICAgICAgICAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbHVlID0gbWF0Y2hbMF07XG4gICAgICAgICAgaWYgKHZhbHVlID09PSBcIixcIikge1xuICAgICAgICAgICAgZXhwZWN0ID0gZXhwZWN0ID09PSBcImFycmF5U3RvcFwiID8gXCJ2YWx1ZVwiIDogXCJrZXlcIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBcIn1cIiB8fCB2YWx1ZSA9PT0gXCJdXCIpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gXCJ9XCIgPyBleHBlY3QgPT09IFwiYXJyYXlTdG9wXCIgOiBleHBlY3QgIT09IFwiYXJyYXlTdG9wXCIpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGFyc2VyIGNhbm5vdCBwYXJzZSBpbnB1dDogZXhwZWN0ZWQgJ1wiICsgKGV4cGVjdCA9PT0gXCJhcnJheVN0b3BcIiA/IFwiXVwiIDogXCJ9XCIpICsgXCInXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG9rZW5zLnB1c2goeyBuYW1lOiB2YWx1ZSA9PT0gXCJ9XCIgPyBcImVuZE9iamVjdFwiIDogXCJlbmRBcnJheVwiIH0pO1xuICAgICAgICAgICAgcGFyZW50ID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICBleHBlY3QgPSBleHBlY3RlZFtwYXJlbnRdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbmRleCArPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vIG51bWJlciBjaHVua3NcbiAgICAgICAgY2FzZSBcIm51bWJlclN0YXJ0XCI6IC8vIFswLTldXG4gICAgICAgICAgcGF0dGVybnMubnVtYmVyU3RhcnQubGFzdEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgbWF0Y2ggPSBwYXR0ZXJucy5udW1iZXJTdGFydC5leGVjKGJ1ZmZlcik7XG4gICAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgYnVmZmVyLmxlbmd0aCB8fCBkb25lKSB0aHJvdyBuZXcgRXJyb3IoXCJQYXJzZXIgY2Fubm90IHBhcnNlIGlucHV0OiBleHBlY3RlZCBhIHN0YXJ0aW5nIGRpZ2l0XCIpO1xuICAgICAgICAgICAgYnJlYWsgbWFpbjsgLy8gd2FpdCBmb3IgbW9yZSBpbnB1dFxuICAgICAgICAgIH1cbiAgICAgICAgICB2YWx1ZSA9IG1hdGNoWzBdO1xuICAgICAgICAgIGlmIChzdHJlYW1OdW1iZXJzKSB0b2tlbnMucHVzaCh7IG5hbWU6IFwibnVtYmVyQ2h1bmtcIiwgdmFsdWU6IHZhbHVlIH0pO1xuICAgICAgICAgIHBhY2tOdW1iZXJzICYmIChhY2N1bXVsYXRvciArPSB2YWx1ZSk7XG4gICAgICAgICAgZXhwZWN0ID0gdmFsdWUgPT09IFwiMFwiID8gXCJudW1iZXJGcmFjdGlvblwiIDogXCJudW1iZXJEaWdpdFwiO1xuICAgICAgICAgIGluZGV4ICs9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm51bWJlckRpZ2l0XCI6IC8vIFswLTldKlxuICAgICAgICAgIHBhdHRlcm5zLm51bWJlckRpZ2l0Lmxhc3RJbmRleCA9IGluZGV4O1xuICAgICAgICAgIG1hdGNoID0gcGF0dGVybnMubnVtYmVyRGlnaXQuZXhlYyhidWZmZXIpO1xuICAgICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA8IGJ1ZmZlci5sZW5ndGggfHwgZG9uZSkgdGhyb3cgbmV3IEVycm9yKFwiUGFyc2VyIGNhbm5vdCBwYXJzZSBpbnB1dDogZXhwZWN0ZWQgYSBkaWdpdFwiKTtcbiAgICAgICAgICAgIGJyZWFrIG1haW47IC8vIHdhaXQgZm9yIG1vcmUgaW5wdXRcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWUgPSBtYXRjaFswXTtcbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChzdHJlYW1OdW1iZXJzKSB0b2tlbnMucHVzaCh7IG5hbWU6IFwibnVtYmVyQ2h1bmtcIiwgdmFsdWU6IHZhbHVlIH0pO1xuICAgICAgICAgICAgcGFja051bWJlcnMgJiYgKGFjY3VtdWxhdG9yICs9IHZhbHVlKTtcbiAgICAgICAgICAgIGluZGV4ICs9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgICBleHBlY3QgPSBcIm51bWJlckZyYWN0aW9uXCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgZXhwZWN0ID0gZXhwZWN0ZWRbcGFyZW50XTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhayBtYWluOyAvLyB3YWl0IGZvciBtb3JlIGlucHV0XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibnVtYmVyRnJhY3Rpb25cIjogLy8gW1xcLmVFXT9cbiAgICAgICAgICBwYXR0ZXJucy5udW1iZXJGcmFjdGlvbi5sYXN0SW5kZXggPSBpbmRleDtcbiAgICAgICAgICBtYXRjaCA9IHBhdHRlcm5zLm51bWJlckZyYWN0aW9uLmV4ZWMoYnVmZmVyKTtcbiAgICAgICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCBidWZmZXIubGVuZ3RoIHx8IGRvbmUpIHtcbiAgICAgICAgICAgICAgZXhwZWN0ID0gZXhwZWN0ZWRbcGFyZW50XTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhayBtYWluOyAvLyB3YWl0IGZvciBtb3JlIGlucHV0XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbHVlID0gbWF0Y2hbMF07XG4gICAgICAgICAgaWYgKHN0cmVhbU51bWJlcnMpIHRva2Vucy5wdXNoKHsgbmFtZTogXCJudW1iZXJDaHVua1wiLCB2YWx1ZTogdmFsdWUgfSk7XG4gICAgICAgICAgcGFja051bWJlcnMgJiYgKGFjY3VtdWxhdG9yICs9IHZhbHVlKTtcbiAgICAgICAgICBleHBlY3QgPSB2YWx1ZSA9PT0gXCIuXCIgPyBcIm51bWJlckZyYWNTdGFydFwiIDogXCJudW1iZXJFeHBTaWduXCI7XG4gICAgICAgICAgaW5kZXggKz0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibnVtYmVyRnJhY1N0YXJ0XCI6IC8vIFswLTldXG4gICAgICAgICAgcGF0dGVybnMubnVtYmVyU3RhcnQubGFzdEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgbWF0Y2ggPSBwYXR0ZXJucy5udW1iZXJTdGFydC5leGVjKGJ1ZmZlcik7XG4gICAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgYnVmZmVyLmxlbmd0aCB8fCBkb25lKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYXJzZXIgY2Fubm90IHBhcnNlIGlucHV0OiBleHBlY3RlZCBhIGZyYWN0aW9uYWwgcGFydCBvZiBhIG51bWJlclwiKTtcbiAgICAgICAgICAgIGJyZWFrIG1haW47IC8vIHdhaXQgZm9yIG1vcmUgaW5wdXRcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWUgPSBtYXRjaFswXTtcbiAgICAgICAgICBpZiAoc3RyZWFtTnVtYmVycykgdG9rZW5zLnB1c2goeyBuYW1lOiBcIm51bWJlckNodW5rXCIsIHZhbHVlOiB2YWx1ZSB9KTtcbiAgICAgICAgICBwYWNrTnVtYmVycyAmJiAoYWNjdW11bGF0b3IgKz0gdmFsdWUpO1xuICAgICAgICAgIGV4cGVjdCA9IFwibnVtYmVyRnJhY0RpZ2l0XCI7XG4gICAgICAgICAgaW5kZXggKz0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibnVtYmVyRnJhY0RpZ2l0XCI6IC8vIFswLTldKlxuICAgICAgICAgIHBhdHRlcm5zLm51bWJlckRpZ2l0Lmxhc3RJbmRleCA9IGluZGV4O1xuICAgICAgICAgIG1hdGNoID0gcGF0dGVybnMubnVtYmVyRGlnaXQuZXhlYyhidWZmZXIpO1xuICAgICAgICAgIHZhbHVlID0gbWF0Y2hbMF07XG4gICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoc3RyZWFtTnVtYmVycykgdG9rZW5zLnB1c2goeyBuYW1lOiBcIm51bWJlckNodW5rXCIsIHZhbHVlOiB2YWx1ZSB9KTtcbiAgICAgICAgICAgIHBhY2tOdW1iZXJzICYmIChhY2N1bXVsYXRvciArPSB2YWx1ZSk7XG4gICAgICAgICAgICBpbmRleCArPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA8IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgZXhwZWN0ID0gXCJudW1iZXJFeHBvbmVudFwiO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgIGV4cGVjdCA9IGV4cGVjdGVkW3BhcmVudF07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWsgbWFpbjsgLy8gd2FpdCBmb3IgbW9yZSBpbnB1dFxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm51bWJlckV4cG9uZW50XCI6IC8vIFtlRV0/XG4gICAgICAgICAgcGF0dGVybnMubnVtYmVyRXhwb25lbnQubGFzdEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgbWF0Y2ggPSBwYXR0ZXJucy5udW1iZXJFeHBvbmVudC5leGVjKGJ1ZmZlcik7XG4gICAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgICBleHBlY3QgPSBleHBlY3RlZFtwYXJlbnRdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgIGV4cGVjdCA9IFwiZG9uZVwiO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrIG1haW47IC8vIHdhaXQgZm9yIG1vcmUgaW5wdXRcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWUgPSBtYXRjaFswXTtcbiAgICAgICAgICBpZiAoc3RyZWFtTnVtYmVycykgdG9rZW5zLnB1c2goeyBuYW1lOiBcIm51bWJlckNodW5rXCIsIHZhbHVlOiB2YWx1ZSB9KTtcbiAgICAgICAgICBwYWNrTnVtYmVycyAmJiAoYWNjdW11bGF0b3IgKz0gdmFsdWUpO1xuICAgICAgICAgIGV4cGVjdCA9IFwibnVtYmVyRXhwU2lnblwiO1xuICAgICAgICAgIGluZGV4ICs9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm51bWJlckV4cFNpZ25cIjogLy8gWy0rXT9cbiAgICAgICAgICBwYXR0ZXJucy5udW1iZXJFeHBTaWduLmxhc3RJbmRleCA9IGluZGV4O1xuICAgICAgICAgIG1hdGNoID0gcGF0dGVybnMubnVtYmVyRXhwU2lnbi5leGVjKGJ1ZmZlcik7XG4gICAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgICBleHBlY3QgPSBcIm51bWJlckV4cFN0YXJ0XCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRvbmUpIHRocm93IG5ldyBFcnJvcihcIlBhcnNlciBoYXMgZXhwZWN0ZWQgYW4gZXhwb25lbnQgdmFsdWUgb2YgYSBudW1iZXJcIik7XG4gICAgICAgICAgICBicmVhayBtYWluOyAvLyB3YWl0IGZvciBtb3JlIGlucHV0XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbHVlID0gbWF0Y2hbMF07XG4gICAgICAgICAgaWYgKHN0cmVhbU51bWJlcnMpIHRva2Vucy5wdXNoKHsgbmFtZTogXCJudW1iZXJDaHVua1wiLCB2YWx1ZTogdmFsdWUgfSk7XG4gICAgICAgICAgcGFja051bWJlcnMgJiYgKGFjY3VtdWxhdG9yICs9IHZhbHVlKTtcbiAgICAgICAgICBleHBlY3QgPSBcIm51bWJlckV4cFN0YXJ0XCI7XG4gICAgICAgICAgaW5kZXggKz0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibnVtYmVyRXhwU3RhcnRcIjogLy8gWzAtOV1cbiAgICAgICAgICBwYXR0ZXJucy5udW1iZXJTdGFydC5sYXN0SW5kZXggPSBpbmRleDtcbiAgICAgICAgICBtYXRjaCA9IHBhdHRlcm5zLm51bWJlclN0YXJ0LmV4ZWMoYnVmZmVyKTtcbiAgICAgICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCBidWZmZXIubGVuZ3RoIHx8IGRvbmUpXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhcnNlciBjYW5ub3QgcGFyc2UgaW5wdXQ6IGV4cGVjdGVkIGFuIGV4cG9uZW50IHBhcnQgb2YgYSBudW1iZXJcIik7XG4gICAgICAgICAgICBicmVhayBtYWluOyAvLyB3YWl0IGZvciBtb3JlIGlucHV0XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbHVlID0gbWF0Y2hbMF07XG4gICAgICAgICAgaWYgKHN0cmVhbU51bWJlcnMpIHRva2Vucy5wdXNoKHsgbmFtZTogXCJudW1iZXJDaHVua1wiLCB2YWx1ZTogdmFsdWUgfSk7XG4gICAgICAgICAgcGFja051bWJlcnMgJiYgKGFjY3VtdWxhdG9yICs9IHZhbHVlKTtcbiAgICAgICAgICBleHBlY3QgPSBcIm51bWJlckV4cERpZ2l0XCI7XG4gICAgICAgICAgaW5kZXggKz0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibnVtYmVyRXhwRGlnaXRcIjogLy8gWzAtOV0qXG4gICAgICAgICAgcGF0dGVybnMubnVtYmVyRGlnaXQubGFzdEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgbWF0Y2ggPSBwYXR0ZXJucy5udW1iZXJEaWdpdC5leGVjKGJ1ZmZlcik7XG4gICAgICAgICAgdmFsdWUgPSBtYXRjaFswXTtcbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChzdHJlYW1OdW1iZXJzKSB0b2tlbnMucHVzaCh7IG5hbWU6IFwibnVtYmVyQ2h1bmtcIiwgdmFsdWU6IHZhbHVlIH0pO1xuICAgICAgICAgICAgcGFja051bWJlcnMgJiYgKGFjY3VtdWxhdG9yICs9IHZhbHVlKTtcbiAgICAgICAgICAgIGluZGV4ICs9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgYnVmZmVyLmxlbmd0aCB8fCBkb25lKSB7XG4gICAgICAgICAgICAgIGV4cGVjdCA9IGV4cGVjdGVkW3BhcmVudF07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWsgbWFpbjsgLy8gd2FpdCBmb3IgbW9yZSBpbnB1dFxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImRvbmVcIjpcbiAgICAgICAgICBwYXR0ZXJucy53cy5sYXN0SW5kZXggPSBpbmRleDtcbiAgICAgICAgICBtYXRjaCA9IHBhdHRlcm5zLndzLmV4ZWMoYnVmZmVyKTtcbiAgICAgICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCBidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGlmIChqc29uU3RyZWFtaW5nKSB7XG4gICAgICAgICAgICAgICAgZXhwZWN0ID0gXCJ2YWx1ZVwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhcnNlciBjYW5ub3QgcGFyc2UgaW5wdXQ6IHVuZXhwZWN0ZWQgY2hhcmFjdGVyc1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrIG1haW47IC8vIHdhaXQgZm9yIG1vcmUgaW5wdXRcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWUgPSBtYXRjaFswXTtcbiAgICAgICAgICBpZiAob3Blbk51bWJlcikge1xuICAgICAgICAgICAgaWYgKHN0cmVhbU51bWJlcnMpIHRva2Vucy5wdXNoKHsgbmFtZTogXCJlbmROdW1iZXJcIiB9KTtcbiAgICAgICAgICAgIG9wZW5OdW1iZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChwYWNrTnVtYmVycykge1xuICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7IG5hbWU6IFwibnVtYmVyVmFsdWVcIiwgdmFsdWU6IGFjY3VtdWxhdG9yIH0pO1xuICAgICAgICAgICAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGluZGV4ICs9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRvbmUgJiYgb3Blbk51bWJlcikge1xuICAgICAgaWYgKHN0cmVhbU51bWJlcnMpIHRva2Vucy5wdXNoKHsgbmFtZTogXCJlbmROdW1iZXJcIiB9KTtcbiAgICAgIG9wZW5OdW1iZXIgPSBmYWxzZTtcbiAgICAgIGlmIChwYWNrTnVtYmVycykge1xuICAgICAgICB0b2tlbnMucHVzaCh7IG5hbWU6IFwibnVtYmVyVmFsdWVcIiwgdmFsdWU6IGFjY3VtdWxhdG9yIH0pO1xuICAgICAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGJ1ZmZlciA9IGJ1ZmZlci5zbGljZShpbmRleCk7XG4gICAgcmV0dXJuIHRva2Vucy5sZW5ndGggPyBtYW55KHRva2VucykgOiBub25lO1xuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBwYXJzZXIgPSAob3B0aW9ucz86IGFueSkgPT4gZ2VuKGZpeFV0ZjhTdHJlYW0oKSwganNvblBhcnNlcihvcHRpb25zKSk7XG5cbmNvbnN0IHdpdGhQYXJzZXIgPSAoZm46IGFueSwgb3B0aW9ucz86IGFueSkgPT4gZ2VuKHBhcnNlcihvcHRpb25zKSwgZm4ob3B0aW9ucykpO1xuXG5jb25zdCBjaGVja2FibGVUb2tlbnMgPSB7XG4gICAgc3RhcnRPYmplY3Q6IDEsXG4gICAgc3RhcnRBcnJheTogMSxcbiAgICBzdGFydFN0cmluZzogMSxcbiAgICBzdGFydE51bWJlcjogMSxcbiAgICBudWxsVmFsdWU6IDEsXG4gICAgdHJ1ZVZhbHVlOiAxLFxuICAgIGZhbHNlVmFsdWU6IDEsXG4gICAgc3RyaW5nVmFsdWU6IDEsXG4gICAgbnVtYmVyVmFsdWU6IDEsXG4gIH0sXG4gIHN0b3BUb2tlbnMgPSB7XG4gICAgc3RhcnRPYmplY3Q6IFwiZW5kT2JqZWN0XCIsXG4gICAgc3RhcnRBcnJheTogXCJlbmRBcnJheVwiLFxuICAgIHN0YXJ0U3RyaW5nOiBcImVuZFN0cmluZ1wiLFxuICAgIHN0YXJ0TnVtYmVyOiBcImVuZE51bWJlclwiLFxuICB9LFxuICBvcHRpb25hbFRva2VucyA9IHsgZW5kU3RyaW5nOiBcInN0cmluZ1ZhbHVlXCIsIGVuZE51bWJlcjogXCJudW1iZXJWYWx1ZVwiIH07XG5cbmNvbnN0IGRlZmF1bHRGaWx0ZXIgPSAoX3N0YWNrOiBzdHJpbmdbXSwgX2E6IGFueSkgPT4gdHJ1ZTtcblxuY29uc3Qgc3RyaW5nRmlsdGVyID0gKHN0cmluZzogc3RyaW5nLCBzZXBhcmF0b3I6IHN0cmluZykgPT4ge1xuICBjb25zdCBzdHJpbmdXaXRoU2VwYXJhdG9yID0gc3RyaW5nICsgc2VwYXJhdG9yO1xuICByZXR1cm4gKHN0YWNrOiBzdHJpbmdbXSwgX2E6IGFueSkgPT4ge1xuICAgIGNvbnN0IHBhdGggPSBzdGFjay5qb2luKHNlcGFyYXRvcik7XG4gICAgcmV0dXJuIHBhdGggPT09IHN0cmluZyB8fCBwYXRoLnN0YXJ0c1dpdGgoc3RyaW5nV2l0aFNlcGFyYXRvcik7XG4gIH07XG59O1xuXG5jb25zdCByZWdFeHBGaWx0ZXIgPSAocmVnRXhwOiBSZWdFeHAsIHNlcGFyYXRvcjogc3RyaW5nKSA9PiB7XG4gIHJldHVybiAoc3RhY2s6IHN0cmluZ1tdLCBfYTogYW55KSA9PiByZWdFeHAudGVzdChzdGFjay5qb2luKHNlcGFyYXRvcikpO1xufTtcblxuY29uc3QgZmlsdGVyQmFzZSA9XG4gICh7XG4gICAgc3BlY2lhbEFjdGlvbiA9IFwiYWNjZXB0XCIsXG4gICAgZGVmYXVsdEFjdGlvbiA9IFwiaWdub3JlXCIsXG4gICAgbm9uQ2hlY2thYmxlQWN0aW9uID0gXCJwcm9jZXNzLWtleVwiLFxuICAgIHRyYW5zaXRpb24gPSB1bmRlZmluZWQgYXMgYW55LFxuICB9ID0ge30pID0+XG4gIChvcHRpb25zOiBhbnkpID0+IHtcbiAgICBjb25zdCBvbmNlID0gb3B0aW9ucz8ub25jZSxcbiAgICAgIHNlcGFyYXRvciA9IG9wdGlvbnM/LnBhdGhTZXBhcmF0b3IgfHwgXCIuXCI7XG4gICAgbGV0IGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICBzdHJlYW1LZXlzID0gdHJ1ZTtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbHRlciA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmZpbHRlciA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGZpbHRlciA9IHN0cmluZ0ZpbHRlcihvcHRpb25zLmZpbHRlciwgc2VwYXJhdG9yKTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5maWx0ZXIgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgZmlsdGVyID0gcmVnRXhwRmlsdGVyKG9wdGlvbnMuZmlsdGVyLCBzZXBhcmF0b3IpO1xuICAgICAgfVxuICAgICAgaWYgKFwic3RyZWFtVmFsdWVzXCIgaW4gb3B0aW9ucykgc3RyZWFtS2V5cyA9IG9wdGlvbnMuc3RyZWFtVmFsdWVzO1xuICAgICAgaWYgKFwic3RyZWFtS2V5c1wiIGluIG9wdGlvbnMpIHN0cmVhbUtleXMgPSBvcHRpb25zLnN0cmVhbUtleXM7XG4gICAgfVxuICAgIGNvbnN0IHNhbml0aXplZE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7IGZpbHRlciwgc3RyZWFtS2V5cywgc2VwYXJhdG9yIH0pO1xuICAgIGxldCBzdGF0ZSA9IFwiY2hlY2tcIjtcbiAgICBjb25zdCBzdGFjazogYW55W10gPSBbXTtcbiAgICBsZXQgZGVwdGggPSAwLFxuICAgICAgcHJldmlvdXNUb2tlbiA9IFwiXCIsXG4gICAgICBlbmRUb2tlbiA9IFwiXCIsXG4gICAgICBvcHRpb25hbFRva2VuID0gXCJcIixcbiAgICAgIHN0YXJ0VHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgIHJldHVybiBmbHVzaGFibGUoKGNodW5rKSA9PiB7XG4gICAgICAvLyB0aGUgZmx1c2hcbiAgICAgIGlmIChjaHVuayA9PT0gbm9uZSkgcmV0dXJuIHRyYW5zaXRpb24gPyB0cmFuc2l0aW9uKFtdLCBudWxsLCBcImZsdXNoXCIsIHNhbml0aXplZE9wdGlvbnMpIDogbm9uZTtcblxuICAgICAgLy8gcHJvY2VzcyB0aGUgb3B0aW9uYWwgdmFsdWUgdG9rZW4gKHVuZmluaXNoZWQpXG4gICAgICBpZiAob3B0aW9uYWxUb2tlbikge1xuICAgICAgICBpZiAob3B0aW9uYWxUb2tlbiA9PT0gY2h1bmsubmFtZSkge1xuICAgICAgICAgIGxldCByZXR1cm5Ub2tlbiA9IG5vbmU7XG4gICAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSBcInByb2Nlc3Mta2V5XCI6XG4gICAgICAgICAgICAgIHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdID0gY2h1bmsudmFsdWU7XG4gICAgICAgICAgICAgIHN0YXRlID0gXCJjaGVja1wiO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJhY2NlcHQtdmFsdWVcIjpcbiAgICAgICAgICAgICAgcmV0dXJuVG9rZW4gPSBjaHVuaztcbiAgICAgICAgICAgICAgc3RhdGUgPSBvbmNlID8gXCJwYXNzXCIgOiBcImNoZWNrXCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc3RhdGUgPSBvbmNlID8gXCJhbGxcIiA6IFwiY2hlY2tcIjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9wdGlvbmFsVG9rZW4gPSBcIlwiO1xuICAgICAgICAgIHJldHVybiByZXR1cm5Ub2tlbjtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25hbFRva2VuID0gXCJcIjtcbiAgICAgICAgc3RhdGUgPSBvbmNlICYmIHN0YXRlICE9PSBcInByb2Nlc3Mta2V5XCIgPyBcInBhc3NcIiA6IFwiY2hlY2tcIjtcbiAgICAgIH1cblxuICAgICAgbGV0IHJldHVyblRva2VuOiBhbnkgPSBub25lO1xuXG4gICAgICByZWNoZWNrOiBmb3IgKDs7KSB7XG4gICAgICAgIC8vIGFjY2VwdC9yZWplY3QgdG9rZW5zXG4gICAgICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgICAgICBjYXNlIFwicHJvY2Vzcy1rZXlcIjpcbiAgICAgICAgICAgIGlmIChjaHVuay5uYW1lID09PSBcImVuZEtleVwiKSBvcHRpb25hbFRva2VuID0gXCJrZXlWYWx1ZVwiO1xuICAgICAgICAgICAgcmV0dXJuIG5vbmU7XG4gICAgICAgICAgY2FzZSBcInBhc3NcIjpcbiAgICAgICAgICAgIHJldHVybiBub25lO1xuICAgICAgICAgIGNhc2UgXCJhbGxcIjpcbiAgICAgICAgICAgIHJldHVybiBjaHVuaztcbiAgICAgICAgICBjYXNlIFwiYWNjZXB0XCI6XG4gICAgICAgICAgY2FzZSBcInJlamVjdFwiOlxuICAgICAgICAgICAgaWYgKHN0YXJ0VHJhbnNpdGlvbikge1xuICAgICAgICAgICAgICBzdGFydFRyYW5zaXRpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuVG9rZW4gPSB0cmFuc2l0aW9uKHN0YWNrLCBjaHVuaywgc3RhdGUsIHNhbml0aXplZE9wdGlvbnMpIHx8IG5vbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGNodW5rLm5hbWUpIHtcbiAgICAgICAgICAgICAgY2FzZSBcInN0YXJ0T2JqZWN0XCI6XG4gICAgICAgICAgICAgIGNhc2UgXCJzdGFydEFycmF5XCI6XG4gICAgICAgICAgICAgICAgKytkZXB0aDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImVuZE9iamVjdFwiOlxuICAgICAgICAgICAgICBjYXNlIFwiZW5kQXJyYXlcIjpcbiAgICAgICAgICAgICAgICAtLWRlcHRoO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlID09PSBcImFjY2VwdFwiKSB7XG4gICAgICAgICAgICAgIHJldHVyblRva2VuID0gY29tYmluZU1hbnlNdXQocmV0dXJuVG9rZW4sIGNodW5rKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZGVwdGgpIHtcbiAgICAgICAgICAgICAgaWYgKG9uY2UpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHN0YXRlID09PSBcImFjY2VwdFwiID8gXCJwYXNzXCIgOiBcImFsbFwiO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXRlID0gXCJjaGVja1wiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuVG9rZW47XG4gICAgICAgICAgY2FzZSBcImFjY2VwdC12YWx1ZVwiOlxuICAgICAgICAgIGNhc2UgXCJyZWplY3QtdmFsdWVcIjpcbiAgICAgICAgICAgIGlmIChzdGFydFRyYW5zaXRpb24pIHtcbiAgICAgICAgICAgICAgc3RhcnRUcmFuc2l0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVyblRva2VuID0gdHJhbnNpdGlvbihzdGFjaywgY2h1bmssIHN0YXRlLCBzYW5pdGl6ZWRPcHRpb25zKSB8fCBub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlID09PSBcImFjY2VwdC12YWx1ZVwiKSB7XG4gICAgICAgICAgICAgIHJldHVyblRva2VuID0gY29tYmluZU1hbnlNdXQocmV0dXJuVG9rZW4sIGNodW5rKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaHVuay5uYW1lID09PSBlbmRUb2tlbikge1xuICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgIG9wdGlvbmFsVG9rZW4gPSBvcHRpb25hbFRva2Vuc1tlbmRUb2tlbl0gfHwgXCJcIjtcbiAgICAgICAgICAgICAgZW5kVG9rZW4gPSBcIlwiO1xuICAgICAgICAgICAgICBpZiAoIW9wdGlvbmFsVG9rZW4pIHtcbiAgICAgICAgICAgICAgICBpZiAob25jZSkge1xuICAgICAgICAgICAgICAgICAgc3RhdGUgPSBzdGF0ZSA9PT0gXCJhY2NlcHQtdmFsdWVcIiA/IFwicGFzc1wiIDogXCJhbGxcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgc3RhdGUgPSBcImNoZWNrXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuVG9rZW47XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGUgdGhlIGxhc3QgaW5kZXggaW4gdGhlIHN0YWNrXG4gICAgICAgIGlmICh0eXBlb2Ygc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0gPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgIC8vIGFycmF5XG4gICAgICAgICAgc3dpdGNoIChjaHVuay5uYW1lKSB7XG4gICAgICAgICAgICBjYXNlIFwic3RhcnRPYmplY3RcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzdGFydEFycmF5XCI6XG4gICAgICAgICAgICBjYXNlIFwic3RhcnRTdHJpbmdcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzdGFydE51bWJlclwiOlxuICAgICAgICAgICAgY2FzZSBcIm51bGxWYWx1ZVwiOlxuICAgICAgICAgICAgY2FzZSBcInRydWVWYWx1ZVwiOlxuICAgICAgICAgICAgY2FzZSBcImZhbHNlVmFsdWVcIjpcbiAgICAgICAgICAgICAgKytzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibnVtYmVyVmFsdWVcIjpcbiAgICAgICAgICAgICAgaWYgKHByZXZpb3VzVG9rZW4gIT09IFwiZW5kTnVtYmVyXCIpICsrc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1ZhbHVlXCI6XG4gICAgICAgICAgICAgIGlmIChwcmV2aW91c1Rva2VuICE9PSBcImVuZFN0cmluZ1wiKSArK3N0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGNodW5rLm5hbWUgPT09IFwia2V5VmFsdWVcIikgc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0gPSBjaHVuay52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBwcmV2aW91c1Rva2VuID0gY2h1bmsubmFtZTtcblxuICAgICAgICAvLyBjaGVjayB0aGUgdG9rZW5cbiAgICAgICAgY29uc3QgYWN0aW9uID1cbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgY2hlY2thYmxlVG9rZW5zW2NodW5rLm5hbWVdICE9PSAxID8gbm9uQ2hlY2thYmxlQWN0aW9uIDogZmlsdGVyKHN0YWNrLCBjaHVuaykgPyBzcGVjaWFsQWN0aW9uIDogZGVmYXVsdEFjdGlvbjtcblxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGVuZFRva2VuID0gc3RvcFRva2Vuc1tjaHVuay5uYW1lXSB8fCBcIlwiO1xuICAgICAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgICAgIGNhc2UgXCJwcm9jZXNzLWtleVwiOlxuICAgICAgICAgICAgaWYgKGNodW5rLm5hbWUgPT09IFwic3RhcnRLZXlcIikge1xuICAgICAgICAgICAgICBzdGF0ZSA9IFwicHJvY2Vzcy1rZXlcIjtcbiAgICAgICAgICAgICAgY29udGludWUgcmVjaGVjaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJhY2NlcHQtdG9rZW5cIjpcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGlmIChlbmRUb2tlbiAmJiBvcHRpb25hbFRva2Vuc1tlbmRUb2tlbl0pIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSBcImFjY2VwdC12YWx1ZVwiO1xuICAgICAgICAgICAgICBzdGFydFRyYW5zaXRpb24gPSAhIXRyYW5zaXRpb247XG4gICAgICAgICAgICAgIGNvbnRpbnVlIHJlY2hlY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHJhbnNpdGlvbikgcmV0dXJuVG9rZW4gPSB0cmFuc2l0aW9uKHN0YWNrLCBjaHVuaywgYWN0aW9uLCBzYW5pdGl6ZWRPcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVyblRva2VuID0gY29tYmluZU1hbnlNdXQocmV0dXJuVG9rZW4sIGNodW5rKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJhY2NlcHRcIjpcbiAgICAgICAgICAgIGlmIChlbmRUb2tlbikge1xuICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgIHN0YXRlID0gb3B0aW9uYWxUb2tlbnNbZW5kVG9rZW5dID8gXCJhY2NlcHQtdmFsdWVcIiA6IFwiYWNjZXB0XCI7XG4gICAgICAgICAgICAgIHN0YXJ0VHJhbnNpdGlvbiA9ICEhdHJhbnNpdGlvbjtcbiAgICAgICAgICAgICAgY29udGludWUgcmVjaGVjaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uKSByZXR1cm5Ub2tlbiA9IHRyYW5zaXRpb24oc3RhY2ssIGNodW5rLCBhY3Rpb24sIHNhbml0aXplZE9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuVG9rZW4gPSBjb21iaW5lTWFueU11dChyZXR1cm5Ub2tlbiwgY2h1bmspO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcInJlamVjdFwiOlxuICAgICAgICAgICAgaWYgKGVuZFRva2VuKSB7XG4gICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgc3RhdGUgPSBvcHRpb25hbFRva2Vuc1tlbmRUb2tlbl0gPyBcInJlamVjdC12YWx1ZVwiIDogXCJyZWplY3RcIjtcbiAgICAgICAgICAgICAgc3RhcnRUcmFuc2l0aW9uID0gISF0cmFuc2l0aW9uO1xuICAgICAgICAgICAgICBjb250aW51ZSByZWNoZWNrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb24pIHJldHVyblRva2VuID0gdHJhbnNpdGlvbihzdGFjaywgY2h1bmssIGFjdGlvbiwgc2FuaXRpemVkT3B0aW9ucyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwicGFzc1wiOlxuICAgICAgICAgICAgc3RhdGUgPSBcInBhc3NcIjtcbiAgICAgICAgICAgIGNvbnRpbnVlIHJlY2hlY2s7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgLy8gdXBkYXRlIHRoZSBzdGFja1xuICAgICAgc3dpdGNoIChjaHVuay5uYW1lKSB7XG4gICAgICAgIGNhc2UgXCJzdGFydE9iamVjdFwiOlxuICAgICAgICAgIHN0YWNrLnB1c2gobnVsbCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzdGFydEFycmF5XCI6XG4gICAgICAgICAgc3RhY2sucHVzaCgtMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJlbmRPYmplY3RcIjpcbiAgICAgICAgY2FzZSBcImVuZEFycmF5XCI6XG4gICAgICAgICAgc3RhY2sucG9wKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXR1cm5Ub2tlbjtcbiAgICB9KTtcbiAgfTtcblxuZXhwb3J0IGNvbnN0IFBpY2tQYXJzZXIgPSAob3B0aW9ucz86IGFueSkgPT4gd2l0aFBhcnNlcihmaWx0ZXJCYXNlKCksIE9iamVjdC5hc3NpZ24oeyBwYWNrS2V5czogdHJ1ZSB9LCBvcHRpb25zKSk7XG5cbmNsYXNzIENvdW50ZXIge1xuICBkZXB0aDogbnVtYmVyO1xuICBjb25zdHJ1Y3Rvcihpbml0aWFsRGVwdGg6IG51bWJlcikge1xuICAgIHRoaXMuZGVwdGggPSBpbml0aWFsRGVwdGg7XG4gIH1cbiAgc3RhcnRPYmplY3QoKSB7XG4gICAgKyt0aGlzLmRlcHRoO1xuICB9XG4gIGVuZE9iamVjdCgpIHtcbiAgICAtLXRoaXMuZGVwdGg7XG4gIH1cbiAgc3RhcnRBcnJheSgpIHtcbiAgICArK3RoaXMuZGVwdGg7XG4gIH1cbiAgZW5kQXJyYXkoKSB7XG4gICAgLS10aGlzLmRlcHRoO1xuICB9XG59XG5cbmNsYXNzIEFzc2VtYmxlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIHN0YXRpYyBjb25uZWN0VG8oc3RyZWFtOiBhbnksIG9wdGlvbnM6IGFueSkge1xuICAgIHJldHVybiBuZXcgQXNzZW1ibGVyKG9wdGlvbnMpLmNvbm5lY3RUbyhzdHJlYW0pO1xuICB9XG5cbiAgc3RhY2s6IGFueTtcbiAgY3VycmVudDogYW55O1xuICBrZXk6IGFueTtcbiAgZG9uZTogYm9vbGVhbjtcbiAgcmV2aXZlcjogYW55O1xuICAvLyBAdHMtaWdub3JlXG4gIHN0cmluZ1ZhbHVlOiAodmFsdWU6IHN0cmluZykgPT4gdm9pZDtcbiAgdGFwQ2hhaW46IChjaHVuazogYW55KSA9PiBhbnk7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogYW55KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnN0YWNrID0gW107XG4gICAgdGhpcy5jdXJyZW50ID0gdGhpcy5rZXkgPSBudWxsO1xuICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMucmV2aXZlciA9IHR5cGVvZiBvcHRpb25zLnJldml2ZXIgPT0gXCJmdW5jdGlvblwiICYmIG9wdGlvbnMucmV2aXZlcjtcbiAgICAgIGlmICh0aGlzLnJldml2ZXIpIHtcbiAgICAgICAgdGhpcy5zdHJpbmdWYWx1ZSA9IHRoaXMuX3NhdmVWYWx1ZSA9IHRoaXMuX3NhdmVWYWx1ZVdpdGhSZXZpdmVyO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMubnVtYmVyQXNTdHJpbmcpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLm51bWJlclZhbHVlID0gdGhpcy5zdHJpbmdWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnRhcENoYWluID0gKGNodW5rKSA9PiB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBpZiAodGhpc1tjaHVuay5uYW1lXSkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXNbY2h1bmsubmFtZV0oY2h1bmsudmFsdWUpO1xuICAgICAgICBpZiAodGhpcy5kb25lKSByZXR1cm4gdGhpcy5jdXJyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vbmU7XG4gICAgfTtcblxuICAgIHRoaXMuc3RyaW5nVmFsdWUgPSB0aGlzLl9zYXZlVmFsdWU7XG4gIH1cblxuICBjb25uZWN0VG8oc3RyZWFtOiBhbnkpIHtcbiAgICBzdHJlYW0ub24oXCJkYXRhXCIsIChjaHVuazogYW55KSA9PiB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBpZiAodGhpc1tjaHVuay5uYW1lXSkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXNbY2h1bmsubmFtZV0oY2h1bmsudmFsdWUpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmICh0aGlzLmRvbmUpIHRoaXMuZW1pdChcImRvbmVcIiwgdGhpcyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQgZGVwdGgoKSB7XG4gICAgcmV0dXJuICh0aGlzLnN0YWNrLmxlbmd0aCA+PiAxKSArICh0aGlzLmRvbmUgPyAwIDogMSk7XG4gIH1cblxuICBnZXQgcGF0aCgpIHtcbiAgICBjb25zdCBwYXRoOiBhbnlbXSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGFjay5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgY29uc3Qga2V5ID0gdGhpcy5zdGFja1tpICsgMV07XG4gICAgICBwYXRoLnB1c2goa2V5ID09PSBudWxsID8gdGhpcy5zdGFja1tpXS5sZW5ndGggOiBrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuXG4gIGRyb3BUb0xldmVsKGxldmVsOiBhbnkpIHtcbiAgICBpZiAobGV2ZWwgPCB0aGlzLmRlcHRoKSB7XG4gICAgICBpZiAobGV2ZWwgPiAwKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gKGxldmVsIC0gMSkgPDwgMTtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5zdGFja1tpbmRleF07XG4gICAgICAgIHRoaXMua2V5ID0gdGhpcy5zdGFja1tpbmRleCArIDFdO1xuICAgICAgICB0aGlzLnN0YWNrLnNwbGljZShpbmRleCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnN0YWNrID0gW107XG4gICAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMua2V5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb25zdW1lKGNodW5rOiBhbnkpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdGhpc1tjaHVuay5uYW1lXSAmJiB0aGlzW2NodW5rLm5hbWVdKGNodW5rLnZhbHVlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGtleVZhbHVlKHZhbHVlOiBhbnkpIHtcbiAgICB0aGlzLmtleSA9IHZhbHVlO1xuICB9XG5cbiAgLy9zdHJpbmdWYWx1ZSgpIC0gYWxpYXNlZCBiZWxvdyB0byBfc2F2ZVZhbHVlKClcblxuICBudW1iZXJWYWx1ZSh2YWx1ZTogYW55KSB7XG4gICAgdGhpcy5fc2F2ZVZhbHVlKHBhcnNlRmxvYXQodmFsdWUpKTtcbiAgfVxuICBudWxsVmFsdWUoKSB7XG4gICAgdGhpcy5fc2F2ZVZhbHVlKG51bGwpO1xuICB9XG4gIHRydWVWYWx1ZSgpIHtcbiAgICB0aGlzLl9zYXZlVmFsdWUodHJ1ZSk7XG4gIH1cbiAgZmFsc2VWYWx1ZSgpIHtcbiAgICB0aGlzLl9zYXZlVmFsdWUoZmFsc2UpO1xuICB9XG5cbiAgc3RhcnRPYmplY3QoKSB7XG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhY2sucHVzaCh0aGlzLmN1cnJlbnQsIHRoaXMua2V5KTtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50ID0gbmV3IE9iamVjdCgpO1xuICAgIHRoaXMua2V5ID0gbnVsbDtcbiAgfVxuXG4gIGVuZE9iamVjdCgpIHtcbiAgICBpZiAodGhpcy5zdGFjay5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5jdXJyZW50O1xuICAgICAgdGhpcy5rZXkgPSB0aGlzLnN0YWNrLnBvcCgpO1xuICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5zdGFjay5wb3AoKTtcbiAgICAgIHRoaXMuX3NhdmVWYWx1ZSh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgc3RhcnRBcnJheSgpIHtcbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGFjay5wdXNoKHRoaXMuY3VycmVudCwgdGhpcy5rZXkpO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnQgPSBbXTtcbiAgICB0aGlzLmtleSA9IG51bGw7XG4gIH1cblxuICBlbmRBcnJheSgpIHtcbiAgICBpZiAodGhpcy5zdGFjay5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5jdXJyZW50O1xuICAgICAgdGhpcy5rZXkgPSB0aGlzLnN0YWNrLnBvcCgpO1xuICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5zdGFjay5wb3AoKTtcbiAgICAgIHRoaXMuX3NhdmVWYWx1ZSh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgX3NhdmVWYWx1ZSh2YWx1ZTogYW55KSB7XG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgdGhpcy5jdXJyZW50ID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnQgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICB0aGlzLmN1cnJlbnQucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmN1cnJlbnRbdGhpcy5rZXldID0gdmFsdWU7XG4gICAgICAgIHRoaXMua2V5ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgX3NhdmVWYWx1ZVdpdGhSZXZpdmVyKHZhbHVlOiBhbnkpIHtcbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLnJldml2ZXIoXCJcIiwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgdmFsdWUgPSB0aGlzLnJldml2ZXIoXCJcIiArIHRoaXMuY3VycmVudC5sZW5ndGgsIHZhbHVlKTtcbiAgICAgICAgdGhpcy5jdXJyZW50LnB1c2godmFsdWUpO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLmN1cnJlbnRbdGhpcy5jdXJyZW50Lmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHRoaXMucmV2aXZlcih0aGlzLmtleSwgdmFsdWUpO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMuY3VycmVudFt0aGlzLmtleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmtleSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IHN0cmVhbUJhc2UgPVxuICAoeyBwdXNoLCBmaXJzdCwgbGV2ZWwgfTogYW55KSA9PlxuICAob3B0aW9ucyA9IHt9IGFzIGFueSkgPT4ge1xuICAgIGNvbnN0IHsgb2JqZWN0RmlsdGVyLCBpbmNsdWRlVW5kZWNpZGVkIH0gPSBvcHRpb25zO1xuICAgIGxldCBhc20gPSBuZXcgQXNzZW1ibGVyKG9wdGlvbnMpIGFzIGFueSxcbiAgICAgIHN0YXRlID0gZmlyc3QgPyBcImZpcnN0XCIgOiBcImNoZWNrXCIsXG4gICAgICBzYXZlZEFzbSA9IG51bGwgYXMgYW55O1xuXG4gICAgaWYgKHR5cGVvZiBvYmplY3RGaWx0ZXIgIT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAvLyBubyBvYmplY3QgZmlsdGVyICsgbm8gZmlyc3QgY2hlY2tcbiAgICAgIGlmIChzdGF0ZSA9PT0gXCJjaGVja1wiKVxuICAgICAgICByZXR1cm4gKGNodW5rOiBhbnkpID0+IHtcbiAgICAgICAgICBpZiAoYXNtW2NodW5rLm5hbWVdKSB7XG4gICAgICAgICAgICBhc21bY2h1bmsubmFtZV0oY2h1bmsudmFsdWUpO1xuICAgICAgICAgICAgaWYgKGFzbS5kZXB0aCA9PT0gbGV2ZWwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHB1c2goYXNtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5vbmU7XG4gICAgICAgIH07XG4gICAgICAvLyBubyBvYmplY3QgZmlsdGVyXG4gICAgICByZXR1cm4gKGNodW5rOiBhbnkpID0+IHtcbiAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgICAgIGNhc2UgXCJmaXJzdFwiOlxuICAgICAgICAgICAgZmlyc3QoY2h1bmspO1xuICAgICAgICAgICAgc3RhdGUgPSBcImFjY2VwdFwiO1xuICAgICAgICAgIC8vIGZhbGwgdGhyb3VnaFxuICAgICAgICAgIGNhc2UgXCJhY2NlcHRcIjpcbiAgICAgICAgICAgIGlmIChhc21bY2h1bmsubmFtZV0pIHtcbiAgICAgICAgICAgICAgYXNtW2NodW5rLm5hbWVdKGNodW5rLnZhbHVlKTtcbiAgICAgICAgICAgICAgaWYgKGFzbS5kZXB0aCA9PT0gbGV2ZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHVzaChhc20pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9uZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gb2JqZWN0IGZpbHRlciArIGEgcG9zc2libGUgZmlyc3QgY2hlY2tcbiAgICByZXR1cm4gKGNodW5rOiBhbnkpID0+IHtcbiAgICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgICAgY2FzZSBcImZpcnN0XCI6XG4gICAgICAgICAgZmlyc3QoY2h1bmspO1xuICAgICAgICAgIHN0YXRlID0gXCJjaGVja1wiO1xuICAgICAgICAvLyBmYWxsIHRocm91Z2hcbiAgICAgICAgY2FzZSBcImNoZWNrXCI6XG4gICAgICAgICAgaWYgKGFzbVtjaHVuay5uYW1lXSkge1xuICAgICAgICAgICAgYXNtW2NodW5rLm5hbWVdKGNodW5rLnZhbHVlKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG9iamVjdEZpbHRlcihhc20pO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICBzdGF0ZSA9IFwiYWNjZXB0XCI7XG4gICAgICAgICAgICAgIGlmIChhc20uZGVwdGggPT09IGxldmVsKSByZXR1cm4gcHVzaChhc20pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIGlmIChhc20uZGVwdGggPT09IGxldmVsKSByZXR1cm4gcHVzaChhc20sIHRydWUpO1xuICAgICAgICAgICAgICBzdGF0ZSA9IFwicmVqZWN0XCI7XG4gICAgICAgICAgICAgIHNhdmVkQXNtID0gYXNtO1xuICAgICAgICAgICAgICBhc20gPSBuZXcgQ291bnRlcihzYXZlZEFzbS5kZXB0aCk7XG4gICAgICAgICAgICAgIHNhdmVkQXNtLmRyb3BUb0xldmVsKGxldmVsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChhc20uZGVwdGggPT09IGxldmVsKSByZXR1cm4gcHVzaChhc20sICFpbmNsdWRlVW5kZWNpZGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJhY2NlcHRcIjpcbiAgICAgICAgICBpZiAoYXNtW2NodW5rLm5hbWVdKSB7XG4gICAgICAgICAgICBhc21bY2h1bmsubmFtZV0oY2h1bmsudmFsdWUpO1xuICAgICAgICAgICAgaWYgKGFzbS5kZXB0aCA9PT0gbGV2ZWwpIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSBcImNoZWNrXCI7XG4gICAgICAgICAgICAgIHJldHVybiBwdXNoKGFzbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicmVqZWN0XCI6XG4gICAgICAgICAgaWYgKGFzbVtjaHVuay5uYW1lXSkge1xuICAgICAgICAgICAgYXNtW2NodW5rLm5hbWVdKGNodW5rLnZhbHVlKTtcbiAgICAgICAgICAgIGlmIChhc20uZGVwdGggPT09IGxldmVsKSB7XG4gICAgICAgICAgICAgIHN0YXRlID0gXCJjaGVja1wiO1xuICAgICAgICAgICAgICBhc20gPSBzYXZlZEFzbTtcbiAgICAgICAgICAgICAgc2F2ZWRBc20gPSBudWxsO1xuICAgICAgICAgICAgICByZXR1cm4gcHVzaChhc20sIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHJldHVybiBub25lO1xuICAgIH07XG4gIH07XG5cbmV4cG9ydCBjb25zdCBTdHJlYW1BcnJheSA9IChvcHRpb25zPzogYW55KSA9PiB7XG4gIGxldCBrZXkgPSAwO1xuICByZXR1cm4gc3RyZWFtQmFzZSh7XG4gICAgbGV2ZWw6IDEsXG5cbiAgICBmaXJzdChjaHVuazogYW55KSB7XG4gICAgICBpZiAoY2h1bmsubmFtZSAhPT0gXCJzdGFydEFycmF5XCIpIHRocm93IG5ldyBFcnJvcihcIlRvcC1sZXZlbCBvYmplY3Qgc2hvdWxkIGJlIGFuIGFycmF5LlwiKTtcbiAgICB9LFxuXG4gICAgcHVzaChhc206IGFueSwgZGlzY2FyZDogYW55KSB7XG4gICAgICBpZiAoYXNtLmN1cnJlbnQubGVuZ3RoKSB7XG4gICAgICAgIGlmIChkaXNjYXJkKSB7XG4gICAgICAgICAgKytrZXk7XG4gICAgICAgICAgYXNtLmN1cnJlbnQucG9wKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHsga2V5OiBrZXkrKywgdmFsdWU6IGFzbS5jdXJyZW50LnBvcCgpIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBub25lO1xuICAgIH0sXG4gIH0pKG9wdGlvbnMpO1xufTtcbiIsICJpbXBvcnQgeyBMaXN0LCBNZW51QmFyRXh0cmEsIEljb24sIG9wZW4sIExhdW5jaFR5cGUsIGVudmlyb25tZW50LCBBY3Rpb25QYW5lbCwgQWN0aW9uIH0gZnJvbSBcIkByYXljYXN0L2FwaVwiO1xuaW1wb3J0IHsgZXhpc3RzU3luYyB9IGZyb20gXCJub2RlOmZzXCI7XG5pbXBvcnQgb3MgZnJvbSBcIm5vZGU6b3NcIjtcbmltcG9ydCB7IHVzZVJlZiwgdXNlU3RhdGUsIHVzZUNhbGxiYWNrLCB1c2VNZW1vIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VQcm9taXNlLCBQcm9taXNlT3B0aW9ucyB9IGZyb20gXCIuL3VzZVByb21pc2VcIjtcbmltcG9ydCB7IHVzZUxhdGVzdCB9IGZyb20gXCIuL3VzZUxhdGVzdFwiO1xuaW1wb3J0IHsgc2hvd0ZhaWx1cmVUb2FzdCB9IGZyb20gXCIuL3Nob3dGYWlsdXJlVG9hc3RcIjtcbmltcG9ydCB7IGJhc2VFeGVjdXRlU1FMLCBQZXJtaXNzaW9uRXJyb3IsIGlzUGVybWlzc2lvbkVycm9yIH0gZnJvbSBcIi4vc3FsLXV0aWxzXCI7XG5cbi8qKlxuICogRXhlY3V0ZXMgYSBxdWVyeSBvbiBhIGxvY2FsIFNRTCBkYXRhYmFzZSBhbmQgcmV0dXJucyB0aGUge0BsaW5rIEFzeW5jU3RhdGV9IGNvcnJlc3BvbmRpbmcgdG8gdGhlIHF1ZXJ5IG9mIHRoZSBjb21tYW5kLiBUaGUgbGFzdCB2YWx1ZSB3aWxsIGJlIGtlcHQgYmV0d2VlbiBjb21tYW5kIHJ1bnMuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogaW1wb3J0IHsgdXNlU1FMIH0gZnJvbSBcIkByYXljYXN0L3V0aWxzXCI7XG4gKiBpbXBvcnQgeyByZXNvbHZlIH0gZnJvbSBcInBhdGhcIjtcbiAqIGltcG9ydCB7IGhvbWVkaXIgfSBmcm9tIFwib3NcIjtcbiAqXG4gKiBjb25zdCBOT1RFU19EQiA9IHJlc29sdmUoaG9tZWRpcigpLCBcIkxpYnJhcnkvR3JvdXAgQ29udGFpbmVycy9ncm91cC5jb20uYXBwbGUubm90ZXMvTm90ZVN0b3JlLnNxbGl0ZVwiKTtcbiAqIGNvbnN0IG5vdGVzUXVlcnkgPSBgU0VMRUNUIGlkLCB0aXRsZSBGUk9NIC4uLmA7XG4gKiB0eXBlIE5vdGVJdGVtID0ge1xuICogICBpZDogc3RyaW5nO1xuICogICB0aXRsZTogc3RyaW5nO1xuICogfTtcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb21tYW5kKCkge1xuICogICBjb25zdCB7IGlzTG9hZGluZywgZGF0YSwgcGVybWlzc2lvblZpZXcgfSA9IHVzZVNRTDxOb3RlSXRlbT4oTk9URVNfREIsIG5vdGVzUXVlcnkpO1xuICpcbiAqICAgaWYgKHBlcm1pc3Npb25WaWV3KSB7XG4gKiAgICAgcmV0dXJuIHBlcm1pc3Npb25WaWV3O1xuICogICB9XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxMaXN0IGlzTG9hZGluZz17aXNMb2FkaW5nfT5cbiAqICAgICAgIHsoZGF0YSB8fCBbXSkubWFwKChpdGVtKSA9PiAoXG4gKiAgICAgICAgIDxMaXN0Lkl0ZW0ga2V5PXtpdGVtLmlkfSB0aXRsZT17aXRlbS50aXRsZX0gLz5cbiAqICAgICAgICkpfVxuICogICAgIDwvTGlzdD5cbiAqICApO1xuICogfTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU1FMPFQgPSB1bmtub3duPihcbiAgZGF0YWJhc2VQYXRoOiBzdHJpbmcsXG4gIHF1ZXJ5OiBzdHJpbmcsXG4gIG9wdGlvbnM/OiB7XG4gICAgLyoqIEEgc3RyaW5nIGV4cGxhaW5pbmcgd2h5IHRoZSBleHRlbnNpb24gbmVlZHMgZnVsbCBkaXNrIGFjY2Vzcy4gRm9yIGV4YW1wbGUsIHRoZSBBcHBsZSBOb3RlcyBleHRlbnNpb24gdXNlcyBgXCJUaGlzIGlzIHJlcXVpcmVkIHRvIHNlYXJjaCB5b3VyIEFwcGxlIE5vdGVzLlwiYC4gV2hpbGUgaXQgaXMgb3B0aW9uYWwsIHdlIHJlY29tbWVuZCBzZXR0aW5nIGl0IHRvIGhlbHAgdXNlcnMgdW5kZXJzdGFuZC4gKi9cbiAgICBwZXJtaXNzaW9uUHJpbWluZz86IHN0cmluZztcbiAgfSAmIE9taXQ8UHJvbWlzZU9wdGlvbnM8KGRhdGFiYXNlOiBzdHJpbmcsIHF1ZXJ5OiBzdHJpbmcpID0+IFByb21pc2U8VFtdPj4sIFwiYWJvcnRhYmxlXCI+LFxuKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgY29uc3QgeyBwZXJtaXNzaW9uUHJpbWluZywgLi4udXNlUHJvbWlzZU9wdGlvbnMgfSA9IG9wdGlvbnMgfHwge307XG5cbiAgY29uc3QgW3Blcm1pc3Npb25WaWV3LCBzZXRQZXJtaXNzaW9uVmlld10gPSB1c2VTdGF0ZTxSZWFjdC5KU1guRWxlbWVudCB8IG51bGw+KG51bGwpO1xuICBjb25zdCBsYXRlc3RPcHRpb25zID0gdXNlTGF0ZXN0KG9wdGlvbnMgfHwge30pO1xuICBjb25zdCBhYm9ydGFibGUgPSB1c2VSZWY8QWJvcnRDb250cm9sbGVyPihudWxsKTtcblxuICBjb25zdCBoYW5kbGVFcnJvciA9IHVzZUNhbGxiYWNrKFxuICAgIChfZXJyb3I6IEVycm9yKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKF9lcnJvcik7XG4gICAgICBjb25zdCBlcnJvciA9XG4gICAgICAgIF9lcnJvciBpbnN0YW5jZW9mIEVycm9yICYmIF9lcnJvci5tZXNzYWdlLmluY2x1ZGVzKFwiYXV0aG9yaXphdGlvbiBkZW5pZWRcIilcbiAgICAgICAgICA/IG5ldyBQZXJtaXNzaW9uRXJyb3IoXCJZb3UgZG8gbm90IGhhdmUgcGVybWlzc2lvbiB0byBhY2Nlc3MgdGhlIGRhdGFiYXNlLlwiKVxuICAgICAgICAgIDogKF9lcnJvciBhcyBFcnJvcik7XG5cbiAgICAgIGlmIChpc1Blcm1pc3Npb25FcnJvcihlcnJvcikpIHtcbiAgICAgICAgc2V0UGVybWlzc2lvblZpZXcoPFBlcm1pc3Npb25FcnJvclNjcmVlbiBwcmltaW5nPXtsYXRlc3RPcHRpb25zLmN1cnJlbnQucGVybWlzc2lvblByaW1pbmd9IC8+KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChsYXRlc3RPcHRpb25zLmN1cnJlbnQub25FcnJvcikge1xuICAgICAgICAgIGxhdGVzdE9wdGlvbnMuY3VycmVudC5vbkVycm9yKGVycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZW52aXJvbm1lbnQubGF1bmNoVHlwZSAhPT0gTGF1bmNoVHlwZS5CYWNrZ3JvdW5kKSB7XG4gICAgICAgICAgICBzaG93RmFpbHVyZVRvYXN0KGVycm9yLCB7XG4gICAgICAgICAgICAgIHRpdGxlOiBcIkNhbm5vdCBxdWVyeSB0aGUgZGF0YVwiLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBbbGF0ZXN0T3B0aW9uc10sXG4gICk7XG5cbiAgY29uc3QgZm4gPSB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoIWV4aXN0c1N5bmMoZGF0YWJhc2VQYXRoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGRhdGFiYXNlIGRvZXMgbm90IGV4aXN0XCIpO1xuICAgIH1cblxuICAgIHJldHVybiBhc3luYyAoZGF0YWJhc2VQYXRoOiBzdHJpbmcsIHF1ZXJ5OiBzdHJpbmcpID0+IHtcbiAgICAgIGNvbnN0IGFib3J0U2lnbmFsID0gYWJvcnRhYmxlLmN1cnJlbnQ/LnNpZ25hbDtcbiAgICAgIHJldHVybiBiYXNlRXhlY3V0ZVNRTDxUPihkYXRhYmFzZVBhdGgsIHF1ZXJ5LCB7IHNpZ25hbDogYWJvcnRTaWduYWwgfSk7XG4gICAgfTtcbiAgfSwgW2RhdGFiYXNlUGF0aF0pO1xuXG4gIHJldHVybiB7XG4gICAgLi4udXNlUHJvbWlzZShmbiwgW2RhdGFiYXNlUGF0aCwgcXVlcnldLCB7IC4uLnVzZVByb21pc2VPcHRpb25zLCBvbkVycm9yOiBoYW5kbGVFcnJvciB9KSxcbiAgICBwZXJtaXNzaW9uVmlldyxcbiAgfTtcbn1cblxuZnVuY3Rpb24gUGVybWlzc2lvbkVycm9yU2NyZWVuKHByb3BzOiB7IHByaW1pbmc/OiBzdHJpbmcgfSkge1xuICBjb25zdCBtYWNvc1ZlbnR1cmFBbmRMYXRlciA9IHBhcnNlSW50KG9zLnJlbGVhc2UoKS5zcGxpdChcIi5cIilbMF0pID49IDIyO1xuICBjb25zdCBwcmVmZXJlbmNlc1N0cmluZyA9IG1hY29zVmVudHVyYUFuZExhdGVyID8gXCJTZXR0aW5nc1wiIDogXCJQcmVmZXJlbmNlc1wiO1xuXG4gIGNvbnN0IGFjdGlvbiA9IG1hY29zVmVudHVyYUFuZExhdGVyXG4gICAgPyB7XG4gICAgICAgIHRpdGxlOiBcIk9wZW4gU3lzdGVtIFNldHRpbmdzIC0+IFByaXZhY3lcIixcbiAgICAgICAgdGFyZ2V0OiBcIngtYXBwbGUuc3lzdGVtcHJlZmVyZW5jZXM6Y29tLmFwcGxlLnByZWZlcmVuY2Uuc2VjdXJpdHk/UHJpdmFjeV9BbGxGaWxlc1wiLFxuICAgICAgfVxuICAgIDoge1xuICAgICAgICB0aXRsZTogXCJPcGVuIFN5c3RlbSBQcmVmZXJlbmNlcyAtPiBTZWN1cml0eVwiLFxuICAgICAgICB0YXJnZXQ6IFwieC1hcHBsZS5zeXN0ZW1wcmVmZXJlbmNlczpjb20uYXBwbGUucHJlZmVyZW5jZS5zZWN1cml0eT9Qcml2YWN5X0FsbEZpbGVzXCIsXG4gICAgICB9O1xuXG4gIGlmIChlbnZpcm9ubWVudC5jb21tYW5kTW9kZSA9PT0gXCJtZW51LWJhclwiKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxNZW51QmFyRXh0cmEgaWNvbj17SWNvbi5XYXJuaW5nfSB0aXRsZT17ZW52aXJvbm1lbnQuY29tbWFuZE5hbWV9PlxuICAgICAgICA8TWVudUJhckV4dHJhLkl0ZW1cbiAgICAgICAgICB0aXRsZT1cIlJheWNhc3QgbmVlZHMgZnVsbCBkaXNrIGFjY2Vzc1wiXG4gICAgICAgICAgdG9vbHRpcD17YFlvdSBjYW4gcmV2ZXJ0IHRoaXMgYWNjZXNzIGluICR7cHJlZmVyZW5jZXNTdHJpbmd9IHdoZW5ldmVyIHlvdSB3YW50YH1cbiAgICAgICAgLz5cbiAgICAgICAge3Byb3BzLnByaW1pbmcgPyAoXG4gICAgICAgICAgPE1lbnVCYXJFeHRyYS5JdGVtXG4gICAgICAgICAgICB0aXRsZT17cHJvcHMucHJpbWluZ31cbiAgICAgICAgICAgIHRvb2x0aXA9e2BZb3UgY2FuIHJldmVydCB0aGlzIGFjY2VzcyBpbiAke3ByZWZlcmVuY2VzU3RyaW5nfSB3aGVuZXZlciB5b3Ugd2FudGB9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDxNZW51QmFyRXh0cmEuU2VwYXJhdG9yIC8+XG4gICAgICAgIDxNZW51QmFyRXh0cmEuSXRlbSB0aXRsZT17YWN0aW9uLnRpdGxlfSBvbkFjdGlvbj17KCkgPT4gb3BlbihhY3Rpb24udGFyZ2V0KX0gLz5cbiAgICAgIDwvTWVudUJhckV4dHJhPlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxMaXN0PlxuICAgICAgPExpc3QuRW1wdHlWaWV3XG4gICAgICAgIGljb249e3tcbiAgICAgICAgICBzb3VyY2U6IHtcbiAgICAgICAgICAgIGxpZ2h0OiBcImh0dHBzOi8vcmF5Y2FzdC5jb20vdXBsb2Fkcy9leHRlbnNpb25zLXV0aWxzLXNlY3VyaXR5LXBlcm1pc3Npb25zLWxpZ2h0LnBuZ1wiLFxuICAgICAgICAgICAgZGFyazogXCJodHRwczovL3JheWNhc3QuY29tL3VwbG9hZHMvZXh0ZW5zaW9ucy11dGlscy1zZWN1cml0eS1wZXJtaXNzaW9ucy1kYXJrLnBuZ1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgIH19XG4gICAgICAgIHRpdGxlPVwiUmF5Y2FzdCBuZWVkcyBmdWxsIGRpc2sgYWNjZXNzLlwiXG4gICAgICAgIGRlc2NyaXB0aW9uPXtgJHtcbiAgICAgICAgICBwcm9wcy5wcmltaW5nID8gcHJvcHMucHJpbWluZyArIFwiXFxuXCIgOiBcIlwiXG4gICAgICAgIH1Zb3UgY2FuIHJldmVydCB0aGlzIGFjY2VzcyBpbiAke3ByZWZlcmVuY2VzU3RyaW5nfSB3aGVuZXZlciB5b3Ugd2FudC5gfVxuICAgICAgICBhY3Rpb25zPXtcbiAgICAgICAgICA8QWN0aW9uUGFuZWw+XG4gICAgICAgICAgICA8QWN0aW9uLk9wZW4gey4uLmFjdGlvbn0gLz5cbiAgICAgICAgICA8L0FjdGlvblBhbmVsPlxuICAgICAgICB9XG4gICAgICAvPlxuICAgIDwvTGlzdD5cbiAgKTtcbn1cbiIsICJpbXBvcnQgeyBleGlzdHNTeW5jIH0gZnJvbSBcIm5vZGU6ZnNcIjtcbmltcG9ydCB7IGNvcHlGaWxlLCBta2Rpciwgd3JpdGVGaWxlIH0gZnJvbSBcIm5vZGU6ZnMvcHJvbWlzZXNcIjtcbmltcG9ydCBvcyBmcm9tIFwibm9kZTpvc1wiO1xuaW1wb3J0IGNoaWxkUHJvY2VzcyBmcm9tIFwibm9kZTpjaGlsZF9wcm9jZXNzXCI7XG5pbXBvcnQgcGF0aCBmcm9tIFwibm9kZTpwYXRoXCI7XG5pbXBvcnQgeyBnZXRTcGF3bmVkUHJvbWlzZSwgZ2V0U3Bhd25lZFJlc3VsdCB9IGZyb20gXCIuL2V4ZWMtdXRpbHNcIjtcbmltcG9ydCB7IGhhc2ggfSBmcm9tIFwiLi9oZWxwZXJzXCI7XG5cbmV4cG9ydCBjbGFzcyBQZXJtaXNzaW9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9IFwiUGVybWlzc2lvbkVycm9yXCI7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUGVybWlzc2lvbkVycm9yKGVycm9yOiB1bmtub3duKTogZXJyb3IgaXMgUGVybWlzc2lvbkVycm9yIHtcbiAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgZXJyb3IubmFtZSA9PT0gXCJQZXJtaXNzaW9uRXJyb3JcIjtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJhc2VFeGVjdXRlU1FMPFQgPSB1bmtub3duPihcbiAgZGF0YWJhc2VQYXRoOiBzdHJpbmcsXG4gIHF1ZXJ5OiBzdHJpbmcsXG4gIG9wdGlvbnM/OiB7XG4gICAgc2lnbmFsPzogQWJvcnRTaWduYWw7XG4gIH0sXG4pOiBQcm9taXNlPFRbXT4ge1xuICBpZiAoIWV4aXN0c1N5bmMoZGF0YWJhc2VQYXRoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBkYXRhYmFzZSBkb2VzIG5vdCBleGlzdFwiKTtcbiAgfVxuXG4gIGxldCBzcWxpdGUzOiB0eXBlb2YgaW1wb3J0KFwibm9kZTpzcWxpdGVcIik7XG4gIHRyeSB7XG4gICAgLy8gdGhpcyBpcyBhIGJpdCB1Z2x5IGJ1dCB3ZSBjYW4ndCBkaXJlY3RseSBpbXBvcnQgXCJub2RlOnNxbGl0ZVwiIGhlcmUgYmVjYXVzZSBwYXJjZWwgd2lsbCBob2lzdCBpdCBhbnl3YXkgYW5kIGl0IHdpbGwgYnJlYWsgd2hlbiBpdCdzIG5vdCBhdmFpbGFibGVcbiAgICBjb25zdCBkeW5hbWljSW1wb3J0ID0gKG1vZHVsZTogc3RyaW5nKSA9PiBpbXBvcnQobW9kdWxlKTtcbiAgICBzcWxpdGUzID0gYXdhaXQgZHluYW1pY0ltcG9ydChcIm5vZGU6c3FsaXRlXCIpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIC8vIElmIHNxbGl0ZTMgaXMgbm90IGF2YWlsYWJsZSwgd2UgZmFsbGJhY2sgdG8gdXNpbmcgdGhlIHNxbGl0ZTMgQ0xJIChhdmFpbGFibGUgb24gbWFjT1MgYW5kIExpbnV4IGJ5IGRlZmF1bHQpLlxuICAgIHJldHVybiBzcWxpdGVGYWxsYmFjazxUPihkYXRhYmFzZVBhdGgsIHF1ZXJ5LCBvcHRpb25zKTtcbiAgfVxuXG4gIGxldCBkYiA9IG5ldyBzcWxpdGUzLkRhdGFiYXNlU3luYyhkYXRhYmFzZVBhdGgsIHsgb3BlbjogZmFsc2UsIHJlYWRPbmx5OiB0cnVlIH0pO1xuXG4gIGNvbnN0IGFib3J0U2lnbmFsID0gb3B0aW9ucz8uc2lnbmFsO1xuXG4gIHRyeSB7XG4gICAgZGIub3BlbigpO1xuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgIGlmIChlcnJvci5tZXNzYWdlLm1hdGNoKFwiKDUpXCIpIHx8IGVycm9yLm1lc3NhZ2UubWF0Y2goXCIoMTQpXCIpKSB7XG4gICAgICAvLyBUaGF0IG1lYW5zIHRoYXQgdGhlIERCIGlzIGJ1c3kgYmVjYXVzZSBvZiBhbm90aGVyIGFwcCBpcyBsb2NraW5nIGl0XG4gICAgICAvLyBUaGlzIGhhcHBlbnMgd2hlbiBDaHJvbWUgb3IgQXJjIGlzIG9wZW5lZDogdGhleSBsb2NrIHRoZSBIaXN0b3J5IGRiLlxuICAgICAgLy8gQXMgYW4gdWdseSB3b3JrYXJvdW5kLCB3ZSBkdXBsaWNhdGUgdGhlIGZpbGUgYW5kIHJlYWQgdGhhdCBpbnN0ZWFkXG4gICAgICAvLyAod2l0aCB2ZnMgdW5peCAtIG5vbmUgdG8ganVzdCBub3QgY2FyZSBhYm91dCBsb2NrcylcbiAgICAgIGxldCB3b3JrYXJvdW5kQ29waWVkRGI6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAgIGlmICghd29ya2Fyb3VuZENvcGllZERiKSB7XG4gICAgICAgIGNvbnN0IHRlbXBGb2xkZXIgPSBwYXRoLmpvaW4ob3MudG1wZGlyKCksIFwidXNlU1FMXCIsIGhhc2goZGF0YWJhc2VQYXRoKSk7XG4gICAgICAgIGF3YWl0IG1rZGlyKHRlbXBGb2xkZXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgICAgICBjaGVja0Fib3J0ZWQoYWJvcnRTaWduYWwpO1xuXG4gICAgICAgIHdvcmthcm91bmRDb3BpZWREYiA9IHBhdGguam9pbih0ZW1wRm9sZGVyLCBcImRiLmRiXCIpO1xuICAgICAgICBhd2FpdCBjb3B5RmlsZShkYXRhYmFzZVBhdGgsIHdvcmthcm91bmRDb3BpZWREYik7XG5cbiAgICAgICAgYXdhaXQgd3JpdGVGaWxlKHdvcmthcm91bmRDb3BpZWREYiArIFwiLXNobVwiLCBcIlwiKTtcbiAgICAgICAgYXdhaXQgd3JpdGVGaWxlKHdvcmthcm91bmRDb3BpZWREYiArIFwiLXdhbFwiLCBcIlwiKTtcblxuICAgICAgICBjaGVja0Fib3J0ZWQoYWJvcnRTaWduYWwpO1xuICAgICAgfVxuXG4gICAgICBkYiA9IG5ldyBzcWxpdGUzLkRhdGFiYXNlU3luYyh3b3JrYXJvdW5kQ29waWVkRGIsIHsgb3BlbjogZmFsc2UsIHJlYWRPbmx5OiB0cnVlIH0pO1xuICAgICAgZGIub3BlbigpO1xuICAgICAgY2hlY2tBYm9ydGVkKGFib3J0U2lnbmFsKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBzdGF0ZW1lbnQgPSBkYi5wcmVwYXJlKHF1ZXJ5KTtcbiAgY2hlY2tBYm9ydGVkKGFib3J0U2lnbmFsKTtcblxuICBjb25zdCByZXN1bHQgPSBzdGF0ZW1lbnQuYWxsKCk7XG5cbiAgZGIuY2xvc2UoKTtcblxuICByZXR1cm4gcmVzdWx0IGFzIFRbXTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc3FsaXRlRmFsbGJhY2s8VCA9IHVua25vd24+KFxuICBkYXRhYmFzZVBhdGg6IHN0cmluZyxcbiAgcXVlcnk6IHN0cmluZyxcbiAgb3B0aW9ucz86IHtcbiAgICBzaWduYWw/OiBBYm9ydFNpZ25hbDtcbiAgfSxcbik6IFByb21pc2U8VFtdPiB7XG4gIGNvbnN0IGFib3J0U2lnbmFsID0gb3B0aW9ucz8uc2lnbmFsO1xuXG4gIGxldCBzcGF3bmVkID0gY2hpbGRQcm9jZXNzLnNwYXduKFwic3FsaXRlM1wiLCBbXCItLWpzb25cIiwgXCItLXJlYWRvbmx5XCIsIGRhdGFiYXNlUGF0aCwgcXVlcnldLCB7IHNpZ25hbDogYWJvcnRTaWduYWwgfSk7XG4gIGxldCBzcGF3bmVkUHJvbWlzZSA9IGdldFNwYXduZWRQcm9taXNlKHNwYXduZWQpO1xuICBsZXQgW3sgZXJyb3IsIGV4aXRDb2RlLCBzaWduYWwgfSwgc3Rkb3V0UmVzdWx0LCBzdGRlcnJSZXN1bHRdID0gYXdhaXQgZ2V0U3Bhd25lZFJlc3VsdDxzdHJpbmc+KFxuICAgIHNwYXduZWQsXG4gICAgeyBlbmNvZGluZzogXCJ1dGYtOFwiIH0sXG4gICAgc3Bhd25lZFByb21pc2UsXG4gICk7XG4gIGNoZWNrQWJvcnRlZChhYm9ydFNpZ25hbCk7XG5cbiAgaWYgKHN0ZGVyclJlc3VsdC5tYXRjaChcIig1KVwiKSB8fCBzdGRlcnJSZXN1bHQubWF0Y2goXCIoMTQpXCIpKSB7XG4gICAgLy8gVGhhdCBtZWFucyB0aGF0IHRoZSBEQiBpcyBidXN5IGJlY2F1c2Ugb2YgYW5vdGhlciBhcHAgaXMgbG9ja2luZyBpdFxuICAgIC8vIFRoaXMgaGFwcGVucyB3aGVuIENocm9tZSBvciBBcmMgaXMgb3BlbmVkOiB0aGV5IGxvY2sgdGhlIEhpc3RvcnkgZGIuXG4gICAgLy8gQXMgYW4gdWdseSB3b3JrYXJvdW5kLCB3ZSBkdXBsaWNhdGUgdGhlIGZpbGUgYW5kIHJlYWQgdGhhdCBpbnN0ZWFkXG4gICAgLy8gKHdpdGggdmZzIHVuaXggLSBub25lIHRvIGp1c3Qgbm90IGNhcmUgYWJvdXQgbG9ja3MpXG4gICAgbGV0IHdvcmthcm91bmRDb3BpZWREYjogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIGlmICghd29ya2Fyb3VuZENvcGllZERiKSB7XG4gICAgICBjb25zdCB0ZW1wRm9sZGVyID0gcGF0aC5qb2luKG9zLnRtcGRpcigpLCBcInVzZVNRTFwiLCBoYXNoKGRhdGFiYXNlUGF0aCkpO1xuICAgICAgYXdhaXQgbWtkaXIodGVtcEZvbGRlciwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgICBjaGVja0Fib3J0ZWQoYWJvcnRTaWduYWwpO1xuXG4gICAgICB3b3JrYXJvdW5kQ29waWVkRGIgPSBwYXRoLmpvaW4odGVtcEZvbGRlciwgXCJkYi5kYlwiKTtcbiAgICAgIGF3YWl0IGNvcHlGaWxlKGRhdGFiYXNlUGF0aCwgd29ya2Fyb3VuZENvcGllZERiKTtcblxuICAgICAgYXdhaXQgd3JpdGVGaWxlKHdvcmthcm91bmRDb3BpZWREYiArIFwiLXNobVwiLCBcIlwiKTtcbiAgICAgIGF3YWl0IHdyaXRlRmlsZSh3b3JrYXJvdW5kQ29waWVkRGIgKyBcIi13YWxcIiwgXCJcIik7XG5cbiAgICAgIGNoZWNrQWJvcnRlZChhYm9ydFNpZ25hbCk7XG4gICAgfVxuXG4gICAgc3Bhd25lZCA9IGNoaWxkUHJvY2Vzcy5zcGF3bihcInNxbGl0ZTNcIiwgW1wiLS1qc29uXCIsIFwiLS1yZWFkb25seVwiLCBcIi0tdmZzXCIsIFwidW5peC1ub25lXCIsIHdvcmthcm91bmRDb3BpZWREYiwgcXVlcnldLCB7XG4gICAgICBzaWduYWw6IGFib3J0U2lnbmFsLFxuICAgIH0pO1xuICAgIHNwYXduZWRQcm9taXNlID0gZ2V0U3Bhd25lZFByb21pc2Uoc3Bhd25lZCk7XG4gICAgW3sgZXJyb3IsIGV4aXRDb2RlLCBzaWduYWwgfSwgc3Rkb3V0UmVzdWx0LCBzdGRlcnJSZXN1bHRdID0gYXdhaXQgZ2V0U3Bhd25lZFJlc3VsdDxzdHJpbmc+KFxuICAgICAgc3Bhd25lZCxcbiAgICAgIHsgZW5jb2Rpbmc6IFwidXRmLThcIiB9LFxuICAgICAgc3Bhd25lZFByb21pc2UsXG4gICAgKTtcbiAgICBjaGVja0Fib3J0ZWQoYWJvcnRTaWduYWwpO1xuICB9XG5cbiAgaWYgKGVycm9yIHx8IGV4aXRDb2RlICE9PSAwIHx8IHNpZ25hbCAhPT0gbnVsbCkge1xuICAgIGlmIChzdGRlcnJSZXN1bHQuaW5jbHVkZXMoXCJhdXRob3JpemF0aW9uIGRlbmllZFwiKSkge1xuICAgICAgdGhyb3cgbmV3IFBlcm1pc3Npb25FcnJvcihcIllvdSBkbyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIGFjY2VzcyB0aGUgZGF0YWJhc2UuXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3Ioc3RkZXJyUmVzdWx0IHx8IFwiVW5rbm93biBlcnJvclwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gSlNPTi5wYXJzZShzdGRvdXRSZXN1bHQudHJpbSgpIHx8IFwiW11cIikgYXMgVFtdO1xufVxuXG5mdW5jdGlvbiBjaGVja0Fib3J0ZWQoc2lnbmFsPzogQWJvcnRTaWduYWwpIHtcbiAgaWYgKHNpZ25hbD8uYWJvcnRlZCkge1xuICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFwiYWJvcnRlZFwiKTtcbiAgICBlcnJvci5uYW1lID0gXCJBYm9ydEVycm9yXCI7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBGb3JtIH0gZnJvbSBcIkByYXljYXN0L2FwaVwiO1xuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUNhbGxiYWNrLCB1c2VNZW1vLCB1c2VSZWYsIFNldFN0YXRlQWN0aW9uIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VMYXRlc3QgfSBmcm9tIFwiLi91c2VMYXRlc3RcIjtcblxuLyoqXG4gKiBTaG9ydGhhbmRzIGZvciBjb21tb24gdmFsaWRhdGlvbiBjYXNlc1xuICovXG5leHBvcnQgZW51bSBGb3JtVmFsaWRhdGlvbiB7XG4gIC8qKiBTaG93IGFuIGVycm9yIHdoZW4gdGhlIHZhbHVlIG9mIHRoZSBpdGVtIGlzIGVtcHR5ICovXG4gIFJlcXVpcmVkID0gXCJyZXF1aXJlZFwiLFxufVxuXG50eXBlIFZhbGlkYXRpb25FcnJvciA9IHN0cmluZyB8IHVuZGVmaW5lZCB8IG51bGw7XG50eXBlIFZhbGlkYXRvcjxWYWx1ZVR5cGU+ID0gKCh2YWx1ZTogVmFsdWVUeXBlIHwgdW5kZWZpbmVkKSA9PiBWYWxpZGF0aW9uRXJyb3IpIHwgRm9ybVZhbGlkYXRpb247XG5cbmZ1bmN0aW9uIHZhbGlkYXRpb25FcnJvcjxWYWx1ZVR5cGU+KFxuICB2YWxpZGF0aW9uOiBWYWxpZGF0b3I8VmFsdWVUeXBlPiB8IHVuZGVmaW5lZCxcbiAgdmFsdWU6IFZhbHVlVHlwZSB8IHVuZGVmaW5lZCxcbik6IFZhbGlkYXRpb25FcnJvciB7XG4gIGlmICh2YWxpZGF0aW9uKSB7XG4gICAgaWYgKHR5cGVvZiB2YWxpZGF0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiB2YWxpZGF0aW9uKHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZhbGlkYXRpb24gPT09IEZvcm1WYWxpZGF0aW9uLlJlcXVpcmVkKSB7XG4gICAgICBsZXQgdmFsdWVJc1ZhbGlkID0gdHlwZW9mIHZhbHVlICE9PSBcInVuZGVmaW5lZFwiICYmIHZhbHVlICE9PSBudWxsO1xuICAgICAgaWYgKHZhbHVlSXNWYWxpZCkge1xuICAgICAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgIHZhbHVlSXNWYWxpZCA9IHZhbHVlLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgdmFsdWVJc1ZhbGlkID0gdmFsdWUubGVuZ3RoID4gMDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICAgIHZhbHVlSXNWYWxpZCA9IHZhbHVlLmdldFRpbWUoKSA+IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghdmFsdWVJc1ZhbGlkKSB7XG4gICAgICAgIHJldHVybiBcIlRoZSBpdGVtIGlzIHJlcXVpcmVkXCI7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnR5cGUgVmFsaWRhdGlvbjxUIGV4dGVuZHMgRm9ybS5WYWx1ZXM+ID0geyBbaWQgaW4ga2V5b2YgVF0/OiBWYWxpZGF0b3I8VFtpZF0+IH07XG5cbmludGVyZmFjZSBGb3JtUHJvcHM8VCBleHRlbmRzIEZvcm0uVmFsdWVzPiB7XG4gIC8qKiBGdW5jdGlvbiB0byBwYXNzIHRvIHRoZSBgb25TdWJtaXRgIHByb3Agb2YgdGhlIGA8QWN0aW9uLlN1Ym1pdEZvcm0+YCBlbGVtZW50LiBJdCB3cmFwcyB0aGUgaW5pdGlhbCBgb25TdWJtaXRgIGFyZ3VtZW50IHdpdGggc29tZSBnb29kaWVzIHJlbGF0ZWQgdG8gdGhlIHZhbGlkYXRpb24uICovXG4gIGhhbmRsZVN1Ym1pdDogKHZhbHVlczogVCkgPT4gdm9pZCB8IGJvb2xlYW4gfCBQcm9taXNlPHZvaWQgfCBib29sZWFuPjtcbiAgLyoqIFRoZSBwcm9wcyB0aGF0IG11c3QgYmUgcGFzc2VkIHRvIHRoZSBgPEZvcm0uSXRlbT5gIGVsZW1lbnRzIHRvIGhhbmRsZSB0aGUgdmFsaWRhdGlvbnMuICovXG4gIGl0ZW1Qcm9wczoge1xuICAgIFtpZCBpbiBrZXlvZiBSZXF1aXJlZDxUPl06IFBhcnRpYWw8Rm9ybS5JdGVtUHJvcHM8VFtpZF0+PiAmIHtcbiAgICAgIGlkOiBzdHJpbmc7XG4gICAgfTtcbiAgfTtcbiAgLyoqIEZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gcHJvZ3JhbW1hdGljYWxseSBzZXQgdGhlIHZhbGlkYXRpb24gb2YgYSBzcGVjaWZpYyBmaWVsZC4gKi9cbiAgc2V0VmFsaWRhdGlvbkVycm9yOiAoaWQ6IGtleW9mIFQsIGVycm9yOiBWYWxpZGF0aW9uRXJyb3IpID0+IHZvaWQ7XG4gIC8qKiBGdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIHByb2dyYW1tYXRpY2FsbHkgc2V0IHRoZSB2YWx1ZSBvZiBhIHNwZWNpZmljIGZpZWxkLiAqL1xuICBzZXRWYWx1ZTogPEsgZXh0ZW5kcyBrZXlvZiBUPihpZDogSywgdmFsdWU6IFNldFN0YXRlQWN0aW9uPFRbS10+KSA9PiB2b2lkO1xuICAvKiogVGhlIGN1cnJlbnQgdmFsdWVzIG9mIHRoZSBmb3JtLiAqL1xuICB2YWx1ZXM6IFQ7XG4gIC8qKiBGdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIHByb2dyYW1tYXRpY2FsbHkgZm9jdXMgYSBzcGVjaWZpYyBmaWVsZC4gKi9cbiAgZm9jdXM6IChpZDoga2V5b2YgVCkgPT4gdm9pZDtcbiAgLyoqIEZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVzZXQgdGhlIHZhbHVlcyBvZiB0aGUgRm9ybS4gKi9cbiAgcmVzZXQ6IChpbml0aWFsVmFsdWVzPzogUGFydGlhbDxUPikgPT4gdm9pZDtcbn1cblxuLyoqXG4gKiBIb29rIHRoYXQgcHJvdmlkZXMgYSBoaWdoLWxldmVsIGludGVyZmFjZSB0byB3b3JrIHdpdGggRm9ybXMsIGFuZCBtb3JlIHBhcnRpY3VsYXJseSwgd2l0aCBGb3JtIHZhbGlkYXRpb25zLiBJdCBpbmNvcnBvcmF0ZXMgYWxsIHRoZSBnb29kIHByYWN0aWNlcyB0byBwcm92aWRlIGEgZ3JlYXQgVXNlciBFeHBlcmllbmNlIGZvciB5b3VyIEZvcm1zLlxuICpcbiAqIEByZXR1cm5zIGFuIG9iamVjdCB3aGljaCBjb250YWlucyB0aGUgbmVjZXNzYXJ5IG1ldGhvZHMgYW5kIHByb3BzIHRvIHByb3ZpZGUgYSBnb29kIFVzZXIgRXhwZXJpZW5jZSBpbiB5b3VyIEZvcm0uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogaW1wb3J0IHsgQWN0aW9uLCBBY3Rpb25QYW5lbCwgRm9ybSwgc2hvd1RvYXN0LCBUb2FzdCB9IGZyb20gXCJAcmF5Y2FzdC9hcGlcIjtcbiAqIGltcG9ydCB7IHVzZUZvcm0sIEZvcm1WYWxpZGF0aW9uIH0gZnJvbSBcIkByYXljYXN0L3V0aWxzXCI7XG4gKlxuICogaW50ZXJmYWNlIFNpZ25VcEZvcm1WYWx1ZXMge1xuICogICBuaWNrbmFtZTogc3RyaW5nO1xuICogICBwYXNzd29yZDogc3RyaW5nO1xuICogfVxuICpcbiAqIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbW1hbmQoKSB7XG4gKiAgIGNvbnN0IHsgaGFuZGxlU3VibWl0LCBpdGVtUHJvcHMgfSA9IHVzZUZvcm08U2lnblVwRm9ybVZhbHVlcz4oe1xuICogICAgIG9uU3VibWl0KHZhbHVlcykge1xuICogICAgICAgc2hvd1RvYXN0KFRvYXN0LlN0eWxlLlN1Y2Nlc3MsIFwiWWF5IVwiLCBgJHt2YWx1ZXMubmlja25hbWV9IGFjY291bnQgY3JlYXRlZGApO1xuICogICAgIH0sXG4gKiAgICAgdmFsaWRhdGlvbjoge1xuICogICAgICAgbmlja25hbWU6IEZvcm1WYWxpZGF0aW9uLlJlcXVpcmVkLFxuICogICAgICAgcGFzc3dvcmQ6ICh2YWx1ZSkgPT4ge1xuICogICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUubGVuZ3RoIDwgOCkge1xuICogICAgICAgICAgIHJldHVybiBcIlBhc3N3b3JkIG11c3QgYmUgYXQgbGVhc3QgOCBzeW1ib2xzXCI7XG4gKiAgICAgICAgIH0gZWxzZSBpZiAoIXZhbHVlKSB7XG4gKiAgICAgICAgICAgcmV0dXJuIFwiVGhlIGl0ZW0gaXMgcmVxdWlyZWRcIjtcbiAqICAgICAgICAgfVxuICogICAgICAgfSxcbiAqICAgICB9LFxuICogICB9KTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPEZvcm1cbiAqICAgICAgIGFjdGlvbnM9e1xuICogICAgICAgICA8QWN0aW9uUGFuZWw+XG4gKiAgICAgICAgICAgPEFjdGlvbi5TdWJtaXRGb3JtIHRpdGxlPVwiU3VibWl0XCIgb25TdWJtaXQ9e2hhbmRsZVN1Ym1pdH0gLz5cbiAqICAgICAgICAgPC9BY3Rpb25QYW5lbD5cbiAqICAgICAgIH1cbiAqICAgICA+XG4gKiAgICAgICA8Rm9ybS5UZXh0RmllbGQgdGl0bGU9XCJOaWNrbmFtZVwiIHBsYWNlaG9sZGVyPVwiRW50ZXIgeW91ciBuaWNrbmFtZVwiIHsuLi5pdGVtUHJvcHMubmlja25hbWV9IC8+XG4gKiAgICAgICA8Rm9ybS5QYXNzd29yZEZpZWxkXG4gKiAgICAgICAgIHRpdGxlPVwiUGFzc3dvcmRcIlxuICogICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHBhc3N3b3JkIGF0IGxlYXN0IDggY2hhcmFjdGVycyBsb25nXCJcbiAqICAgICAgICAgey4uLml0ZW1Qcm9wcy5wYXNzd29yZH1cbiAqICAgICAgIC8+XG4gKiAgICAgPC9Gb3JtPlxuICogICApO1xuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VGb3JtPFQgZXh0ZW5kcyBGb3JtLlZhbHVlcz4ocHJvcHM6IHtcbiAgLyoqIENhbGxiYWNrIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgZm9ybSBpcyBzdWJtaXR0ZWQgYW5kIGFsbCB2YWxpZGF0aW9ucyBwYXNzLiAqL1xuICBvblN1Ym1pdDogKHZhbHVlczogVCkgPT4gdm9pZCB8IGJvb2xlYW4gfCBQcm9taXNlPHZvaWQgfCBib29sZWFuPjtcbiAgLyoqIFRoZSBpbml0aWFsIHZhbHVlcyB0byBzZXQgd2hlbiB0aGUgRm9ybSBpcyBmaXJzdCByZW5kZXJlZC4gKi9cbiAgaW5pdGlhbFZhbHVlcz86IFBhcnRpYWw8VD47XG4gIC8qKiBUaGUgdmFsaWRhdGlvbiBydWxlcyBmb3IgdGhlIEZvcm0uIEEgdmFsaWRhdGlvbiBmb3IgYSBGb3JtIGl0ZW0gaXMgYSBmdW5jdGlvbiB0aGF0IHRha2VzIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBpdGVtIGFzIGFuIGFyZ3VtZW50IGFuZCBtdXN0IHJldHVybiBhIHN0cmluZyB3aGVuIHRoZSB2YWxpZGF0aW9uIGlzIGZhaWxpbmcuXG4gICAqXG4gICAqIFRoZXJlIGFyZSBhbHNvIHNvbWUgc2hvcnRoYW5kcyBmb3IgY29tbW9uIGNhc2VzLCBzZWUge0BsaW5rIEZvcm1WYWxpZGF0aW9ufS5cbiAgICogKi9cbiAgdmFsaWRhdGlvbj86IFZhbGlkYXRpb248VD47XG59KTogRm9ybVByb3BzPFQ+IHtcbiAgY29uc3QgeyBvblN1Ym1pdDogX29uU3VibWl0LCB2YWxpZGF0aW9uLCBpbml0aWFsVmFsdWVzID0ge30gfSA9IHByb3BzO1xuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgaXQncyBmaW5lIGlmIHdlIGRvbid0IHNwZWNpZnkgYWxsIHRoZSB2YWx1ZXNcbiAgY29uc3QgW3ZhbHVlcywgc2V0VmFsdWVzXSA9IHVzZVN0YXRlPFQ+KGluaXRpYWxWYWx1ZXMpO1xuICBjb25zdCBbZXJyb3JzLCBzZXRFcnJvcnNdID0gdXNlU3RhdGU8eyBbaWQgaW4ga2V5b2YgVF0/OiBWYWxpZGF0aW9uRXJyb3IgfT4oe30pO1xuICBjb25zdCByZWZzID0gdXNlUmVmPHsgW2lkIGluIGtleW9mIFRdPzogRm9ybS5JdGVtUmVmZXJlbmNlIH0+KHt9KTtcblxuICBjb25zdCBsYXRlc3RWYWxpZGF0aW9uID0gdXNlTGF0ZXN0PFZhbGlkYXRpb248VD4+KHZhbGlkYXRpb24gfHwge30pO1xuICBjb25zdCBsYXRlc3RPblN1Ym1pdCA9IHVzZUxhdGVzdChfb25TdWJtaXQpO1xuXG4gIGNvbnN0IGZvY3VzID0gdXNlQ2FsbGJhY2soXG4gICAgKGlkOiBrZXlvZiBUKSA9PiB7XG4gICAgICByZWZzLmN1cnJlbnRbaWRdPy5mb2N1cygpO1xuICAgIH0sXG4gICAgW3JlZnNdLFxuICApO1xuXG4gIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jICh2YWx1ZXM6IFQpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICAgIGxldCB2YWxpZGF0aW9uRXJyb3JzOiBmYWxzZSB8IHsgW2tleSBpbiBrZXlvZiBUXT86IFZhbGlkYXRpb25FcnJvciB9ID0gZmFsc2U7XG4gICAgICBmb3IgKGNvbnN0IFtpZCwgdmFsaWRhdGlvbl0gb2YgT2JqZWN0LmVudHJpZXMobGF0ZXN0VmFsaWRhdGlvbi5jdXJyZW50KSkge1xuICAgICAgICBjb25zdCBlcnJvciA9IHZhbGlkYXRpb25FcnJvcih2YWxpZGF0aW9uLCB2YWx1ZXNbaWRdKTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgaWYgKCF2YWxpZGF0aW9uRXJyb3JzKSB7XG4gICAgICAgICAgICB2YWxpZGF0aW9uRXJyb3JzID0ge307XG4gICAgICAgICAgICAvLyB3ZSBmb2N1cyB0aGUgZmlyc3QgaXRlbSB0aGF0IGhhcyBhbiBlcnJvclxuICAgICAgICAgICAgZm9jdXMoaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YWxpZGF0aW9uRXJyb3JzW2lkIGFzIGtleW9mIFRdID0gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh2YWxpZGF0aW9uRXJyb3JzKSB7XG4gICAgICAgIHNldEVycm9ycyh2YWxpZGF0aW9uRXJyb3JzKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbGF0ZXN0T25TdWJtaXQuY3VycmVudCh2YWx1ZXMpO1xuICAgICAgcmV0dXJuIHR5cGVvZiByZXN1bHQgPT09IFwiYm9vbGVhblwiID8gcmVzdWx0IDogdHJ1ZTtcbiAgICB9LFxuICAgIFtsYXRlc3RWYWxpZGF0aW9uLCBsYXRlc3RPblN1Ym1pdCwgZm9jdXNdLFxuICApO1xuXG4gIGNvbnN0IHNldFZhbGlkYXRpb25FcnJvciA9IHVzZUNhbGxiYWNrKFxuICAgIChpZDoga2V5b2YgVCwgZXJyb3I6IFZhbGlkYXRpb25FcnJvcikgPT4ge1xuICAgICAgc2V0RXJyb3JzKChlcnJvcnMpID0+ICh7IC4uLmVycm9ycywgW2lkXTogZXJyb3IgfSkpO1xuICAgIH0sXG4gICAgW3NldEVycm9yc10sXG4gICk7XG5cbiAgY29uc3Qgc2V0VmFsdWUgPSB1c2VDYWxsYmFjayhcbiAgICBmdW5jdGlvbiA8SyBleHRlbmRzIGtleW9mIFQ+KGlkOiBLLCB2YWx1ZTogU2V0U3RhdGVBY3Rpb248VFtLXT4pIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVFMgaXMgYWx3YXlzIGNvbmZ1c2VkIGFib3V0IFNldFN0YXRlQWN0aW9uLCBidXQgaXQncyBmaW5lIGhlcmVcbiAgICAgIHNldFZhbHVlcygodmFsdWVzKSA9PiAoeyAuLi52YWx1ZXMsIFtpZF06IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdmFsdWUodmFsdWVzW2lkXSkgOiB2YWx1ZSB9KSk7XG4gICAgfSxcbiAgICBbc2V0VmFsdWVzXSxcbiAgKTtcblxuICBjb25zdCBpdGVtUHJvcHMgPSB1c2VNZW1vPHsgW2lkIGluIGtleW9mIFJlcXVpcmVkPFQ+XTogUGFydGlhbDxGb3JtLkl0ZW1Qcm9wczxUW2lkXT4+ICYgeyBpZDogc3RyaW5nIH0gfT4oKCkgPT4ge1xuICAgIC8vIHdlIGhhdmUgdG8gdXNlIGEgcHJveHkgYmVjYXVzZSB3ZSBkb24ndCBhY3R1YWxseSBoYXZlIGFueSBvYmplY3QgdG8gaXRlcmF0ZSB0aHJvdWdoXG4gICAgLy8gc28gaW5zdGVhZCB3ZSBkeW5hbWljYWxseSBjcmVhdGUgdGhlIHByb3BzIHdoZW4gcmVxdWlyZWRcbiAgICByZXR1cm4gbmV3IFByb3h5PHsgW2lkIGluIGtleW9mIFJlcXVpcmVkPFQ+XTogUGFydGlhbDxGb3JtLkl0ZW1Qcm9wczxUW2lkXT4+ICYgeyBpZDogc3RyaW5nIH0gfT4oXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRoZSB3aG9sZSBwb2ludCBvZiBhIHByb3h5Li4uXG4gICAgICB7fSxcbiAgICAgIHtcbiAgICAgICAgZ2V0KHRhcmdldCwgaWQ6IGtleW9mIFQpIHtcbiAgICAgICAgICBjb25zdCB2YWxpZGF0aW9uID0gbGF0ZXN0VmFsaWRhdGlvbi5jdXJyZW50W2lkXTtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1tpZF07XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9uQ2hhbmdlKHZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmIChlcnJvcnNbaWRdKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSB2YWxpZGF0aW9uRXJyb3IodmFsaWRhdGlvbiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgIHNldFZhbGlkYXRpb25FcnJvcihpZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc2V0VmFsdWUoaWQsIHZhbHVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkJsdXIoZXZlbnQpIHtcbiAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSB2YWxpZGF0aW9uRXJyb3IodmFsaWRhdGlvbiwgZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgc2V0VmFsaWRhdGlvbkVycm9yKGlkLCBlcnJvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZXJyb3JzW2lkXSxcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgLy8gd2Ugc2hvdWxkbid0IHJldHVybiBgdW5kZWZpbmVkYCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhbiB1bmNvbnRyb2xsZWQgY29tcG9uZW50XG4gICAgICAgICAgICB2YWx1ZTogdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiID8gbnVsbCA6IHZhbHVlLFxuICAgICAgICAgICAgcmVmOiAoaW5zdGFuY2U6IEZvcm0uSXRlbVJlZmVyZW5jZSkgPT4ge1xuICAgICAgICAgICAgICByZWZzLmN1cnJlbnRbaWRdID0gaW5zdGFuY2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0gYXMgUGFydGlhbDxGb3JtLkl0ZW1Qcm9wczxUW2tleW9mIFRdPj4gJiB7IGlkOiBzdHJpbmcgfTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgKTtcbiAgfSwgW2Vycm9ycywgbGF0ZXN0VmFsaWRhdGlvbiwgc2V0VmFsaWRhdGlvbkVycm9yLCB2YWx1ZXMsIHJlZnMsIHNldFZhbHVlXSk7XG5cbiAgY29uc3QgcmVzZXQgPSB1c2VDYWxsYmFjayhcbiAgICAodmFsdWVzPzogUGFydGlhbDxUPikgPT4ge1xuICAgICAgc2V0RXJyb3JzKHt9KTtcbiAgICAgIE9iamVjdC5lbnRyaWVzKHJlZnMuY3VycmVudCkuZm9yRWFjaCgoW2lkLCByZWZdKSA9PiB7XG4gICAgICAgIGlmICghdmFsdWVzPy5baWRdKSB7XG4gICAgICAgICAgcmVmPy5yZXNldCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICh2YWx1ZXMpIHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBpdCdzIGZpbmUgaWYgd2UgZG9uJ3Qgc3BlY2lmeSBhbGwgdGhlIHZhbHVlc1xuICAgICAgICBzZXRWYWx1ZXModmFsdWVzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtzZXRWYWx1ZXMsIHNldEVycm9ycywgcmVmc10sXG4gICk7XG5cbiAgcmV0dXJuIHsgaGFuZGxlU3VibWl0LCBzZXRWYWxpZGF0aW9uRXJyb3IsIHNldFZhbHVlLCB2YWx1ZXMsIGl0ZW1Qcm9wcywgZm9jdXMsIHJlc2V0IH07XG59XG4iLCAiaW1wb3J0IHsgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQUkgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG5pbXBvcnQgeyBQcm9taXNlT3B0aW9ucywgdXNlUHJvbWlzZSB9IGZyb20gXCIuL3VzZVByb21pc2VcIjtcbmltcG9ydCB7IEZ1bmN0aW9uUmV0dXJuaW5nUHJvbWlzZSB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbi8qKlxuICogU3RyZWFtIGEgcHJvbXB0IGNvbXBsZXRpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IERldGFpbCwgTGF1bmNoUHJvcHMgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG4gKiBpbXBvcnQgeyB1c2UgQUkgfSBmcm9tIFwiQHJheWNhc3QvdXRpbHNcIjtcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb21tYW5kKHByb3BzOiBMYXVuY2hQcm9wczx7IGFyZ3VtZW50czogeyBwcm9tcHQ6IHN0cmluZyB9IH0+KSB7XG4gKiAgIGNvbnN0IHsgaXNMb2FkaW5nLCBkYXRhIH0gPSB1c2VBSShwcm9wcy5hcmd1bWVudHMucHJvbXB0KTtcbiAqXG4gKiAgIHJldHVybiA8RGV0YWlsIGlzTG9hZGluZz17aXNMb2FkaW5nfSBtYXJrZG93bj17ZGF0YX0gLz47XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUFJKFxuICBwcm9tcHQ6IHN0cmluZyxcbiAgb3B0aW9uczoge1xuICAgIC8qKlxuICAgICAqIENvbmNyZXRlIHRhc2tzLCBzdWNoIGFzIGZpeGluZyBncmFtbWFyLCByZXF1aXJlIGxlc3MgY3JlYXRpdml0eSB3aGlsZSBvcGVuLWVuZGVkIHF1ZXN0aW9ucywgc3VjaCBhcyBnZW5lcmF0aW5nIGlkZWFzLCByZXF1aXJlIG1vcmUuXG4gICAgICogSWYgYSBudW1iZXIgaXMgcGFzc2VkLCBpdCBuZWVkcyB0byBiZSBpbiB0aGUgcmFuZ2UgMC0yLiBGb3IgbGFyZ2VyIHZhbHVlcywgMiB3aWxsIGJlIHVzZWQuIEZvciBsb3dlciB2YWx1ZXMsIDAgd2lsbCBiZSB1c2VkLlxuICAgICAqL1xuICAgIGNyZWF0aXZpdHk/OiBBSS5DcmVhdGl2aXR5O1xuICAgIC8qKlxuICAgICAqIFRoZSBBSSBtb2RlbCB0byB1c2UgdG8gYW5zd2VyIHRvIHRoZSBwcm9tcHQuXG4gICAgICovXG4gICAgbW9kZWw/OiBBSS5Nb2RlbDtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIHN0cmVhbSB0aGUgYW5zd2VyIG9yIG9ubHkgdXBkYXRlIHRoZSBkYXRhIHdoZW4gdGhlIGVudGlyZSBhbnN3ZXIgaGFzIGJlZW4gcmVjZWl2ZWQuXG4gICAgICovXG4gICAgc3RyZWFtPzogYm9vbGVhbjtcbiAgfSAmIE9taXQ8UHJvbWlzZU9wdGlvbnM8RnVuY3Rpb25SZXR1cm5pbmdQcm9taXNlPiwgXCJhYm9ydGFibGVcIj4gPSB7fSxcbikge1xuICBjb25zdCB7IGNyZWF0aXZpdHksIHN0cmVhbSwgbW9kZWwsIC4uLnVzZVByb21pc2VPcHRpb25zIH0gPSBvcHRpb25zO1xuICBjb25zdCBbZGF0YSwgc2V0RGF0YV0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3QgYWJvcnRhYmxlID0gdXNlUmVmPEFib3J0Q29udHJvbGxlcj4obnVsbCk7XG4gIGNvbnN0IHsgaXNMb2FkaW5nLCBlcnJvciwgcmV2YWxpZGF0ZSB9ID0gdXNlUHJvbWlzZShcbiAgICBhc3luYyAocHJvbXB0OiBzdHJpbmcsIGNyZWF0aXZpdHk/OiBBSS5DcmVhdGl2aXR5LCBzaG91bGRTdHJlYW0/OiBib29sZWFuKSA9PiB7XG4gICAgICBzZXREYXRhKFwiXCIpO1xuICAgICAgY29uc3Qgc3RyZWFtID0gQUkuYXNrKHByb21wdCwgeyBjcmVhdGl2aXR5LCBtb2RlbCwgc2lnbmFsOiBhYm9ydGFibGUuY3VycmVudD8uc2lnbmFsIH0pO1xuICAgICAgaWYgKHNob3VsZFN0cmVhbSA9PT0gZmFsc2UpIHtcbiAgICAgICAgc2V0RGF0YShhd2FpdCBzdHJlYW0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyZWFtLm9uKFwiZGF0YVwiLCAoZGF0YSkgPT4ge1xuICAgICAgICAgIHNldERhdGEoKHgpID0+IHggKyBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHN0cmVhbTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtwcm9tcHQsIGNyZWF0aXZpdHksIHN0cmVhbV0sXG4gICAgeyAuLi51c2VQcm9taXNlT3B0aW9ucywgYWJvcnRhYmxlIH0sXG4gICk7XG5cbiAgcmV0dXJuIHsgaXNMb2FkaW5nLCBkYXRhLCBlcnJvciwgcmV2YWxpZGF0ZSB9O1xufVxuIiwgImltcG9ydCB7IHVzZU1lbW8sIHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VMYXRlc3QgfSBmcm9tIFwiLi91c2VMYXRlc3RcIjtcbmltcG9ydCB7IHVzZUNhY2hlZFN0YXRlIH0gZnJvbSBcIi4vdXNlQ2FjaGVkU3RhdGVcIjtcblxuLy8gVGhlIGFsZ29yaXRobSBiZWxvdyBpcyBpbnNwaXJlZCBieSB0aGUgb25lIHVzZWQgYnkgRmlyZWZveDpcbi8vIGh0dHBzOi8vd2lraS5tb3ppbGxhLm9yZy9Vc2VyOkplc3NlL05ld0ZyZWNlbmN5XG5cbnR5cGUgRnJlY2VuY3kgPSB7XG4gIGxhc3RWaXNpdGVkOiBudW1iZXI7XG4gIGZyZWNlbmN5OiBudW1iZXI7XG59O1xuXG5jb25zdCBIQUxGX0xJRkVfREFZUyA9IDEwO1xuXG5jb25zdCBNU19QRVJfREFZID0gMjQgKiA2MCAqIDYwICogMTAwMDtcblxuY29uc3QgVklTSVRfVFlQRV9QT0lOVFMgPSB7XG4gIERlZmF1bHQ6IDEwMCxcbiAgRW1iZWQ6IDAsXG4gIEJvb2ttYXJrOiAxNDAsXG59O1xuXG5mdW5jdGlvbiBnZXROZXdGcmVjZW5jeShpdGVtPzogRnJlY2VuY3kpOiBGcmVjZW5jeSB7XG4gIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gIGNvbnN0IGxhc3RWaXNpdGVkID0gaXRlbSA/IGl0ZW0ubGFzdFZpc2l0ZWQgOiAwO1xuICBjb25zdCBmcmVjZW5jeSA9IGl0ZW0gPyBpdGVtLmZyZWNlbmN5IDogMDtcblxuICBjb25zdCB2aXNpdEFnZUluRGF5cyA9IChub3cgLSBsYXN0VmlzaXRlZCkgLyBNU19QRVJfREFZO1xuICBjb25zdCBERUNBWV9SQVRFX0NPTlNUQU5UID0gTWF0aC5sb2coMikgLyAoSEFMRl9MSUZFX0RBWVMgKiBNU19QRVJfREFZKTtcbiAgY29uc3QgY3VycmVudFZpc2l0VmFsdWUgPSBWSVNJVF9UWVBFX1BPSU5UUy5EZWZhdWx0ICogTWF0aC5leHAoLURFQ0FZX1JBVEVfQ09OU1RBTlQgKiB2aXNpdEFnZUluRGF5cyk7XG4gIGNvbnN0IHRvdGFsVmlzaXRWYWx1ZSA9IGZyZWNlbmN5ICsgY3VycmVudFZpc2l0VmFsdWU7XG5cbiAgcmV0dXJuIHtcbiAgICBsYXN0VmlzaXRlZDogbm93LFxuICAgIGZyZWNlbmN5OiB0b3RhbFZpc2l0VmFsdWUsXG4gIH07XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5jb25zdCBkZWZhdWx0S2V5ID0gKGl0ZW06IGFueSk6IHN0cmluZyA9PiB7XG4gIGlmIChcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcbiAgICAodHlwZW9mIGl0ZW0gIT09IFwib2JqZWN0XCIgfHwgIWl0ZW0gfHwgIShcImlkXCIgaW4gaXRlbSkgfHwgdHlwZW9mIGl0ZW0uaWQgIT0gXCJzdHJpbmdcIilcbiAgKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3BlY2lmeSBhIGtleSBmdW5jdGlvbiBvciBtYWtlIHN1cmUgeW91ciBpdGVtcyBoYXZlIGFuICdpZCcgcHJvcGVydHlcIik7XG4gIH1cbiAgcmV0dXJuIGl0ZW0uaWQ7XG59O1xuXG4vKipcbiAqIFNvcnQgYW4gYXJyYXkgYnkgaXRzIGZyZWNlbmN5IGFuZCBwcm92aWRlIG1ldGhvZHMgdG8gdXBkYXRlIHRoZSBmcmVjZW5jeSBvZiBpdHMgaXRlbXMuXG4gKiBGcmVjZW5jeSBpcyBhIG1lYXN1cmUgdGhhdCBjb21iaW5lcyBmcmVxdWVuY3kgYW5kIHJlY2VuY3kuIFRoZSBtb3JlIG9mdGVuIGFuIGl0ZW0gaXMgdmlzaXRlZC91c2VkLCBhbmQgdGhlIG1vcmUgcmVjZW50bHkgYW4gaXRlbSBpcyB2aXNpdGVkL3VzZWQsIHRoZSBoaWdoZXIgaXQgd2lsbCByYW5rLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqIGltcG9ydCB7IExpc3QsIEFjdGlvblBhbmVsLCBBY3Rpb24sIEljb24gfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG4gKiBpbXBvcnQgeyB1c2VGZXRjaCwgdXNlRnJlY2VuY3lTb3J0aW5nIH0gZnJvbSBcIkByYXljYXN0L3V0aWxzXCI7XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29tbWFuZCgpIHtcbiAqICAgY29uc3QgeyBpc0xvYWRpbmcsIGRhdGEgfSA9IHVzZUZldGNoKFwiaHR0cHM6Ly9hcGkuZXhhbXBsZVwiKTtcbiAqICAgY29uc3QgeyBkYXRhOiBzb3J0ZWREYXRhLCB2aXNpdEl0ZW0sIHJlc2V0UmFua2luZyB9ID0gdXNlRnJlY2VuY3lTb3J0aW5nKGRhdGEpO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8TGlzdCBpc0xvYWRpbmc9e2lzTG9hZGluZ30+XG4gKiAgICAgICB7c29ydGVkRGF0YS5tYXAoKGl0ZW0pID0+IChcbiAqICAgICAgICAgPExpc3QuSXRlbVxuICogICAgICAgICAgIGtleT17aXRlbS5pZH1cbiAqICAgICAgICAgICB0aXRsZT17aXRlbS50aXRsZX1cbiAqICAgICAgICAgICBhY3Rpb25zPXtcbiAqICAgICAgICAgICAgIDxBY3Rpb25QYW5lbD5cbiAqICAgICAgICAgICAgICAgPEFjdGlvbi5PcGVuSW5Ccm93c2VyIHVybD17aXRlbS51cmx9IG9uT3Blbj17KCkgPT4gdmlzaXRJdGVtKGl0ZW0pfSAvPlxuICogICAgICAgICAgICAgICA8QWN0aW9uLkNvcHlUb0NsaXBib2FyZCB0aXRsZT1cIkNvcHkgTGlua1wiIGNvbnRlbnQ9e2l0ZW0udXJsfSBvbkNvcHk9eygpID0+IHZpc2l0SXRlbShpdGVtKX0gLz5cbiAqICAgICAgICAgICAgICAgPEFjdGlvbiB0aXRsZT1cIlJlc2V0IFJhbmtpbmdcIiBpY29uPXtJY29uLkFycm93Q291bnRlckNsb2Nrd2lzZX0gb25BY3Rpb249eygpID0+IHJlc2V0UmFua2luZyhpdGVtKX0gLz5cbiAqICAgICAgICAgICAgIDwvQWN0aW9uUGFuZWw+XG4gKiAgICAgICAgICAgfVxuICogICAgICAgICAvPlxuICogICAgICAgKSl9XG4gKiAgICAgPC9MaXN0PlxuICogICApO1xuICogfTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlRnJlY2VuY3lTb3J0aW5nPFQgZXh0ZW5kcyB7IGlkOiBzdHJpbmcgfT4oXG4gIGRhdGE/OiBUW10sXG4gIG9wdGlvbnM/OiB7IG5hbWVzcGFjZT86IHN0cmluZzsga2V5PzogKGl0ZW06IFQpID0+IHN0cmluZzsgc29ydFVudmlzaXRlZD86IChhOiBULCBiOiBUKSA9PiBudW1iZXIgfSxcbik6IHtcbiAgZGF0YTogVFtdO1xuICB2aXNpdEl0ZW06IChpdGVtOiBUKSA9PiBQcm9taXNlPHZvaWQ+O1xuICByZXNldFJhbmtpbmc6IChpdGVtOiBUKSA9PiBQcm9taXNlPHZvaWQ+O1xufTtcbmV4cG9ydCBmdW5jdGlvbiB1c2VGcmVjZW5jeVNvcnRpbmc8VD4oXG4gIGRhdGE6IFRbXSB8IHVuZGVmaW5lZCxcbiAgb3B0aW9uczogeyBuYW1lc3BhY2U/OiBzdHJpbmc7IGtleTogKGl0ZW06IFQpID0+IHN0cmluZzsgc29ydFVudmlzaXRlZD86IChhOiBULCBiOiBUKSA9PiBudW1iZXIgfSxcbik6IHtcbiAgZGF0YTogVFtdO1xuICB2aXNpdEl0ZW06IChpdGVtOiBUKSA9PiBQcm9taXNlPHZvaWQ+O1xuICByZXNldFJhbmtpbmc6IChpdGVtOiBUKSA9PiBQcm9taXNlPHZvaWQ+O1xufTtcbmV4cG9ydCBmdW5jdGlvbiB1c2VGcmVjZW5jeVNvcnRpbmc8VD4oXG4gIGRhdGE/OiBUW10sXG4gIG9wdGlvbnM/OiB7IG5hbWVzcGFjZT86IHN0cmluZzsga2V5PzogKGl0ZW06IFQpID0+IHN0cmluZzsgc29ydFVudmlzaXRlZD86IChhOiBULCBiOiBUKSA9PiBudW1iZXIgfSxcbik6IHtcbiAgZGF0YTogVFtdO1xuICB2aXNpdEl0ZW06IChpdGVtOiBUKSA9PiBQcm9taXNlPHZvaWQ+O1xuICByZXNldFJhbmtpbmc6IChpdGVtOiBUKSA9PiBQcm9taXNlPHZvaWQ+O1xufSB7XG4gIGNvbnN0IGtleVJlZiA9IHVzZUxhdGVzdChvcHRpb25zPy5rZXkgfHwgZGVmYXVsdEtleSk7XG4gIGNvbnN0IHNvcnRVbnZpc2l0ZWRSZWYgPSB1c2VMYXRlc3Qob3B0aW9ucz8uc29ydFVudmlzaXRlZCk7XG5cbiAgY29uc3QgW3N0b3JlZEZyZWNlbmNpZXMsIHNldFN0b3JlZEZyZWNlbmNpZXNdID0gdXNlQ2FjaGVkU3RhdGU8UmVjb3JkPHN0cmluZywgRnJlY2VuY3kgfCB1bmRlZmluZWQ+PihcbiAgICBgcmF5Y2FzdF9mcmVjZW5jeV8ke29wdGlvbnM/Lm5hbWVzcGFjZX1gLFxuICAgIHt9LFxuICApO1xuXG4gIGNvbnN0IHZpc2l0SXRlbSA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUZyZWNlbmN5KGl0ZW06IFQpIHtcbiAgICAgIGNvbnN0IGl0ZW1LZXkgPSBrZXlSZWYuY3VycmVudChpdGVtKTtcblxuICAgICAgc2V0U3RvcmVkRnJlY2VuY2llcygoc3RvcmVkRnJlY2VuY2llcykgPT4ge1xuICAgICAgICBjb25zdCBmcmVjZW5jeSA9IHN0b3JlZEZyZWNlbmNpZXNbaXRlbUtleV07XG4gICAgICAgIGNvbnN0IG5ld0ZyZWNlbmN5ID0gZ2V0TmV3RnJlY2VuY3koZnJlY2VuY3kpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uc3RvcmVkRnJlY2VuY2llcyxcbiAgICAgICAgICBbaXRlbUtleV06IG5ld0ZyZWNlbmN5LFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBba2V5UmVmLCBzZXRTdG9yZWRGcmVjZW5jaWVzXSxcbiAgKTtcblxuICBjb25zdCByZXNldFJhbmtpbmcgPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyBmdW5jdGlvbiByZW1vdmVGcmVjZW5jeShpdGVtOiBUKSB7XG4gICAgICBjb25zdCBpdGVtS2V5ID0ga2V5UmVmLmN1cnJlbnQoaXRlbSk7XG5cbiAgICAgIHNldFN0b3JlZEZyZWNlbmNpZXMoKHN0b3JlZEZyZWNlbmNpZXMpID0+IHtcbiAgICAgICAgY29uc3QgbmV3RnJlbmNlbmNpZXMgPSB7IC4uLnN0b3JlZEZyZWNlbmNpZXMgfTtcbiAgICAgICAgZGVsZXRlIG5ld0ZyZW5jZW5jaWVzW2l0ZW1LZXldO1xuXG4gICAgICAgIHJldHVybiBuZXdGcmVuY2VuY2llcztcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgW2tleVJlZiwgc2V0U3RvcmVkRnJlY2VuY2llc10sXG4gICk7XG5cbiAgY29uc3Qgc29ydGVkRGF0YSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmICghZGF0YSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGNvbnN0IGZyZWNlbmN5QSA9IHN0b3JlZEZyZWNlbmNpZXNba2V5UmVmLmN1cnJlbnQoYSldO1xuICAgICAgY29uc3QgZnJlY2VuY3lCID0gc3RvcmVkRnJlY2VuY2llc1trZXlSZWYuY3VycmVudChiKV07XG5cbiAgICAgIC8vIElmIGEgaGFzIGEgZnJlY2VuY3ksIGJ1dCBiIGRvZXNuJ3QsIGEgc2hvdWxkIGNvbWUgZmlyc3RcbiAgICAgIGlmIChmcmVjZW5jeUEgJiYgIWZyZWNlbmN5Qikge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGIgaGFzIGEgZnJlY2VuY3ksIGJ1dCBhIGRvZXNuJ3QsIGIgc2hvdWxkIGNvbWUgZmlyc3RcbiAgICAgIGlmICghZnJlY2VuY3lBICYmIGZyZWNlbmN5Qikge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYm90aCBmcmVjZW5jaWVzIGFyZSBkZWZpbmVkLHB1dCB0aGUgb25lIHdpdGggdGhlIGhpZ2hlciBmcmVjZW5jeSBmaXJzdFxuICAgICAgaWYgKGZyZWNlbmN5QSAmJiBmcmVjZW5jeUIpIHtcbiAgICAgICAgcmV0dXJuIGZyZWNlbmN5Qi5mcmVjZW5jeSAtIGZyZWNlbmN5QS5mcmVjZW5jeTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYm90aCBmcmVjZW5jaWVzIGFyZSB1bmRlZmluZWQsIGtlZXAgdGhlIG9yaWdpbmFsIG9yZGVyXG4gICAgICByZXR1cm4gc29ydFVudmlzaXRlZFJlZi5jdXJyZW50ID8gc29ydFVudmlzaXRlZFJlZi5jdXJyZW50KGEsIGIpIDogMDtcbiAgICB9KTtcbiAgfSwgW3N0b3JlZEZyZWNlbmNpZXMsIGRhdGEsIGtleVJlZiwgc29ydFVudmlzaXRlZFJlZl0pO1xuXG4gIHJldHVybiB7IGRhdGE6IHNvcnRlZERhdGEsIHZpc2l0SXRlbSwgcmVzZXRSYW5raW5nIH07XG59XG4iLCAiaW1wb3J0IHsgTG9jYWxTdG9yYWdlIH0gZnJvbSBcIkByYXljYXN0L2FwaVwiO1xuaW1wb3J0IHsgc2hvd0ZhaWx1cmVUb2FzdCB9IGZyb20gXCIuL3Nob3dGYWlsdXJlVG9hc3RcIjtcbmltcG9ydCB7IHJlcGxhY2VyLCByZXZpdmVyIH0gZnJvbSBcIi4vaGVscGVyc1wiO1xuaW1wb3J0IHsgdXNlUHJvbWlzZSB9IGZyb20gXCIuL3VzZVByb21pc2VcIjtcblxuLyoqXG4gKiBBIGhvb2sgdG8gbWFuYWdlIGEgdmFsdWUgaW4gdGhlIGxvY2FsIHN0b3JhZ2UuXG4gKlxuICogQHJlbWFyayBUaGUgdmFsdWUgaXMgc3RvcmVkIGFzIGEgSlNPTiBzdHJpbmcgaW4gdGhlIGxvY2FsIHN0b3JhZ2UuXG4gKlxuICogQHBhcmFtIGtleSAtIFRoZSBrZXkgdG8gdXNlIGZvciB0aGUgdmFsdWUgaW4gdGhlIGxvY2FsIHN0b3JhZ2UuXG4gKiBAcGFyYW0gaW5pdGlhbFZhbHVlIC0gVGhlIGluaXRpYWwgdmFsdWUgdG8gdXNlIGlmIHRoZSBrZXkgZG9lc24ndCBleGlzdCBpbiB0aGUgbG9jYWwgc3RvcmFnZS5cbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIC0gYHZhbHVlYDogVGhlIHZhbHVlIGZyb20gdGhlIGxvY2FsIHN0b3JhZ2Ugb3IgdGhlIGluaXRpYWwgdmFsdWUgaWYgdGhlIGtleSBkb2Vzbid0IGV4aXN0LlxuICogLSBgc2V0VmFsdWVgOiBBIGZ1bmN0aW9uIHRvIHVwZGF0ZSB0aGUgdmFsdWUgaW4gdGhlIGxvY2FsIHN0b3JhZ2UuXG4gKiAtIGByZW1vdmVWYWx1ZWA6IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoZSB2YWx1ZSBmcm9tIHRoZSBsb2NhbCBzdG9yYWdlLlxuICogLSBgaXNMb2FkaW5nYDogQSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIHZhbHVlIGlzIGxvYWRpbmcuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogY29uc3QgeyB2YWx1ZSwgc2V0VmFsdWUgfSA9IHVzZUxvY2FsU3RvcmFnZTxzdHJpbmc+KFwibXkta2V5XCIpO1xuICogY29uc3QgeyB2YWx1ZSwgc2V0VmFsdWUgfSA9IHVzZUxvY2FsU3RvcmFnZTxzdHJpbmc+KFwibXkta2V5XCIsIFwiZGVmYXVsdCB2YWx1ZVwiKTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTG9jYWxTdG9yYWdlPFQ+KGtleTogc3RyaW5nLCBpbml0aWFsVmFsdWU/OiBUKSB7XG4gIGNvbnN0IHtcbiAgICBkYXRhOiB2YWx1ZSxcbiAgICBpc0xvYWRpbmcsXG4gICAgbXV0YXRlLFxuICB9ID0gdXNlUHJvbWlzZShcbiAgICBhc3luYyAoc3RvcmFnZUtleTogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBpdGVtID0gYXdhaXQgTG9jYWxTdG9yYWdlLmdldEl0ZW08c3RyaW5nPihzdG9yYWdlS2V5KTtcblxuICAgICAgcmV0dXJuIHR5cGVvZiBpdGVtICE9PSBcInVuZGVmaW5lZFwiID8gKEpTT04ucGFyc2UoaXRlbSwgcmV2aXZlcikgYXMgVCkgOiBpbml0aWFsVmFsdWU7XG4gICAgfSxcbiAgICBba2V5XSxcbiAgKTtcblxuICBhc3luYyBmdW5jdGlvbiBzZXRWYWx1ZSh2YWx1ZTogVCkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBtdXRhdGUoTG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgcmVwbGFjZXIpKSwge1xuICAgICAgICBvcHRpbWlzdGljVXBkYXRlKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGF3YWl0IHNob3dGYWlsdXJlVG9hc3QoZXJyb3IsIHsgdGl0bGU6IFwiRmFpbGVkIHRvIHNldCB2YWx1ZSBpbiBsb2NhbCBzdG9yYWdlXCIgfSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gcmVtb3ZlVmFsdWUoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IG11dGF0ZShMb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpLCB7XG4gICAgICAgIG9wdGltaXN0aWNVcGRhdGUoKSB7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBhd2FpdCBzaG93RmFpbHVyZVRvYXN0KGVycm9yLCB7IHRpdGxlOiBcIkZhaWxlZCB0byByZW1vdmUgdmFsdWUgZnJvbSBsb2NhbCBzdG9yYWdlXCIgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHsgdmFsdWUsIHNldFZhbHVlLCByZW1vdmVWYWx1ZSwgaXNMb2FkaW5nIH07XG59XG4iLCAiZXhwb3J0IHsgZ2V0QXZhdGFySWNvbiB9IGZyb20gXCIuL2F2YXRhclwiO1xuZXhwb3J0IHsgZ2V0RmF2aWNvbiB9IGZyb20gXCIuL2Zhdmljb25cIjtcbmV4cG9ydCB7IGdldFByb2dyZXNzSWNvbiB9IGZyb20gXCIuL3Byb2dyZXNzXCI7XG4iLCAiaW1wb3J0IHR5cGUgeyBJbWFnZSB9IGZyb20gXCJAcmF5Y2FzdC9hcGlcIjtcbmltcG9ydCB7IHNsaWdodGx5TGlnaHRlckNvbG9yLCBzbGlnaHRseURhcmtlckNvbG9yIH0gZnJvbSBcIi4vY29sb3JcIjtcblxuZnVuY3Rpb24gZ2V0V2hvbGVDaGFyQW5kSShzdHI6IHN0cmluZywgaTogbnVtYmVyKTogW3N0cmluZywgbnVtYmVyXSB7XG4gIGNvbnN0IGNvZGUgPSBzdHIuY2hhckNvZGVBdChpKTtcblxuICBpZiAoTnVtYmVyLmlzTmFOKGNvZGUpKSB7XG4gICAgcmV0dXJuIFtcIlwiLCBpXTtcbiAgfVxuICBpZiAoY29kZSA8IDB4ZDgwMCB8fCBjb2RlID4gMHhkZmZmKSB7XG4gICAgcmV0dXJuIFtzdHIuY2hhckF0KGkpLCBpXTsgLy8gTm9ybWFsIGNoYXJhY3Rlciwga2VlcGluZyAnaScgdGhlIHNhbWVcbiAgfVxuXG4gIC8vIEhpZ2ggc3Vycm9nYXRlIChjb3VsZCBjaGFuZ2UgbGFzdCBoZXggdG8gMHhEQjdGIHRvIHRyZWF0IGhpZ2ggcHJpdmF0ZVxuICAvLyBzdXJyb2dhdGVzIGFzIHNpbmdsZSBjaGFyYWN0ZXJzKVxuICBpZiAoMHhkODAwIDw9IGNvZGUgJiYgY29kZSA8PSAweGRiZmYpIHtcbiAgICBpZiAoc3RyLmxlbmd0aCA8PSBpICsgMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSGlnaCBzdXJyb2dhdGUgd2l0aG91dCBmb2xsb3dpbmcgbG93IHN1cnJvZ2F0ZVwiKTtcbiAgICB9XG4gICAgY29uc3QgbmV4dCA9IHN0ci5jaGFyQ29kZUF0KGkgKyAxKTtcbiAgICBpZiAoMHhkYzAwID4gbmV4dCB8fCBuZXh0ID4gMHhkZmZmKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJIaWdoIHN1cnJvZ2F0ZSB3aXRob3V0IGZvbGxvd2luZyBsb3cgc3Vycm9nYXRlXCIpO1xuICAgIH1cbiAgICByZXR1cm4gW3N0ci5jaGFyQXQoaSkgKyBzdHIuY2hhckF0KGkgKyAxKSwgaSArIDFdO1xuICB9XG5cbiAgLy8gTG93IHN1cnJvZ2F0ZSAoMHhEQzAwIDw9IGNvZGUgJiYgY29kZSA8PSAweERGRkYpXG4gIGlmIChpID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTG93IHN1cnJvZ2F0ZSB3aXRob3V0IHByZWNlZGluZyBoaWdoIHN1cnJvZ2F0ZVwiKTtcbiAgfVxuXG4gIGNvbnN0IHByZXYgPSBzdHIuY2hhckNvZGVBdChpIC0gMSk7XG5cbiAgLy8gKGNvdWxkIGNoYW5nZSBsYXN0IGhleCB0byAweERCN0YgdG8gdHJlYXQgaGlnaCBwcml2YXRlIHN1cnJvZ2F0ZXNcbiAgLy8gYXMgc2luZ2xlIGNoYXJhY3RlcnMpXG4gIGlmICgweGQ4MDAgPiBwcmV2IHx8IHByZXYgPiAweGRiZmYpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJMb3cgc3Vycm9nYXRlIHdpdGhvdXQgcHJlY2VkaW5nIGhpZ2ggc3Vycm9nYXRlXCIpO1xuICB9XG5cbiAgLy8gUmV0dXJuIHRoZSBuZXh0IGNoYXJhY3RlciBpbnN0ZWFkIChhbmQgaW5jcmVtZW50KVxuICByZXR1cm4gW3N0ci5jaGFyQXQoaSArIDEpLCBpICsgMV07XG59XG5cbmNvbnN0IGF2YXRhckNvbG9yU2V0ID0gW1xuICBcIiNEQzgyOUFcIiwgLy8gUGlua1xuICBcIiNENjQ4NTRcIiwgLy8gUmVkXG4gIFwiI0Q0NzYwMFwiLCAvLyBZZWxsb3dPcmFuZ2VcbiAgXCIjRDM2Q0REXCIsIC8vIE1hZ2VudGFcbiAgXCIjNTJBOUU0XCIsIC8vIEFxdWFcbiAgXCIjNzg3MUU4XCIsIC8vIEluZGlnb1xuICBcIiM3MDkyMEZcIiwgLy8gWWVsbG93R3JlZW5cbiAgXCIjNDNCOTNBXCIsIC8vIEdyZWVuXG4gIFwiI0VCNkIzRVwiLCAvLyBPcmFuZ2VcbiAgXCIjMjZCNzk1XCIsIC8vIEJsdWVHcmVlblxuICBcIiNEODVBOUJcIiwgLy8gSG90UGlua1xuICBcIiNBMDY3RENcIiwgLy8gUHVycGxlXG4gIFwiI0JEOTUwMFwiLCAvLyBZZWxsb3dcbiAgXCIjNTM4NUQ5XCIsIC8vIEJsdWVcbl07XG5cbi8qKlxuICogSWNvbiB0byByZXByZXNlbnQgYW4gYXZhdGFyIHdoZW4geW91IGRvbid0IGhhdmUgb25lLiBUaGUgZ2VuZXJhdGVkIGF2YXRhclxuICogd2lsbCBiZSBnZW5lcmF0ZWQgZnJvbSB0aGUgaW5pdGlhbHMgb2YgdGhlIG5hbWUgYW5kIGhhdmUgYSBjb2xvcmZ1bCBidXQgY29uc2lzdGVudCBiYWNrZ3JvdW5kLlxuICpcbiAqIEByZXR1cm5zIGFuIEltYWdlIHRoYXQgY2FuIGJlIHVzZWQgd2hlcmUgUmF5Y2FzdCBleHBlY3RzIHRoZW0uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogPExpc3QuSXRlbSBpY29uPXtnZXRBdmF0YXJJY29uKCdNYXRoaWV1IER1dG91cicpfSB0aXRsZT1cIlByb2plY3RcIiAvPlxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBdmF0YXJJY29uKFxuICBuYW1lOiBzdHJpbmcsXG4gIG9wdGlvbnM/OiB7XG4gICAgLyoqXG4gICAgICogQ3VzdG9tIGJhY2tncm91bmQgY29sb3JcbiAgICAgKi9cbiAgICBiYWNrZ3JvdW5kPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdG8gdXNlIGEgZ3JhZGllbnQgZm9yIHRoZSBiYWNrZ3JvdW5kIG9yIG5vdC5cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgZ3JhZGllbnQ/OiBib29sZWFuO1xuICB9LFxuKTogSW1hZ2UuQXNzZXQge1xuICBjb25zdCB3b3JkcyA9IG5hbWUudHJpbSgpLnNwbGl0KFwiIFwiKTtcbiAgbGV0IGluaXRpYWxzOiBzdHJpbmc7XG4gIGlmICh3b3Jkcy5sZW5ndGggPT0gMSAmJiBnZXRXaG9sZUNoYXJBbmRJKHdvcmRzWzBdLCAwKVswXSkge1xuICAgIGluaXRpYWxzID0gZ2V0V2hvbGVDaGFyQW5kSSh3b3Jkc1swXSwgMClbMF07XG4gIH0gZWxzZSBpZiAod29yZHMubGVuZ3RoID4gMSkge1xuICAgIGNvbnN0IGZpcnN0V29yZEZpcnN0TGV0dGVyID0gZ2V0V2hvbGVDaGFyQW5kSSh3b3Jkc1swXSwgMClbMF0gfHwgXCJcIjtcbiAgICBjb25zdCBsYXN0V29yZEZpcnN0TGV0dGVyID0gZ2V0V2hvbGVDaGFyQW5kSSh3b3Jkc1t3b3Jkcy5sZW5ndGggLSAxXSwgMClbMF0gPz8gXCJcIjtcbiAgICBpbml0aWFscyA9IGZpcnN0V29yZEZpcnN0TGV0dGVyICsgbGFzdFdvcmRGaXJzdExldHRlcjtcbiAgfSBlbHNlIHtcbiAgICBpbml0aWFscyA9IFwiXCI7XG4gIH1cblxuICBsZXQgYmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XG5cbiAgaWYgKG9wdGlvbnM/LmJhY2tncm91bmQpIHtcbiAgICBiYWNrZ3JvdW5kQ29sb3IgPSBvcHRpb25zPy5iYWNrZ3JvdW5kO1xuICB9IGVsc2Uge1xuICAgIGxldCBpbml0aWFsc0NoYXJJbmRleCA9IDA7XG4gICAgbGV0IFtjaGFyLCBpXSA9IGdldFdob2xlQ2hhckFuZEkoaW5pdGlhbHMsIDApO1xuICAgIHdoaWxlIChjaGFyKSB7XG4gICAgICBpbml0aWFsc0NoYXJJbmRleCArPSBjaGFyLmNoYXJDb2RlQXQoMCk7XG4gICAgICBbY2hhciwgaV0gPSBnZXRXaG9sZUNoYXJBbmRJKGluaXRpYWxzLCBpICsgMSk7XG4gICAgfVxuXG4gICAgY29uc3QgY29sb3JJbmRleCA9IGluaXRpYWxzQ2hhckluZGV4ICUgYXZhdGFyQ29sb3JTZXQubGVuZ3RoO1xuICAgIGJhY2tncm91bmRDb2xvciA9IGF2YXRhckNvbG9yU2V0W2NvbG9ySW5kZXhdO1xuICB9XG5cbiAgY29uc3QgcGFkZGluZyA9IDA7XG4gIGNvbnN0IHJhZGl1cyA9IDUwIC0gcGFkZGluZztcblxuICBjb25zdCBzdmcgPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIxMDBweFwiIGhlaWdodD1cIjEwMHB4XCI+XG4gICR7XG4gICAgb3B0aW9ucz8uZ3JhZGllbnQgIT09IGZhbHNlXG4gICAgICA/IGA8ZGVmcz5cbiAgICAgIDxsaW5lYXJHcmFkaWVudCBpZD1cIkdyYWRpZW50XCIgeDE9XCIwLjI1XCIgeDI9XCIwLjc1XCIgeTE9XCIwXCIgeTI9XCIxXCI+XG4gICAgICAgIDxzdG9wIG9mZnNldD1cIjAlXCIgc3RvcC1jb2xvcj1cIiR7c2xpZ2h0bHlMaWdodGVyQ29sb3IoYmFja2dyb3VuZENvbG9yKX1cIi8+XG4gICAgICAgIDxzdG9wIG9mZnNldD1cIjUwJVwiIHN0b3AtY29sb3I9XCIke2JhY2tncm91bmRDb2xvcn1cIi8+XG4gICAgICAgIDxzdG9wIG9mZnNldD1cIjEwMCVcIiBzdG9wLWNvbG9yPVwiJHtzbGlnaHRseURhcmtlckNvbG9yKGJhY2tncm91bmRDb2xvcil9XCIvPlxuICAgICAgPC9saW5lYXJHcmFkaWVudD5cbiAgPC9kZWZzPmBcbiAgICAgIDogXCJcIlxuICB9XG4gICAgICA8Y2lyY2xlIGN4PVwiNTBcIiBjeT1cIjUwXCIgcj1cIiR7cmFkaXVzfVwiIGZpbGw9XCIke1xuICAgICAgICBvcHRpb25zPy5ncmFkaWVudCAhPT0gZmFsc2UgPyBcInVybCgjR3JhZGllbnQpXCIgOiBiYWNrZ3JvdW5kQ29sb3JcbiAgICAgIH1cIiAvPlxuICAgICAgJHtcbiAgICAgICAgaW5pdGlhbHNcbiAgICAgICAgICA/IGA8dGV4dCB4PVwiNTBcIiB5PVwiODBcIiBmb250LXNpemU9XCIke1xuICAgICAgICAgICAgICByYWRpdXMgLSAxXG4gICAgICAgICAgICB9XCIgZm9udC1mYW1pbHk9XCJJbnRlciwgc2Fucy1zZXJpZlwiIHRleHQtYW5jaG9yPVwibWlkZGxlXCIgZmlsbD1cIndoaXRlXCI+JHtpbml0aWFscy50b1VwcGVyQ2FzZSgpfTwvdGV4dD5gXG4gICAgICAgICAgOiBcIlwiXG4gICAgICB9XG4gICAgPC9zdmc+XG4gIGAucmVwbGFjZUFsbChcIlxcblwiLCBcIlwiKTtcbiAgcmV0dXJuIGBkYXRhOmltYWdlL3N2Zyt4bWwsJHtlbmNvZGVVUklDb21wb25lbnQoc3ZnKX1gO1xufVxuIiwgImZ1bmN0aW9uIGhleFRvUkdCKGhleDogc3RyaW5nKSB7XG4gIGxldCByID0gMDtcbiAgbGV0IGcgPSAwO1xuICBsZXQgYiA9IDA7XG5cbiAgLy8gMyBkaWdpdHNcbiAgaWYgKGhleC5sZW5ndGggPT09IDQpIHtcbiAgICByID0gcGFyc2VJbnQoYCR7aGV4WzFdfSR7aGV4WzFdfWAsIDE2KTtcbiAgICBnID0gcGFyc2VJbnQoYCR7aGV4WzJdfSR7aGV4WzJdfWAsIDE2KTtcbiAgICBiID0gcGFyc2VJbnQoYCR7aGV4WzNdfSR7aGV4WzNdfWAsIDE2KTtcblxuICAgIC8vIDYgZGlnaXRzXG4gIH0gZWxzZSBpZiAoaGV4Lmxlbmd0aCA9PT0gNykge1xuICAgIHIgPSBwYXJzZUludChgJHtoZXhbMV19JHtoZXhbMl19YCwgMTYpO1xuICAgIGcgPSBwYXJzZUludChgJHtoZXhbM119JHtoZXhbNF19YCwgMTYpO1xuICAgIGIgPSBwYXJzZUludChgJHtoZXhbNV19JHtoZXhbNl19YCwgMTYpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgTWFsZm9ybWVkIGhleCBjb2xvcjogJHtoZXh9YCk7XG4gIH1cblxuICByZXR1cm4geyByLCBnLCBiIH07XG59XG5cbmZ1bmN0aW9uIHJnYlRvSGV4KHsgciwgZywgYiB9OiB7IHI6IG51bWJlcjsgZzogbnVtYmVyOyBiOiBudW1iZXIgfSkge1xuICBsZXQgclN0cmluZyA9IHIudG9TdHJpbmcoMTYpO1xuICBsZXQgZ1N0cmluZyA9IGcudG9TdHJpbmcoMTYpO1xuICBsZXQgYlN0cmluZyA9IGIudG9TdHJpbmcoMTYpO1xuXG4gIGlmIChyU3RyaW5nLmxlbmd0aCA9PT0gMSkge1xuICAgIHJTdHJpbmcgPSBgMCR7clN0cmluZ31gO1xuICB9XG4gIGlmIChnU3RyaW5nLmxlbmd0aCA9PT0gMSkge1xuICAgIGdTdHJpbmcgPSBgMCR7Z1N0cmluZ31gO1xuICB9XG4gIGlmIChiU3RyaW5nLmxlbmd0aCA9PT0gMSkge1xuICAgIGJTdHJpbmcgPSBgMCR7YlN0cmluZ31gO1xuICB9XG5cbiAgcmV0dXJuIGAjJHtyU3RyaW5nfSR7Z1N0cmluZ30ke2JTdHJpbmd9YDtcbn1cblxuZnVuY3Rpb24gcmdiVG9IU0woeyByLCBnLCBiIH06IHsgcjogbnVtYmVyOyBnOiBudW1iZXI7IGI6IG51bWJlciB9KSB7XG4gIC8vIE1ha2UgciwgZywgYW5kIGIgZnJhY3Rpb25zIG9mIDFcbiAgciAvPSAyNTU7XG4gIGcgLz0gMjU1O1xuICBiIC89IDI1NTtcblxuICAvLyBGaW5kIGdyZWF0ZXN0IGFuZCBzbWFsbGVzdCBjaGFubmVsIHZhbHVlc1xuICBjb25zdCBjbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gIGNvbnN0IGNtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgY29uc3QgZGVsdGEgPSBjbWF4IC0gY21pbjtcbiAgbGV0IGggPSAwO1xuICBsZXQgcyA9IDA7XG4gIGxldCBsID0gMDtcblxuICAvLyBDYWxjdWxhdGUgaHVlXG4gIC8vIE5vIGRpZmZlcmVuY2VcbiAgaWYgKGRlbHRhID09PSAwKSB7XG4gICAgaCA9IDA7XG4gIH1cbiAgLy8gUmVkIGlzIG1heFxuICBlbHNlIGlmIChjbWF4ID09PSByKSB7XG4gICAgaCA9ICgoZyAtIGIpIC8gZGVsdGEpICUgNjtcbiAgfVxuICAvLyBHcmVlbiBpcyBtYXhcbiAgZWxzZSBpZiAoY21heCA9PT0gZykge1xuICAgIGggPSAoYiAtIHIpIC8gZGVsdGEgKyAyO1xuICB9XG4gIC8vIEJsdWUgaXMgbWF4XG4gIGVsc2Uge1xuICAgIGggPSAociAtIGcpIC8gZGVsdGEgKyA0O1xuICB9XG5cbiAgaCA9IE1hdGgucm91bmQoaCAqIDYwKTtcblxuICAvLyBNYWtlIG5lZ2F0aXZlIGh1ZXMgcG9zaXRpdmUgYmVoaW5kIDM2MMKwXG4gIGlmIChoIDwgMCkge1xuICAgIGggKz0gMzYwO1xuICB9XG5cbiAgLy8gQ2FsY3VsYXRlIGxpZ2h0bmVzc1xuICBsID0gKGNtYXggKyBjbWluKSAvIDI7XG5cbiAgLy8gQ2FsY3VsYXRlIHNhdHVyYXRpb25cbiAgcyA9IGRlbHRhID09PSAwID8gMCA6IGRlbHRhIC8gKDEgLSBNYXRoLmFicygyICogbCAtIDEpKTtcblxuICAvLyBNdWx0aXBseSBsIGFuZCBzIGJ5IDEwMFxuICBzID0gKyhzICogMTAwKS50b0ZpeGVkKDEpO1xuICBsID0gKyhsICogMTAwKS50b0ZpeGVkKDEpO1xuXG4gIHJldHVybiB7IGgsIHMsIGwgfTtcbn1cblxuZnVuY3Rpb24gaHNsVG9SR0IoeyBoLCBzLCBsIH06IHsgaDogbnVtYmVyOyBzOiBudW1iZXI7IGw6IG51bWJlciB9KSB7XG4gIC8vIE11c3QgYmUgZnJhY3Rpb25zIG9mIDFcbiAgcyAvPSAxMDA7XG4gIGwgLz0gMTAwO1xuXG4gIGNvbnN0IGMgPSAoMSAtIE1hdGguYWJzKDIgKiBsIC0gMSkpICogcztcbiAgY29uc3QgeCA9IGMgKiAoMSAtIE1hdGguYWJzKCgoaCAvIDYwKSAlIDIpIC0gMSkpO1xuICBjb25zdCBtID0gbCAtIGMgLyAyO1xuICBsZXQgciA9IDA7XG4gIGxldCBnID0gMDtcbiAgbGV0IGIgPSAwO1xuXG4gIGlmIChoID49IDAgJiYgaCA8IDYwKSB7XG4gICAgciA9IGM7XG4gICAgZyA9IHg7XG4gICAgYiA9IDA7XG4gIH0gZWxzZSBpZiAoaCA+PSA2MCAmJiBoIDwgMTIwKSB7XG4gICAgciA9IHg7XG4gICAgZyA9IGM7XG4gICAgYiA9IDA7XG4gIH0gZWxzZSBpZiAoaCA+PSAxMjAgJiYgaCA8IDE4MCkge1xuICAgIHIgPSAwO1xuICAgIGcgPSBjO1xuICAgIGIgPSB4O1xuICB9IGVsc2UgaWYgKGggPj0gMTgwICYmIGggPCAyNDApIHtcbiAgICByID0gMDtcbiAgICBnID0geDtcbiAgICBiID0gYztcbiAgfSBlbHNlIGlmIChoID49IDI0MCAmJiBoIDwgMzAwKSB7XG4gICAgciA9IHg7XG4gICAgZyA9IDA7XG4gICAgYiA9IGM7XG4gIH0gZWxzZSBpZiAoaCA+PSAzMDAgJiYgaCA8IDM2MCkge1xuICAgIHIgPSBjO1xuICAgIGcgPSAwO1xuICAgIGIgPSB4O1xuICB9XG4gIHIgPSBNYXRoLnJvdW5kKChyICsgbSkgKiAyNTUpO1xuICBnID0gTWF0aC5yb3VuZCgoZyArIG0pICogMjU1KTtcbiAgYiA9IE1hdGgucm91bmQoKGIgKyBtKSAqIDI1NSk7XG5cbiAgcmV0dXJuIHsgciwgZywgYiB9O1xufVxuXG5mdW5jdGlvbiBoZXhUb0hTTChoZXg6IHN0cmluZykge1xuICByZXR1cm4gcmdiVG9IU0woaGV4VG9SR0IoaGV4KSk7XG59XG5cbmZ1bmN0aW9uIGhzbFRvSGV4KGhzbDogeyBoOiBudW1iZXI7IHM6IG51bWJlcjsgbDogbnVtYmVyIH0pIHtcbiAgcmV0dXJuIHJnYlRvSGV4KGhzbFRvUkdCKGhzbCkpO1xufVxuXG5mdW5jdGlvbiBjbGFtcCh2YWx1ZTogbnVtYmVyLCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIpIHtcbiAgcmV0dXJuIG1pbiA8IG1heCA/ICh2YWx1ZSA8IG1pbiA/IG1pbiA6IHZhbHVlID4gbWF4ID8gbWF4IDogdmFsdWUpIDogdmFsdWUgPCBtYXggPyBtYXggOiB2YWx1ZSA+IG1pbiA/IG1pbiA6IHZhbHVlO1xufVxuXG5jb25zdCBvZmZzZXQgPSAxMjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNsaWdodGx5RGFya2VyQ29sb3IoaGV4OiBzdHJpbmcpIHtcbiAgY29uc3QgaHNsID0gaGV4VG9IU0woaGV4KTtcblxuICByZXR1cm4gaHNsVG9IZXgoe1xuICAgIGg6IGhzbC5oLFxuICAgIHM6IGhzbC5zLFxuICAgIGw6IGNsYW1wKGhzbC5sIC0gb2Zmc2V0LCAwLCAxMDApLFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNsaWdodGx5TGlnaHRlckNvbG9yKGhleDogc3RyaW5nKSB7XG4gIGNvbnN0IGhzbCA9IGhleFRvSFNMKGhleCk7XG5cbiAgcmV0dXJuIGhzbFRvSGV4KHtcbiAgICBoOiBoc2wuaCxcbiAgICBzOiBoc2wucyxcbiAgICBsOiBjbGFtcChoc2wubCArIG9mZnNldCwgMCwgMTAwKSxcbiAgfSk7XG59XG4iLCAiaW1wb3J0IHsgSWNvbiwgSW1hZ2UgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG5pbXBvcnQgeyBVUkwgfSBmcm9tIFwibm9kZTp1cmxcIjtcblxuLyoqXG4gKiBJY29uIHNob3dpbmcgdGhlIGZhdmljb24gb2YgYSB3ZWJzaXRlLlxuICpcbiAqIEEgZmF2aWNvbiAoZmF2b3JpdGUgaWNvbikgaXMgYSB0aW55IGljb24gaW5jbHVkZWQgYWxvbmcgd2l0aCBhIHdlYnNpdGUsIHdoaWNoIGlzIGRpc3BsYXllZCBpbiBwbGFjZXMgbGlrZSB0aGUgYnJvd3NlcidzIGFkZHJlc3MgYmFyLCBwYWdlIHRhYnMsIGFuZCBib29rbWFya3MgbWVudS5cbiAqXG4gKiBAcGFyYW0gdXJsIFRoZSBVUkwgb2YgdGhlIHdlYnNpdGUgdG8gcmVwcmVzZW50LlxuICpcbiAqIEByZXR1cm5zIGFuIEltYWdlIHRoYXQgY2FuIGJlIHVzZWQgd2hlcmUgUmF5Y2FzdCBleHBlY3RzIHRoZW0uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogPExpc3QuSXRlbSBpY29uPXtnZXRGYXZpY29uKFwiaHR0cHM6Ly9yYXljYXN0LmNvbVwiKX0gdGl0bGU9XCJSYXljYXN0IFdlYnNpdGVcIiAvPlxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGYXZpY29uKFxuICB1cmw6IHN0cmluZyB8IFVSTCxcbiAgb3B0aW9ucz86IHtcbiAgICAvKipcbiAgICAgKiBTaXplIG9mIHRoZSBGYXZpY29uXG4gICAgICogQGRlZmF1bHQgNjRcbiAgICAgKi9cbiAgICBzaXplPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEZhbGxiYWNrIGljb24gaW4gY2FzZSB0aGUgRmF2aWNvbiBpcyBub3QgZm91bmQuXG4gICAgICogQGRlZmF1bHQgSWNvbi5MaW5rXG4gICAgICovXG4gICAgZmFsbGJhY2s/OiBJbWFnZS5GYWxsYmFjaztcbiAgICAvKipcbiAgICAgKiBBIHtAbGluayBJbWFnZS5NYXNrfSB0byBhcHBseSB0byB0aGUgRmF2aWNvbi5cbiAgICAgKi9cbiAgICBtYXNrPzogSW1hZ2UuTWFzaztcbiAgfSxcbik6IEltYWdlLkltYWdlTGlrZSB7XG4gIC8vIGEgZnVuYyBhZGRpbmcgaHR0cHM6Ly8gdG8gdGhlIFVSTFxuICAvLyBmb3IgY2FzZXMgd2hlcmUgdGhlIFVSTCBpcyBub3QgYSBmdWxsIFVSTFxuICAvLyBlLmcuIFwicmF5Y2FzdC5jb21cIlxuICBjb25zdCB3aXRoSHR0cHMgPSAodXJsOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoIXVybC5zdGFydHNXaXRoKFwiaHR0cFwiKSkge1xuICAgICAgcmV0dXJuIGBodHRwczovLyR7dXJsfWA7XG4gICAgfVxuICAgIHJldHVybiB1cmw7XG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBzYW5pdGl6ZSA9ICh1cmw6IHN0cmluZykgPT4ge1xuICAgICAgaWYgKCF1cmwuc3RhcnRzV2l0aChcImh0dHBcIikpIHtcbiAgICAgICAgcmV0dXJuIGBodHRwczovLyR7dXJsfWA7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXJsO1xuICAgIH07XG5cbiAgICBjb25zdCB1cmxPYmogPSB0eXBlb2YgdXJsID09PSBcInN0cmluZ1wiID8gbmV3IFVSTChzYW5pdGl6ZSh1cmwpKSA6IHVybDtcbiAgICBjb25zdCBob3N0bmFtZSA9IHVybE9iai5ob3N0bmFtZTtcblxuICAgIGNvbnN0IGZhdmljb25Qcm92aWRlcjogXCJub25lXCIgfCBcInJheWNhc3RcIiB8IFwiYXBwbGVcIiB8IFwiZ29vZ2xlXCIgfCBcImR1Y2tEdWNrR29cIiB8IFwiZHVja2R1Y2tnb1wiIHwgXCJsZWdhY3lcIiA9XG4gICAgICAocHJvY2Vzcy5lbnYuRkFWSUNPTl9QUk9WSURFUiBhcyBhbnkpID8/IFwicmF5Y2FzdFwiO1xuXG4gICAgc3dpdGNoIChmYXZpY29uUHJvdmlkZXIpIHtcbiAgICAgIGNhc2UgXCJub25lXCI6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc291cmNlOiBvcHRpb25zPy5mYWxsYmFjayA/PyBJY29uLkxpbmssXG4gICAgICAgICAgbWFzazogb3B0aW9ucz8ubWFzayxcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgXCJhcHBsZVwiOlxuICAgICAgICAvLyB3ZSBjYW4ndCBzdXBwb3J0IGFwcGxlIGZhdmljb25zIGFzIGl0J3MgYSBuYXRpdmUgQVBJXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc291cmNlOiBvcHRpb25zPy5mYWxsYmFjayA/PyBJY29uLkxpbmssXG4gICAgICAgICAgbWFzazogb3B0aW9ucz8ubWFzayxcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgXCJkdWNrZHVja2dvXCI6XG4gICAgICBjYXNlIFwiZHVja0R1Y2tHb1wiOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNvdXJjZTogYGh0dHBzOi8vaWNvbnMuZHVja2R1Y2tnby5jb20vaXAzLyR7aG9zdG5hbWV9Lmljb2AsXG4gICAgICAgICAgZmFsbGJhY2s6IG9wdGlvbnM/LmZhbGxiYWNrID8/IEljb24uTGluayxcbiAgICAgICAgICBtYXNrOiBvcHRpb25zPy5tYXNrLFxuICAgICAgICB9O1xuICAgICAgY2FzZSBcImdvb2dsZVwiOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNvdXJjZTogYGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/c3o9JHtvcHRpb25zPy5zaXplID8/IDY0fSZkb21haW49JHtob3N0bmFtZX1gLFxuICAgICAgICAgIGZhbGxiYWNrOiBvcHRpb25zPy5mYWxsYmFjayA/PyBJY29uLkxpbmssXG4gICAgICAgICAgbWFzazogb3B0aW9ucz8ubWFzayxcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgXCJsZWdhY3lcIjpcbiAgICAgIGNhc2UgXCJyYXljYXN0XCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNvdXJjZTogYGh0dHBzOi8vYXBpLnJheS5zby9mYXZpY29uP3VybD0ke2hvc3RuYW1lfSZzaXplPSR7b3B0aW9ucz8uc2l6ZSA/PyA2NH1gLFxuICAgICAgICAgIGZhbGxiYWNrOiBvcHRpb25zPy5mYWxsYmFjayA/PyBJY29uLkxpbmssXG4gICAgICAgICAgbWFzazogb3B0aW9ucz8ubWFzayxcbiAgICAgICAgfTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgIHJldHVybiBJY29uLkxpbms7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBlbnZpcm9ubWVudCwgQ29sb3IgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG5pbXBvcnQgdHlwZSB7IEltYWdlIH0gZnJvbSBcIkByYXljYXN0L2FwaVwiO1xuXG5mdW5jdGlvbiBwb2xhclRvQ2FydGVzaWFuKGNlbnRlclg6IG51bWJlciwgY2VudGVyWTogbnVtYmVyLCByYWRpdXM6IG51bWJlciwgYW5nbGVJbkRlZ3JlZXM6IG51bWJlcikge1xuICBjb25zdCBhbmdsZUluUmFkaWFucyA9ICgoYW5nbGVJbkRlZ3JlZXMgLSA5MCkgKiBNYXRoLlBJKSAvIDE4MC4wO1xuXG4gIHJldHVybiB7XG4gICAgeDogY2VudGVyWCArIHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlSW5SYWRpYW5zKSxcbiAgICB5OiBjZW50ZXJZICsgcmFkaXVzICogTWF0aC5zaW4oYW5nbGVJblJhZGlhbnMpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBkZXNjcmliZUFyYyh4OiBudW1iZXIsIHk6IG51bWJlciwgcmFkaXVzOiBudW1iZXIsIHN0YXJ0QW5nbGU6IG51bWJlciwgZW5kQW5nbGU6IG51bWJlcikge1xuICBjb25zdCBzdGFydCA9IHBvbGFyVG9DYXJ0ZXNpYW4oeCwgeSwgcmFkaXVzLCBlbmRBbmdsZSk7XG4gIGNvbnN0IGVuZCA9IHBvbGFyVG9DYXJ0ZXNpYW4oeCwgeSwgcmFkaXVzLCBzdGFydEFuZ2xlKTtcblxuICBjb25zdCBsYXJnZUFyY0ZsYWcgPSBlbmRBbmdsZSAtIHN0YXJ0QW5nbGUgPD0gMTgwID8gXCIwXCIgOiBcIjFcIjtcblxuICBjb25zdCBkID0gW1wiTVwiLCBzdGFydC54LCBzdGFydC55LCBcIkFcIiwgcmFkaXVzLCByYWRpdXMsIDAsIGxhcmdlQXJjRmxhZywgMCwgZW5kLngsIGVuZC55XS5qb2luKFwiIFwiKTtcblxuICByZXR1cm4gZDtcbn1cblxuLyoqXG4gKiBJY29uIHRvIHJlcHJlc2VudCB0aGUgcHJvZ3Jlc3Mgb2YgX3NvbWV0aGluZ18uXG4gKlxuICogQHBhcmFtIHByb2dyZXNzIE51bWJlciBiZXR3ZWVuIDAgYW5kIDEuXG4gKiBAcGFyYW0gY29sb3IgSGV4IGNvbG9yIChkZWZhdWx0IGBcIiNGRjYzNjNcImApIG9yIENvbG9yLlxuICpcbiAqIEByZXR1cm5zIGFuIEltYWdlIHRoYXQgY2FuIGJlIHVzZWQgd2hlcmUgUmF5Y2FzdCBleHBlY3RzIHRoZW0uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogPExpc3QuSXRlbSBpY29uPXtnZXRQcm9ncmVzc0ljb24oMC4xKX0gdGl0bGU9XCJQcm9qZWN0XCIgLz5cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvZ3Jlc3NJY29uKFxuICBwcm9ncmVzczogbnVtYmVyLFxuICBjb2xvcjogQ29sb3IgfCBzdHJpbmcgPSBDb2xvci5SZWQsXG4gIG9wdGlvbnM/OiB7IGJhY2tncm91bmQ/OiBDb2xvciB8IHN0cmluZzsgYmFja2dyb3VuZE9wYWNpdHk/OiBudW1iZXIgfSxcbik6IEltYWdlLkFzc2V0IHtcbiAgY29uc3QgYmFja2dyb3VuZCA9IG9wdGlvbnM/LmJhY2tncm91bmQgfHwgKGVudmlyb25tZW50LmFwcGVhcmFuY2UgPT09IFwibGlnaHRcIiA/IFwiYmxhY2tcIiA6IFwid2hpdGVcIik7XG4gIGNvbnN0IGJhY2tncm91bmRPcGFjaXR5ID0gb3B0aW9ucz8uYmFja2dyb3VuZE9wYWNpdHkgfHwgMC4xO1xuXG4gIGNvbnN0IHN0cm9rZSA9IDEwO1xuICBjb25zdCBwYWRkaW5nID0gNTtcbiAgY29uc3QgcmFkaXVzID0gNTAgLSBwYWRkaW5nIC0gc3Ryb2tlIC8gMjtcblxuICBjb25zdCBzdmcgPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIxMDBweFwiIGhlaWdodD1cIjEwMHB4XCI+XG4gICAgICA8Y2lyY2xlIGN4PVwiNTBcIiBjeT1cIjUwXCIgcj1cIiR7cmFkaXVzfVwiIHN0cm9rZS13aWR0aD1cIiR7c3Ryb2tlfVwiIHN0cm9rZT1cIiR7XG4gICAgICAgIHByb2dyZXNzIDwgMSA/IGJhY2tncm91bmQgOiBjb2xvclxuICAgICAgfVwiIG9wYWNpdHk9XCIke3Byb2dyZXNzIDwgMSA/IGJhY2tncm91bmRPcGFjaXR5IDogXCIxXCJ9XCIgZmlsbD1cIm5vbmVcIiAvPlxuICAgICAgJHtcbiAgICAgICAgcHJvZ3Jlc3MgPiAwICYmIHByb2dyZXNzIDwgMVxuICAgICAgICAgID8gYDxwYXRoIGQ9XCIke2Rlc2NyaWJlQXJjKFxuICAgICAgICAgICAgICA1MCxcbiAgICAgICAgICAgICAgNTAsXG4gICAgICAgICAgICAgIHJhZGl1cyxcbiAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgcHJvZ3Jlc3MgKiAzNjAsXG4gICAgICAgICAgICApfVwiIHN0cm9rZT1cIiR7Y29sb3J9XCIgc3Ryb2tlLXdpZHRoPVwiJHtzdHJva2V9XCIgZmlsbD1cIm5vbmVcIiAvPmBcbiAgICAgICAgICA6IFwiXCJcbiAgICAgIH1cbiAgICA8L3N2Zz5cbiAgYC5yZXBsYWNlQWxsKFwiXFxuXCIsIFwiXCIpO1xuICByZXR1cm4gYGRhdGE6aW1hZ2Uvc3ZnK3htbCwke2VuY29kZVVSSUNvbXBvbmVudChzdmcpfWA7XG59XG4iLCAiZXhwb3J0IHsgT0F1dGhTZXJ2aWNlIH0gZnJvbSBcIi4vT0F1dGhTZXJ2aWNlXCI7XG5leHBvcnQgeyB3aXRoQWNjZXNzVG9rZW4sIGdldEFjY2Vzc1Rva2VuIH0gZnJvbSBcIi4vd2l0aEFjY2Vzc1Rva2VuXCI7XG5cbmV4cG9ydCB0eXBlIHsgV2l0aEFjY2Vzc1Rva2VuQ29tcG9uZW50T3JGbiB9IGZyb20gXCIuL3dpdGhBY2Nlc3NUb2tlblwiO1xuZXhwb3J0IHR5cGUge1xuICBPbkF1dGhvcml6ZVBhcmFtcyxcbiAgT0F1dGhTZXJ2aWNlT3B0aW9ucyxcbiAgUHJvdmlkZXJXaXRoRGVmYXVsdENsaWVudE9wdGlvbnMsXG4gIFByb3ZpZGVyT3B0aW9ucyxcbn0gZnJvbSBcIi4vdHlwZXNcIjtcbiIsICJpbXBvcnQgeyBDb2xvciwgT0F1dGggfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG5pbXBvcnQgeyBQUk9WSURFUl9DTElFTlRfSURTIH0gZnJvbSBcIi4vcHJvdmlkZXJzXCI7XG5pbXBvcnQgdHlwZSB7XG4gIE9BdXRoU2VydmljZU9wdGlvbnMsXG4gIE9uQXV0aG9yaXplUGFyYW1zLFxuICBQcm92aWRlck9wdGlvbnMsXG4gIFByb3ZpZGVyV2l0aERlZmF1bHRDbGllbnRPcHRpb25zLFxufSBmcm9tIFwiLi90eXBlc1wiO1xuXG4vKipcbiAqIENsYXNzIGFsbG93aW5nIHRvIGNyZWF0ZSBhbiBPQXV0aCBzZXJ2aWNlIHVzaW5nIHRoZSB0aGUgUEtDRSAoUHJvb2YgS2V5IGZvciBDb2RlIEV4Y2hhbmdlKSBmbG93LlxuICpcbiAqIFRoaXMgc2VydmljZSBpcyBjYXBhYmxlIG9mIHN0YXJ0aW5nIHRoZSBhdXRob3JpemF0aW9uIHByb2Nlc3MsIGZldGNoaW5nIGFuZCByZWZyZXNoaW5nIHRva2VucyxcbiAqIGFzIHdlbGwgYXMgbWFuYWdpbmcgdGhlIGF1dGhlbnRpY2F0aW9uIHN0YXRlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBvYXV0aENsaWVudCA9IG5ldyBPQXV0aC5QS0NFQ2xpZW50KHsgLi4uIH0pO1xuICogY29uc3Qgb2F1dGhTZXJ2aWNlID0gbmV3IE9BdXRoU2VydmljZSh7XG4gKiAgIGNsaWVudDogb2F1dGhDbGllbnQsXG4gKiAgIGNsaWVudElkOiAneW91ci1jbGllbnQtaWQnLFxuICogICBzY29wZTogJ3JlcXVpcmVkIHNjb3BlcycsXG4gKiAgIGF1dGhvcml6ZVVybDogJ2h0dHBzOi8vcHJvdmlkZXIuY29tL29hdXRoL2F1dGhvcml6ZScsXG4gKiAgIHRva2VuVXJsOiAnaHR0cHM6Ly9wcm92aWRlci5jb20vb2F1dGgvdG9rZW4nLFxuICogICByZWZyZXNoVG9rZW5Vcmw6ICdodHRwczovL3Byb3ZpZGVyLmNvbS9vYXV0aC90b2tlbicsXG4gKiAgIGV4dHJhUGFyYW1ldGVyczogeyAnYWRkaXRpb25hbF9wYXJhbSc6ICd2YWx1ZScgfVxuICogfSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIE9BdXRoU2VydmljZSBpbXBsZW1lbnRzIE9BdXRoU2VydmljZU9wdGlvbnMge1xuICBwdWJsaWMgY2xpZW50SWQ6IHN0cmluZztcbiAgcHVibGljIHNjb3BlOiBzdHJpbmc7XG4gIHB1YmxpYyBjbGllbnQ6IE9BdXRoLlBLQ0VDbGllbnQ7XG4gIHB1YmxpYyBleHRyYVBhcmFtZXRlcnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICBwdWJsaWMgYXV0aG9yaXplVXJsOiBzdHJpbmc7XG4gIHB1YmxpYyB0b2tlblVybDogc3RyaW5nO1xuICBwdWJsaWMgcmVmcmVzaFRva2VuVXJsPzogc3RyaW5nO1xuICBwdWJsaWMgYm9keUVuY29kaW5nPzogXCJqc29uXCIgfCBcInVybC1lbmNvZGVkXCI7XG4gIHB1YmxpYyBwZXJzb25hbEFjY2Vzc1Rva2VuPzogc3RyaW5nO1xuICBvbkF1dGhvcml6ZT86IChwYXJhbXM6IE9uQXV0aG9yaXplUGFyYW1zKSA9PiB2b2lkO1xuICB0b2tlblJlc3BvbnNlUGFyc2VyOiAocmVzcG9uc2U6IHVua25vd24pID0+IE9BdXRoLlRva2VuUmVzcG9uc2U7XG4gIHRva2VuUmVmcmVzaFJlc3BvbnNlUGFyc2VyOiAocmVzcG9uc2U6IHVua25vd24pID0+IE9BdXRoLlRva2VuUmVzcG9uc2U7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogT0F1dGhTZXJ2aWNlT3B0aW9ucykge1xuICAgIHRoaXMuY2xpZW50SWQgPSBvcHRpb25zLmNsaWVudElkO1xuICAgIHRoaXMuc2NvcGUgPSBBcnJheS5pc0FycmF5KG9wdGlvbnMuc2NvcGUpID8gb3B0aW9ucy5zY29wZS5qb2luKFwiIFwiKSA6IG9wdGlvbnMuc2NvcGU7XG4gICAgdGhpcy5wZXJzb25hbEFjY2Vzc1Rva2VuID0gb3B0aW9ucy5wZXJzb25hbEFjY2Vzc1Rva2VuO1xuICAgIHRoaXMuYm9keUVuY29kaW5nID0gb3B0aW9ucy5ib2R5RW5jb2Rpbmc7XG4gICAgdGhpcy5jbGllbnQgPSBvcHRpb25zLmNsaWVudDtcbiAgICB0aGlzLmV4dHJhUGFyYW1ldGVycyA9IG9wdGlvbnMuZXh0cmFQYXJhbWV0ZXJzO1xuICAgIHRoaXMuYXV0aG9yaXplVXJsID0gb3B0aW9ucy5hdXRob3JpemVVcmw7XG4gICAgdGhpcy50b2tlblVybCA9IG9wdGlvbnMudG9rZW5Vcmw7XG4gICAgdGhpcy5yZWZyZXNoVG9rZW5VcmwgPSBvcHRpb25zLnJlZnJlc2hUb2tlblVybDtcbiAgICB0aGlzLm9uQXV0aG9yaXplID0gb3B0aW9ucy5vbkF1dGhvcml6ZTtcbiAgICB0aGlzLnRva2VuUmVzcG9uc2VQYXJzZXIgPSBvcHRpb25zLnRva2VuUmVzcG9uc2VQYXJzZXIgPz8gKCh4KSA9PiB4IGFzIE9BdXRoLlRva2VuUmVzcG9uc2UpO1xuICAgIHRoaXMudG9rZW5SZWZyZXNoUmVzcG9uc2VQYXJzZXIgPSBvcHRpb25zLnRva2VuUmVmcmVzaFJlc3BvbnNlUGFyc2VyID8/ICgoeCkgPT4geCBhcyBPQXV0aC5Ub2tlblJlc3BvbnNlKTtcbiAgICB0aGlzLmF1dGhvcml6ZSA9IHRoaXMuYXV0aG9yaXplLmJpbmQodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQXNhbmEgT0F1dGggc2VydmljZSBwcm92aWRlZCBvdXQgb2YgdGhlIGJveC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCBhc2FuYSA9IE9BdXRoU2VydmljZS5hc2FuYSh7IHNjb3BlOiAnZGVmYXVsdCcgfSlcbiAgICogYGBgXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGFzYW5hKG9wdGlvbnM6IFByb3ZpZGVyV2l0aERlZmF1bHRDbGllbnRPcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBPQXV0aFNlcnZpY2Uoe1xuICAgICAgY2xpZW50OiBuZXcgT0F1dGguUEtDRUNsaWVudCh7XG4gICAgICAgIHJlZGlyZWN0TWV0aG9kOiBPQXV0aC5SZWRpcmVjdE1ldGhvZC5XZWIsXG4gICAgICAgIHByb3ZpZGVyTmFtZTogXCJBc2FuYVwiLFxuICAgICAgICBwcm92aWRlckljb246IGBkYXRhOmltYWdlL3N2Zyt4bWwsJHtlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICAgICAgYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjUxXCIgaGVpZ2h0PVwiMjMyXCIgZmlsbD1cIm5vbmVcIj48cGF0aCBmaWxsPVwiI0YwNkE2QVwiIGQ9XCJNMTc5LjM4MyA1NC4zNzNjMCAzMC4wMTctMjQuMzM3IDU0LjM3NC01NC4zNTQgNTQuMzc0LTMwLjAzNSAwLTU0LjM3My0yNC4zMzgtNTQuMzczLTU0LjM3NEM3MC42NTYgMjQuMzM4IDk0Ljk5MyAwIDEyNS4wMjkgMGMzMC4wMTcgMCA1NC4zNTQgMjQuMzM4IDU0LjM1NCA1NC4zNzNaTTU0LjM5MyAxMjIuMzNDMjQuMzc2IDEyMi4zMy4wMiAxNDYuNjY4LjAyIDE3Ni42ODVjMCAzMC4wMTcgMjQuMzM3IDU0LjM3MyA1NC4zNzMgNTQuMzczIDMwLjAzNSAwIDU0LjM3My0yNC4zMzggNTQuMzczLTU0LjM3MyAwLTMwLjAxNy0yNC4zMzgtNTQuMzU1LTU0LjM3My01NC4zNTVabTE0MS4yNTMgMGMtMzAuMDM1IDAtNTQuMzczIDI0LjMzOC01NC4zNzMgNTQuMzc0IDAgMzAuMDM1IDI0LjMzOCA1NC4zNzMgNTQuMzczIDU0LjM3MyAzMC4wMTcgMCA1NC4zNzQtMjQuMzM4IDU0LjM3NC01NC4zNzMgMC0zMC4wMzYtMjQuMzM4LTU0LjM3NC01NC4zNzQtNTQuMzc0WlwiLz48L3N2Zz5gLFxuICAgICAgICApfWAsXG4gICAgICAgIHByb3ZpZGVySWQ6IFwiYXNhbmFcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQ29ubmVjdCB5b3VyIEFzYW5hIGFjY291bnRcIixcbiAgICAgIH0pLFxuICAgICAgY2xpZW50SWQ6IG9wdGlvbnMuY2xpZW50SWQgPz8gUFJPVklERVJfQ0xJRU5UX0lEUy5hc2FuYSxcbiAgICAgIGF1dGhvcml6ZVVybDogb3B0aW9ucy5hdXRob3JpemVVcmwgPz8gXCJodHRwczovL2FzYW5hLm9hdXRoLnJheWNhc3QuY29tL2F1dGhvcml6ZVwiLFxuICAgICAgdG9rZW5Vcmw6IG9wdGlvbnMudG9rZW5VcmwgPz8gXCJodHRwczovL2FzYW5hLm9hdXRoLnJheWNhc3QuY29tL3Rva2VuXCIsXG4gICAgICByZWZyZXNoVG9rZW5Vcmw6IG9wdGlvbnMucmVmcmVzaFRva2VuVXJsID8/IFwiaHR0cHM6Ly9hc2FuYS5vYXV0aC5yYXljYXN0LmNvbS9yZWZyZXNoLXRva2VuXCIsXG4gICAgICBzY29wZTogb3B0aW9ucy5zY29wZSxcbiAgICAgIHBlcnNvbmFsQWNjZXNzVG9rZW46IG9wdGlvbnMucGVyc29uYWxBY2Nlc3NUb2tlbixcbiAgICAgIG9uQXV0aG9yaXplOiBvcHRpb25zLm9uQXV0aG9yaXplLFxuICAgICAgYm9keUVuY29kaW5nOiBvcHRpb25zLmJvZHlFbmNvZGluZyxcbiAgICAgIHRva2VuUmVmcmVzaFJlc3BvbnNlUGFyc2VyOiBvcHRpb25zLnRva2VuUmVmcmVzaFJlc3BvbnNlUGFyc2VyLFxuICAgICAgdG9rZW5SZXNwb25zZVBhcnNlcjogb3B0aW9ucy50b2tlblJlc3BvbnNlUGFyc2VyLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdpdEh1YiBPQXV0aCBzZXJ2aWNlIHByb3ZpZGVkIG91dCBvZiB0aGUgYm94LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IGdpdGh1YiA9IE9BdXRoU2VydmljZS5naXRodWIoeyBzY29wZTogJ3JlcG8gdXNlcicgfSlcbiAgICogYGBgXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdpdGh1YihvcHRpb25zOiBQcm92aWRlcldpdGhEZWZhdWx0Q2xpZW50T3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgT0F1dGhTZXJ2aWNlKHtcbiAgICAgIGNsaWVudDogbmV3IE9BdXRoLlBLQ0VDbGllbnQoe1xuICAgICAgICByZWRpcmVjdE1ldGhvZDogT0F1dGguUmVkaXJlY3RNZXRob2QuV2ViLFxuICAgICAgICBwcm92aWRlck5hbWU6IFwiR2l0SHViXCIsXG4gICAgICAgIHByb3ZpZGVySWNvbjoge1xuICAgICAgICAgIHNvdXJjZTogYGRhdGE6aW1hZ2Uvc3ZnK3htbCwke2VuY29kZVVSSUNvbXBvbmVudChcbiAgICAgICAgICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjY0XCIgaGVpZ2h0PVwiNjRcIiB2aWV3Qm94PVwiMCAwIDE2IDE2XCI+PHBhdGggZmlsbC1ydWxlPVwiZXZlbm9kZFwiIGQ9XCJNOCAwQzMuNTggMCAwIDMuNTggMCA4YzAgMy41NCAyLjI5IDYuNTMgNS40NyA3LjU5LjQuMDcuNTUtLjE3LjU1LS4zOCAwLS4xOS0uMDEtLjgyLS4wMS0xLjQ5LTIuMDEuMzctMi41My0uNDktMi42OS0uOTQtLjA5LS4yMy0uNDgtLjk0LS44Mi0xLjEzLS4yOC0uMTUtLjY4LS41Mi0uMDEtLjUzLjYzLS4wMSAxLjA4LjU4IDEuMjMuODIuNzIgMS4yMSAxLjg3Ljg3IDIuMzMuNjYuMDctLjUyLjI4LS44Ny41MS0xLjA3LTEuNzgtLjItMy42NC0uODktMy42NC0zLjk1IDAtLjg3LjMxLTEuNTkuODItMi4xNS0uMDgtLjItLjM2LTEuMDIuMDgtMi4xMiAwIDAgLjY3LS4yMSAyLjIuODIuNjQtLjE4IDEuMzItLjI3IDItLjI3LjY4IDAgMS4zNi4wOSAyIC4yNyAxLjUzLTEuMDQgMi4yLS44MiAyLjItLjgyLjQ0IDEuMS4xNiAxLjkyLjA4IDIuMTIuNTEuNTYuODIgMS4yNy44MiAyLjE1IDAgMy4wNy0xLjg3IDMuNzUtMy42NSAzLjk1LjI5LjI1LjU0LjczLjU0IDEuNDggMCAxLjA3LS4wMSAxLjkzLS4wMSAyLjIgMCAuMjEuMTUuNDYuNTUuMzhBOC4wMTMgOC4wMTMgMCAwIDAgMTYgOGMwLTQuNDItMy41OC04LTgtOHpcIi8+PC9zdmc+YCxcbiAgICAgICAgICApfWAsXG5cbiAgICAgICAgICB0aW50Q29sb3I6IENvbG9yLlByaW1hcnlUZXh0LFxuICAgICAgICB9LFxuICAgICAgICBwcm92aWRlcklkOiBcImdpdGh1YlwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJDb25uZWN0IHlvdXIgR2l0SHViIGFjY291bnRcIixcbiAgICAgIH0pLFxuICAgICAgY2xpZW50SWQ6IG9wdGlvbnMuY2xpZW50SWQgPz8gUFJPVklERVJfQ0xJRU5UX0lEUy5naXRodWIsXG4gICAgICBhdXRob3JpemVVcmw6IG9wdGlvbnMuYXV0aG9yaXplVXJsID8/IFwiaHR0cHM6Ly9naXRodWIub2F1dGgucmF5Y2FzdC5jb20vYXV0aG9yaXplXCIsXG4gICAgICB0b2tlblVybDogb3B0aW9ucy50b2tlblVybCA/PyBcImh0dHBzOi8vZ2l0aHViLm9hdXRoLnJheWNhc3QuY29tL3Rva2VuXCIsXG4gICAgICByZWZyZXNoVG9rZW5Vcmw6IG9wdGlvbnMucmVmcmVzaFRva2VuVXJsID8/IFwiaHR0cHM6Ly9naXRodWIub2F1dGgucmF5Y2FzdC5jb20vcmVmcmVzaC10b2tlblwiLFxuICAgICAgc2NvcGU6IG9wdGlvbnMuc2NvcGUsXG4gICAgICBwZXJzb25hbEFjY2Vzc1Rva2VuOiBvcHRpb25zLnBlcnNvbmFsQWNjZXNzVG9rZW4sXG4gICAgICBvbkF1dGhvcml6ZTogb3B0aW9ucy5vbkF1dGhvcml6ZSxcbiAgICAgIGJvZHlFbmNvZGluZzogb3B0aW9ucy5ib2R5RW5jb2RpbmcsXG4gICAgICB0b2tlblJlZnJlc2hSZXNwb25zZVBhcnNlcjogb3B0aW9ucy50b2tlblJlZnJlc2hSZXNwb25zZVBhcnNlcixcbiAgICAgIHRva2VuUmVzcG9uc2VQYXJzZXI6IG9wdGlvbnMudG9rZW5SZXNwb25zZVBhcnNlcixcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHb29nbGUgT0F1dGggc2VydmljZSBwcm92aWRlZCBvdXQgb2YgdGhlIGJveC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCBnb29nbGUgPSBPQXV0aFNlcnZpY2UuZ29vZ2xlKHtcbiAgICogICBjbGllbnRJZDogJ2N1c3RvbS1jbGllbnQtaWQnLFxuICAgKiAgIGF1dGhvcml6ZVVybDogJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi92Mi9hdXRoJyxcbiAgICogICB0b2tlblVybDogJ2h0dHBzOi8vb2F1dGgyLmdvb2dsZWFwaXMuY29tL3Rva2VuJyxcbiAgICogICBzY29wZTogJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvZHJpdmUucmVhZG9ubHknLFxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdvb2dsZShvcHRpb25zOiBQcm92aWRlck9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IE9BdXRoU2VydmljZSh7XG4gICAgICBjbGllbnQ6IG5ldyBPQXV0aC5QS0NFQ2xpZW50KHtcbiAgICAgICAgcmVkaXJlY3RNZXRob2Q6IE9BdXRoLlJlZGlyZWN0TWV0aG9kLkFwcFVSSSxcbiAgICAgICAgcHJvdmlkZXJOYW1lOiBcIkdvb2dsZVwiLFxuICAgICAgICBwcm92aWRlckljb246IGBkYXRhOmltYWdlL3N2Zyt4bWwsJHtlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICAgICAgYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHN0eWxlPVwiZGlzcGxheTpibG9ja1wiIHZpZXdCb3g9XCIwIDAgNDggNDhcIj48cGF0aCBmaWxsPVwiI0VBNDMzNVwiIGQ9XCJNMjQgOS41YzMuNTQgMCA2LjcxIDEuMjIgOS4yMSAzLjZsNi44NS02Ljg1QzM1LjkgMi4zOCAzMC40NyAwIDI0IDAgMTQuNjIgMCA2LjUxIDUuMzggMi41NiAxMy4yMmw3Ljk4IDYuMTlDMTIuNDMgMTMuNzIgMTcuNzQgOS41IDI0IDkuNXpcIi8+PHBhdGggZmlsbD1cIiM0Mjg1RjRcIiBkPVwiTTQ2Ljk4IDI0LjU1YzAtMS41Ny0uMTUtMy4wOS0uMzgtNC41NUgyNHY5LjAyaDEyLjk0Yy0uNTggMi45Ni0yLjI2IDUuNDgtNC43OCA3LjE4bDcuNzMgNmM0LjUxLTQuMTggNy4wOS0xMC4zNiA3LjA5LTE3LjY1elwiLz48cGF0aCBmaWxsPVwiI0ZCQkMwNVwiIGQ9XCJNMTAuNTMgMjguNTljLS40OC0xLjQ1LS43Ni0yLjk5LS43Ni00LjU5cy4yNy0zLjE0Ljc2LTQuNTlsLTcuOTgtNi4xOUMuOTIgMTYuNDYgMCAyMC4xMiAwIDI0YzAgMy44OC45MiA3LjU0IDIuNTYgMTAuNzhsNy45Ny02LjE5elwiLz48cGF0aCBmaWxsPVwiIzM0QTg1M1wiIGQ9XCJNMjQgNDhjNi40OCAwIDExLjkzLTIuMTMgMTUuODktNS44MWwtNy43My02Yy0yLjE1IDEuNDUtNC45MiAyLjMtOC4xNiAyLjMtNi4yNiAwLTExLjU3LTQuMjItMTMuNDctOS45MWwtNy45OCA2LjE5QzYuNTEgNDIuNjIgMTQuNjIgNDggMjQgNDh6XCIvPjxwYXRoIGZpbGw9XCJub25lXCIgZD1cIk0wIDBoNDh2NDhIMHpcIi8+PC9zdmc+YCxcbiAgICAgICAgKX1gLFxuICAgICAgICBwcm92aWRlcklkOiBcImdvb2dsZVwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJDb25uZWN0IHlvdXIgR29vZ2xlIGFjY291bnRcIixcbiAgICAgIH0pLFxuICAgICAgY2xpZW50SWQ6IG9wdGlvbnMuY2xpZW50SWQsXG4gICAgICBhdXRob3JpemVVcmw6IG9wdGlvbnMuYXV0aG9yaXplVXJsID8/IFwiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL3YyL2F1dGhcIixcbiAgICAgIHRva2VuVXJsOiBvcHRpb25zLnRva2VuVXJsID8/IFwiaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW5cIixcbiAgICAgIHJlZnJlc2hUb2tlblVybDogb3B0aW9ucy50b2tlblVybCxcbiAgICAgIHNjb3BlOiBvcHRpb25zLnNjb3BlLFxuICAgICAgcGVyc29uYWxBY2Nlc3NUb2tlbjogb3B0aW9ucy5wZXJzb25hbEFjY2Vzc1Rva2VuLFxuICAgICAgYm9keUVuY29kaW5nOiBvcHRpb25zLmJvZHlFbmNvZGluZyA/PyBcInVybC1lbmNvZGVkXCIsXG4gICAgICBvbkF1dGhvcml6ZTogb3B0aW9ucy5vbkF1dGhvcml6ZSxcbiAgICAgIHRva2VuUmVmcmVzaFJlc3BvbnNlUGFyc2VyOiBvcHRpb25zLnRva2VuUmVmcmVzaFJlc3BvbnNlUGFyc2VyLFxuICAgICAgdG9rZW5SZXNwb25zZVBhcnNlcjogb3B0aW9ucy50b2tlblJlc3BvbnNlUGFyc2VyLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEppcmEgT0F1dGggc2VydmljZSBwcm92aWRlZCBvdXQgb2YgdGhlIGJveC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCBqaXJhID0gT0F1dGhTZXJ2aWNlLmppcmEoe1xuICAgKiAgIGNsaWVudElkOiAnY3VzdG9tLWNsaWVudC1pZCcsXG4gICAqICAgYXV0aG9yaXplVXJsOiAnaHR0cHM6Ly9hdXRoLmF0bGFzc2lhbi5jb20vYXV0aG9yaXplJyxcbiAgICogICB0b2tlblVybDogJ2h0dHBzOi8vYXBpLmF0bGFzc2lhbi5jb20vb2F1dGgvdG9rZW4nLFxuICAgKiAgIHNjb3BlOiAncmVhZDpqaXJhLXVzZXIgcmVhZDpqaXJhLXdvcmsgb2ZmbGluZV9hY2Nlc3MnXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgamlyYShvcHRpb25zOiBQcm92aWRlck9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IE9BdXRoU2VydmljZSh7XG4gICAgICBjbGllbnQ6IG5ldyBPQXV0aC5QS0NFQ2xpZW50KHtcbiAgICAgICAgcmVkaXJlY3RNZXRob2Q6IE9BdXRoLlJlZGlyZWN0TWV0aG9kLldlYixcbiAgICAgICAgcHJvdmlkZXJOYW1lOiBcIkppcmFcIixcbiAgICAgICAgcHJvdmlkZXJJY29uOiBgZGF0YTppbWFnZS9zdmcreG1sLCR7ZW5jb2RlVVJJQ29tcG9uZW50KFxuICAgICAgICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB3aWR0aD1cIjIzNjFcIiBoZWlnaHQ9XCIyNTAwXCIgdmlld0JveD1cIjIuNTkgMCAyMTQuMDkxIDIyNFwiPjxsaW5lYXJHcmFkaWVudCBpZD1cImFcIiB4MT1cIjEwMi40XCIgeDI9XCI1Ni4xNVwiIHkxPVwiMjE4LjYzXCIgeTI9XCIxNzIuMzlcIiBncmFkaWVudFRyYW5zZm9ybT1cIm1hdHJpeCgxIDAgMCAtMSAwIDI2NClcIiBncmFkaWVudFVuaXRzPVwidXNlclNwYWNlT25Vc2VcIj48c3RvcCBvZmZzZXQ9XCIuMThcIiBzdG9wLWNvbG9yPVwiIzAwNTJjY1wiLz48c3RvcCBvZmZzZXQ9XCIxXCIgc3RvcC1jb2xvcj1cIiMyNjg0ZmZcIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgeGxpbms6aHJlZj1cIiNhXCIgaWQ9XCJiXCIgeDE9XCIxMTQuNjVcIiB4Mj1cIjE2MC44MVwiIHkxPVwiODUuNzdcIiB5Mj1cIjEzMS45MlwiLz48cGF0aCBmaWxsPVwiIzI2ODRmZlwiIGQ9XCJNMjE0LjA2IDEwNS43MyAxMTcuNjcgOS4zNCAxMDguMzMgMCAzNS43NyA3Mi41NiAyLjU5IDEwNS43M2E4Ljg5IDguODkgMCAwIDAgMCAxMi41NGw2Ni4yOSA2Ni4yOUwxMDguMzMgMjI0bDcyLjU1LTcyLjU2IDEuMTMtMS4xMiAzMi4wNS0zMmE4Ljg3IDguODcgMCAwIDAgMC0xMi41OXptLTEwNS43MyAzOS4zOUw3NS4yMSAxMTJsMzMuMTItMzMuMTJMMTQxLjQ0IDExMnpcIi8+PHBhdGggZmlsbD1cInVybCgjYSlcIiBkPVwiTTEwOC4zMyA3OC44OGE1NS43NSA1NS43NSAwIDAgMS0uMjQtNzguNjFMMzUuNjIgNzIuNzFsMzkuNDQgMzkuNDR6XCIvPjxwYXRoIGZpbGw9XCJ1cmwoI2IpXCIgZD1cIm0xNDEuNTMgMTExLjkxLTMzLjIgMzMuMjFhNTUuNzcgNTUuNzcgMCAwIDEgMCA3OC44NkwxODEgMTUxLjM1elwiLz48L3N2Zz5gLFxuICAgICAgICApfWAsXG4gICAgICAgIHByb3ZpZGVySWQ6IFwiamlyYVwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJDb25uZWN0IHlvdXIgSmlyYSBhY2NvdW50XCIsXG4gICAgICB9KSxcbiAgICAgIGNsaWVudElkOiBvcHRpb25zLmNsaWVudElkLFxuICAgICAgYXV0aG9yaXplVXJsOiBvcHRpb25zLmF1dGhvcml6ZVVybCA/PyBcImh0dHBzOi8vYXV0aC5hdGxhc3NpYW4uY29tL2F1dGhvcml6ZVwiLFxuICAgICAgdG9rZW5Vcmw6IG9wdGlvbnMudG9rZW5VcmwgPz8gXCJodHRwczovL2F1dGguYXRsYXNzaWFuLmNvbS9vYXV0aC90b2tlblwiLFxuICAgICAgcmVmcmVzaFRva2VuVXJsOiBvcHRpb25zLnJlZnJlc2hUb2tlblVybCxcbiAgICAgIHNjb3BlOiBvcHRpb25zLnNjb3BlLFxuICAgICAgcGVyc29uYWxBY2Nlc3NUb2tlbjogb3B0aW9ucy5wZXJzb25hbEFjY2Vzc1Rva2VuLFxuICAgICAgb25BdXRob3JpemU6IG9wdGlvbnMub25BdXRob3JpemUsXG4gICAgICBib2R5RW5jb2Rpbmc6IG9wdGlvbnMuYm9keUVuY29kaW5nLFxuICAgICAgdG9rZW5SZWZyZXNoUmVzcG9uc2VQYXJzZXI6IG9wdGlvbnMudG9rZW5SZWZyZXNoUmVzcG9uc2VQYXJzZXIsXG4gICAgICB0b2tlblJlc3BvbnNlUGFyc2VyOiBvcHRpb25zLnRva2VuUmVzcG9uc2VQYXJzZXIsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTGluZWFyIE9BdXRoIHNlcnZpY2UgcHJvdmlkZWQgb3V0IG9mIHRoZSBib3guXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogY29uc3QgbGluZWFyID0gT0F1dGhTZXJ2aWNlLmxpbmVhcih7IHNjb3BlOiAncmVhZCB3cml0ZScgfSlcbiAgICogYGBgXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGxpbmVhcihvcHRpb25zOiBQcm92aWRlcldpdGhEZWZhdWx0Q2xpZW50T3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgT0F1dGhTZXJ2aWNlKHtcbiAgICAgIGNsaWVudDogbmV3IE9BdXRoLlBLQ0VDbGllbnQoe1xuICAgICAgICByZWRpcmVjdE1ldGhvZDogT0F1dGguUmVkaXJlY3RNZXRob2QuV2ViLFxuICAgICAgICBwcm92aWRlck5hbWU6IFwiTGluZWFyXCIsXG4gICAgICAgIHByb3ZpZGVySWNvbjoge1xuICAgICAgICAgIHNvdXJjZToge1xuICAgICAgICAgICAgbGlnaHQ6IGBkYXRhOmltYWdlL3N2Zyt4bWwsJHtlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICAgICAgICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiIzIyMjMyNlwiIHdpZHRoPVwiMjAwXCIgaGVpZ2h0PVwiMjAwXCIgdmlld0JveD1cIjAgMCAxMDAgMTAwXCI+PHBhdGggZD1cIk0xLjIyNTQxIDYxLjUyMjhjLS4yMjI1LS45NDg1LjkwNzQ4LTEuNTQ1OSAxLjU5NjM4LS44NTdMMzkuMzM0MiA5Ny4xNzgyYy42ODg5LjY4ODkuMDkxNSAxLjgxODktLjg1NyAxLjU5NjRDMjAuMDUxNSA5NC40NTIyIDUuNTQ3NzkgNzkuOTQ4NSAxLjIyNTQxIDYxLjUyMjhaTS4wMDE4OTEzNSA0Ni44ODkxYy0uMDE3NjQzNzUuMjgzMy4wODg4NzIxNS41NTk5LjI4OTU3MTY1Ljc2MDZMNTIuMzUwMyA5OS43MDg1Yy4yMDA3LjIwMDcuNDc3My4zMDc1Ljc2MDYuMjg5NiAyLjM2OTItLjE0NzYgNC42OTM4LS40NiA2Ljk2MjQtLjkyNTkuNzY0NS0uMTU3IDEuMDMwMS0xLjA5NjMuNDc4Mi0xLjY0ODFMMi41NzU5NSAzOS40NDg1Yy0uNTUxODYtLjU1MTktMS40OTExNy0uMjg2My0xLjY0ODE3NC40NzgyLS40NjU5MTUgMi4yNjg2LS43NzgzMiA0LjU5MzItLjkyNTg4NDY1IDYuOTYyNFpNNC4yMTA5MyAyOS43MDU0Yy0uMTY2NDkuMzczOC0uMDgxNjkuODEwNi4yMDc2NSAxLjFsNjQuNzc2MDIgNjQuNzc2Yy4yODk0LjI4OTQuNzI2Mi4zNzQyIDEuMS4yMDc3IDEuNzg2MS0uNzk1NiAzLjUxNzEtMS42OTI3IDUuMTg1NS0yLjY4NC41NTIxLS4zMjguNjM3My0xLjA4NjcuMTgzMi0xLjU0MDdMOC40MzU2NiAyNC4zMzY3Yy0uNDU0MDktLjQ1NDEtMS4yMTI3MS0uMzY4OS0xLjU0MDc0LjE4MzItLjk5MTMyIDEuNjY4NC0xLjg4ODQzIDMuMzk5NC0yLjY4Mzk5IDUuMTg1NVpNMTIuNjU4NyAxOC4wNzRjLS4zNzAxLS4zNzAxLS4zOTMtLjk2MzctLjA0NDMtMS4zNTQxQzIxLjc3OTUgNi40NTkzMSAzNS4xMTE0IDAgNDkuOTUxOSAwIDc3LjU5MjcgMCAxMDAgMjIuNDA3MyAxMDAgNTAuMDQ4MWMwIDE0Ljg0MDUtNi40NTkzIDI4LjE3MjQtMTYuNzE5OSAzNy4zMzc1LS4zOTAzLjM0ODctLjk4NC4zMjU4LTEuMzU0Mi0uMDQ0M0wxMi42NTg3IDE4LjA3NFpcIi8+PC9zdmc+YCxcbiAgICAgICAgICAgICl9YCxcbiAgICAgICAgICAgIGRhcms6IGBkYXRhOmltYWdlL3N2Zyt4bWwsJHtlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICAgICAgICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiMjAwXCIgaGVpZ2h0PVwiMjAwXCIgdmlld0JveD1cIjAgMCAxMDAgMTAwXCI+PHBhdGggZD1cIk0xLjIyNTQxIDYxLjUyMjhjLS4yMjI1LS45NDg1LjkwNzQ4LTEuNTQ1OSAxLjU5NjM4LS44NTdMMzkuMzM0MiA5Ny4xNzgyYy42ODg5LjY4ODkuMDkxNSAxLjgxODktLjg1NyAxLjU5NjRDMjAuMDUxNSA5NC40NTIyIDUuNTQ3NzkgNzkuOTQ4NSAxLjIyNTQxIDYxLjUyMjhaTS4wMDE4OTEzNSA0Ni44ODkxYy0uMDE3NjQzNzUuMjgzMy4wODg4NzIxNS41NTk5LjI4OTU3MTY1Ljc2MDZMNTIuMzUwMyA5OS43MDg1Yy4yMDA3LjIwMDcuNDc3My4zMDc1Ljc2MDYuMjg5NiAyLjM2OTItLjE0NzYgNC42OTM4LS40NiA2Ljk2MjQtLjkyNTkuNzY0NS0uMTU3IDEuMDMwMS0xLjA5NjMuNDc4Mi0xLjY0ODFMMi41NzU5NSAzOS40NDg1Yy0uNTUxODYtLjU1MTktMS40OTExNy0uMjg2My0xLjY0ODE3NC40NzgyLS40NjU5MTUgMi4yNjg2LS43NzgzMiA0LjU5MzItLjkyNTg4NDY1IDYuOTYyNFpNNC4yMTA5MyAyOS43MDU0Yy0uMTY2NDkuMzczOC0uMDgxNjkuODEwNi4yMDc2NSAxLjFsNjQuNzc2MDIgNjQuNzc2Yy4yODk0LjI4OTQuNzI2Mi4zNzQyIDEuMS4yMDc3IDEuNzg2MS0uNzk1NiAzLjUxNzEtMS42OTI3IDUuMTg1NS0yLjY4NC41NTIxLS4zMjguNjM3My0xLjA4NjcuMTgzMi0xLjU0MDdMOC40MzU2NiAyNC4zMzY3Yy0uNDU0MDktLjQ1NDEtMS4yMTI3MS0uMzY4OS0xLjU0MDc0LjE4MzItLjk5MTMyIDEuNjY4NC0xLjg4ODQzIDMuMzk5NC0yLjY4Mzk5IDUuMTg1NVpNMTIuNjU4NyAxOC4wNzRjLS4zNzAxLS4zNzAxLS4zOTMtLjk2MzctLjA0NDMtMS4zNTQxQzIxLjc3OTUgNi40NTkzMSAzNS4xMTE0IDAgNDkuOTUxOSAwIDc3LjU5MjcgMCAxMDAgMjIuNDA3MyAxMDAgNTAuMDQ4MWMwIDE0Ljg0MDUtNi40NTkzIDI4LjE3MjQtMTYuNzE5OSAzNy4zMzc1LS4zOTAzLjM0ODctLjk4NC4zMjU4LTEuMzU0Mi0uMDQ0M0wxMi42NTg3IDE4LjA3NFpcIiAvPjwvc3ZnPmAsXG4gICAgICAgICAgICApfWAsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgcHJvdmlkZXJJZDogXCJsaW5lYXJcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQ29ubmVjdCB5b3VyIExpbmVhciBhY2NvdW50XCIsXG4gICAgICB9KSxcbiAgICAgIGNsaWVudElkOiBvcHRpb25zLmNsaWVudElkID8/IFBST1ZJREVSX0NMSUVOVF9JRFMubGluZWFyLFxuICAgICAgYXV0aG9yaXplVXJsOiBvcHRpb25zLmF1dGhvcml6ZVVybCA/PyBcImh0dHBzOi8vbGluZWFyLm9hdXRoLnJheWNhc3QuY29tL2F1dGhvcml6ZVwiLFxuICAgICAgdG9rZW5Vcmw6IG9wdGlvbnMudG9rZW5VcmwgPz8gXCJodHRwczovL2xpbmVhci5vYXV0aC5yYXljYXN0LmNvbS90b2tlblwiLFxuICAgICAgcmVmcmVzaFRva2VuVXJsOiBvcHRpb25zLnJlZnJlc2hUb2tlblVybCA/PyBcImh0dHBzOi8vbGluZWFyLm9hdXRoLnJheWNhc3QuY29tL3JlZnJlc2gtdG9rZW5cIixcbiAgICAgIHNjb3BlOiBvcHRpb25zLnNjb3BlLFxuICAgICAgZXh0cmFQYXJhbWV0ZXJzOiB7XG4gICAgICAgIGFjdG9yOiBcInVzZXJcIixcbiAgICAgIH0sXG4gICAgICBvbkF1dGhvcml6ZTogb3B0aW9ucy5vbkF1dGhvcml6ZSxcbiAgICAgIGJvZHlFbmNvZGluZzogb3B0aW9ucy5ib2R5RW5jb2RpbmcsXG4gICAgICB0b2tlblJlZnJlc2hSZXNwb25zZVBhcnNlcjogb3B0aW9ucy50b2tlblJlZnJlc2hSZXNwb25zZVBhcnNlcixcbiAgICAgIHRva2VuUmVzcG9uc2VQYXJzZXI6IG9wdGlvbnMudG9rZW5SZXNwb25zZVBhcnNlcixcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTbGFjayBPQXV0aCBzZXJ2aWNlIHByb3ZpZGVkIG91dCBvZiB0aGUgYm94LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IHNsYWNrID0gT0F1dGhTZXJ2aWNlLnNsYWNrKHsgc2NvcGU6ICdlbW9qaTpyZWFkJyB9KVxuICAgKiBgYGBcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgc2xhY2sob3B0aW9uczogUHJvdmlkZXJXaXRoRGVmYXVsdENsaWVudE9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IE9BdXRoU2VydmljZSh7XG4gICAgICBjbGllbnQ6IG5ldyBPQXV0aC5QS0NFQ2xpZW50KHtcbiAgICAgICAgcmVkaXJlY3RNZXRob2Q6IE9BdXRoLlJlZGlyZWN0TWV0aG9kLldlYixcbiAgICAgICAgcHJvdmlkZXJOYW1lOiBcIlNsYWNrXCIsXG4gICAgICAgIHByb3ZpZGVySWNvbjogYGRhdGE6aW1hZ2Uvc3ZnK3htbCwke2VuY29kZVVSSUNvbXBvbmVudChcbiAgICAgICAgICBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjczIDczIDEyNCAxMjRcIj48c3R5bGU+LnN0MHtmaWxsOiNlMDFlNWF9LnN0MXtmaWxsOiMzNmM1ZjB9LnN0MntmaWxsOiMyZWI2N2R9LnN0M3tmaWxsOiNlY2IyMmV9PC9zdHlsZT48cGF0aCBkPVwiTTk5LjQgMTUxLjJjMCA3LjEtNS44IDEyLjktMTIuOSAxMi45LTcuMSAwLTEyLjktNS44LTEyLjktMTIuOSAwLTcuMSA1LjgtMTIuOSAxMi45LTEyLjloMTIuOXYxMi45ek0xMDUuOSAxNTEuMmMwLTcuMSA1LjgtMTIuOSAxMi45LTEyLjlzMTIuOSA1LjggMTIuOSAxMi45djMyLjNjMCA3LjEtNS44IDEyLjktMTIuOSAxMi45cy0xMi45LTUuOC0xMi45LTEyLjl2LTMyLjN6XCIgY2xhc3M9XCJzdDBcIi8+PHBhdGggZD1cIk0xMTguOCA5OS40Yy03LjEgMC0xMi45LTUuOC0xMi45LTEyLjkgMC03LjEgNS44LTEyLjkgMTIuOS0xMi45czEyLjkgNS44IDEyLjkgMTIuOXYxMi45aC0xMi45ek0xMTguOCAxMDUuOWM3LjEgMCAxMi45IDUuOCAxMi45IDEyLjlzLTUuOCAxMi45LTEyLjkgMTIuOUg4Ni41Yy03LjEgMC0xMi45LTUuOC0xMi45LTEyLjlzNS44LTEyLjkgMTIuOS0xMi45aDMyLjN6XCIgY2xhc3M9XCJzdDFcIi8+PHBhdGggZD1cIk0xNzAuNiAxMTguOGMwLTcuMSA1LjgtMTIuOSAxMi45LTEyLjkgNy4xIDAgMTIuOSA1LjggMTIuOSAxMi45cy01LjggMTIuOS0xMi45IDEyLjloLTEyLjl2LTEyLjl6TTE2NC4xIDExOC44YzAgNy4xLTUuOCAxMi45LTEyLjkgMTIuOS03LjEgMC0xMi45LTUuOC0xMi45LTEyLjlWODYuNWMwLTcuMSA1LjgtMTIuOSAxMi45LTEyLjkgNy4xIDAgMTIuOSA1LjggMTIuOSAxMi45djMyLjN6XCIgY2xhc3M9XCJzdDJcIi8+PHBhdGggZD1cIk0xNTEuMiAxNzAuNmM3LjEgMCAxMi45IDUuOCAxMi45IDEyLjkgMCA3LjEtNS44IDEyLjktMTIuOSAxMi45LTcuMSAwLTEyLjktNS44LTEyLjktMTIuOXYtMTIuOWgxMi45ek0xNTEuMiAxNjQuMWMtNy4xIDAtMTIuOS01LjgtMTIuOS0xMi45IDAtNy4xIDUuOC0xMi45IDEyLjktMTIuOWgzMi4zYzcuMSAwIDEyLjkgNS44IDEyLjkgMTIuOSAwIDcuMS01LjggMTIuOS0xMi45IDEyLjloLTMyLjN6XCIgY2xhc3M9XCJzdDNcIi8+PC9zdmc+YCxcbiAgICAgICAgKX1gLFxuICAgICAgICBwcm92aWRlcklkOiBcInNsYWNrXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkNvbm5lY3QgeW91ciBTbGFjayBhY2NvdW50XCIsXG4gICAgICB9KSxcbiAgICAgIGNsaWVudElkOiBvcHRpb25zLmNsaWVudElkID8/IFBST1ZJREVSX0NMSUVOVF9JRFMuc2xhY2ssXG4gICAgICBhdXRob3JpemVVcmw6IG9wdGlvbnMuYXV0aG9yaXplVXJsID8/IFwiaHR0cHM6Ly9zbGFjay5vYXV0aC5yYXljYXN0LmNvbS9hdXRob3JpemVcIixcbiAgICAgIHRva2VuVXJsOiBvcHRpb25zLnRva2VuVXJsID8/IFwiaHR0cHM6Ly9zbGFjay5vYXV0aC5yYXljYXN0LmNvbS90b2tlblwiLFxuICAgICAgcmVmcmVzaFRva2VuVXJsOiBvcHRpb25zLnRva2VuVXJsID8/IFwiaHR0cHM6Ly9zbGFjay5vYXV0aC5yYXljYXN0LmNvbS9yZWZyZXNoLXRva2VuXCIsXG4gICAgICBzY29wZTogXCJcIixcbiAgICAgIGV4dHJhUGFyYW1ldGVyczoge1xuICAgICAgICB1c2VyX3Njb3BlOiBvcHRpb25zLnNjb3BlLFxuICAgICAgfSxcbiAgICAgIHBlcnNvbmFsQWNjZXNzVG9rZW46IG9wdGlvbnMucGVyc29uYWxBY2Nlc3NUb2tlbixcbiAgICAgIGJvZHlFbmNvZGluZzogb3B0aW9ucy50b2tlblVybCA/IG9wdGlvbnMuYm9keUVuY29kaW5nID8/IFwidXJsLWVuY29kZWRcIiA6IFwianNvblwiLFxuICAgICAgb25BdXRob3JpemU6IG9wdGlvbnMub25BdXRob3JpemUsXG4gICAgICB0b2tlblJlZnJlc2hSZXNwb25zZVBhcnNlcjogb3B0aW9ucy50b2tlblJlZnJlc2hSZXNwb25zZVBhcnNlcixcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICB0b2tlblJlc3BvbnNlUGFyc2VyOlxuICAgICAgICBvcHRpb25zLnRva2VuUmVzcG9uc2VQYXJzZXIgPz9cbiAgICAgICAgKChyZXNwb25zZTogYW55KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFjY2Vzc190b2tlbjogcmVzcG9uc2UuYXV0aGVkX3VzZXIuYWNjZXNzX3Rva2VuLFxuICAgICAgICAgICAgc2NvcGU6IHJlc3BvbnNlLmF1dGhlZF91c2VyLnNjb3BlLFxuICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFpvb20gT0F1dGggc2VydmljZSBwcm92aWRlZCBvdXQgb2YgdGhlIGJveC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCB6b29tID0gT0F1dGhTZXJ2aWNlLnpvb20oe1xuICAgKiAgIGNsaWVudElkOiAnY3VzdG9tLWNsaWVudC1pZCcsXG4gICAqICAgYXV0aG9yaXplVXJsOiAnaHR0cHM6Ly96b29tLnVzL29hdXRoL2F1dGhvcml6ZScsXG4gICAqICAgdG9rZW5Vcmw6ICdodHRwczovL3pvb20udXMvb2F1dGgvdG9rZW4nLFxuICAgKiAgIHNjb3BlOiAnbWVldGluZzp3cml0ZScsXG4gICAqICAgcGVyc29uYWxBY2Nlc3NUb2tlbjogJ3BlcnNvbmFsLWFjY2Vzcy10b2tlbicsXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgem9vbShvcHRpb25zOiBQcm92aWRlck9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IE9BdXRoU2VydmljZSh7XG4gICAgICBjbGllbnQ6IG5ldyBPQXV0aC5QS0NFQ2xpZW50KHtcbiAgICAgICAgcmVkaXJlY3RNZXRob2Q6IE9BdXRoLlJlZGlyZWN0TWV0aG9kLldlYixcbiAgICAgICAgcHJvdmlkZXJOYW1lOiBcIlpvb21cIixcbiAgICAgICAgcHJvdmlkZXJJY29uOiBgZGF0YTppbWFnZS9zdmcreG1sLCR7ZW5jb2RlVVJJQ29tcG9uZW50KFxuICAgICAgICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDM1MS44NDUgODBcIj48cGF0aCBkPVwiTTczLjc4NiA3OC44MzVIMTAuODhBMTAuODQyIDEwLjg0MiAwIDAgMSAuODMzIDcyLjEyMmExMC44NDEgMTAuODQxIDAgMCAxIDIuMzU3LTExLjg1TDQ2Ljc2NCAxNi43aC0zMS4yM0M2Ljk1NCAxNi42OTkgMCA5Ljc0NCAwIDEuMTY1aDU4LjAxNGM0LjQxNCAwIDguMzU3IDIuNjM0IDEwLjA0NiA2LjcxMmExMC44NDMgMTAuODQzIDAgMCAxLTIuMzU2IDExLjg1TDIyLjEzIDYzLjMwMmgzNi4xMjJjOC41OCAwIDE1LjUzNCA2Ljk1NSAxNS41MzQgMTUuNTM0Wm0yNzguMDU5LTQ4LjU0NEMzNTEuODQ1IDEzLjU4OCAzMzguMjU2IDAgMzIxLjU1MyAwYy04LjkzNCAwLTE2Ljk3NSAzLjg5LTIyLjUyNCAxMC4wNjNDMjkzLjQ4IDMuODkgMjg1LjQ0IDAgMjc2LjUwNSAwYy0xNi43MDMgMC0zMC4yOTEgMTMuNTg4LTMwLjI5MSAzMC4yOTF2NDguNTQ0YzguNTc5IDAgMTUuNTM0LTYuOTU1IDE1LjUzNC0xNS41MzR2LTMzLjAxYzAtOC4xMzcgNi42Mi0xNC43NTcgMTQuNzU3LTE0Ljc1N3MxNC43NTcgNi42MiAxNC43NTcgMTQuNzU3djMzLjAxYzAgOC41OCA2Ljk1NSAxNS41MzQgMTUuNTM0IDE1LjUzNFYzMC4yOTFjMC04LjEzNyA2LjYyLTE0Ljc1NyAxNC43NTctMTQuNzU3czE0Ljc1OCA2LjYyIDE0Ljc1OCAxNC43NTd2MzMuMDFjMCA4LjU4IDYuOTU0IDE1LjUzNCAxNS41MzQgMTUuNTM0VjMwLjI5MVpNMjM4LjQ0NyA0MGMwIDIyLjA5MS0xNy45MDkgNDAtNDAgNDBzLTQwLTE3LjkwOS00MC00MCAxNy45MDgtNDAgNDAtNDAgNDAgMTcuOTA5IDQwIDQwWm0tMTUuNTM0IDBjMC0xMy41MTItMTAuOTU0LTI0LjQ2Ni0yNC40NjYtMjQuNDY2UzE3My45OCAyNi40ODggMTczLjk4IDQwczEwLjk1MyAyNC40NjYgMjQuNDY2IDI0LjQ2NlMyMjIuOTEzIDUzLjUxMiAyMjIuOTEzIDQwWm0tNzAuNjggMGMwIDIyLjA5MS0xNy45MDkgNDAtNDAgNDBzLTQwLTE3LjkwOS00MC00MCAxNy45MDktNDAgNDAtNDAgNDAgMTcuOTA5IDQwIDQwWm0tMTUuNTM0IDBjMC0xMy41MTItMTAuOTU0LTI0LjQ2Ni0yNC40NjYtMjQuNDY2Uzg3Ljc2NyAyNi40ODggODcuNzY3IDQwczEwLjk1NCAyNC40NjYgMjQuNDY2IDI0LjQ2NlMxMzYuNjk5IDUzLjUxMiAxMzYuNjk5IDQwWlwiIHN0eWxlPVwiZmlsbDojMGI1Y2ZmXCIvPjwvc3ZnPmAsXG4gICAgICAgICl9YCxcbiAgICAgICAgcHJvdmlkZXJJZDogXCJ6b29tXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkNvbm5lY3QgeW91ciBab29tIGFjY291bnRcIixcbiAgICAgIH0pLFxuICAgICAgY2xpZW50SWQ6IG9wdGlvbnMuY2xpZW50SWQsXG4gICAgICBhdXRob3JpemVVcmw6IG9wdGlvbnMuYXV0aG9yaXplVXJsID8/IFwiaHR0cHM6Ly96b29tLnVzL29hdXRoL2F1dGhvcml6ZVwiLFxuICAgICAgdG9rZW5Vcmw6IG9wdGlvbnMudG9rZW5VcmwgPz8gXCJodHRwczovL3pvb20udXMvb2F1dGgvdG9rZW5cIixcbiAgICAgIHJlZnJlc2hUb2tlblVybDogb3B0aW9ucy5yZWZyZXNoVG9rZW5VcmwsXG4gICAgICBzY29wZTogb3B0aW9ucy5zY29wZSxcbiAgICAgIHBlcnNvbmFsQWNjZXNzVG9rZW46IG9wdGlvbnMucGVyc29uYWxBY2Nlc3NUb2tlbixcbiAgICAgIGJvZHlFbmNvZGluZzogb3B0aW9ucy5ib2R5RW5jb2RpbmcgPz8gXCJ1cmwtZW5jb2RlZFwiLFxuICAgICAgb25BdXRob3JpemU6IG9wdGlvbnMub25BdXRob3JpemUsXG4gICAgICB0b2tlblJlZnJlc2hSZXNwb25zZVBhcnNlcjogb3B0aW9ucy50b2tlblJlZnJlc2hSZXNwb25zZVBhcnNlcixcbiAgICAgIHRva2VuUmVzcG9uc2VQYXJzZXI6IG9wdGlvbnMudG9rZW5SZXNwb25zZVBhcnNlcixcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWF0ZXMgdGhlIE9BdXRoIGF1dGhvcml6YXRpb24gcHJvY2VzcyBvciByZWZyZXNoZXMgZXhpc3RpbmcgdG9rZW5zIGlmIG5lY2Vzc2FyeS5cbiAgICogSWYgdGhlIGN1cnJlbnQgdG9rZW4gc2V0IGhhcyBhIHJlZnJlc2ggdG9rZW4gYW5kIGl0IGlzIGV4cGlyZWQsIHRoZW4gdGhlIGZ1bmN0aW9uIHdpbGwgcmVmcmVzaCB0aGUgdG9rZW5zLlxuICAgKiBJZiBubyB0b2tlbnMgZXhpc3QsIGl0IHdpbGwgaW5pdGlhdGUgdGhlIE9BdXRoIGF1dGhvcml6YXRpb24gcHJvY2VzcyBhbmQgZmV0Y2ggdGhlIHRva2Vucy5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgYWNjZXNzIHRva2VuIG9idGFpbmVkIGZyb20gdGhlIGF1dGhvcml6YXRpb24gZmxvdywgb3IgbnVsbCBpZiB0aGUgdG9rZW4gY291bGQgbm90IGJlIG9idGFpbmVkLlxuICAgKi9cbiAgYXN5bmMgYXV0aG9yaXplKCkge1xuICAgIGNvbnN0IGN1cnJlbnRUb2tlblNldCA9IGF3YWl0IHRoaXMuY2xpZW50LmdldFRva2VucygpO1xuICAgIGlmIChjdXJyZW50VG9rZW5TZXQ/LmFjY2Vzc1Rva2VuKSB7XG4gICAgICBpZiAoY3VycmVudFRva2VuU2V0LnJlZnJlc2hUb2tlbiAmJiBjdXJyZW50VG9rZW5TZXQuaXNFeHBpcmVkKCkpIHtcbiAgICAgICAgY29uc3QgdG9rZW5zID0gYXdhaXQgdGhpcy5yZWZyZXNoVG9rZW5zKHtcbiAgICAgICAgICB0b2tlbjogY3VycmVudFRva2VuU2V0LnJlZnJlc2hUb2tlbixcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gSW4gdGhlIGNhc2Ugd2hlcmUgdGhlIHJlZnJlc2ggdG9rZW4gZmxvd3MgZmFpbHMsIG5vdGhpbmcgaXMgcmV0dXJuZWQgYW5kIHRoZSBhdXRob3JpemUgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluLlxuICAgICAgICBpZiAodG9rZW5zKSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5jbGllbnQuc2V0VG9rZW5zKHRva2Vucyk7XG4gICAgICAgICAgcmV0dXJuIHRva2Vucy5hY2Nlc3NfdG9rZW47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBjdXJyZW50VG9rZW5TZXQuYWNjZXNzVG9rZW47XG4gICAgfVxuXG4gICAgY29uc3QgYXV0aFJlcXVlc3QgPSBhd2FpdCB0aGlzLmNsaWVudC5hdXRob3JpemF0aW9uUmVxdWVzdCh7XG4gICAgICBlbmRwb2ludDogdGhpcy5hdXRob3JpemVVcmwsXG4gICAgICBjbGllbnRJZDogdGhpcy5jbGllbnRJZCxcbiAgICAgIHNjb3BlOiB0aGlzLnNjb3BlLFxuICAgICAgZXh0cmFQYXJhbWV0ZXJzOiB0aGlzLmV4dHJhUGFyYW1ldGVycyxcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgYXV0aG9yaXphdGlvbkNvZGUgfSA9IGF3YWl0IHRoaXMuY2xpZW50LmF1dGhvcml6ZShhdXRoUmVxdWVzdCk7XG4gICAgY29uc3QgdG9rZW5zID0gYXdhaXQgdGhpcy5mZXRjaFRva2Vucyh7XG4gICAgICBhdXRoUmVxdWVzdCxcbiAgICAgIGF1dGhvcml6YXRpb25Db2RlLFxuICAgIH0pO1xuXG4gICAgYXdhaXQgdGhpcy5jbGllbnQuc2V0VG9rZW5zKHRva2Vucyk7XG5cbiAgICByZXR1cm4gdG9rZW5zLmFjY2Vzc190b2tlbjtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZmV0Y2hUb2tlbnMoe1xuICAgIGF1dGhSZXF1ZXN0LFxuICAgIGF1dGhvcml6YXRpb25Db2RlLFxuICB9OiB7XG4gICAgYXV0aFJlcXVlc3Q6IE9BdXRoLkF1dGhvcml6YXRpb25SZXF1ZXN0O1xuICAgIGF1dGhvcml6YXRpb25Db2RlOiBzdHJpbmc7XG4gIH0pIHtcbiAgICBsZXQgb3B0aW9ucztcbiAgICBpZiAodGhpcy5ib2R5RW5jb2RpbmcgPT09IFwidXJsLWVuY29kZWRcIikge1xuICAgICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgICAgcGFyYW1zLmFwcGVuZChcImNsaWVudF9pZFwiLCB0aGlzLmNsaWVudElkKTtcbiAgICAgIHBhcmFtcy5hcHBlbmQoXCJjb2RlXCIsIGF1dGhvcml6YXRpb25Db2RlKTtcbiAgICAgIHBhcmFtcy5hcHBlbmQoXCJjb2RlX3ZlcmlmaWVyXCIsIGF1dGhSZXF1ZXN0LmNvZGVWZXJpZmllcik7XG4gICAgICBwYXJhbXMuYXBwZW5kKFwiZ3JhbnRfdHlwZVwiLCBcImF1dGhvcml6YXRpb25fY29kZVwiKTtcbiAgICAgIHBhcmFtcy5hcHBlbmQoXCJyZWRpcmVjdF91cmlcIiwgYXV0aFJlcXVlc3QucmVkaXJlY3RVUkkpO1xuXG4gICAgICBvcHRpb25zID0geyBib2R5OiBwYXJhbXMgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIGNsaWVudF9pZDogdGhpcy5jbGllbnRJZCxcbiAgICAgICAgICBjb2RlOiBhdXRob3JpemF0aW9uQ29kZSxcbiAgICAgICAgICBjb2RlX3ZlcmlmaWVyOiBhdXRoUmVxdWVzdC5jb2RlVmVyaWZpZXIsXG4gICAgICAgICAgZ3JhbnRfdHlwZTogXCJhdXRob3JpemF0aW9uX2NvZGVcIixcbiAgICAgICAgICByZWRpcmVjdF91cmk6IGF1dGhSZXF1ZXN0LnJlZGlyZWN0VVJJLFxuICAgICAgICB9KSxcbiAgICAgICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHRoaXMudG9rZW5VcmwsIHsgbWV0aG9kOiBcIlBPU1RcIiwgLi4ub3B0aW9ucyB9KTtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICBjb25zdCByZXNwb25zZVRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICBjb25zb2xlLmVycm9yKFwiZmV0Y2ggdG9rZW5zIGVycm9yOlwiLCByZXNwb25zZVRleHQpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciB3aGlsZSBmZXRjaGluZyB0b2tlbnM6ICR7cmVzcG9uc2Uuc3RhdHVzfSAoJHtyZXNwb25zZS5zdGF0dXNUZXh0fSlcXG4ke3Jlc3BvbnNlVGV4dH1gKTtcbiAgICB9XG4gICAgY29uc3QgdG9rZW5zID0gdGhpcy50b2tlblJlc3BvbnNlUGFyc2VyKGF3YWl0IHJlc3BvbnNlLmpzb24oKSk7XG5cbiAgICAvLyBTb21lIGNsaWVudHMgc3VjaCBhcyBMaW5lYXIgY2FuIHJldHVybiBhIHNjb3BlIGFycmF5IGluc3RlYWQgb2YgYSBzdHJpbmdcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0b2tlbnMuc2NvcGUpID8geyAuLi50b2tlbnMsIHNjb3BlOiB0b2tlbnMuc2NvcGUuam9pbihcIiBcIikgfSA6IHRva2VucztcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcmVmcmVzaFRva2Vucyh7IHRva2VuIH06IHsgdG9rZW46IHN0cmluZyB9KSB7XG4gICAgbGV0IG9wdGlvbnM7XG4gICAgaWYgKHRoaXMuYm9keUVuY29kaW5nID09PSBcInVybC1lbmNvZGVkXCIpIHtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICAgIHBhcmFtcy5hcHBlbmQoXCJjbGllbnRfaWRcIiwgdGhpcy5jbGllbnRJZCk7XG4gICAgICBwYXJhbXMuYXBwZW5kKFwicmVmcmVzaF90b2tlblwiLCB0b2tlbik7XG4gICAgICBwYXJhbXMuYXBwZW5kKFwiZ3JhbnRfdHlwZVwiLCBcInJlZnJlc2hfdG9rZW5cIik7XG5cbiAgICAgIG9wdGlvbnMgPSB7IGJvZHk6IHBhcmFtcyB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgY2xpZW50X2lkOiB0aGlzLmNsaWVudElkLFxuICAgICAgICAgIHJlZnJlc2hfdG9rZW46IHRva2VuLFxuICAgICAgICAgIGdyYW50X3R5cGU6IFwicmVmcmVzaF90b2tlblwiLFxuICAgICAgICB9KSxcbiAgICAgICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHRoaXMucmVmcmVzaFRva2VuVXJsID8/IHRoaXMudG9rZW5VcmwsIHsgbWV0aG9kOiBcIlBPU1RcIiwgLi4ub3B0aW9ucyB9KTtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICBjb25zdCByZXNwb25zZVRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICBjb25zb2xlLmVycm9yKFwicmVmcmVzaCB0b2tlbnMgZXJyb3I6XCIsIHJlc3BvbnNlVGV4dCk7XG4gICAgICAvLyBJZiB0aGUgcmVmcmVzaCB0b2tlbiBpcyBpbnZhbGlkLCBzdG9wIHRoZSBmbG93IGhlcmUsIGxvZyBvdXQgdGhlIHVzZXIgYW5kIHByb21wdCB0aGVtIHRvIHJlLWF1dGhvcml6ZS5cbiAgICAgIHRoaXMuY2xpZW50LmRlc2NyaXB0aW9uID0gYCR7dGhpcy5jbGllbnQucHJvdmlkZXJOYW1lfSBuZWVkcyB5b3UgdG8gc2lnbi1pbiBhZ2Fpbi4gUHJlc3Mg4o+OIG9yIGNsaWNrIHRoZSBidXR0b24gYmVsb3cgdG8gY29udGludWUuYDtcbiAgICAgIGF3YWl0IHRoaXMuY2xpZW50LnJlbW92ZVRva2VucygpO1xuICAgICAgYXdhaXQgdGhpcy5hdXRob3JpemUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdG9rZW5SZXNwb25zZSA9IHRoaXMudG9rZW5SZWZyZXNoUmVzcG9uc2VQYXJzZXIoYXdhaXQgcmVzcG9uc2UuanNvbigpKTtcbiAgICAgIHRva2VuUmVzcG9uc2UucmVmcmVzaF90b2tlbiA9IHRva2VuUmVzcG9uc2UucmVmcmVzaF90b2tlbiA/PyB0b2tlbjtcbiAgICAgIHJldHVybiB0b2tlblJlc3BvbnNlO1xuICAgIH1cbiAgfVxufVxuIiwgImV4cG9ydCBjb25zdCBQUk9WSURFUl9DTElFTlRfSURTID0ge1xuICBhc2FuYTogXCIxMTkxMjAxNzQ1Njg0MzEyXCIsXG4gIGdpdGh1YjogXCI3MjM1ZmU4ZDQyMTU3ZjFmMzhjMFwiLFxuICBsaW5lYXI6IFwiYzhmZjM3YjkyMjVjM2M5YWVmZDdkNjZlYTBlNWI2ZjFcIixcbiAgc2xhY2s6IFwiODUxNzU2ODg0NjkyLjU1NDY5MjcyOTAyMTJcIixcbn07XG4iLCAiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgZW52aXJvbm1lbnQsIE9BdXRoIH0gZnJvbSBcIkByYXljYXN0L2FwaVwiO1xuaW1wb3J0IHR5cGUgeyBPQXV0aFR5cGUsIE9uQXV0aG9yaXplUGFyYW1zIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxubGV0IHRva2VuOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbmxldCB0eXBlOiBPQXV0aFR5cGUgfCBudWxsID0gbnVsbDtcbmxldCBhdXRob3JpemU6IFByb21pc2U8c3RyaW5nPiB8IG51bGwgPSBudWxsO1xubGV0IGdldElkVG9rZW46IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPiB8IG51bGwgPSBudWxsO1xubGV0IG9uQXV0aG9yaXplOiBQcm9taXNlPHZvaWQ+IHwgbnVsbCA9IG51bGw7XG5cbnR5cGUgV2l0aEFjY2Vzc1Rva2VuUGFyYW1ldGVycyA9IHtcbiAgLyoqXG4gICAqIEFuIG9wdGlvbmFsIGluc3RhbmNlIG9mIGEgUEtDRSBDbGllbnQgdGhhdCB5b3UgY2FuIGNyZWF0ZSB1c2luZyBSYXljYXN0IEFQSS5cbiAgICogVGhpcyBjbGllbnQgaXMgdXNlZCB0byByZXR1cm4gdGhlIGBpZFRva2VuYCBhcyBwYXJ0IG9mIHRoZSBgb25BdXRob3JpemVgIGNhbGxiYWNrLlxuICAgKi9cbiAgY2xpZW50PzogT0F1dGguUEtDRUNsaWVudDtcbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gdGhhdCBpbml0aWF0ZXMgdGhlIE9BdXRoIHRva2VuIHJldHJpZXZhbCBwcm9jZXNzXG4gICAqIEByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIGFjY2VzcyB0b2tlbi5cbiAgICovXG4gIGF1dGhvcml6ZTogKCkgPT4gUHJvbWlzZTxzdHJpbmc+O1xuICAvKipcbiAgICogQW4gb3B0aW9uYWwgc3RyaW5nIHRoYXQgcmVwcmVzZW50cyBhbiBhbHJlYWR5IG9idGFpbmVkIHBlcnNvbmFsIGFjY2VzcyB0b2tlblxuICAgKi9cbiAgcGVyc29uYWxBY2Nlc3NUb2tlbj86IHN0cmluZztcbiAgLyoqXG4gICAqIEFuIG9wdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIG9uY2UgdGhlIHVzZXIgaGFzIGJlZW4gcHJvcGVybHkgbG9nZ2VkIGluIHRocm91Z2ggT0F1dGguXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXMgLSBQYXJhbWV0ZXJzIG9mIHRoZSBjYWxsYmFja1xuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy50b2tlbiAtIFRoZSByZXRyaWV2ZWQgYWNjZXNzIHRva2VuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnR5cGUgLSBUaGUgYWNjZXNzIHRva2VuJ3MgdHlwZSAoZWl0aGVyIGBvYXV0aGAgb3IgYHBlcnNvbmFsYClcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuaWRUb2tlbiAtIFRoZSBvcHRpb25hbCBpZCB0b2tlbi4gVGhlIGBpZFRva2VuYCBpcyByZXR1cm5lZCBpZiBgb3B0aW9ucy5jbGllbnRgIGlzIHByb3ZpZGVkIGFuZCBpZiBpdCdzIHJldHVybmVkIGluIHRoZSBpbml0aWFsIHRva2VuIHNldC5cbiAgICovXG4gIG9uQXV0aG9yaXplPzogKHBhcmFtczogT25BdXRob3JpemVQYXJhbXMpID0+IHZvaWQ7XG59O1xuXG4vKipcbiAqIFRoZSBjb21wb25lbnQgKGZvciBhIHZpZXcvbWVudS1iYXIgY29tbWFuZHMpIG9yIGZ1bmN0aW9uIChmb3IgYSBuby12aWV3IGNvbW1hbmQpIHRoYXQgaXMgcGFzc2VkIHRvIHdpdGhBY2Nlc3NUb2tlbi5cbiAqL1xuZXhwb3J0IHR5cGUgV2l0aEFjY2Vzc1Rva2VuQ29tcG9uZW50T3JGbjxUID0gYW55LCBVID0gYW55PiA9ICgocGFyYW1zOiBUKSA9PiBQcm9taXNlPFU+IHwgVSkgfCBSZWFjdC5Db21wb25lbnRUeXBlPFQ+O1xuXG4vKipcbiAqIEhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gd3JhcCBhIGdpdmVuIGNvbXBvbmVudCBvciBmdW5jdGlvbiBhbmQgc2V0IGFuIGFjY2VzcyB0b2tlbiBpbiBhIHNoYXJlZCBnbG9iYWwgdmFyaWFibGUuXG4gKlxuICogVGhlIGZ1bmN0aW9uIGludGVyY2VwdHMgdGhlIGNvbXBvbmVudCByZW5kZXJpbmcgcHJvY2VzcyB0byBlaXRoZXIgZmV0Y2ggYW4gT0F1dGggdG9rZW4gYXN5bmNocm9ub3VzbHlcbiAqIG9yIHVzZSBhIHByb3ZpZGVkIHBlcnNvbmFsIGFjY2VzcyB0b2tlbi4gQSBnbG9iYWwgdmFyaWFibGUgd2lsbCBiZSB0aGVuIHNldCB3aXRoIHRoZSByZWNlaXZlZCB0b2tlblxuICogdGhhdCB5b3UgY2FuIGdldCB3aXRoIHRoZSBgZ2V0QWNjZXNzVG9rZW5gIGZ1bmN0aW9uLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBEZXRhaWwgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG4gKiBpbXBvcnQgeyBPQXV0aFNlcnZpY2UsIGdldEFjY2Vzc1Rva2VuLCB3aXRoQWNjZXNzVG9rZW4gfSBmcm9tIFwiQHJheWNhc3QvdXRpbHNcIjtcbiAqXG4gKiBjb25zdCBnaXRodWIgPSBPQXV0aFNlcnZpY2UuZ2l0aHViKHsgc2NvcGU6IFwibm90aWZpY2F0aW9ucyByZXBvIHJlYWQ6b3JnIHJlYWQ6dXNlciByZWFkOnByb2plY3RcIiB9KTtcbiAqXG4gKiBmdW5jdGlvbiBBdXRob3JpemVkQ29tcG9uZW50KCkge1xuICogIGNvbnN0IHsgdG9rZW4gfSA9IGdldEFjY2Vzc1Rva2VuKCk7XG4gKiAgLi4uXG4gKiB9XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgd2l0aEFjY2Vzc1Rva2VuKGdpdGh1YikoQXV0aG9yaXplZENvbXBvbmVudCk7XG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJucyB7UmVhY3QuQ29tcG9uZW50VHlwZTxUPn0gVGhlIHdyYXBwZWQgY29tcG9uZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aEFjY2Vzc1Rva2VuPFQgPSBhbnksIFUgPSBhbnk+KFxuICBvcHRpb25zOiBXaXRoQWNjZXNzVG9rZW5QYXJhbWV0ZXJzLFxuKTogPFYgZXh0ZW5kcyBXaXRoQWNjZXNzVG9rZW5Db21wb25lbnRPckZuPFQsIFU+PihcbiAgZm5PckNvbXBvbmVudDogVixcbikgPT4gViBleHRlbmRzIFJlYWN0LkNvbXBvbmVudFR5cGU8VD4gPyBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxUPiA6IChwcm9wczogVCkgPT4gUHJvbWlzZTxVPjtcbmV4cG9ydCBmdW5jdGlvbiB3aXRoQWNjZXNzVG9rZW48VD4ob3B0aW9uczogV2l0aEFjY2Vzc1Rva2VuUGFyYW1ldGVycykge1xuICBpZiAoZW52aXJvbm1lbnQuY29tbWFuZE1vZGUgPT09IFwibm8tdmlld1wiKSB7XG4gICAgcmV0dXJuIChmbjogKHByb3BzOiBUKSA9PiBQcm9taXNlPHZvaWQ+IHwgKCgpID0+IHZvaWQpKSA9PiB7XG4gICAgICBjb25zdCBub1ZpZXdGbiA9IGFzeW5jIChwcm9wczogVCkgPT4ge1xuICAgICAgICBpZiAoIXRva2VuKSB7XG4gICAgICAgICAgdG9rZW4gPSBvcHRpb25zLnBlcnNvbmFsQWNjZXNzVG9rZW4gPz8gKGF3YWl0IG9wdGlvbnMuYXV0aG9yaXplKCkpO1xuICAgICAgICAgIHR5cGUgPSBvcHRpb25zLnBlcnNvbmFsQWNjZXNzVG9rZW4gPyBcInBlcnNvbmFsXCIgOiBcIm9hdXRoXCI7XG4gICAgICAgICAgY29uc3QgaWRUb2tlbiA9IChhd2FpdCBvcHRpb25zLmNsaWVudD8uZ2V0VG9rZW5zKCkpPy5pZFRva2VuO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbnMub25BdXRob3JpemUpIHtcbiAgICAgICAgICAgIGF3YWl0IFByb21pc2UucmVzb2x2ZShvcHRpb25zLm9uQXV0aG9yaXplKHsgdG9rZW4sIHR5cGUsIGlkVG9rZW4gfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmbihwcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gbm9WaWV3Rm47XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiAoQ29tcG9uZW50OiBSZWFjdC5Db21wb25lbnRUeXBlPFQ+KSA9PiB7XG4gICAgY29uc3QgV3JhcHBlZENvbXBvbmVudDogUmVhY3QuQ29tcG9uZW50VHlwZTxUPiA9IChwcm9wcykgPT4ge1xuICAgICAgaWYgKG9wdGlvbnMucGVyc29uYWxBY2Nlc3NUb2tlbikge1xuICAgICAgICB0b2tlbiA9IG9wdGlvbnMucGVyc29uYWxBY2Nlc3NUb2tlbjtcbiAgICAgICAgdHlwZSA9IFwicGVyc29uYWxcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghYXV0aG9yaXplKSB7XG4gICAgICAgICAgYXV0aG9yaXplID0gb3B0aW9ucy5hdXRob3JpemUoKTtcbiAgICAgICAgfVxuICAgICAgICB0b2tlbiA9IFJlYWN0LnVzZShhdXRob3JpemUpO1xuICAgICAgICB0eXBlID0gXCJvYXV0aFwiO1xuICAgICAgfVxuXG4gICAgICBsZXQgaWRUb2tlbjogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgICAgaWYgKG9wdGlvbnMuY2xpZW50KSB7XG4gICAgICAgIGlmICghZ2V0SWRUb2tlbikge1xuICAgICAgICAgIGdldElkVG9rZW4gPSBvcHRpb25zLmNsaWVudD8uZ2V0VG9rZW5zKCkudGhlbigodG9rZW5zKSA9PiB0b2tlbnM/LmlkVG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIGlkVG9rZW4gPSBSZWFjdC51c2UoZ2V0SWRUb2tlbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLm9uQXV0aG9yaXplKSB7XG4gICAgICAgIGlmICghb25BdXRob3JpemUpIHtcbiAgICAgICAgICBvbkF1dGhvcml6ZSA9IFByb21pc2UucmVzb2x2ZShvcHRpb25zLm9uQXV0aG9yaXplKHsgdG9rZW46IHRva2VuISwgdHlwZSwgaWRUb2tlbiB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgUmVhY3QudXNlKG9uQXV0aG9yaXplKTtcbiAgICAgIH1cblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgICAgLy8gQHRzLWlnbm9yZSB0b28gY29tcGxpY2F0ZWQgZm9yIFRTXG4gICAgICByZXR1cm4gPENvbXBvbmVudCB7Li4ucHJvcHN9IC8+O1xuICAgIH07XG5cbiAgICBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gYHdpdGhBY2Nlc3NUb2tlbigke0NvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZX0pYDtcblxuICAgIHJldHVybiBXcmFwcGVkQ29tcG9uZW50O1xuICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGFjY2VzcyB0b2tlbiBhbmQgaXRzIHR5cGUuIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIG11c3QgYmUgY2FsbGVkIGluIGEgY29tcG9uZW50IHdyYXBwZWQgd2l0aCBgd2l0aEFjY2Vzc1Rva2VuYC5cbiAqXG4gKiBXaWxsIHRocm93IGFuIEVycm9yIGlmIGNhbGxlZCBvdXRzaWRlIG9mIGEgZnVuY3Rpb24gb3IgY29tcG9uZW50IHdyYXBwZWQgd2l0aCBgd2l0aEFjY2Vzc1Rva2VuYFxuICpcbiAqIEByZXR1cm5zIHt7IHRva2VuOiBzdHJpbmcsIHR5cGU6IFwib2F1dGhcIiB8IFwicGVyc29uYWxcIiB9fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgYHRva2VuYFxuICogYW5kIGl0cyBgdHlwZWAsIHdoZXJlIHR5cGUgY2FuIGJlIGVpdGhlciAnb2F1dGgnIGZvciBPQXV0aCB0b2tlbnMgb3IgJ3BlcnNvbmFsJyBmb3IgYVxuICogcGVyc29uYWwgYWNjZXNzIHRva2VuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWNjZXNzVG9rZW4oKToge1xuICB0b2tlbjogc3RyaW5nO1xuICAvKiogYG9hdXRoYCBmb3IgT0F1dGggdG9rZW5zIG9yIGBwZXJzb25hbGAgZm9yIHBlcnNvbmFsIGFjY2VzcyB0b2tlbiAqL1xuICB0eXBlOiBcIm9hdXRoXCIgfCBcInBlcnNvbmFsXCI7XG59IHtcbiAgaWYgKCF0b2tlbiB8fCAhdHlwZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImdldEFjY2Vzc1Rva2VuIG11c3QgYmUgdXNlZCB3aGVuIGF1dGhlbnRpY2F0ZWQgKGVnLiB1c2VkIGluc2lkZSBgd2l0aEFjY2Vzc1Rva2VuYClcIik7XG4gIH1cblxuICByZXR1cm4geyB0b2tlbiwgdHlwZSB9O1xufVxuIiwgImltcG9ydCB7IGVudmlyb25tZW50LCBMYXVuY2hQcm9wcywgTGF1bmNoVHlwZSB9IGZyb20gXCJAcmF5Y2FzdC9hcGlcIjtcbmltcG9ydCBmcyBmcm9tIFwibm9kZTpmc1wiO1xuaW1wb3J0IHBhdGggZnJvbSBcIm5vZGU6cGF0aFwiO1xuXG5leHBvcnQgZW51bSBEZWVwbGlua1R5cGUge1xuICAvKiogQSBzY3JpcHQgY29tbWFuZCAqL1xuICBTY3JpcHRDb21tYW5kID0gXCJzY3JpcHQtY29tbWFuZFwiLFxuICAvKiogQW4gZXh0ZW5zaW9uIGNvbW1hbmQgKi9cbiAgRXh0ZW5zaW9uID0gXCJleHRlbnNpb25cIixcbn1cblxuLyoqXG4gKiBPcHRpb25zIGZvciBjcmVhdGluZyBhIGRlZXBsaW5rIHRvIGEgc2NyaXB0IGNvbW1hbmQuXG4gKi9cbmV4cG9ydCB0eXBlIENyZWF0ZVNjcmlwdENvbW1hbmREZWVwbGlua09wdGlvbnMgPSB7XG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiBkZWVwbGluaywgd2hpY2ggc2hvdWxkIGJlIFwic2NyaXB0LWNvbW1hbmRcIi5cbiAgICovXG4gIHR5cGU6IERlZXBsaW5rVHlwZS5TY3JpcHRDb21tYW5kO1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGNvbW1hbmQuXG4gICAqL1xuICBjb21tYW5kOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBJZiB0aGUgY29tbWFuZCBhY2NlcHRzIGFyZ3VtZW50cywgdGhleSBjYW4gYmUgcGFzc2VkIHVzaW5nIHRoaXMgcXVlcnkgcGFyYW1ldGVyLlxuICAgKi9cbiAgYXJndW1lbnRzPzogc3RyaW5nW107XG59O1xuXG4vKipcbiAqIEJhc2Ugb3B0aW9ucyBmb3IgY3JlYXRpbmcgYSBkZWVwbGluayB0byBhbiBleHRlbnNpb24uXG4gKi9cbmV4cG9ydCB0eXBlIENyZWF0ZUV4dGVuc2lvbkRlZXBsaW5rQmFzZU9wdGlvbnMgPSB7XG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiBkZWVwbGluaywgd2hpY2ggc2hvdWxkIGJlIFwiZXh0ZW5zaW9uXCIuXG4gICAqL1xuICB0eXBlPzogRGVlcGxpbmtUeXBlLkV4dGVuc2lvbjtcbiAgLyoqXG4gICAqIFRoZSBjb21tYW5kIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXh0ZW5zaW9uLlxuICAgKi9cbiAgY29tbWFuZDogc3RyaW5nO1xuICAvKipcbiAgICogRWl0aGVyIFwidXNlckluaXRpYXRlZFwiLCB3aGljaCBydW5zIHRoZSBjb21tYW5kIGluIHRoZSBmb3JlZ3JvdW5kLCBvciBcImJhY2tncm91bmRcIiwgd2hpY2ggc2tpcHMgYnJpbmdpbmcgUmF5Y2FzdCB0byB0aGUgZnJvbnQuXG4gICAqL1xuICBsYXVuY2hUeXBlPzogTGF1bmNoVHlwZTtcbiAgLyoqXG4gICAqIElmIHRoZSBjb21tYW5kIGFjY2VwdHMgYXJndW1lbnRzLCB0aGV5IGNhbiBiZSBwYXNzZWQgdXNpbmcgdGhpcyBxdWVyeSBwYXJhbWV0ZXIuXG4gICAqL1xuICBhcmd1bWVudHM/OiBMYXVuY2hQcm9wc1tcImFyZ3VtZW50c1wiXTtcbiAgLyoqXG4gICAqIElmIHRoZSBjb21tYW5kIG1ha2UgdXNlIG9mIExhdW5jaENvbnRleHQsIGl0IGNhbiBiZSBwYXNzZWQgdXNpbmcgdGhpcyBxdWVyeSBwYXJhbWV0ZXIuXG4gICAqL1xuICBjb250ZXh0PzogTGF1bmNoUHJvcHNbXCJsYXVuY2hDb250ZXh0XCJdO1xuICAvKipcbiAgICogU29tZSB0ZXh0IHRvIHByZWZpbGwgdGhlIHNlYXJjaCBiYXIgb3IgZmlyc3QgdGV4dCBpbnB1dCBvZiB0aGUgY29tbWFuZFxuICAgKi9cbiAgZmFsbGJhY2tUZXh0Pzogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBPcHRpb25zIGZvciBjcmVhdGluZyBhIGRlZXBsaW5rIHRvIGFuIGV4dGVuc2lvbiBmcm9tIGFub3RoZXIgZXh0ZW5zaW9uLlxuICogUmVxdWlyZXMgYm90aCB0aGUgb3duZXJPckF1dGhvck5hbWUgYW5kIGV4dGVuc2lvbk5hbWUuXG4gKi9cbmV4cG9ydCB0eXBlIENyZWF0ZUludGVyRXh0ZW5zaW9uRGVlcGxpbmtPcHRpb25zID0gQ3JlYXRlRXh0ZW5zaW9uRGVlcGxpbmtCYXNlT3B0aW9ucyAmIHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBvd25lciBvciBhdXRob3Igb2YgdGhlIGV4dGVuc2lvbi5cbiAgICovXG4gIG93bmVyT3JBdXRob3JOYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZXh0ZW5zaW9uLlxuICAgKi9cbiAgZXh0ZW5zaW9uTmFtZTogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBPcHRpb25zIGZvciBjcmVhdGluZyBhIGRlZXBsaW5rIHRvIGFuIGV4dGVuc2lvbi5cbiAqL1xuZXhwb3J0IHR5cGUgQ3JlYXRlRXh0ZW5zaW9uRGVlcGxpbmtPcHRpb25zID0gQ3JlYXRlSW50ZXJFeHRlbnNpb25EZWVwbGlua09wdGlvbnMgfCBDcmVhdGVFeHRlbnNpb25EZWVwbGlua0Jhc2VPcHRpb25zO1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIGNyZWF0aW5nIGEgZGVlcGxpbmsuXG4gKi9cbmV4cG9ydCB0eXBlIENyZWF0ZURlZXBsaW5rT3B0aW9ucyA9IENyZWF0ZVNjcmlwdENvbW1hbmREZWVwbGlua09wdGlvbnMgfCBDcmVhdGVFeHRlbnNpb25EZWVwbGlua09wdGlvbnM7XG5cbmZ1bmN0aW9uIGdldFByb3RvY29sKCkge1xuICByZXR1cm4gZW52aXJvbm1lbnQucmF5Y2FzdFZlcnNpb24uaW5jbHVkZXMoXCJhbHBoYVwiKSA/IFwicmF5Y2FzdGludGVybmFsOi8vXCIgOiBcInJheWNhc3Q6Ly9cIjtcbn1cblxuZnVuY3Rpb24gZ2V0T3duZXJPckF1dGhvck5hbWUoKSB7XG4gIGNvbnN0IHBhY2thZ2VKU09OID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMocGF0aC5qb2luKGVudmlyb25tZW50LmFzc2V0c1BhdGgsIFwiLi5cIiwgXCJwYWNrYWdlLmpzb25cIiksIFwidXRmOFwiKSk7XG4gIHJldHVybiBwYWNrYWdlSlNPTi5vd25lciB8fCBwYWNrYWdlSlNPTi5hdXRob3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTY3JpcHRDb21tYW5kRGVlcGxpbmsob3B0aW9uczogQ3JlYXRlU2NyaXB0Q29tbWFuZERlZXBsaW5rT3B0aW9ucyk6IHN0cmluZyB7XG4gIGxldCB1cmwgPSBgJHtnZXRQcm90b2NvbCgpfXNjcmlwdC1jb21tYW5kcy8ke29wdGlvbnMuY29tbWFuZH1gO1xuXG4gIGlmIChvcHRpb25zLmFyZ3VtZW50cykge1xuICAgIGxldCBwYXJhbXMgPSBcIlwiO1xuICAgIGZvciAoY29uc3QgYXJnIG9mIG9wdGlvbnMuYXJndW1lbnRzKSB7XG4gICAgICBwYXJhbXMgKz0gXCImYXJndW1lbnRzPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZyk7XG4gICAgfVxuICAgIHVybCArPSBcIj9cIiArIHBhcmFtcy5zdWJzdHJpbmcoMSk7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXh0ZW5zaW9uRGVlcGxpbmsob3B0aW9uczogQ3JlYXRlRXh0ZW5zaW9uRGVlcGxpbmtPcHRpb25zKTogc3RyaW5nIHtcbiAgbGV0IG93bmVyT3JBdXRob3JOYW1lID0gZ2V0T3duZXJPckF1dGhvck5hbWUoKTtcbiAgbGV0IGV4dGVuc2lvbk5hbWUgPSBlbnZpcm9ubWVudC5leHRlbnNpb25OYW1lO1xuXG4gIGlmIChcIm93bmVyT3JBdXRob3JOYW1lXCIgaW4gb3B0aW9ucyAmJiBcImV4dGVuc2lvbk5hbWVcIiBpbiBvcHRpb25zKSB7XG4gICAgb3duZXJPckF1dGhvck5hbWUgPSBvcHRpb25zLm93bmVyT3JBdXRob3JOYW1lO1xuICAgIGV4dGVuc2lvbk5hbWUgPSBvcHRpb25zLmV4dGVuc2lvbk5hbWU7XG4gIH1cblxuICBsZXQgdXJsID0gYCR7Z2V0UHJvdG9jb2woKX1leHRlbnNpb25zLyR7b3duZXJPckF1dGhvck5hbWV9LyR7ZXh0ZW5zaW9uTmFtZX0vJHtvcHRpb25zLmNvbW1hbmR9YDtcblxuICBsZXQgcGFyYW1zID0gXCJcIjtcbiAgaWYgKG9wdGlvbnMubGF1bmNoVHlwZSkge1xuICAgIHBhcmFtcyArPSBcIiZsYXVuY2hUeXBlPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KG9wdGlvbnMubGF1bmNoVHlwZSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5hcmd1bWVudHMpIHtcbiAgICBwYXJhbXMgKz0gXCImYXJndW1lbnRzPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KG9wdGlvbnMuYXJndW1lbnRzKSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5jb250ZXh0KSB7XG4gICAgcGFyYW1zICs9IFwiJmNvbnRleHQ9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5jb250ZXh0KSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5mYWxsYmFja1RleHQpIHtcbiAgICBwYXJhbXMgKz0gXCImZmFsbGJhY2tUZXh0PVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KG9wdGlvbnMuZmFsbGJhY2tUZXh0KTtcbiAgfVxuXG4gIGlmIChwYXJhbXMpIHtcbiAgICB1cmwgKz0gXCI/XCIgKyBwYXJhbXMuc3Vic3RyaW5nKDEpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVlcGxpbmsgdG8gYSBzY3JpcHQgY29tbWFuZCBvciBleHRlbnNpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWVwbGluayhvcHRpb25zOiBDcmVhdGVEZWVwbGlua09wdGlvbnMpOiBzdHJpbmcge1xuICBpZiAob3B0aW9ucy50eXBlID09PSBEZWVwbGlua1R5cGUuU2NyaXB0Q29tbWFuZCkge1xuICAgIHJldHVybiBjcmVhdGVTY3JpcHRDb21tYW5kRGVlcGxpbmsob3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNyZWF0ZUV4dGVuc2lvbkRlZXBsaW5rKG9wdGlvbnMpO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgYmFzZUV4ZWN1dGVTUUwgfSBmcm9tIFwiLi9zcWwtdXRpbHNcIjtcblxuLyoqXG4gKiBFeGVjdXRlcyBhIFNRTCBxdWVyeSBvbiBhIGxvY2FsIFNRTGl0ZSBkYXRhYmFzZSBhbmQgcmV0dXJucyB0aGUgcXVlcnkgcmVzdWx0IGluIEpTT04gZm9ybWF0LlxuICpcbiAqIEBwYXJhbSBkYXRhYmFzZVBhdGggLSBUaGUgcGF0aCB0byB0aGUgU1FMaXRlIGRhdGFiYXNlIGZpbGUuXG4gKiBAcGFyYW0gcXVlcnkgLSBUaGUgU1FMIHF1ZXJ5IHRvIGV4ZWN1dGUuXG4gKiBAcmV0dXJucyBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBhcnJheSBvZiBvYmplY3RzIHJlcHJlc2VudGluZyB0aGUgcXVlcnkgcmVzdWx0cy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgY2xvc2VNYWluV2luZG93LCBDbGlwYm9hcmQgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG4gKiBpbXBvcnQgeyBleGVjdXRlU1FMIH0gZnJvbSBcIkByYXljYXN0L3V0aWxzXCI7XG4gKlxuICogdHlwZSBNZXNzYWdlID0geyBib2R5OiBzdHJpbmc7IGNvZGU6IHN0cmluZyB9O1xuICpcbiAqIGNvbnN0IERCX1BBVEggPSBcIi9wYXRoL3RvL2NoYXQuZGJcIjtcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBDb21tYW5kKCkge1xuICogICBjb25zdCBxdWVyeSA9IGBTRUxFQ1QgYm9keSwgY29kZSBGUk9NIC4uLmBcbiAqXG4gKiAgIGNvbnN0IG1lc3NhZ2VzID0gYXdhaXQgZXhlY3V0ZVNRTDxNZXNzYWdlPihEQl9QQVRILCBxdWVyeSk7XG4gKlxuICogICBpZiAobWVzc2FnZXMubGVuZ3RoID4gMCkge1xuICogICAgIGNvbnN0IGxhdGVzdENvZGUgPSBtZXNzYWdlc1swXS5jb2RlO1xuICogICAgIGF3YWl0IENsaXBib2FyZC5wYXN0ZShsYXRlc3RDb2RlKTtcbiAqICAgICBhd2FpdCBjbG9zZU1haW5XaW5kb3coKTtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlU1FMPFQgPSB1bmtub3duPihkYXRhYmFzZVBhdGg6IHN0cmluZywgcXVlcnk6IHN0cmluZykge1xuICByZXR1cm4gYmFzZUV4ZWN1dGVTUUw8VD4oZGF0YWJhc2VQYXRoLCBxdWVyeSk7XG59XG4iLCAiaW1wb3J0IGNoaWxkUHJvY2VzcyBmcm9tIFwibm9kZTpjaGlsZF9wcm9jZXNzXCI7XG5pbXBvcnQge1xuICBkZWZhdWx0UGFyc2luZyxcbiAgZ2V0U3Bhd25lZFByb21pc2UsXG4gIGdldFNwYXduZWRSZXN1bHQsXG4gIGhhbmRsZU91dHB1dCxcbiAgUGFyc2VFeGVjT3V0cHV0SGFuZGxlcixcbn0gZnJvbSBcIi4vZXhlYy11dGlsc1wiO1xuXG50eXBlIEFwcGxlU2NyaXB0T3B0aW9ucyA9IHtcbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQsIGBydW5BcHBsZVNjcmlwdGAgcmV0dXJucyBpdHMgcmVzdWx0cyBpbiBodW1hbi1yZWFkYWJsZSBmb3JtOiBzdHJpbmdzIGRvIG5vdCBoYXZlIHF1b3RlcyBhcm91bmQgdGhlbSwgY2hhcmFjdGVycyBhcmUgbm90IGVzY2FwZWQsIGJyYWNlcyBmb3IgbGlzdHMgYW5kIHJlY29yZHMgYXJlIG9taXR0ZWQsIGV0Yy4gVGhpcyBpcyBnZW5lcmFsbHkgbW9yZSB1c2VmdWwsIGJ1dCBjYW4gaW50cm9kdWNlIGFtYmlndWl0aWVzLiBGb3IgZXhhbXBsZSwgdGhlIGxpc3RzIGB7XCJmb29cIiwgXCJiYXJcIn1gIGFuZCBge3tcImZvb1wiLCB7XCJiYXJcIn19fWAgd291bGQgYm90aCBiZSBkaXNwbGF5ZWQgYXMg4oCYZm9vLCBiYXLigJkuIFRvIHNlZSB0aGUgcmVzdWx0cyBpbiBhbiB1bmFtYmlndW91cyBmb3JtIHRoYXQgY291bGQgYmUgcmVjb21waWxlZCBpbnRvIHRoZSBzYW1lIHZhbHVlLCBzZXQgYGh1bWFuUmVhZGFibGVPdXRwdXRgIHRvIGBmYWxzZWAuXG4gICAqXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGh1bWFuUmVhZGFibGVPdXRwdXQ/OiBib29sZWFuO1xuICAvKipcbiAgICogV2hldGhlciB0aGUgc2NyaXB0IGlzIHVzaW5nIFtgQXBwbGVTY3JpcHRgXShodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9hcmNoaXZlL2RvY3VtZW50YXRpb24vQXBwbGVTY3JpcHQvQ29uY2VwdHVhbC9BcHBsZVNjcmlwdExhbmdHdWlkZS9pbnRyb2R1Y3Rpb24vQVNMUl9pbnRyby5odG1sIy8vYXBwbGVfcmVmL2RvYy91aWQvVFA0MDAwMDk4Mykgb3IgW2BKYXZhU2NyaXB0YF0oaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS9yZWxlYXNlbm90ZXMvSW50ZXJhcHBsaWNhdGlvbkNvbW11bmljYXRpb24vUk4tSmF2YVNjcmlwdEZvckF1dG9tYXRpb24vQXJ0aWNsZXMvSW50cm9kdWN0aW9uLmh0bWwjLy9hcHBsZV9yZWYvZG9jL3VpZC9UUDQwMDE0NTA4LUNIMTExLVNXMSkuXG4gICAqXG4gICAqIEBkZWZhdWx0IFwiQXBwbGVTY3JpcHRcIlxuICAgKi9cbiAgbGFuZ3VhZ2U/OiBcIkFwcGxlU2NyaXB0XCIgfCBcIkphdmFTY3JpcHRcIjtcbiAgLyoqXG4gICAqIEEgU2lnbmFsIG9iamVjdCB0aGF0IGFsbG93cyB5b3UgdG8gYWJvcnQgdGhlIHJlcXVlc3QgaWYgcmVxdWlyZWQgdmlhIGFuIEFib3J0Q29udHJvbGxlciBvYmplY3QuXG4gICAqL1xuICBzaWduYWw/OiBBYm9ydFNpZ25hbDtcbiAgLyoqIElmIHRpbWVvdXQgaXMgZ3JlYXRlciB0aGFuIGAwYCwgdGhlIHBhcmVudCB3aWxsIHNlbmQgdGhlIHNpZ25hbCBgU0lHVEVSTWAgaWYgdGhlIGNoaWxkIHJ1bnMgbG9uZ2VyIHRoYW4gdGltZW91dCBtaWxsaXNlY29uZHMuXG4gICAqXG4gICAqIEBkZWZhdWx0IDEwMDAwXG4gICAqL1xuICB0aW1lb3V0PzogbnVtYmVyO1xufTtcblxuLyoqXG4gKiBFeGVjdXRlcyBhbiBBcHBsZVNjcmlwdCBzY3JpcHQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IHNob3dIVUQgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG4gKiBpbXBvcnQgeyBydW5BcHBsZVNjcmlwdCwgc2hvd0ZhaWx1cmVUb2FzdCB9IGZyb20gXCJAcmF5Y2FzdC91dGlsc1wiO1xuICpcbiAqIGV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAqICAgdHJ5IHtcbiAqICAgICBjb25zdCByZXMgPSBhd2FpdCBydW5BcHBsZVNjcmlwdChcbiAqICAgICAgIGBcbiAqICAgICAgIG9uIHJ1biBhcmd2XG4gKiAgICAgICAgIHJldHVybiBcImhlbGxvLCBcIiAmIGl0ZW0gMSBvZiBhcmd2ICYgXCIuXCJcbiAqICAgICAgIGVuZCBydW5cbiAqICAgICAgIGAsXG4gKiAgICAgICBbXCJ3b3JsZFwiXVxuICogICAgICk7XG4gKiAgICAgYXdhaXQgc2hvd0hVRChyZXMpO1xuICogICB9IGNhdGNoIChlcnJvcikge1xuICogICAgIHNob3dGYWlsdXJlVG9hc3QoZXJyb3IsIHsgdGl0bGU6IFwiQ291bGQgbm90IHJ1biBBcHBsZVNjcmlwdFwiIH0pO1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1bkFwcGxlU2NyaXB0PFQgPSBzdHJpbmc+KFxuICBzY3JpcHQ6IHN0cmluZyxcbiAgb3B0aW9ucz86IEFwcGxlU2NyaXB0T3B0aW9ucyAmIHtcbiAgICBwYXJzZU91dHB1dD86IFBhcnNlRXhlY091dHB1dEhhbmRsZXI8VCwgc3RyaW5nLCBBcHBsZVNjcmlwdE9wdGlvbnM+O1xuICB9LFxuKTogUHJvbWlzZTxzdHJpbmc+O1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1bkFwcGxlU2NyaXB0PFQgPSBzdHJpbmc+KFxuICBzY3JpcHQ6IHN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBhcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgc2NyaXB0LlxuICAgKi9cbiAgYXJnczogc3RyaW5nW10sXG4gIG9wdGlvbnM/OiBBcHBsZVNjcmlwdE9wdGlvbnMgJiB7XG4gICAgcGFyc2VPdXRwdXQ/OiBQYXJzZUV4ZWNPdXRwdXRIYW5kbGVyPFQsIHN0cmluZywgQXBwbGVTY3JpcHRPcHRpb25zPjtcbiAgfSxcbik6IFByb21pc2U8c3RyaW5nPjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBydW5BcHBsZVNjcmlwdDxUID0gc3RyaW5nPihcbiAgc2NyaXB0OiBzdHJpbmcsXG4gIG9wdGlvbnNPckFyZ3M/OlxuICAgIHwgc3RyaW5nW11cbiAgICB8IChBcHBsZVNjcmlwdE9wdGlvbnMgJiB7XG4gICAgICAgIHBhcnNlT3V0cHV0PzogUGFyc2VFeGVjT3V0cHV0SGFuZGxlcjxULCBzdHJpbmcsIEFwcGxlU2NyaXB0T3B0aW9ucz47XG4gICAgICB9KSxcbiAgb3B0aW9ucz86IEFwcGxlU2NyaXB0T3B0aW9ucyAmIHtcbiAgICBwYXJzZU91dHB1dD86IFBhcnNlRXhlY091dHB1dEhhbmRsZXI8VCwgc3RyaW5nLCBBcHBsZVNjcmlwdE9wdGlvbnM+O1xuICB9LFxuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgaWYgKHByb2Nlc3MucGxhdGZvcm0gIT09IFwiZGFyd2luXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBcHBsZVNjcmlwdCBpcyBvbmx5IHN1cHBvcnRlZCBvbiBtYWNPU1wiKTtcbiAgfVxuXG4gIGNvbnN0IHsgaHVtYW5SZWFkYWJsZU91dHB1dCwgbGFuZ3VhZ2UsIHRpbWVvdXQsIC4uLmV4ZWNPcHRpb25zIH0gPSBBcnJheS5pc0FycmF5KG9wdGlvbnNPckFyZ3MpXG4gICAgPyBvcHRpb25zIHx8IHt9XG4gICAgOiBvcHRpb25zT3JBcmdzIHx8IHt9O1xuXG4gIGNvbnN0IG91dHB1dEFyZ3VtZW50cyA9IGh1bWFuUmVhZGFibGVPdXRwdXQgIT09IGZhbHNlID8gW10gOiBbXCItc3NcIl07XG4gIGlmIChsYW5ndWFnZSA9PT0gXCJKYXZhU2NyaXB0XCIpIHtcbiAgICBvdXRwdXRBcmd1bWVudHMucHVzaChcIi1sXCIsIFwiSmF2YVNjcmlwdFwiKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zT3JBcmdzKSkge1xuICAgIG91dHB1dEFyZ3VtZW50cy5wdXNoKFwiLVwiLCAuLi5vcHRpb25zT3JBcmdzKTtcbiAgfVxuXG4gIGNvbnN0IHNwYXduZWQgPSBjaGlsZFByb2Nlc3Muc3Bhd24oXCJvc2FzY3JpcHRcIiwgb3V0cHV0QXJndW1lbnRzLCB7XG4gICAgLi4uZXhlY09wdGlvbnMsXG4gICAgZW52OiB7IFBBVEg6IFwiL3Vzci9sb2NhbC9iaW46L3Vzci9iaW46L2JpbjovdXNyL3NiaW46L3NiaW5cIiB9LFxuICB9KTtcbiAgY29uc3Qgc3Bhd25lZFByb21pc2UgPSBnZXRTcGF3bmVkUHJvbWlzZShzcGF3bmVkLCB7IHRpbWVvdXQ6IHRpbWVvdXQgPz8gMTAwMDAgfSk7XG5cbiAgc3Bhd25lZC5zdGRpbi5lbmQoc2NyaXB0KTtcblxuICBjb25zdCBbeyBlcnJvciwgZXhpdENvZGUsIHNpZ25hbCwgdGltZWRPdXQgfSwgc3Rkb3V0UmVzdWx0LCBzdGRlcnJSZXN1bHRdID0gYXdhaXQgZ2V0U3Bhd25lZFJlc3VsdDxzdHJpbmc+KFxuICAgIHNwYXduZWQsXG4gICAgeyBlbmNvZGluZzogXCJ1dGY4XCIgfSxcbiAgICBzcGF3bmVkUHJvbWlzZSxcbiAgKTtcbiAgY29uc3Qgc3Rkb3V0ID0gaGFuZGxlT3V0cHV0KHsgc3RyaXBGaW5hbE5ld2xpbmU6IHRydWUgfSwgc3Rkb3V0UmVzdWx0KTtcbiAgY29uc3Qgc3RkZXJyID0gaGFuZGxlT3V0cHV0KHsgc3RyaXBGaW5hbE5ld2xpbmU6IHRydWUgfSwgc3RkZXJyUmVzdWx0KTtcblxuICByZXR1cm4gZGVmYXVsdFBhcnNpbmcoe1xuICAgIHN0ZG91dCxcbiAgICBzdGRlcnIsXG4gICAgZXJyb3IsXG4gICAgZXhpdENvZGUsXG4gICAgc2lnbmFsLFxuICAgIHRpbWVkT3V0LFxuICAgIGNvbW1hbmQ6IFwib3Nhc2NyaXB0XCIsXG4gICAgb3B0aW9ucyxcbiAgICBwYXJlbnRFcnJvcjogbmV3IEVycm9yKCksXG4gIH0pO1xufVxuIiwgImltcG9ydCBjaGlsZFByb2Nlc3MgZnJvbSBcIm5vZGU6Y2hpbGRfcHJvY2Vzc1wiO1xuaW1wb3J0IHtcbiAgZGVmYXVsdFBhcnNpbmcsXG4gIGdldFNwYXduZWRQcm9taXNlLFxuICBnZXRTcGF3bmVkUmVzdWx0LFxuICBoYW5kbGVPdXRwdXQsXG4gIFBhcnNlRXhlY091dHB1dEhhbmRsZXIsXG59IGZyb20gXCIuL2V4ZWMtdXRpbHNcIjtcblxudHlwZSBQb3dlclNoZWxsU2NyaXB0T3B0aW9ucyA9IHtcbiAgLyoqXG4gICAqIEEgU2lnbmFsIG9iamVjdCB0aGF0IGFsbG93cyB5b3UgdG8gYWJvcnQgdGhlIHJlcXVlc3QgaWYgcmVxdWlyZWQgdmlhIGFuIEFib3J0Q29udHJvbGxlciBvYmplY3QuXG4gICAqL1xuICBzaWduYWw/OiBBYm9ydFNpZ25hbDtcbiAgLyoqIElmIHRpbWVvdXQgaXMgZ3JlYXRlciB0aGFuIGAwYCwgdGhlIHBhcmVudCB3aWxsIHNlbmQgdGhlIHNpZ25hbCBgU0lHVEVSTWAgaWYgdGhlIGNoaWxkIHJ1bnMgbG9uZ2VyIHRoYW4gdGltZW91dCBtaWxsaXNlY29uZHMuXG4gICAqXG4gICAqIEBkZWZhdWx0IDEwMDAwXG4gICAqL1xuICB0aW1lb3V0PzogbnVtYmVyO1xufTtcblxuLyoqXG4gKiBFeGVjdXRlcyBhIFBvd2VyU2hlbGwgc2NyaXB0LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBzaG93SFVEIH0gZnJvbSBcIkByYXljYXN0L2FwaVwiO1xuICogaW1wb3J0IHsgcnVuUG93ZXJTaGVsbFNjcmlwdCwgc2hvd0ZhaWx1cmVUb2FzdCB9IGZyb20gXCJAcmF5Y2FzdC91dGlsc1wiO1xuICpcbiAqIGV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAqICAgdHJ5IHtcbiAqICAgICBjb25zdCByZXMgPSBhd2FpdCBydW5Qb3dlclNoZWxsU2NyaXB0KFxuICogICAgICAgYFxuICogICAgICAgV3JpdGUtSG9zdCBcImhlbGxvLCB3b3JsZC5cIlxuICogICAgICAgYCxcbiAqICAgICApO1xuICogICAgIGF3YWl0IHNob3dIVUQocmVzKTtcbiAqICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAqICAgICBzaG93RmFpbHVyZVRvYXN0KGVycm9yLCB7IHRpdGxlOiBcIkNvdWxkIG5vdCBydW4gUG93ZXJTaGVsbFwiIH0pO1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1blBvd2VyU2hlbGxTY3JpcHQ8VCA9IHN0cmluZz4oXG4gIHNjcmlwdDogc3RyaW5nLFxuICBvcHRpb25zPzogUG93ZXJTaGVsbFNjcmlwdE9wdGlvbnMgJiB7XG4gICAgcGFyc2VPdXRwdXQ/OiBQYXJzZUV4ZWNPdXRwdXRIYW5kbGVyPFQsIHN0cmluZywgUG93ZXJTaGVsbFNjcmlwdE9wdGlvbnM+O1xuICB9LFxuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgaWYgKHByb2Nlc3MucGxhdGZvcm0gIT09IFwid2luMzJcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlBvd2VyU2hlbGwgaXMgb25seSBzdXBwb3J0ZWQgb24gV2luZG93c1wiKTtcbiAgfVxuXG4gIGNvbnN0IHsgdGltZW91dCwgLi4uZXhlY09wdGlvbnMgfSA9IG9wdGlvbnMgfHwge307XG5cbiAgY29uc3Qgb3V0cHV0QXJndW1lbnRzID0gW1wiLU5vTG9nb1wiLCBcIi1Ob1Byb2ZpbGVcIiwgXCItTm9uSW50ZXJhY3RpdmVcIiwgXCItQ29tbWFuZFwiLCBcIi1cIl07XG5cbiAgY29uc3Qgc3Bhd25lZCA9IGNoaWxkUHJvY2Vzcy5zcGF3bihcInBvd2Vyc2hlbGwuZXhlXCIsIG91dHB1dEFyZ3VtZW50cywge1xuICAgIC4uLmV4ZWNPcHRpb25zLFxuICB9KTtcbiAgY29uc3Qgc3Bhd25lZFByb21pc2UgPSBnZXRTcGF3bmVkUHJvbWlzZShzcGF3bmVkLCB7IHRpbWVvdXQ6IHRpbWVvdXQgPz8gMTAwMDAgfSk7XG5cbiAgc3Bhd25lZC5zdGRpbi5lbmQoc2NyaXB0KTtcblxuICBjb25zdCBbeyBlcnJvciwgZXhpdENvZGUsIHNpZ25hbCwgdGltZWRPdXQgfSwgc3Rkb3V0UmVzdWx0LCBzdGRlcnJSZXN1bHRdID0gYXdhaXQgZ2V0U3Bhd25lZFJlc3VsdDxzdHJpbmc+KFxuICAgIHNwYXduZWQsXG4gICAgeyBlbmNvZGluZzogXCJ1dGY4XCIgfSxcbiAgICBzcGF3bmVkUHJvbWlzZSxcbiAgKTtcbiAgY29uc3Qgc3Rkb3V0ID0gaGFuZGxlT3V0cHV0KHsgc3RyaXBGaW5hbE5ld2xpbmU6IHRydWUgfSwgc3Rkb3V0UmVzdWx0KTtcbiAgY29uc3Qgc3RkZXJyID0gaGFuZGxlT3V0cHV0KHsgc3RyaXBGaW5hbE5ld2xpbmU6IHRydWUgfSwgc3RkZXJyUmVzdWx0KTtcblxuICByZXR1cm4gZGVmYXVsdFBhcnNpbmcoe1xuICAgIHN0ZG91dCxcbiAgICBzdGRlcnIsXG4gICAgZXJyb3IsXG4gICAgZXhpdENvZGUsXG4gICAgc2lnbmFsLFxuICAgIHRpbWVkT3V0LFxuICAgIGNvbW1hbmQ6IFwicG93ZXJzaGVsbC5leGVcIixcbiAgICBvcHRpb25zLFxuICAgIHBhcmVudEVycm9yOiBuZXcgRXJyb3IoKSxcbiAgfSk7XG59XG4iLCAiaW1wb3J0IHsgQ2FjaGUgfSBmcm9tIFwiQHJheWNhc3QvYXBpXCI7XG5pbXBvcnQgeyBoYXNoLCByZXBsYWNlciwgcmV2aXZlciB9IGZyb20gXCIuL2hlbHBlcnNcIjtcblxuLyoqXG4gKiBXcmFwcyBhIGZ1bmN0aW9uIHdpdGggY2FjaGluZyBmdW5jdGlvbmFsaXR5IHVzaW5nIFJheWNhc3QncyBDYWNoZSBBUEkuXG4gKiBBbGxvd3MgZm9yIGNhY2hpbmcgb2YgZXhwZW5zaXZlIGZ1bmN0aW9ucyBsaWtlIHBhZ2luYXRlZCBBUEkgY2FsbHMgdGhhdCByYXJlbHkgY2hhbmdlLlxuICpcbiAqIEBwYXJhbSBmbiAtIFRoZSBhc3luYyBmdW5jdGlvbiB0byBjYWNoZSByZXN1bHRzIGZyb21cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgY29uZmlndXJhdGlvbiBmb3IgdGhlIGNhY2hlIGJlaGF2aW9yXG4gKiBAcGFyYW0gb3B0aW9ucy52YWxpZGF0ZSAtIE9wdGlvbmFsIHZhbGlkYXRpb24gZnVuY3Rpb24gZm9yIGNhY2hlZCBkYXRhXG4gKiBAcGFyYW0gb3B0aW9ucy5tYXhBZ2UgLSBNYXhpbXVtIGFnZSBvZiBjYWNoZWQgZGF0YSBpbiBtaWxsaXNlY29uZHNcbiAqIEByZXR1cm5zIEFuIGFzeW5jIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBmdW5jdGlvbiwgZWl0aGVyIGZyb20gY2FjaGUgb3IgZnJlc2ggZXhlY3V0aW9uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBjb25zdCBjYWNoZWRGdW5jdGlvbiA9IHdpdGhDYWNoZShmZXRjaEV4cGVuc2l2ZURhdGEsIHtcbiAqICAgbWF4QWdlOiA1ICogNjAgKiAxMDAwIC8vIENhY2hlIGZvciA1IG1pbnV0ZXNcbiAqIH0pO1xuICpcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNhY2hlZEZ1bmN0aW9uKHF1ZXJ5KTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aENhY2hlPEZuIGV4dGVuZHMgKC4uLmFyZ3M6IGFueSkgPT4gUHJvbWlzZTxhbnk+PihcbiAgZm46IEZuLFxuICBvcHRpb25zPzoge1xuICAgIC8qKiBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIHRoZSBjYWNoZWQgZGF0YSBhbmQgcmV0dXJucyBhIGJvb2xlYW4gZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIGRhdGEgaXMgc3RpbGwgdmFsaWQgb3Igbm90LiAqL1xuICAgIHZhbGlkYXRlPzogKGRhdGE6IEF3YWl0ZWQ8UmV0dXJuVHlwZTxGbj4+KSA9PiBib29sZWFuO1xuICAgIC8qKiBNYXhpbXVtIGFnZSBvZiBjYWNoZWQgZGF0YSBpbiBtaWxsaXNlY29uZHMgYWZ0ZXIgd2hpY2ggdGhlIGRhdGEgd2lsbCBiZSBjb25zaWRlcmVkIGludmFsaWQgKi9cbiAgICBtYXhBZ2U/OiBudW1iZXI7XG4gIH0sXG4pOiBGbiAmIHsgY2xlYXJDYWNoZTogKCkgPT4gdm9pZCB9IHtcbiAgY29uc3QgY2FjaGUgPSBuZXcgQ2FjaGUoeyBuYW1lc3BhY2U6IGhhc2goZm4pIH0pO1xuXG4gIGNvbnN0IHdyYXBwZWRGbiA9IGFzeW5jICguLi5hcmdzOiBQYXJhbWV0ZXJzPEZuPikgPT4ge1xuICAgIGNvbnN0IGtleSA9XG4gICAgICBoYXNoKGFyZ3MgfHwgW10pICsgKG9wdGlvbnMgYXMgdW5rbm93biBhcyB7IGludGVybmFsX2NhY2hlS2V5U3VmZml4Pzogc3RyaW5nIH0pPy5pbnRlcm5hbF9jYWNoZUtleVN1ZmZpeDtcbiAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoa2V5KTtcbiAgICBpZiAoY2FjaGVkKSB7XG4gICAgICBjb25zdCB7IGRhdGEsIHRpbWVzdGFtcCB9ID0gSlNPTi5wYXJzZShjYWNoZWQsIHJldml2ZXIpO1xuICAgICAgY29uc3QgaXNFeHBpcmVkID0gb3B0aW9ucz8ubWF4QWdlICYmIERhdGUubm93KCkgLSB0aW1lc3RhbXAgPiBvcHRpb25zLm1heEFnZTtcbiAgICAgIGlmICghaXNFeHBpcmVkICYmICghb3B0aW9ucz8udmFsaWRhdGUgfHwgb3B0aW9ucy52YWxpZGF0ZShkYXRhKSkpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmbiguLi5hcmdzKTtcbiAgICBjYWNoZS5zZXQoXG4gICAgICBrZXksXG4gICAgICBKU09OLnN0cmluZ2lmeShcbiAgICAgICAge1xuICAgICAgICAgIGRhdGE6IHJlc3VsdCxcbiAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgIH0sXG4gICAgICAgIHJlcGxhY2VyLFxuICAgICAgKSxcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgd3JhcHBlZEZuLmNsZWFyQ2FjaGUgPSAoKSA9PiB7XG4gICAgY2FjaGUuY2xlYXIoKTtcbiAgfTtcblxuICAvLyBAdHMtZXhwZWN0LWVycm9yIHRvbyBjb21wbGV4IGZvciBUU1xuICByZXR1cm4gd3JhcHBlZEZuO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGNhdGNoRXJyb3IoZXJyb3I6IEVycm9yKSB7XG4gIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCctMTc0MycpIHx8IGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJy0xNzE5JykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnVG8gYWNjZXNzIHRoZSBEb2NrIGJhZGdlcywgUmF5Y2FzdCBtdXN0IGhhdmUgQWNjZXNzaWJpbGl0eSBhbmQgQXV0b21hdGlvbiBwZXJtaXNzaW9ucy5cXG5cXG4nXG4gICAgICArICdTeXN0ZW0gU2V0dGluZ3MgPiBQcml2YWN5ICYgU2VjdXJpdHknLFxuICAgIClcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IubWVzc2FnZSlcbn1cbiIsICJpbXBvcnQgeyBwcm9taXNlcyBhcyBmcyB9IGZyb20gJ25vZGU6ZnMnXG5pbXBvcnQgcGF0aCBmcm9tICdub2RlOnBhdGgnXG5pbXBvcnQgeyBlbnZpcm9ubWVudCB9IGZyb20gJ0ByYXljYXN0L2FwaSdcbmltcG9ydCB7IHJ1bkFwcGxlU2NyaXB0IH0gZnJvbSAnQHJheWNhc3QvdXRpbHMnXG5cbmNvbnN0IGFzc2V0cyA9IHBhdGguam9pbihlbnZpcm9ubWVudC5hc3NldHNQYXRoLCAnc2NyaXB0cycpXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNjcmlwdHMoKSB7fVxuXG5zY3JpcHRzLmlzT3BlbiA9IGFzeW5jIChidW5kbGVJZDogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHNjcmlwdCA9IGF3YWl0IGZzLnJlYWRGaWxlKHBhdGguam9pbihhc3NldHMsICdhcHAtc3RhdHVzLmFwcGxlc2NyaXB0JykpXG4gIHJldHVybiAoYXdhaXQgcnVuQXBwbGVTY3JpcHQoc2NyaXB0LnRvU3RyaW5nKCksIFtidW5kbGVJZF0pKSA9PT0gJ3RydWUnXG59XG5cbnNjcmlwdHMuZ2V0Q291bnQgPSBhc3luYyAoYXBwTmFtZTogc3RyaW5nKTogUHJvbWlzZTx0cnVlIHwgbnVtYmVyPiA9PiB7XG4gIGNvbnN0IHNjcmlwdCA9IGF3YWl0IGZzLnJlYWRGaWxlKHBhdGguam9pbihhc3NldHMsICdiYWRnZS1jb3VudC5hcHBsZXNjcmlwdCcpKVxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBydW5BcHBsZVNjcmlwdChzY3JpcHQudG9TdHJpbmcoKSwgW2FwcE5hbWVdKVxuICBpZiAocmVzdWx0ID09PSAnXHUyMDIyJylcbiAgICByZXR1cm4gdHJ1ZVxuXG4gIGNvbnN0IGNvdW50ID0gTnVtYmVyLnBhcnNlSW50KHJlc3VsdCwgMTApXG4gIHJldHVybiBOdW1iZXIuaXNOYU4oY291bnQpID8gMCA6IGNvdW50XG59XG4iLCAiaW1wb3J0IHsgZ2V0QXBwbGljYXRpb25zLCBnZXRQcmVmZXJlbmNlVmFsdWVzLCBMb2NhbFN0b3JhZ2UgfSBmcm9tICdAcmF5Y2FzdC9hcGknXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0b3JhZ2UoKSB7fVxuXG5zdG9yYWdlLmdldFByZWZlcmVuY2VzID0gYXN5bmMgKCk6IFByb21pc2U8UHJlZmVyZW5jZXM+ID0+IGdldFByZWZlcmVuY2VWYWx1ZXMoKVxuXG5zdG9yYWdlLmdldEJhZGdlcyA9IGFzeW5jICgpID0+IHtcbiAgY29uc3QgYXBwcyA9IGF3YWl0IGdldEFwcGxpY2F0aW9ucygpXG4gIGNvbnN0IGJhZGdlcyA9IEpTT04ucGFyc2UoKGF3YWl0IExvY2FsU3RvcmFnZS5nZXRJdGVtKCdiYWRnZXMnKSkgfHwgJ3t9JykgYXMgQmFkZ2VyTGlzdFxuXG4gIE9iamVjdC5lbnRyaWVzKGJhZGdlcykuZm9yRWFjaCgoW2J1bmRsZUlkLCBiYWRnZV0pID0+IHtcbiAgICBjb25zdCBhcHAgPSBhcHBzLmZpbHRlcihhcHAgPT4gYXBwLmJ1bmRsZUlkID09PSBidW5kbGVJZCkucG9wKClcbiAgICBpZiAoIWFwcCkge1xuICAgICAgLy8gUmF5Y2FzdCBpcyBub3QgYXdhcmUgb2YgdGhlIGFwcGxpY2F0aW9uLlxuICAgICAgZGVsZXRlIGJhZGdlc1tidW5kbGVJZF1cbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBiYWRnZS5hcHAgPSBhcHBcbiAgICBiYWRnZS5zdGF0dXMgPSB7IGNvdW50OiAwLCBpbmRldGVybWluYXRlOiBmYWxzZSB9XG4gIH0pXG5cbiAgcmV0dXJuIGJhZGdlc1xufVxuXG5zdG9yYWdlLnNvcnRCYWRnZXMgPSAoYmFkZ2VzOiBCYWRnZXJMaXN0KSA9PiBPYmplY3QudmFsdWVzKGJhZGdlcylcbiAgLnNvcnQoKGEsIGIpID0+IGEuYXBwLm5hbWUubG9jYWxlQ29tcGFyZShcbiAgICBiLmFwcC5uYW1lLFxuICAgIEludGwuRGF0ZVRpbWVGb3JtYXQoKS5yZXNvbHZlZE9wdGlvbnMoKS5sb2NhbGUsXG4gICAgeyBzZW5zaXRpdml0eTogJ2Jhc2UnIH0sXG4gICkpXG5cbnN0b3JhZ2Uuc2F2ZUJhZGdlID0gYXN5bmMgKGJhZGdlOiBCYWRnZXIpID0+IHtcbiAgY29uc3QgYmFkZ2VzID0gYXdhaXQgc3RvcmFnZS5nZXRCYWRnZXMoKVxuICBiYWRnZXNbYmFkZ2UuYnVuZGxlSWRdID0gYmFkZ2VcbiAgYXdhaXQgTG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2JhZGdlcycsIEpTT04uc3RyaW5naWZ5KGJhZGdlcykpXG59XG5cbnN0b3JhZ2UuZGVsZXRlQmFkZ2UgPSBhc3luYyAoYmFkZ2U6IEJhZGdlcikgPT4ge1xuICBjb25zdCBiYWRnZXMgPSBhd2FpdCBzdG9yYWdlLmdldEJhZGdlcygpXG4gIGlmICghYmFkZ2VzW2JhZGdlLmJ1bmRsZUlkXSlcbiAgICByZXR1cm5cblxuICBkZWxldGUgYmFkZ2VzW2JhZGdlLmJ1bmRsZUlkXVxuICBhd2FpdCBMb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYmFkZ2VzJywgSlNPTi5zdHJpbmdpZnkoYmFkZ2VzKSlcbn1cblxuc3RvcmFnZS5kZWxldGVBbGxCYWRnZXMgPSBhc3luYyAoKSA9PiBMb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnYmFkZ2VzJylcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQSxJQUFBQSxjQUF3RjtBOzs7Ozs7Ozs7O0FJTWpGLFNBQVMsMENBQWEsT0FBUTtBQUNuQyxRQUFNLE9BQU0sR0FBQSxhQUFBQyxRQUFPLEtBQUE7QUFDbkIsTUFBSSxVQUFVO0FBQ2QsU0FBTztBQUNUO0FHUE8sU0FBUywwQ0FBb0IsS0FBYSxRQUFlO0FBQzlELFFBQU0sUUFBUSxLQUFLLEdBQUE7QUFDbkIsTUFBSSxp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QU8sQ0FBQ0MsUUFBTyxVQUFVQSxTQUFRLE1BQU0sT0FBTyxPQUFPLENBQUM7QUFFekQsU0FDRTtBQUFBLElBQUM7QUFBQTtBQUFBLE1BQ0M7QUFBQSxNQUNBLE9BQU8sT0FBTyxZQUFZLGFBQWEsUUFBUSxHQUFHLEtBQUssS0FBSztBQUFBLE1BQzVELE1BQU07QUFBQSxRQUNKLFFBQVEsQ0FBQyxRQUFRLGFBQWE7QUFBQSxRQUM5QixXQUFXLENBQUMsUUFBUSxPQUFPLFlBQVksZUFBZSxPQUFPLFlBQVk7QUFBQSxNQUMzRTtBQUFBLE1BRUE7QUFBQSxxREFBQyx5QkFBYSxTQUFiLEVBQXFCLE9BQU0sZ0JBQ3pCLHVCQUFhLElBQUksQ0FBQyxPQUFPLFFBQ3hCO0FBQUEsVUFBQyx5QkFBYTtBQUFBLFVBQWI7QUFBQSxZQUVDLE9BQU8sTUFBTSxJQUFJO0FBQUEsWUFDakIsVUFBVSxNQUFNLE9BQU8sUUFBUSxJQUFJLE1BQU0sT0FBTyxLQUFLLE1BQU07QUFBQSxZQUMzRCxVQUFVLEVBQUUsV0FBVyxDQUFDLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUE2QjtBQUFBLFlBQ3ZFLE1BQU0sRUFBRSxVQUFVLE1BQU0sSUFBSSxLQUFLO0FBQUEsWUFDakMsVUFBVSxVQUFNLGtCQUFLLE1BQU0sSUFBSSxJQUFJO0FBQUE7QUFBQSxVQUw5QixNQUFNO0FBQUEsUUFNYixDQUNELEdBQ0g7QUFBQSxRQUVBLDhDQUFDLHlCQUFhLFNBQWIsRUFDQztBQUFBO0FBQUEsWUFBQyx5QkFBYTtBQUFBLFlBQWI7QUFBQSxjQUNDLE9BQU07QUFBQSxjQUNOLFVBQVUsRUFBRSxXQUFXLENBQUMsS0FBSyxHQUFHLEtBQUssSUFBSTtBQUFBLGNBQ3pDLFVBQVUsVUFBTSwyQkFBYyxFQUFFLE1BQU0sVUFBVSxNQUFNLHVCQUFXLGNBQWMsQ0FBQztBQUFBO0FBQUEsVUFDbEY7QUFBQSxVQUNBO0FBQUEsWUFBQyx5QkFBYTtBQUFBLFlBQWI7QUFBQSxjQUNDLE9BQU07QUFBQSxjQUNOLFVBQVUsRUFBRSxXQUFXLENBQUMsS0FBSyxHQUFHLEtBQUssSUFBSTtBQUFBLGNBQ3pDLFVBQVUsVUFBTSxzQ0FBeUI7QUFBQTtBQUFBLFVBQzNDO0FBQUEsV0FDRjtBQUFBO0FBQUE7QUFBQSxFQUNGO0FBRUo7IiwKICAibmFtZXMiOiBbImltcG9ydF9hcGkiLCAiJGhnVVcxJHVzZVJlZiIsICIkaGdVVzEkQ2FjaGUiLCAiJGhnVVcxJHVzZVN5bmNFeHRlcm5hbFN0b3JlIiwgIiRoZ1VXMSR1c2VNZW1vIiwgIiRoZ1VXMSR1c2VDYWxsYmFjayIsICIkaGdVVzEkbm9kZXN0cmVhbSIsICIkaGdVVzEkY29uc3RhbnRzIiwgIiRoZ1VXMSRwcm9taXNpZnkiLCAiJGhnVVcxJG5vZGVjaGlsZF9wcm9jZXNzIiwgImltcG9ydF9yZWFjdCIsICJpbXBvcnRfYXBpIiwgInBhdGgiLCAiZnMiLCAiaW1wb3J0X2FwaSIsICJhcHAiLCAiaW1wb3J0X2pzeF9ydW50aW1lIiwgInRvdGFsIl0KfQo=
